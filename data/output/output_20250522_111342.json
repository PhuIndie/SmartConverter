{
  "metadata": {
    "generated_at": "20250522_111342",
    "num_documents": 3,
    "config": {
      "input": {
        "pdf_dir": "data/raw/",
        "pdf_list": "config/pdf_sources.yaml"
      },
      "output": {
        "json_dir": "data/output/",
        "processed_dir": "data/processed/"
      },
      "processing": {
        "chunk_size": 1000,
        "overlap": 200
      },
      "ai": {
        "model_name": "models/topic_model.pkl",
        "enable_learning": false
      },
      "text_extraction": {
        "enable_qa": true,
        "use_text_flow": false
      },
      "table_extraction": {
        "vertical_strategy": "lines",
        "horizontal_strategy": "text"
      }
    }
  },
  "documents": [
    {
      "name": "Java Interview Guide",
      "path": "2023_Ch6_7_8_10_16_Interview_Ajay Rathod - Guide To Clear Java Developer Interview_Contains 250+ Java, Spring-Boot, Microservice Interview Questions.pdf",
      "category": "interview",
      "type": "technical",
      "metadata": {
        "title": "Guide To Clear Java Developer Interview: Contains 250+ Java, Spring-Boot, Microservice Interview Questions",
        "author": "Ajay Rathod",
        "page_count": 401,
        "file_size_kb": 1527.1474609375
      },
      "pages": [
        {
          "page_number": 1,
          "text": "",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 2,
          "text": "CONTENTS\nOVERVIEW\nHOW TO PREPARE FOR A JAVA DEVELOPER\nINTERVIEW\nHOW I MASTERED JAVA IN DEPTH FOR TECHNICAL\nINTERVIEWS AND TRIPLED MY SALARY\nCHAPTER 1: HOW TO INTRODUCE YOURSELF AND\nANSWER INITIAL QUESTIONS\nTell me about yourself, tell me about your skills.\nPlease tell me about your project and its architecture. Please explain\nit and draw the architecture, framework, and technology used.\nWhat are the best practices to follow while developing an\napplication?\nWhat challenging tasks have you accomplished so far? Could you\nprovide examples?\nPlease explain the code and the flow of the project, both within it\nand outside of it.\nCHAPTER 2: OBJECT ORIENTED PROGRAMMING\nWhat are the four principles of OOP?\nWhat is the difference between an abstract class and an interface?\nWhat is the use of constructor in an abstract class?\nWhat is abstraction, and what are its advantages?\nWhat is the difference between abstraction and encapsulation?\nWhat is the difference between Abstraction and polymorphism?",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 3,
          "text": "What is the difference between Inheritance and Composition?\nWhat are Composition and Aggregation with examples?\nWhat is aggregation, composition, and inheritance?\nCan you explain multilevel inheritance in Java?\nWhen do you use encapsulation and abstraction in your project?\nHow do you achieve encapsulation?\nWhat is polymorphism, and how can it be achieved?\nWhat are Method Overloading and Overriding?\nWhat is Method overriding with an example?\nWhat is Method overriding in terms of exception handling, with an\nexample?\nCan we have overloaded methods with different return types?\nCan we override the static method? Why Can't we do that?\nWhat are SOLID principles, with example?\nWhat is Cohesion and Coupling?\nWhat does Static keyword signify?\nWhat is the difference between static variable and an instance\nvariables?\nWhat is Covariant type?\nCan Java interface have no method in it?\nWhat are the exception rules for overriding?\nWhat are the different types of access modifiers?\nWhat is the difference between private and protected access\nmodifiers?\nWhat is the use of protected members?\nCHAPTER 3: CORE JAVA\nWhat is JIT in java?",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 4,
          "text": "What is the difference between abstract and interface keyword in\njava?\nWhat is the difference between Static method and Default methods\nin Java 8?\nHow to create an Object in java? Explain Different ways to do it.\nHow to create an immutable class?\nHow to restrict object creation in java?\nHow to create a custom class loader in java?\nCan we write the main method without static?\nExplain the diamond problem in java and how to resolve it.\nHow to write a wrapper class in java?\nHow does HashMap work internally?\nExplain the internal implementation of HashMap.\nWhich Classes are eligible to be used inside the resource block?\nHow does HashSet works internally?\nWhat is the difference between HashMap and HashTable?\nWhat is the difference between HashMap and Linked-HashMap?\nWhat is the difference between HashMap and ConcurrentHashmap?\nCan we insert the null key in the HashMap and HashTable?\nHow to create an immutable map in Java?\nWhat are the in-built immutable classes in java?\nWhat is index in java? Advantages and disadvantagesin Database?\nWhat is the difference between CompletableFuture and a Callable\nand Runnable Future?\nIn Java, there are several ways to perform asynchronous operations:\nHow to parse XML file with JSON in java?\nHow to parse JSON to a HashMap?\nWhat are fail-safe and fail-fast iterators?",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 5,
          "text": "What is the object class in Java? what are the methods in it?\nWhy and how to use clone method in Java?\nWhat parsing libraries you have used so far?\nWhat is the difference between comparable and comparator?\nExplain the classpath exception?\nWhat is the hierarchy of exceptions?\nExplain Throw, Throws, and Throwable keywords in java.\nWhat is a String in java?\nWhy String is immutable?\nWhere is a new string is stored?\nWhere do strings get stored and where does the reference get\nstored?\nCan we create a customized immutable String class, how to achieve\nit?\nWhat is the difference between String, StringBuffer and\nStringBuilder?\nIs StringBuffer synchronized? Where is synchronized used in\nStringBuffer?\nWhy are Java substrings bad?\nWhat is a Runtime exception and how they are they implemented?\nDraw the collection hierarchy?\nWhat is the difference between these syntaxes?\nWhat collection will we use for manipulation (ArrayList or\nLinkedList)?\nWhat is the use of an iterator in Java?\nWhat is the default capacity of HashMap?\nHow does HashMap behaves when it reaches its maximum capacity?\nHow to create a custom object as key in HashMap?\nDoes HashMap store value in ordered way or not?",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 6,
          "text": "What is HashSet and TreeSet?\nHow to get values from HashSet?\nWhat is the difference between them, which one will compile and\nwhat is the best way to declare?\nDifference between ArrayList and LinkedList?\nDifference between Set and List collection?\nDifference between HashSet and HashMap?\nWhy does HashMa not maintain the order like Linked-HashMap?\nHow does LinkedHashMap is able to maintain the insertion order?\nDifference between LinkedHashMap and Priority queue?\nWrite a Hashcode implementation and what is return type of it?\nWhat is ConcurrentHashmap?\nWhat is the Internal implementation of ConcurrentHashmap?\nIs it possible to modify ConcurrentHashmap using iterator?\nWhat is the concurrent collection?\nCan we insert Null in ConcurrentHashmap?\nWhat is a Concurrent Modification exception, and how to prevent\nthat?\nWhat is serialization?\nUses of serialization? Why is this needed?\nWhen to use ArrayList and when to use LinkedList?\nWhat is Garbage Collection?\nWhat is System.gc in java?\nWhat kind of algorithm is used in the garbage collector?\nWhat are fast and fail-safe in collection framework?\nWhere are static methods or static variables stored in Java memory?\nHow to create custom exceptions in Java?\nWhat is the difference between Class and Instance variables?",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 7,
          "text": "What is the difference between Throw and Throws?\nWhat is the difference between try/catch block and throws?\nWhat is thedifference between HashMap and LinkedHashMap?\nWhat is the difference between == and equals?\nIf an exception is declared in throws and if an exception is\nencountered what will happen?\nHow to achieve inheritance without using an interface?\nCHAPTER 4: MULTITHREADING\nWhat is Multithreading?\nWhat is a ThreadPool In java?\nHow to create a Thread Pool and how to use it in the database\nconnection pool?\nWhat is the lifecycle of thread in java?\nHow to do Thread dump analysis in java?\nWhy is a Threadpool needed in multithreading?\nWhat is deadlock I multithreading?\nHow to check if there is deadlock and how to prevent it?\nWhat is the difference between deadlock and Livelock?\nWhat are the Symptoms of deadlock?\nWhat is Static synchronization in java?\nWhich exception can be thrown from the threads run method?\nWhat is thread-local?\nWhat is thread-local, weak references, volatile, finalize, finally\nandserialization?\nCHAPTER 5: JAVA-8\nWhat are the features of Java 8 and Java 11?\nWhat are lambda expressions and their use in java 8?",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 8,
          "text": "What are the Java 8 Interface changes?\nWhat is a Functional interface in Java-8?\nWhat are the types of Functional interfaces?\nWhat is Method Reference in Java 8?\nWhat is Optional in java?\nWhat are the Intermediate and terminal operations in java 8?\nWhat is parallel processing in Java-8, and what are its uses?\nWhat is the difference between Flat and flat-map methods in Java-8?\nWhat is default method its use?\nWhat is default and static methods in Java-8?\nWhat are the memory changes that happened in java8?\nWhat is the new Java 8 changes in HashMap?\nWhy are the variable inside lambda function final in java?\nCHAPTER 6: SPRING-FRAMEWORK\nWhat is dependency injection?\nWhat are the types of dependency injection and what benefit we are\ngetting using that?\nWhich type of dependency injection do you prefer?\nHow does inversion of control works inside the Spring Container?\nWhat is the difference Between BeanFactory and\nApplicationContext?\nWhat is difference between application context and bean context?\nWhat is the Spring bean lifecycle?\nWhat are bean scopes? What are prototype and request bean\nscopes?\nWhat is the stateless bean in spring? name it and explain it.\nHow is the bean injected in spring?\nHow to handle cyclic dependency between beans?",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 9,
          "text": "What method would you call a before starting/loading a Spring boot\napplication?\nHow to handle exceptions in the spring framework?\nHow does filter work in spring?\nWhat is the Spring-MVC flow?\nCan singleton bean scope handle multiple parallel requests?\nTell me the Design pattern used inside the spring framework.\nIs singleton bean scope thread-safe?\nHow do factory design patterns work in terms of the spring\nframework?\nHow the proxy design pattern is used in spring?\nWhat if we call singleton bean from prototype or prototype bean\nfrom singleton How many objects returned?\nWhat is the difference between Spring boot and spring?\nHow can you create a prototype bean?\nWhat is Method overloading and method overriding? Where it has\nbeen used in the spring framework?\nCHAPTER 7: SPRING-BOOT\nTell me About Spring-Boot’s Entry point and how\n@SpringbootApplication annotation works?\nExplain below Spring-Boot annotations?\nWhat is the Difference between @Component ,@Service\n,@Repository and @Controller annotations?\nWhat is the use of component scan?\nHow does the Spring boot auto-detect feature works?\nWhat is the difference between @Controller and @RestController\nannotation?\nWhat does @ResponseBody Annotations signify?\nHow to exclude any configuration?",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 10,
          "text": "How to make the post method idempotent inside spring boot?\nWhat is spring-boot profile?\nHow to set the properties across different environments like Dev, QA\nand PROD?\nDescribe the AOP concept and which annotations are used. How do\nyou define the point cuts?\nWhat is Spring-transaction management?\nHow to use transaction management in spring boot?\nHow to handle a transaction and the isolation levels of the\ntransaction?\nHow to handle security in spring-boot?\nWhat is a JWT token and how does spring boot fetch that\ninformation?\nHow does the JWT token work internally?\nHow does Transaction work in Spring boot Microservice, how to\nachieve that?\nHow does Oauth2.0 works?\nHow to ensure that token has not been tampered with?\nHow to use @ControlAdvice for the exception handler?\nHow to handle exceptions in Spring boot applications? What are the\nbest practices for doing so?\nHow to use a custom exception handler in Spring Boot?\nWrite an endpoint in spring boot for getting and saving employees\nwith syntax.\nCHAPTER 8: MICROSERVICE\nWhat is Microservice?\nWhat is the advantage of Microservice over monolithic architecture?\nWhat is the disadvantage of Microservice architecture",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 11,
          "text": "Under what circumstances is the Microservice architecture are not\npreferable to you?\nWhat are the design principles of Microservice?\nDo you know the 12-factor methodology to build a Microservice?\nWhy are Microservice stateless?\nWhat is the advantage of Microservice using Spring Boot Application\n+ Spring Cloud?\nHow to share a database with multiple microservices?\nDo you know Distributed tracing? What is its us?\nHow distributed tracing is done in Microservice?\nHow to connect internal and external services in microservices.\nWhich Microservice design pattern have you used so far and why?\nWhich design patterns are used for database design in Microservice?\nWhat is the SAGA Microservice pattern?\nExplain the CQRS concept?\nWhich Microservice pattern will you use for read-heavy and write-\nheavy applications?\nExplain the Choreography pattern in Microservice?\nWhat are the types of fault tolerance mechanisms in Spring\nMicroservice?\nWhat is circuit breaker pattern? What are examples of it?\nExplain the annotations used to implement circuit breaker in spring\nboot?\nWhich library have you used to implement circuit breaker in spring\nboot?\nHow to call methods Asynchronously, in the spring framework how\ncan we do that?\nHow to call another microservice asynchronously?\nHow to communicate between two microservices?",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 12,
          "text": "How to restrict the Microservice from calling the other Microservice?\nHow to save your username password in the spring boot-based\nMicroservice application?\nCHAPTER 9: MEMORY MANAGEMENT IN JAVA\nWhat is Memory management in Java?\nWhat is Meta-Space in java ? What benefits does it offer?\nWhat is memory leak in java? how to rectify that in java?\nHow to use a profiler to find the memory leak?\nWhat is out of memory error?\nCHAPTER 10: REST\nWhat are the HTTP methods in REST?\nWhat are the idempotent methods in REST?\nWhat are the standards to follow to build a rest service?\nWhat is the difference between POST and PUT methods?\nWhat is sent in headers? Can we intercept the header? If yes, how?\nHow to secure REST API?\nHow to pass a parameter in request, is it via URL or as a JSON\nobject?\nCHAPTER 11: DESIGN PATTERN & SYSTEM DESIGN\nDesign Rest API for tiny URL application, how many endpoints it\nrequires?\nWhat is a singleton design pattern?\nHow to break the singleton design pattern?\nWhat is the solution to fix the above problem?\nWhat is a Builder Design pattern?\nWhich design pattern is used by spring AOP? Explain with logic?\nWhat is Adapter design pattern & Proxy design pattern?",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 13,
          "text": "What is Decorator Pattern?\nWhat is a facade design pattern?\nCHAPTER 12: SQL/DATABASE/HIBERNATE-JPA\nWrite a SQL query to find 5th max salary from employee table?\nWrite a SQL query to remove duplicate employee records?\nWrite a query to find employee numbers in each department.\nWrite SQL Query to find students who are enrolled in courses whose\nprice is above 50000?\nCreate Database design for Employee and address?\nWhat does the JDBC forName() method do for you when you connect\nto any DB?\nDo you know triggers and how do they work?\nExplain database Joins?\nWhat is complex join in Hibernate?\nHow to store and navigate hierarchies?\nWhat is the data type of the index in Database?\nWrite a query to find duplicate entries in a table against a column?\nWhat is the differences between Indexing and Partitioning?\nExplain the Hibernate-JPA structure.\nWhich annotation/configuration is required to enable the native SQL\nin JPA?\nExplain Entity in JPA and all annotations used to create Entity class.\nHow can we define a composite key in the Entity class?\nWhat are the JPA Annotation used for a composite attribute?\nWhich annotation is used to handle the joins between multiple tables\nat the Entity class level?\nHow to handle relationships in spring data JPA?\nHow to handle the Parent and child relationship in JPA?",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 14,
          "text": "CHAPTER 13: CODING\nWrite a Program to find the duplicates in an array using stream API.\nHow to sort the employee list in ascending and descending order\nusing java 8 streams API?\nFind the highest salary of an employee from the HR department\nusing Java stream API.\nFind an average of even numbers using Java 8 stream API?\nHow to use sorting in Java-8?\nWrite a program using stream API - Find the employee count in each\ndepartment in the employee list?\nFind employees based on location or city and sort in alphabetical\nmanner using stream API?\nFind the occurrence of names of employees from the\nList<Employee>, and find the frequency of each name.\nWrite a Program to print only numbers from an alphanumeric char\narray using stream API in java-8.\nWrite a program to find the sum of the entire array result using java\n8 streams?\nWrite a program to find even numbers from a list of integers and\nmultiply by 2 using stream java 8?\nWrite a program to find the occurrence of each word in a given string\nin java?\nWrite a Program to find a common element from three integer\nArrayList. eg. arr1, arr2, and arr3.\nWrite a program to convert string to integer in java without any API?\nWrite a program to find the first occurrence of a character in a string\nin java?\nWrite a program to find the missing number in an Array in java.\nWrite a Program to Find a possible combination of the given string\n“GOD”?\nWrite a program for valid parenthesis in java?",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 15,
          "text": "Write a program to find duplicates in an ArrayList.\nWrite a program for the Quick sort algorithm.\nWrite a program to check the minimum number of occurrences of a\ncharacter in a given string in java.\nWrite a program of an array, it must multiply the array, leaving itself\naside, and that multiplication should be kept in that array position in\nJava.\nCan you write down a Spring boot rest API for addition of two\nintegers?\nHow to count every character in string using java 8?\nCheck the unique String program?\nWrite a program to Find spikes in a stock of integer array?\nFind the output of below program?\nCHAPTER 14: SCENARIO-BASED\nThread-Pool Based Scenario:\nRest-API & Database-based-scenario\nDatabase-based-scenario:1\nDatabase-based-scenario:2\nMicroservice-based-scenario\nInheritance Scenario-Based\nHow to create a custom HashMap of size 2GB?\nDesign an application where you are getting millions of requests how\nwill you design it.\nSuppose you have an application where the user wants the order\nhistory to be generated, and that history pdf generation take almost\n15 minutes how will you optimise this solution. How this can be\nreduced.\nCHAPTER 15: JAVA FEATURES FROM JAVA 8 TILL\nJAVA 21 WITH EXAMPLE",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 16,
          "text": "Java 8 Features\nJava 9 Features\nJava 10 Features\nJava 11 Features\nJava 12 Features\nJava-13 Features\nJava-14 Features\nJava 15 Features:\nJava 16 Features\nJava 17 Features\nJava 18 Features\nJava 19 Features\nJava 20 Features\nJava 21 Features\nCHAPTER 16: KAFKA\nExplain the producer & consumer-based architecture of Kafka.\nHow to persist data directly from Kafka topic.is it possible or not?\nWhat is offset in Kafka?\nWhat is consumer offset?\nHow to configure the Kafka details?\nHow to determine the replication factor?\nWhich annotation is used to enable Kafka?\nCHAPTER 17: MISCELLANEOUS\nWhat is the difference between a container and a virtual machine?\nDifferences between Dockerization and Virtualisation?\nWhat is a pod in Kubernetes?",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 17,
          "text": "Can we write j-units for static methods?\nHow to resolve this Mockito exception “Mockito cannot mock this\nclass”?\nWhat is binary search tree?",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 18,
          "text": "OVERVIEW\nWelcome to the Ultimate Guide for Mastering Java Developer\nInterviews!\nWhether you're just starting out in Java development or have been\nat it for up to 10 years, this book is here to help you prepare for\nyour dream job. It's designed to be your go-to companion.\nInside, you'll find a handpicked collection of important interview\nquestions based on my own experiences. But it's not just questions –\nI've also included detailed and relevant answers to each one.\nThis guide covers a wide range of topics to make sure you're well-\nprepared. From the basics like Object-Oriented Programming and\nCore Java to more advanced topics like Java-8, Spring Framework,\nSpring-Boot, Microservice architecture, Memory Management in\nJava, REST principles, Design Patterns, System Design, SQL and\nHibernate-JPA, and various Coding and Programming Questions – it's\nall covered!\nI've even included Scenario-Based Interview Questions to test your\nproblem-solving skills in practical situations. And there's a section on\nMiscellaneous topics to make sure you're knowledgeable in all the\nessential areas.\nThe book also explores Multithreading, an area often focused on in\ninterviews to assess your concurrent programming skills.\nBy the end of this guide, you'll walk into your interview with\nconfidence and expertise. The knowledge you gain here will set you\napart from the competition.\nSo, embrace this opportunity and start your journey toward\ninterview success with enthusiasm. Best of luck!\nBest Regards,\nAjay Rathod",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 19,
          "text": "HOW TO PREPARE FOR A JAVA\nDEVELOPER INTERVIEW\nI will be sharing my preparation strategy for techies who want to\nhunt for their next tech job. Over the course of three months, I\nextensively prepared for a Java developer role. This preparation\nhelped me clear many interviews, including those with BIG FOUR\ncompanies. Developers with 0–10 years of experience can apply this\nstrategy.\nDisclaimer: This article is not intended for FAANG companies; I am\nreferring to general tech companies ranging from MNCs to small-\nscale and large-scale entities within the Indian Job Market.\nIn this article, I will elaborate on interview preparation and share my\nstrategies on how to maximize your chances of being selected for an\ninterview.\nTypical Interview Format\nTechnical Round 1 (L1 round)\nTechnical Round 2 (L2 round)\nManager Round\nHR round\nUsually, if you can clear the technical rounds, you are well on your\nway to receiving an offer letter, as the manager and HR rounds\nprimarily involve discussions. Hence, our focus should be on\npreparing for the technical rounds.\nTechnical Round Preparation Steps\nThe interview typically begins with an introduction, and the\ninterviewer may inquire about the project you have been working\non.\nStep 1: Know Your Current Project Inside and Out",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 20,
          "text": "a. Understand the functionality of the project, including its purpose\nand the problems it solves for customers. Essentially, you should\nhave a comprehensive overview of your project's functions. b.\nFamiliarize yourself with the project's architecture and technical\nstack. You can also delve deeper to comprehend the end-to-end\nflow. c. Discuss the technical stack used in the project. For instance,\nspecify the front-end framework (e.g., Angular, React), the backend\ntechnology (e.g., Java, Python), and the database (e.g., PostgreSQL,\nDynamo DB). d. Gain insight into the CI/CD model employed. Many\ndevelopers are unaware of the deployment process, so this is a\ncrucial aspect to understand.\nThoroughly studying the aforementioned project-related aspects will\nempower you to steer the interview in your favor. Remember, your\nresponses often guide the interview.\nStep 2: Java Developer Competencies\nAs a Java Developer, you should be well-versed in the following\ntopics, which will significantly enhance your likelihood of being\nselected.\nObject-Oriented Programming principles, including SOLID\nprinciples (prepare for inheritance puzzles)\nMultithreading and Concurrency (prepare for Executor\nframework and concurrency API)\nCollection framework (Comprehend the internal workings\nof each collection data structure, such as HashMap,\nConcurrentHashMap, HashSet)\nSerialization (Understand its functioning)\nDesign Patterns (Familiarize yourself with at least 4–5\ndesign patterns, including creational, behavioral, and\nstructural patterns)\nGarbage Collection\nJava Generics",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 21,
          "text": "Java 8 (Stream and Functional Programming—prepare to\nwrite Java 8 code for stream operations)\nSQL Queries (Be ready to write queries involving JOINS\nand employee tables, such as retrieving the highest\nsalary)\nCoding Practice (Solve a variety of Array and String\nproblems)\nMemory Management (Stay informed about memory\nmanagement changes in Java 8 and above)\nProficiency in the aforementioned areas is crucial for interview\nsuccess. Candidates are typically evaluated based on their practical\nknowledge and ability to write programs and SQL queries using Java.\nThese skills significantly contribute to interview performance.\nRemember, diligent preparation and a strong grasp of these concepts\nwill greatly improve your chances of excelling in your Java Developer\ninterview. Good luck!",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 22,
          "text": "HOW I MASTERED JAVA IN DEPTH\nFOR TECHNICAL INTERVIEWS AND\nTRIPLED MY SALARY\nLearning Java in-depth for Java Developer Technical interviews was a\ntransformative journey, driven by my personal experience. As I share\nmy takeaways, you'll discover how this process enriched my\nknowledge and significantly boosted my earnings. With the high\ndemand for Java professionals in the market, my insights can benefit\nJava Developer professionals seeking to excel in their current or\nfuture roles.\nInitial Steps: From Junior Java Developer to Depth Mastery\nStarting as a Junior Java developer, I heavily relied on internet\nsearches for coding solutions. A mentor's guidance would have been\ninvaluable, but I lacked that privilege. My quest for a new job led to\nrejection due to my superficial knowledge.\nKey Lessons:\n1. Java API Documentation and Understanding: Delving into\nJava API documentation unveiled the inner workings of JDK, aiding\nme in comprehending their internal mechanisms, time, and space\ncomplexities.\n2. Foundational Reading: Engaging with key Java books, such as\n\"Head First Java\" and \"Effective Java,\" fortified my grasp of Object-\noriented programming and laid a solid foundation.\n3. Coding Efficiency: Shifting from brute-force coding to optimized\npractices became vital. Solving coding problems on platforms like\nLeetCode and HackerRank honed my coding skills.\n4. Design Patterns and System Design: Recognizing the\nimportance of design patterns and system design, I incorporated\nthese concepts into my repertoire.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 23,
          "text": "5. Unit Testing Proficiency: Embracing thorough knowledge of\nthe JUnit framework was essential, as interviewers assessed unit\ntesting skills.\nTopics Explored in Depth:\n1. Core Java API: Thorough exploration of Collection framework,\nStreams, Java Lang, Java Util, Java Time, Java IO, Java net, and\nJava SQL packages.\n2. Design Patterns: In-depth understanding of design patterns like\nBuilder, Factory, Proxy, Adaptor, Facade, and Observer, supported by\npractical examples.\n3. SOLID Principles: Application of SOLID design principles in\ncoding, promoting clean and effective code writing.\n4. Clean Code Practices: Influence from \"Clean Code\" and \"Clean\nCoder\" by Uncle Bob contributed to cleaner coding habits and\nimproved code reviews.\n5. Frameworks Mastery: Proficiency in Spring Framework,\nHibernate framework, and JPA facilitated comprehensive\ndevelopment.\n6. Unit Testing Frameworks: Mastery of JUnit, Mockito, and\nPowerMock ensured comprehensive code coverage, aligning with\npipeline criteria.\nResults and Acknowledgment:\nBy immersing myself in these concepts, I navigated technical\ninterview rounds successfully, achieving a substantial salary increase\nand recognition as a proficient technical resource. A manager's\nfeedback commended my technical prowess and quality code\ndelivery.\nIn Closing:\nMy journey from superficial Java knowledge to depth mastery\nunderscores the transformative impact of deliberate learning. This\nnarrative aims to inspire fellow developers to embrace a",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 24,
          "text": "comprehensive approach to skill enhancement. For those seeking\nguidance, my articles offer valuable insights.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 25,
          "text": "CHAPTER 1: HOW TO INTRODUCE\nYOURSELF AND ANSWER INITIAL\nQUESTIONS\nIn this chapter, we'll talk about why it's important to introduce\nyourself in an interview. When you introduce yourself, you can give\nthe interviewer a quick overview of your work experience and\ntechnical skills.\nWhen you introduce yourself, it's crucial to only talk about things\nyou're very sure about, things you know 100 percent. For example, if\nyou're not familiar with a technology like JavaScript, it's best not to\nmention it because the interviewer might ask you about it.\nRemember, you can influence the interview by choosing what topics\nto talk about. Try to focus on the things you're really good at and be\nready to answer questions about them.\nLet’s dive into the interview questions.\nTell me about yourself, tell me about your skills.\n\"Tell me about yourself\" and \"Tell me about your skills\" are common\ninterview questions that can be challenging to answer. Here are\nsome tips on how to tackle these questions:\nPrepare ahead of time: Spend some time thinking about your\nstrengths, experiences, and achievements that are relevant to the\nposition you are applying for. Write them down and practice talking\nabout them out loud.\nKeep it relevant: When answering the question \"Tell me about\nyourself,\" focus on your professional experiences and achievements\nthat are relevant to the position you are applying for. You can also\nmention your personal interests if they relate to the job.\nBe concise: Keep your answers brief and to the point. Don't ramble\non or share irrelevant information. Stick to the main points and be",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 26,
          "text": "clear and concise.\nHighlight your skills: When asked about your skills, provide\nspecific examples of how you have used them in the past to achieve\nsuccess. Talk about your strengths and how they will benefit the\ncompany. Be sure to include both technical and soft skills, such as\nproblem-solving, communication, and teamwork.\nBe honest: It's important to be truthful when answering these\nquestions. Don't exaggerate or make up skills or experiences that\nyou don't possess.\nPractice: It's a good idea to practice answering these questions\nwith a friend or family member to help you feel more comfortable\nand confident during the actual interview.\nPlease tell me about your project and its architecture. Please\nexplain it and draw the architecture, framework, and\ntechnology used.\nWhen answering the question \"Tell me about your project and\narchitecture,\" it's important to provide a clear and concise overview\nof the project and the underlying architecture. Here are some tips to\nhelp you tackle this question:\nStart with an overview: Begin by giving a brief overview of the\nproject and the business problem it was designed to solve. This will\nhelp provide context for the architecture you will describe.\nDiscuss the architecture: Explain the underlying architecture that\nwas used in the project. This should include a high-level overview of\nthe components and how they interact with each other. You can also\ndiscuss the rationale for choosing this architecture and any trade-\noffs that were made.\nDescribe the design decisions: Talk about the design decisions\nthat were made during the project. This could include how the\narchitecture was designed to meet specific performance\nrequirements, how the system was designed to be scalable, or how\nit was designed to be maintainable.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 27,
          "text": "Discuss the implementation: Describe how the architecture was\nimplemented and any challenges that were encountered during\nimplementation. This could include any optimizations that were\nmade or any trade-offs that were made to meet specific\nrequirements.\nHighlight your role: Be sure to discuss your role in the project and\nhow you contributed to the architecture design and implementation.\nThis could include any specific tasks you performed or any technical\nchallenges you helped overcome.\nUse visual aids: If possible, use diagrams or other visual aids to\nhelp illustrate the architecture and design decisions. This can help\nthe interviewer better understand your explanation and provide a\nmore comprehensive answer.\nRemember to stay focused on the most relevant aspects of the\nproject and architecture, and be sure to highlight your role and\ncontributions to the project. Be clear and concise in your\nexplanation, and use examples and visual aids where possible to\nhelp support your answer.\nWhat are the best practices to follow while developing an\napplication?\nThere are several best practices to follow during software\ndevelopment to ensure a high-quality product and efficient\ndevelopment process. Here are some of the most important ones:\nPlan and prioritize: Before starting development, make sure to\nplan the project thoroughly and prioritize tasks based on their\nimportance and urgency.\nFollow a consistent process: Use a consistent development\nprocess, such as agile or waterfall, to ensure a structured and\npredictable development process.\nUse version control: Use a version control system, such as Git, to\nmanage and track changes to the codebase.\nTest early and often: Test the software early and often to catch\nbugs and errors before they become more difficult to fix.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 28,
          "text": "Use automation: Use automation tools, such as continuous\nintegration and deployment (CI/CD) pipelines, to automate repetitive\ntasks and ensure consistency.\nWrite clean and modular code: Write clean, modular, and\nmaintainable code to make it easier to maintain and extend the\nsoftware over time.\nDocument the code: Document the code thoroughly, including\ncomments and documentation, to make it easier for other\ndevelopers to understand and work with the code.\nUse appropriate tools and technologies: Use appropriate tools\nand technologies that are well-suited for the project requirements\nand team's skills.\nCollaborate effectively: Foster effective collaboration within the\nteam, including communication, code reviews, and regular meetings\nto ensure everyone is aligned and working towards the same goals.\nContinuously improve: Continuously evaluate and improve the\ndevelopment process and incorporate feedback from users to\nimprove the software over time.\nBy following these best practices, software development teams can\ncreate high-quality software that is maintainable, scalable, and\nefficient to develop.\nWhat challenging tasks have you accomplished so far? Could\nyou provide examples?\nInterviewers are usually interested in hearing about the most\nchallenging technical tasks you've tackled. They'll likely ask in-depth\nquestions about these challenges, so it's a good idea to pick one\narea where you have extensive experience and explain it thoroughly.\nShare information about any specific functionality or module you've\nworked on, and if you've been involved in creating MVPs (Minimum\nViable Products), be sure to mention those too.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 29,
          "text": "Please explain the code and the flow of the project, both\nwithin it and outside of it.\nWhen asked to explain the code and flow of a project, it's important\nto provide a clear and concise overview of the project and how it\nworks. Here are some tips to help you answer this question:\nStart with an overview: Begin by giving a brief overview of the\nproject and its purpose. This will help provide context for the code\nand flow you will describe.\nDiscuss the architecture: Provide an explanation of the\nunderlying architecture that was used in the project. This should\ninclude a high-level overview of the components and how they\ninteract with each other.\nDescribe the code flow: Describe how the code flows through the\ndifferent components of the project. This should include an\nexplanation of the different modules, functions, and classes that\nmake up the codebase.\nExplain the logic: Explain the logic behind the code and how it\nimplements the functionality of the project. This should include an\nexplanation of the algorithms and data structures used in the code.\nUse visual aids: If possible, use diagrams or other visual aids to\nhelp illustrate the code flow and architecture. This can help the\nlistener better understand your explanation and provide a more\ncomprehensive answer.\nHighlight your contributions: Be sure to discuss your\ncontributions to the project and how you contributed to the code\nand flow. This could include any specific tasks you performed or any\ntechnical challenges you helped overcome.\nProvide examples: Provide specific examples of how the code and\nflow work in different scenarios. This can help illustrate the\nfunctionality of the project and provide a more concrete\nunderstanding of how it works.\nRemember to stay focused on the most relevant aspects of the\nproject and code flow, and be sure to highlight your role and",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 30,
          "text": "contributions to the project. Be clear and concise in your\nexplanation, and use examples and visual aids where possible to\nhelp support your answer.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 31,
          "text": "CHAPTER 2: OBJECT ORIENTED\nPROGRAMMING\nIn this chapter, we'll dive into the world of object-oriented\nprogramming (OOP). If you're new to programming, just starting\nyour career, or have less than five years of experience, it's quite\ncommon for your interviews to focus on the fundamentals of OOP.\nThe interviewer's goal is to assess your grasp of this topic,\nevaluating your strength in designing code based on these\nprinciples, especially since Java is an object-oriented language. It's\nessential to be well-versed in key OOP concepts like abstraction,\nencapsulation, inheritance, and polymorphism. Real-life examples\ncan help you explain these concepts better, and it's also important to\nunderstand the SOLID principles.\nFailing to provide satisfactory answers to these questions can lead to\nrejection because no one wants to hire a software engineer who\nlacks proficiency in these fundamental aspects.\nLet’s dive into the interview questions,\nWhat are the four principles of OOP?\nThe four principles of Object-Oriented Programming (OOP) are:\nEncapsulation: This refers to the practice of hiding the internal\nworkings of an object and exposing only the necessary functionality.\nThe data and behaviour of an object are encapsulated within the\nobject, and can only be accessed through well-defined interfaces.\nInheritance: Inheritance allows objects to inherit properties and\nbehaviours from other objects. Inheritance allows for the creation of\nhierarchical relationships between classes, with parent classes\npassing down their characteristics to their child classes.\nPolymorphism: Polymorphism refers to the ability of objects to\ntake on many forms, and is achieved through the use of inheritance,",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 32,
          "text": "overloading and overriding methods, and interfaces. Polymorphism\nallows for greater flexibility and reuse of code.\nAbstraction: Abstraction refers to the process of identifying\ncommon patterns and extracting essential features of objects,\ncreating classes from these patterns. Abstraction allows for the\ncreation of higher-level concepts that can be used in multiple\ncontexts, and can simplify complex systems.\nWhat is the difference between an abstract class and an\ninterface?\nFeature Abstract Class Interface\nPartial abstraction,\nPurpose shared implementation Complete abstraction, contract\nTraditionally only abstract methods\nCan have abstract and (can have default and static\nMethods non-abstract methods methods in Java 8+)\nSupports single\nInheritance inheritance Supports multiple inheritance\nCan have static, non-\nVariables static, final, non-final Only static final variables\nSubclass must\nImplementatio implement all abstract Implementing class must provide\nn methods code for all methods\nCannot be instantiated\nInstantiation directly Cannot be instantiated directly\nConstructors Can have constructors Cannot have constructors\nCan have a main\nMain method method Cannot have a main method\nWhen to Use:\nAbstract classes:\nWhen you have some common implementation to share\namong subclasses.\nWhen you want to enforce a hierarchy and prevent direct\ninstantiation of the base class.",
          "tables": [
            [
              [
                "",
                ""
              ],
              [
                "Feature",
                "Abstract Class"
              ],
              [
                "",
                ""
              ],
              [
                "",
                "Partial abstraction,"
              ],
              [
                "Purpose",
                "shared implementation"
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                "Can have abstract and"
              ],
              [
                "Methods",
                "non-abstract methods"
              ],
              [
                "",
                ""
              ],
              [
                "",
                "Supports single"
              ],
              [
                "Inheritance",
                "inheritance"
              ],
              [
                "",
                ""
              ],
              [
                "",
                "Can have static, non-"
              ],
              [
                "Variables",
                "static, final, non-final"
              ],
              [
                "",
                ""
              ],
              [
                "",
                "Subclass must"
              ],
              [
                "Implementatio",
                "implement all abstract"
              ],
              [
                "n",
                "methods"
              ],
              [
                "",
                ""
              ],
              [
                "",
                "Cannot be instantiated"
              ],
              [
                "Instantiation",
                "directly"
              ],
              [
                "",
                ""
              ],
              [
                "Constructors",
                "Can have constructors"
              ],
              [
                "",
                ""
              ],
              [
                "",
                "Can have a main"
              ],
              [
                "Main method",
                "method"
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 33,
          "text": "When you need to control access to members using\naccess modifiers.\nInterfaces:\nWhen you want to define a contract that multiple\nunrelated classes can implement.\nWhen you want to achieve loose coupling between\nclasses.\nWhen you need to support multiple inheritance.\nWhat is the use of constructor in an abstract class?\nWhile abstract classes cannot be instantiated directly, their\nconstructors play a crucial role in object initialization within\ninheritance hierarchies. Here are the key purposes of constructors in\nabstract classes:\nInitializing Member Variables:\nAbstract classes often have member variables that need to\nbe initialized for proper object state. Constructors perform\nthis initialization, ensuring consistent setup for all\nsubclasses.\nExample: An abstract Shape class might have a color\nproperty initialized in its constructor.\nEnforcing Invariants and Constraints:\nConstructors can enforce rules and constraints that must\nhold true for all objects in the hierarchy. This ensures data\nintegrity and validity.\nExample: A BankAccount abstract class might require a\nnon-negative initial balance in its constructor.\nShared Initialization Logic:\nCommon initialization steps for all subclasses can be\nconsolidated in the abstract class constructor, reducing\ncode duplication.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 34,
          "text": "Example: An Employee abstract class might initialize a\nhireDate property in its constructor, shared by all\nemployee types.\nControlling Instantiation:\nConstructors can be made private or protected to control\nhow subclasses are created, ensuring they are instantiated\nthrough specific mechanisms or helper methods.\nExample: A Singleton abstract class might have a private\nconstructor to enforce a single instance.\nCalling Superclass Constructors:\nSubclasses must call their superclass constructor (implicitly\nor explicitly) during their own construction. This ensures\nproper initialization of inherited state.\nExample: A SavingsAccount subclass must call the\nBankAccount constructor to initialize shared account\nproperties.\nKey Points:\nAbstract class constructors are not used for object creation\ndirectly, but they are invoked when a subclass object is\ncreated.\nThey ensure consistent initialization and enforce class\ninvariants, promoting code reusability and maintainability.\nUnderstanding constructor behaviour in abstract classes is\nessential for effective object-oriented design.\nWhat is abstraction, and what are its advantages?\n(Concrete class doing the same what is the advantage over concrete\nclass?)\nAbstraction is a fundamental concept in programming and many\nother fields. In simplest terms, it's the act of focusing on the\nessential details of something while hiding away the unnecessary\ncomplexity. Here's a breakdown of abstraction in programming:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 35,
          "text": "What is it?\nAbstraction allows you to break down complex systems\ninto smaller, easier-to-understand pieces.\nYou define interfaces or classes that expose only the\nrelevant functionalities, hiding the inner workings.\nThis lets you work with the system at a higher level,\nwithout getting bogged down in the low-level details.\nThink of it this way:\nImagine a car. You don't need to understand the intricate\nmechanics of the engine to drive it. You just need to know\nhow to steer, accelerate, and brake.\nSimilarly, when using an abstraction in programming, you\ndon't need to know how it works internally. You simply call\nits functions or methods and interact with it at a higher\nlevel.\nAdvantages of abstraction:\nReduced complexity: It makes your code easier to\nunderstand, write, and maintain by breaking down large\nproblems into smaller, more manageable chunks.\nIncreased productivity: You can focus on the logic and\nfunctionality of your program without getting bogged\ndown in implementation details.\nImproved reusability: Abstracted components can be used\nin multiple parts of your program, reducing code\nduplication and promoting modularity.\nEnhanced readability: Code becomes more concise and\nless cluttered, making it easier for others to understand\nand collaborate on.\nFlexibility and adaptability: Abstractions allow you to\nchange the underlying implementation without affecting\nthe code that uses them.\nHere are some specific examples of abstraction in programming:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 36,
          "text": "Functions: They hide the implementation details of a\nspecific task and provide a simple interface for other parts\nof your program to interact with.\nClasses: They bundle related data and functionality,\nmaking it easier to manage and reuse complex data\nstructures.\nLibraries and frameworks: They provide pre-built\nabstractions for common tasks, saving you time and effort.\nWhat is the difference between abstraction and\nencapsulation?\nAbstraction:\nFocus: What the object does, hiding implementation\ndetails.\nGoal: Simplifying complex systems by exposing only\nessential features.\nMechanisms: Abstract classes, interfaces, functions.\nEncapsulation:\nFocus: How the object's data and behavior are bundled\ntogether.\nGoal: Protecting data integrity and controlling access.\nMechanisms: Access modifiers (public, private, protected),\ngetters and setters.\nKey Differences:\nScope: Abstraction operates at a higher level, focusing on\nthe overall design and interface. Encapsulation works at\nthe object level, managing internal data and\nimplementation.\nPurpose: Abstraction aims to simplify complexity and\npromote reusability. Encapsulation aims to protect data\nand manage dependencies.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 37,
          "text": "Implementation: Abstraction is often achieved through\nabstract classes or interfaces. Encapsulation is typically\nimplemented using access modifiers and methods to\ncontrol access to data.\nWhat is the difference between Abstraction and\npolymorphism?\nAbstraction\nFocus: Hides the internal complexity of an object,\nexposing only the essential features and functionalities\nthat users need to interact with.\nThink of it as: A map that shows the important landmarks\nof a city without getting bogged down in the details of\nevery street and alleyway.\nBenefits:\nSimplifies code by reducing cognitive load and making it\neasier to understand.\nPromotes code reusability by focusing on general\nfunctionalities that can be applied in different contexts.\nImproves maintainability by making it easier to change the\nimplementation details without affecting the code that\nuses the abstraction.\nMechanisms:\nAbstract classes: Define a blueprint for subclasses with\nshared functionality and abstract methods that must be\nimplemented.\nInterfaces: Specify contracts that classes must adhere to,\ndefining methods without implementation.\nFunctions: Hide the internal logic of a specific task,\nproviding a simple interface for other parts of the program\nto interact with.\nPolymorphism",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 38,
          "text": "Focus: Enables an object to exhibit different behaviors\ndepending on its actual type at runtime.\nThink of it as: A chameleon that can change its color to\nblend in with its surroundings.\nBenefits:\nMakes code more flexible and adaptable by allowing\ndifferent objects to respond differently to the same\nmessage.\nPromotes code reusability by enabling generic functions\nand methods that can work with different types of objects.\nImproves maintainability by making it easier to add new\ntypes of objects without modifying existing code.\nMechanisms:\nMethod overloading: Allows a class to define multiple\nmethods with the same name but different parameter\ntypes or numbers.\nMethod overriding: Allows subclasses to provide their own\nimplementation of a method inherited from a superclass.\nInterfaces: Can define abstract methods with common\nbehavior that different classes can implement in their own\nway.\nFeature Abstraction Polymorphism\nFocus What an object does How an object behaves\nSimplify complexity, hide internal Provide flexibility, adapt\nGoal details behavior based on type\nMechanism Abstract classes, interfaces, Method overloading,\ns functions overriding, interfaces\nReduced complexity, improved Increased flexibility,\nBenefits reusability, maintainability adaptability, reusability",
          "tables": [
            [
              [
                "",
                "",
                ""
              ],
              [
                "Feature",
                "Abstraction",
                "Polymorphism"
              ],
              [
                "",
                "",
                ""
              ],
              [
                "Focus",
                "What an object does",
                "How an object behaves"
              ],
              [
                "",
                "",
                ""
              ],
              [
                "",
                "Simplify complexity, hide internal",
                "Provide flexibility, adapt"
              ],
              [
                "Goal",
                "details",
                "behavior based on type"
              ],
              [
                "",
                "",
                ""
              ],
              [
                "Mechanism",
                "Abstract classes, interfaces,",
                "Method overloading,"
              ],
              [
                "s",
                "functions",
                "overriding, interfaces"
              ],
              [
                "",
                "",
                ""
              ],
              [
                "",
                "Reduced complexity, improved",
                "Increased flexibility,"
              ],
              [
                "Benefits",
                "reusability, maintainability",
                "adaptability, reusability"
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 39,
          "text": "What is the difference between Inheritance and\nComposition?\nInheritance allows a class (called a subclass) to inherit properties\nand behaviors from another class (called a superclass). The subclass\ncan then add or modify these properties and behaviors as needed.\nIt's useful for creating hierarchies of related classes and sharing\ncode and functionality.\nFor example, if we have an Animal class, a Mammal class, and a Cat\nclass, the Cat class can inherit properties and behaviors from both\nAnimal and Mammal classes while adding its own specific methods.\nBenefits:\nPromotes code reuse by sharing common functionalities\namong related classes.\nProvides code organization by structuring classes in a\nhierarchy.\nEnables specialization by adding specific features to\nsubclasses.\nComposition allows a class to be composed of other objects. This\nmeans that a class can have references to other objects as its\nproperties and use them to delegate tasks or behaviors. It's useful\nfor creating complex objects from simpler ones and enabling\ndynamic composition at runtime.\nFor instance, a Car class can be composed of objects such as an\nEngine, Wheels, Seats, etc. The Car class can then utilize these\nobjects to perform various tasks.\nBenefits:\nLoose coupling between classes – changes in one class\nusually don't affect the other.\nGreater flexibility – allows using functionalities from any\nclass, not just parent-child hierarchy.\nPromotes modularity and code clarity.\nFeature Inheritance Composition",
          "tables": [
            [
              [
                "",
                ""
              ],
              [
                "Feature",
                "Inheritance"
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 40,
          "text": "Relationship \"is-a\" \"has-a\"\nImplementatio Subclasses inherit from Member variables hold other\nn superclass objects\nCode reuse, organization, Loose coupling, flexibility,\nBenefits specialization modularity\nTight coupling, limited flexibility, Complexity, lifecycle\nDrawbacks duplication management\nWhat are Composition and Aggregation with examples?\nComposition and aggregation are two types of object-oriented\nprogramming concepts that describe the relationship between\nobjects.\nComposition is a strong type of association where an object is made\nup of one or more objects of other classes. For example, a car is\ncomposed of various parts such as wheels, engine, transmission, etc.\nThe car class has an object of the wheel class, engine class, and\ntransmission class as its member variables.\nAggregation is a weak type of association where an object\ncontains a reference to one or more objects of other classes. For\nexample, a university class has a collection of student classes as its\nmember variable. The student class has an object of the university\nclass as its member variable.\nWhat is aggregation, composition, and inheritance?\nTo check if the current code contains examples of aggregation,\ncomposition, and inheritance, you need to look for the relevant\nsyntax and usage patterns in the code.",
          "tables": [
            [
              [
                "Relationship",
                "\"is-a\"",
                "\"has-a\""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "Implementatio",
                "Subclasses inherit from",
                "Member variables hold other"
              ],
              [
                "n",
                "superclass",
                "objects"
              ],
              [
                "",
                "",
                ""
              ],
              [
                "",
                "Code reuse, organization,",
                "Loose coupling, flexibility,"
              ],
              [
                "Benefits",
                "specialization",
                "modularity"
              ],
              [
                "",
                "",
                ""
              ],
              [
                "",
                "Tight coupling, limited flexibility,",
                "Complexity, lifecycle"
              ],
              [
                "Drawbacks",
                "duplication",
                "management"
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 41,
          "text": "Here are some pointers for identifying these concepts in code:\nInheritance: Look for classes that extend or inherit from other\nclasses. This is typically indicated by the extends keyword in Java,\nfor example: public class Car extends Vehicle {...}. Inheritance is\nused to create a hierarchy of classes where subclasses inherit\nproperties and methods from their parent classes.\nComposition: Look for objects that contain other objects as instance\nvariables. This is typically indicated by object instantiation within\nanother object's constructor, for example:\npublic class Person {\n private Job job;\n public Person(Job job) {\n this.job = job;\n }\n}\nComposition is used to build complex objects by combining simpler\nobjects.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 42,
          "text": "Aggregation: Look for objects that have references to other\nobjects as instance variables, but do not own or create them. This is\ntypically indicated by a \"has-a\" relationship between objects,\nfor example:\npublic class University {\n private List<Student> students;\n public University(List<Student> students) {\n this.students = students;\n }\n}\nAggregation is used to represent relationships between objects\nwithout tightly coupling them together.\nTo get a better understanding of how these concepts are used in\ncode, you may want to read through the codebase and look for\npatterns that indicate their usage. Additionally, you may want to\nsearch for specific keywords and syntax related to inheritance,\ncomposition, and aggregation, such as extends, implements, and\nnew. Finally, you may also want to talk to other developers or review\ndocumentation to understand how these concepts are being used in\nthe codebase.\nCan you explain multilevel inheritance in Java?\nMultilevel inheritance is a type of inheritance in object-oriented\nprogramming (OOP) where a derived class (subclass) is created from\nanother derived class, which itself was derived from a base class\n(superclass).\nIn multilevel inheritance, each derived class inherits the\ncharacteristics of the class above it in the hierarchy. This means that\na subclass not only has all the features of its immediate superclass,\nbut also those of all its ancestors up the hierarchy chain.\nHere's an example to illustrate multilevel inheritance:\nclass Animal {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 43,
          "text": "    void eat() {\nSystem.out.println(\"Eating...\");\n    }\n}\nclass Dog extends Animal {\n    void bark() {\nSystem.out.println(\"Barking...\");\n    }\n}\nclass Bulldog extends Dog {\nvoid guard() {\nSystem.out.println(\"Guarding...\");\n}\n}\nIn this example, Animal is the base class, Dog is a derived class from\nAnimal, and Bulldog is a derived class from Dog.\nAnimal has a single method eat(). Dog inherits eat() from Animal\nand adds a new method bark(). Bulldog inherits both eat() and\nbark() from Dog and adds a new method guard().\nNow, an instance of Bulldog can access all the methods of its\nimmediate superclass (Dog), as well as all the methods of its",
          "tables": [],
          "code_blocks": [
            "}",
            "void bark() {",
            "}"
          ],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 44,
          "text": "ancestor superclass (Animal). For example:\nBulldog bulldog = new Bulldog();\nbulldog.eat();   // output: Eating...\nbulldog.bark();  // output: Barking...\nbulldog.guard(); // output: Guarding...\nThis example demonstrates how multilevel inheritance can be used\nto create a hierarchy of classes that inherit and extend behavior\nfrom each other. However, it is important to use inheritance\njudiciously to avoid creating overly complex and tightly-coupled class\nhierarchies.\nWhen do you use encapsulation and abstraction in your\nproject?\nEncapsulation and abstraction are two important concepts in object-\noriented programming, and they are used in different ways in\ndifferent parts of a project.\nEncapsulation is used to protect the internal state of an object and\nto control how other objects can access or modify that state. It is\ntypically used in data modelling, where we define classes that\nrepresent real-world entities and their properties.\nFor example, if we were building a system to manage a library, we\nmight define a Book class that has properties like title, author, and\nisbn. We would use encapsulation to ensure that these properties\nare not accessible or modifiable from outside the Book class, except\nthrough carefully designed methods like getTitle() and setAuthor().\nAbstraction, on the other hand, is used to hide the implementation\ndetails of a class or component and to present a simpler, higher-level\ninterface to other parts of the system. It is typically used in system\ndesign and architecture, where we define components and their\ninterfaces.\nFor example, if we were building a web application, we might define\na UserService component that provides methods for creating,\nupdating, and retrieving user accounts. We would use abstraction to",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 45,
          "text": "ensure that other components in the system do not need to know\nhow the UserService is implemented, but can simply use its interface\nto perform the necessary actions.\nIn general, encapsulation and abstraction are used together in\nobject-oriented programming to create robust, maintainable, and\nscalable systems. Encapsulation is used to protect the internal state\nof objects and to control how other objects can access or modify\nthat state, while abstraction is used to hide the implementation\ndetails of components and to present a simpler, higher-level interface\nto other parts of the system.\nHow do you achieve encapsulation?\nEncapsulation is achieved in Java through the use of access\nmodifiers and getter and setter methods.\nAccess modifiers control the visibility of variables and\nmethods in a class. There are three access modifiers in Java:\npublic, private, and protected.\nPublic: Public variables and methods can be accessed from\nanywhere in the program.\nPrivate: Private variables and methods can only be accessed within\nthe same class.\nProtected: Protected variables and methods can be accessed within\nthe same class, and by subclasses and classes in the same package.\nBy default, if you don't specify an access modifier, the variable or\nmethod is considered to have \"package\" or \"default\" access, which\nmeans it can be accessed within the same package.\nHere's an example of how to use access modifiers to achieve\nencapsulation:\npublic class Person {\nprivate String name;\nprivate int age;\npublic String getName() {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 46,
          "text": "return name;\n}\npublic void setName(String name) {\nthis.name = name;\n}\npublic int getAge() {\nreturn age;\n}\npublic void setAge(int age) {\nif (age < 0) {\nthrow new IllegalArgumentException(\"Age cannot be\nnegative\");\n}\nthis.age = age;\n}\n}\nIn this example, the Person class has two private variables, name\nand age. These variables are not directly accessible from outside the\nclass, which means that other classes cannot modify or access them\ndirectly.\nTo allow other classes to access these variables, we provide public\ngetter and setter methods for name and age. The getter methods\nallow other classes to retrieve the values of these variables, while\nthe setter methods allow other classes to modify their values.\nNote that we can also add validation logic to the setter methods to\nensure that the values being set are valid. In this example, the\nsetAge method throws an exception if the age is negative.\nBy using access modifiers and getter and setter methods, we can\nachieve encapsulation in Java. This allows us to protect the data and",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 47,
          "text": "behavior of our objects and prevent other objects from accessing or\nmodifying them directly, which makes our code more robust and\nmaintainable.\nWhat is polymorphism, and how can it be achieved?\nPolymorphism is the ability of objects of different classes to be\ntreated as if they are of the same type. It allows us to write code\nthat can work with objects of different types in a uniform way,\nwithout needing to know the specific class of each object.\nIn Java, polymorphism is achieved through two mechanisms:\nmethod overloading and method overriding.\nMethod overloading is when a class has two or more methods with\nthe same name, but different parameters. When a method is called,\nthe compiler determines which method to call based on the number\nand types of the arguments passed to it.\npublic class Calculator {\n    public int add(int x, int y) {\n        return x + y;\n    }\n    public double add(double x, double y) {\n        return x + y;\n    }\n}\nIn this example, the Calculator class has two methods named add,\none that takes two integers and one that takes two doubles. When\nthe add method is called, the compiler determines which version of\nthe method to call based on the types of the arguments passed to it.\nMethod overriding is when a subclass provides its own\nimplementation of a method that is already defined in its superclass.\nThe subclass method must have the same name, return type, and\nparameter list as the superclass method.\npublic class Animal {\npublic void speak() {\nSystem.out.println(\"Animal speaks\");",
          "tables": [],
          "code_blocks": [
            "public int add(int x, int y) {\n        return x + y;\n    }\n    public double add(double x, double y) {\n        return x + y;\n    }"
          ],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 48,
          "text": "}\n}\npublic class Dog extends Animal {\npublic void speak() {\nSystem.out.println(\"Dog barks\");\n}\n}\nIn this example, the Animal class has a method named speak. The\nDog class extends the Animal class and provides its own\nimplementation of the speak method. When we call the speak\nmethod on a Dog object, the Dog version of the method is called\ninstead of the Animal version.\nPolymorphism allows us to write code that can work with objects of\ndifferent types in a uniform way, without needing to know the\nspecific class of each object. It makes our code more flexible and\neasier to maintain, and is a key feature of object-oriented\nprogramming.\nWhat are Method Overloading and Overriding?\nMethod overloading and overriding are two concepts in object-\noriented programming that describe how methods in a class can be\nused.\nMethod overloading is the ability of a class to have multiple methods\nwith the same name but with different parameters. This is also\nknown as \"compile-time polymorphism\" or \"function overloading\" in\nsome languages. For example, a class Calculator might have multiple\nmethods with the name add, but with different parameters such as\nadd (int a, int b) and add (double a, double b).\nMethod overriding is the ability of a subclass to provide a different\nimplementation of a method that is already provided by its\nsuperclass. This is also known as \"runtime polymorphism\" or\n\"function overriding\". The method in the subclass has the same\nname, return type and parameters as the method in the superclass.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 49,
          "text": "The purpose of method overriding is to change the behaviour of the\nmethod in the subclass.\nHere's an example of Overloading:\npublic class Calculator {\npublic int add(int x, int y) {\nreturn x + y;\n}   \npublic int add(int x, int y, int z) {\nreturn x + y + z;\n}   \npublic double add(double x, double y) {\nreturn x + y;\n}\n}\nIn this example, Calculator defines three different add() methods\nwith the same name but different parameters. The first method\ntakes two int arguments, the second takes three int arguments, and\nthe third takes two double arguments. The compiler decides which\nmethod to call based on the number and type of arguments passed\nto it.\nMethod overriding, on the other hand, is the ability to define a\nmethod in a subclass that has the same name and parameters as a\nmethod in its superclass. When the method is called on an object of\nthe subclass, the method in the subclass is executed instead of the\nmethod in the superclass.\nHere's an example overriding:\npublic class Animal {\npublic void makeSound() {\nSystem.out.println(\"The animal makes a sound\");\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 50,
          "text": "}\npublic class Dog extends Animal {\n@Override\npublic void makeSound() {\nSystem.out.println(\"The dog barks\");\n}\n}\nIn this example, Animal defines a makeSound() method that prints a\nmessage. Dog overrides this method with its own implementation\nthat prints a different message. When makeSound() is called on a\nDog object, the overridden method in Dog is executed, producing\nthe output \"The dog barks\".\nWhat is Method overriding with an example?\nIn Java, method overriding is when a subclass provides its own\nimplementation of a method that is already defined in its superclass.\nThe subclass method must have the same name, return type, and\nparameter list as the superclass method.\nAccess specifiers determine the visibility of a method, and they can\nalso be used when overriding methods. When overriding a method,\nthe access specifier of the overriding method cannot be more\nrestrictive than the access specifier of the overridden method. In\nother words, if the overridden method is public, the overriding\nmethod must also be public or less restrictive.\nHere is an example of method overriding with access specifiers:\npublic class Animal {\npublic void speak() {\nSystem.out.println(\"Animal speaks\");\n}\nprotected void eat() {\nSystem.out.println(\"Animal eats\");",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 51,
          "text": "}\n}\npublic class Dog extends Animal {\n@Override\npublic void speak() {\nSystem.out.println(\"Dog barks\");\n}\n@Override\nprotected void eat() {\nSystem.out.println(\"Dog eats\");\n}\n}\nIn this example, the Animal class has a method named speak that is\npublic, and a method named eat that is protected. The Dog class\nextends the Animal class and provides its own implementations of\nthe speak and eat methods.\nThe speak method in the Dog class overrides the speak method in\nthe Animal class and is also public. The eat method in the Dog class\noverrides the eat method in the Animal class and is also protected.\nSince the eat method in the Animal class is also protected, the\naccess specifier of the eat method in the Dog class can be the same\nor less restrictive, but not more restrictive.\nIn this way, we can use method overriding to provide our\nimplementations of methods that are defined in a superclass, while\nalso adhering to the access specifiers of the original methods. This\nallows us to customize the behavior of our subclasses while\nmaintaining the structure and visibility of the superclass.\nWhat is Method overriding in terms of exception handling,\nwith an example?\nIn Java, when overriding a method, the overridden method can\nthrow exceptions, and the overriding method can choose to throw",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 52,
          "text": "the same exceptions or a subset of them. Here's an example of\nmethod overriding with exception handling:\npublic class Animal {\npublic void speak() throws Exception {\nSystem.out.println(\"Animal speaks\");\n}\npublic void eat() throws Exception {\nSystem.out.println(\"Animal eats\");\n}\n}\npublic class Dog extends Animal {\n@Override\npublic void speak() throws IOException {\nSystem.out.println(\"Dog barks\");\nthrow new IOException(\"Exception from Dog.speak\");\n}\n@Override\npublic void eat() {\nSystem.out.println(\"Dog eats\");\n}\n}\nIn this example, the Animal class has two methods: speak and eat.\nBoth methods are declared to throw an Exception.\nThe Dog class extends the Animal class and overrides both the\nspeak and eat methods.\nThe speak method in the Dog class overrides the speak method in\nthe Animal class and throws an IOException. The IOException is a\nsubclass of Exception, so this is allowed.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 53,
          "text": "The eat method in the Dog class overrides the eat method in the\nAnimal class but does not throw any exceptions.\nWhen calling these methods, we can catch the exceptions that are\nthrown. For example:\npublic static void main(String[] args) {\nAnimal animal = new Dog();\ntry {\nanimal.speak();\n} catch (IOException e) {\nSystem.out.println(\"Caught IOException: \" + e.getMessage());\n} catch (Exception e) {\nSystem.out.println(\"Caught Exception: \" + e.getMessage());\n}\ntry {\nanimal.eat();\n} catch (Exception e) {\nSystem.out.println(\"Caught Exception: \" + e.getMessage());\n}\n}\nIn this example, we create an instance of the Dog class and assign it\nto a variable of type Animal. We then call the speak and eat\nmethods on this object.\nSince the speak method in the Dog class throws an IOException, we\ncatch that exception specifically and print out its message. If the\nspeak method in the Dog class threw a different type of exception,\nsuch as RuntimeException, it would not be caught by this catch\nblock.\nThe eat method in the Dog class does not throw any exceptions, so\nthe catch block for Exception will not be executed. If the eat method",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 54,
          "text": "in the Dog class did throw an exception, it would be caught by this\ncatch block.\nCan we have overloaded methods with different return\ntypes?\nNo, we cannot have overloaded methods with only different return\ntypes. Overloaded methods must have the same method name and\nparameters, but they can have different return types only if the\nmethod parameters are also different. The reason for this is that the\nreturn type alone is not enough information for the compiler to\ndetermine which method to call at compile time. For example,\nconsider the following code:\npublic class Calculator {\npublic int add(int x, int y) {\nreturn x + y;\n}   \npublic double add(int x, int y) {\nreturn (double) (x + y);\n}\n}\nIn this example, we have two add() methods with the same\nparameters, but different return types (int and double). This will\ncause a compilation error because the compiler cannot determine\nwhich method to call based on the return type alone.\nCan we override the static method? Why Can't we do that?\nNo, it is not possible to override a static method in Java. A static\nmethod is associated with the class and not with an object, and it\ncan be called directly on the class, without the need of creating an\ninstance of the class.\nWhen a subclass defines a static method with the same signature as\na static method in the superclass, the subclass method is said to\nhide the superclass method. This is known as method hiding. The",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 55,
          "text": "subclass method is not considered an override of the superclass\nmethod, it is considered a new method and it hides the superclass\nmethod, but it doesn't override it.\nIn summary, since a static method is associated with the class, not\nan object and it is directly callable on the class, it is not possible to\noverride a static method in Java, instead, it is hidden by subclass\nmethod with the same signature.\nWhat are SOLID principles, with example?\nSOLID is an acronym that represents five principles of object-\noriented design that aim to make software more maintainable,\nflexible, and easy to understand. Here are the explanations of each\nof the five SOLID principles, along with examples:\nSingle Responsibility Principle (SRP): This principle states that\na class should have only one reason to change. In other words, a\nclass should have only one responsibility or job. For example, if we\nhave a class named User, it should only be responsible for handling\nuser-related functionalities such as authentication, user data\nmanagement, etc. It should not be responsible for other unrelated\nfunctionalities like sending emails or managing payment\ntransactions.\nOpen/Closed Principle (OCP): This principle states that a class\nshould be open for extension but closed for modification. This means\nthat we should be able to add new functionalities or behaviors to a\nclass without changing its existing code. For example, instead of\nmodifying an existing Payment class to add support for a new\npayment method, we can create a new PaymentMethod class that\nimplements a Payment interface and inject it into the Payment class.\nLiskov Substitution Principle (LSP): This principle states that\nderived classes should be able to replace their base classes without\naffecting the correctness of the program. In other words, if we have\na base class Animal and a derived class Dog, we should be able to\nuse the Dog class wherever we use the Animal class. For example, if\nwe have a method that takes an Animal parameter and performs",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 56,
          "text": "some action, we should be able to pass a Dog object to that method\nwithout any issues.\nInterface Segregation Principle (ISP): This principle states that\na class should not be forced to implement interfaces it does not use.\nIn other words, we should separate interfaces that are too large or\ngeneral into smaller and more specific interfaces. For example,\ninstead of having a single Payment interface that includes all\npayment methods, we can have separate interfaces like\nCreditCardPayment, PayPalPayment, etc.\nDependency Inversion Principle (DIP): This principle states\nthat high-level modules should not depend on low-level modules.\nInstead, both should depend on abstractions. This means that we\nshould rely on abstractions, rather than concrete implementations.\nFor example, instead of depending on a specific database\nimplementation in a class, we should depend on a database\ninterface, which can be implemented by different databases. This\nallows for easier testing, maintenance, and scalability.\nWhat is Cohesion and Coupling?\nCohesion refers to the degree to which the elements within a\nmodule or component work together to achieve a single, well-\ndefined purpose. High cohesion means that the elements within a\nmodule are strongly related and work together towards a common\ngoal, while low cohesion means that the elements are loosely related\nand may not have a clear purpose.\nCoupling, on the other hand, refers to the degree of\ninterdependence between modules or components. High coupling\nmeans that a change in one module or component will likely affect\nother modules or components, while low coupling means that\nchanges in one module or component will have minimal impact on\nother modules or components.\nIn general, software design principles strive for high cohesion and\nlow coupling, as this leads to code that is more modular,\nmaintainable, and easier to understand and change.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 57,
          "text": "What does Static keyword signify?\nIn Java, the static keyword is used to create variables, methods, and\nblocks that belong to the class, rather than to an instance of the\nclass. When a variable or method is declared as static, it is\nassociated with the class and not with individual objects of the class.\nHere are some common uses of the static keyword:\nStatic variables: A static variable is a variable that belongs to the\nclass and is shared by all instances of the class. Static variables are\ndeclared using the static keyword and are often used for constants\nor for variables that need to be shared across instances of the class.\npublic class Example {\npublic static int count = 0;\n}\nIn this example, the count variable is declared as static, so it belongs\nto the Example class and is shared by all instances of the class.\nStatic methods: A static method is a method that belongs to the\nclass and can be called without creating an instance of the class.\nStatic methods are declared using the static keyword and are often\nused for utility methods that do not depend on the state of an\ninstance.\npublic class Example {\npublic static void printMessage(String message) {\nSystem.out.println(message);\n}\n}\nIn this example, the printMessage() method is declared as static, so\nit belongs to the Example class and can be called without creating\nan instance of the class.\nStatic blocks: A static block is a block of code that is executed when\nthe class is loaded. Static blocks are used to initialize static variables\nor to perform other one-time initialization tasks.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 58,
          "text": "public class Example {\nstatic {\nSystem.out.println(\"Initializing Example class\");\n}\n}\nIn this example, the static block is executed when the Example class\nis loaded and prints a message to the console.\nIn summary, the static keyword is used to create variables, methods,\nand blocks that belong to the class, rather than to an instance of the\nclass. This allows these elements to be shared by all instances of the\nclass and to be accessed without creating an instance of the class.\nWhat is the difference between static variable and an\ninstance variables?\nStatic variables and instance variables are both types of variables\nused in programming, but they differ in their scope and lifetime.\nStatic variables are declared using the \"static\" keyword and are\nshared across all instances of a class. They are initialized only once,\nwhen the class is loaded, and retain their value throughout the\nexecution of the program. Static variables are typically used to store\ndata that is common to all instances of a class, such as a constant or\na count of objects created.\nInstance variables, on the other hand, are declared without the\n\"static\" keyword and are unique to each instance of a class. They\nare initialized when an object is created and are destroyed when the\nobject is destroyed. Instance variables are typically used to store\ndata that is specific to each instance of a class, such as the name or\nage of a person.\nIn summary, the main differences between static variables and\ninstance variables are:\nScope: Static variables have class scope, while instance variables\nhave object scope.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 59,
          "text": "Lifetime: Static variables are initialized once and retain their value\nthroughout the execution of the program, while instance variables\nare created and destroyed with the objects they belong to.\nUsage: Static variables are used to store data that is common to all\ninstances of a class, while instance variables are used to store data\nthat is specific to each instance of a class.\nWhat is Covariant type?\nCovariant type refers to the ability to use a subclass type in place of\nits superclass type. In other words, it allows a subclass to be used in\nplace of its superclass. This feature is supported by some\nprogramming languages such as Java and C#.\nFor example, if class B is a subclass of class A, then an object of\nclass B can be used wherever an object of class A is expected.\nHere is an example in Java:\nclass A { }\nclass B extends A { }\nA a = new A();\nB b = new B();\na = b; // valid\nIn the above example, the variable \"a\" is of type A, and the variable\n\"b\" is of type B. However, the assignment \"a = b\" is valid, because B\nis a subclass of A.\nCovariant return types allow a method to return a subclass type in\nplace of its superclass type.\nclass A { }\nclass B extends A { }\nclass C {\nA getA() { return new A(); }\nB getB() { return new B(); }",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 60,
          "text": "}\nIn the above example, the method getA() returns an object of type\nA, and the method getB() returns an object of type B. Because B is a\nsubclass of A, the method getB() can be overridden to return B\ninstead of A.\nIn summary, Covariant type refers to the ability to use a subclass\ntype in place of its superclass type, this feature is supported by\nsome programming languages such as Java and C#. It allows a\nsubclass to be used in place of its superclass and covariant return\ntypes allow a method to return a subclass type in place of its\nsuperclass type.\nCan Java interface have no method in it?\nAn interface without any methods is called a \"marker interface\". It is\nused to mark a class as having some specific behavior or property,\nwithout specifying any methods for that behavior or property.\nFor example, the Serializable interface in Java has no methods:\npublic interface Serializable {\n}\nHowever, classes that implement the Serializable interface gain the\nability to be serialized and deserialized, which is the behavior that\nthe Serializable marker interface indicates.\nHere's an example of using a marker interface:\nIn this example, we define a marker interface MyMarkerInterface\nwith no methods. We then define a class MyClass that implements\nthe MyMarkerInterface interface. This indicates that MyClass has\nsome specific behavior or property that is indicated by the\nMyMarkerInterface marker interface. However, since\nMyMarkerInterface has no methods, MyClass does not need to\nimplement any methods as a result of implementing the\nMyMarkerInterface interface.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 61,
          "text": "What are the exception rules for overriding?\nWhen overriding a method in Java, there are some rules that must\nbe followed regarding exceptions:\nThe overriding method can throw the same exceptions as the\noverridden method, or any subset of those exceptions.\nThe overriding method can also throw unchecked exceptions, even if\nthe overridden method does not.\nThe overriding method cannot throw checked exceptions that are\nnot in the same class hierarchy as the exceptions thrown by the\noverridden method. This means that the overriding method cannot\nthrow checked exceptions that are more general than those thrown\nby the overridden method. However, it can throw more specific\nchecked exceptions or unchecked exceptions.\nIf the overridden method does not throw any exceptions, the\noverriding method cannot throw checked exceptions.\nHere's an example to illustrate these rules:\nclass Parent {\nvoid foo() throws IOException {\n// implementation goes here\n}\n}\nclass Child extends Parent {\n// this is a valid override\nvoid foo() throws FileNotFoundException {\n// implementation goes here\n}   \n// this is not a valid override\nvoid foo() throws Exception {\n// implementation goes here\n}   ",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 62,
          "text": "// this is a valid override\nvoid foo() throws RuntimeException {\n// implementation goes here\n}   \n// this is not a valid override\nvoid foo() throws SQLException {\n// implementation goes here\n}   \n// this is a valid override, since it does not throw any exceptions\nvoid foo() {\n// implementation goes here\n}\n}\nIn this example, Parent has a method foo() that throws an\nIOException. Child overrides this method and follows the rules for\nexception handling:\nThe first override is valid, since FileNotFoundException is a subclass\nof IOException.\nThe second override is not valid, since Exception is a more general\nexception than IOException.\nThe third override is valid, since RuntimeException is an unchecked\nexception and can be thrown even if the overridden method does\nnot throw any exceptions.\nThe fourth override is not valid, since SQLException is not in the\nsame class hierarchy as IOException.\nThe fifth override is valid, since it does not throw any exceptions.\nWhat are the different types of access modifiers?\nThere are four types of access modifiers in Java:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 63,
          "text": "public: The public access modifier is the most permissive access\nlevel, and it allows access to a class, method, or variable from any\nother class, regardless of whether they are in the same package or\nnot.\nprotected: The protected access modifier allows access to a class,\nmethod, or variable from within the same package, as well as from\nany subclass, even if they are in a different package.\ndefault (no modifier): If no access modifier is specified, then the\nclass, method, or variable has package-level access. This means that\nit can be accessed from within the same package, but not from\noutside the package.\nprivate: The private access modifier is the most restrictive access\nlevel, and it allows access to a class, method, or variable only from\nwithin the same class. It cannot be accessed from any other class,\neven if they are in the same package.\nHere is an example of how access modifiers can be used:\npublic class MyClass {\npublic int publicVar;\nprotected int protectedVar;\nint defaultVar;\nprivate int privateVar;   \npublic void publicMethod() {\n}  \nprotected void protectedMethod() {\n}   \nvoid defaultMethod() {\n}   \nprivate void privateMethod() {\n}\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 64,
          "text": "In this example, the MyClass class has four instance variables and\nfour instance methods, each with a different access modifier. The\npublicVar and publicMethod() can be accessed from any other class,\nwhile protectedVar and protectedMethod() can be accessed from any\nsubclass and from within the same package. defaultVar and\ndefaultMethod() can be accessed from within the same package\nonly, while privateVar and privateMethod() can be accessed only\nfrom within the same class.\nWhat is the difference between private and protected access\nmodifiers?\nThe main difference between private and protected access modifiers\nin Java is that private members are only accessible within the same\nclass, while protected members are accessible within the same class\nand its subclasses, as well as within the same package.\nHere are some more differences between private and protected:\nVisibility: Private members are only visible within the same class,\nwhile protected members are visible within the same class and its\nsubclasses, as well as within the same package.\nAccess: Private members cannot be accessed outside the class, while\nprotected members can be accessed by subclasses and other classes\nin the same package.\nInheritance: Private members are not inherited by subclasses, while\nprotected members are inherited by subclasses.\nOverriding: Private members cannot be overridden in subclasses,\nwhile protected members can be overridden in subclasses.\nHere is an example to illustrate the difference between private and\nprotected access modifiers:\npublic class MyClass {\nprivate int privateVar;\nprotected int protectedVar;   \npublic void myMethod() {\nprivateVar = 1; // OK, can be accessed within the same class",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 65,
          "text": "protectedVar = 2; // OK, can be accessed within the same\nclass\n}\n}\npublic class MySubclass extends MyClass {\npublic void mySubMethod() {\n// privateVar = 3; // Error, cannot be accessed in subclass\nprotectedVar = 4; // OK, can be accessed in subclass\n}\n}\npublic class MyOtherClass {\npublic void myOtherMethod() {\nMyClass obj = new MyClass();\n// obj.privateVar = 5; // Error, cannot be accessed outside\n//the class\n// obj.protectedVar = 6; // Error, cannot be accessed //outside\nthe package or subclass\n}\n}\nIn this example, we have a class MyClass with a private variable\nprivateVar and a protected variable protectedVar. The myMethod()\nmethod of MyClass can access both variables. We also have a\nsubclass MySubclass of MyClass, which can access the protectedVar\nvariable, but not the privateVar variable. Finally, we have another\nclass MyOtherClass, which cannot access either variable, because\nthey are not visible outside the class or its package.\nWhat is the use of protected members?\nProtected members in Java are used to provide access to class\nmembers within the same package and to subclasses of the class,\neven if they are in a different package. The protected access",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 66,
          "text": "modifier is more restrictive than public, but less restrictive than\nprivate.\nThe protected access modifier is useful when you want to expose\ncertain methods or variables to subclasses, while still hiding them\nfrom other classes in the same package or outside the package. For\nexample, you might have a superclass with some variables and\nmethods that are not intended to be used outside the class or\npackage, but should be accessible to subclasses. In this case, you\ncan declare those variables and methods as protected.\nHere is an example of how protected members can be used:\npackage com.example.package1;\npublic class Superclass {\nprotected int protectedVar;\nprotected void protectedMethod() {\n// ...\n}\n}\npackage com.example.package2;\nimport com.example.package1.Superclass;\npublic class Subclass extends Superclass {\npublic void someMethod() {\nprotectedVar = 42;\nprotectedMethod();\n}\n}\nIn this example, we have two packages, com.example.package1 and\ncom.example.package2. Superclass is defined in package1, and has\na protected variable protectedVar and a protected method\nprotectedMethod(). Subclass is defined in package2 and extends",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 67,
          "text": "Superclass. In the someMethod() method of Subclass, we can access\nprotectedVar and protectedMethod() from Superclass, even though\nthey are protected, because Subclass is a subclass of Superclass.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 68,
          "text": "CHAPTER 3: CORE JAVA\nThis chapter deals with Core Java Interview question, All the\nquestions that I am writing here throughout the books are really\nimportant. These are the question those are appeared in an\ninterview.\nEven with questions you will get the idea like which topic is\nimportant and which is not. As an interviewee we should be\nfocussing on the hot topics to prepare better.\nIn Core Java, these topics are most important.\nString\nCollection framework (HashMap, Concurrent HashMap)\nConcepts of immutability\nException\nSerialization\nGarbage collectors\nMultithreading\nExecutor Framework\nLambdas\nStream\nJava 8 all new features\nOptional\nFunctional interface\nWhat is JIT in java?\nJIT stands for \"Just-In-Time\" compiler in Java. It is a feature of the\nJava Virtual Machine (JVM) that improves the performance of Java\napplications by compiling bytecode into native machine code at\nruntime. The JIT compiler examines the bytecode of a method and\ncompiles it into machine code if it determines that the method is\nexecuted frequently. This allows for faster execution of the compiled\ncode, rather than interpreting the bytecode each time it is executed.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 69,
          "text": "What is the difference between abstract and interface\nkeyword in java?\nIn Java:\n1. abstract: keyword is used to define an abstract class, which can\nhave both abstract and concrete methods. Abstract classes can have\ninstance variables and constructors.\n2. interface: keyword is used to declare an interface, which can only\ncontain abstract method signatures and constants (public static final\nfields). Interfaces cannot have instance variables or constructors.\n \nWhat is the difference between Static method and Default\nmethods in Java 8?\nIn Java 8 and later versions, interfaces can have two types of\nmethods: default and static methods.\nA default method in an interface provides a default implementation\nfor the method, which is used when no implementation is provided\nby a class that implements the interface. Default methods are\nmarked with the default keyword, and can be overridden by a class\nthat implements the interface. They are useful for adding new\nmethods to an interface without breaking the existing\nimplementations of that interface.\nA static method in an interface is a method that is associated with\nthe interface itself, rather than with any particular instance of the\ninterface. Static methods are marked with the static keyword, and\ncan be called directly on the interface, without the need for an\ninstance of the interface. They are useful for providing utility\nmethods related to the interface.\nHere are some key differences between static and default methods\nin Java interfaces:\nA default method is an instance method, while a static method is a\nclass method.\nA default method can be overridden by a class that implements the\ninterface, while a static method cannot be overridden.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 70,
          "text": "Default methods can access instance variables of the implementing\nclass, while static methods cannot.\nDefault methods can be called using an instance of the\nimplementing class, while static methods can be called directly on\nthe interface.\nStatic methods cannot access instance variables or methods of the\nimplementing class, while default methods can.\nIn general, default methods are used to add new functionality to an\ninterface, while static methods are used to provide utility methods\nthat are related to the interface.\nHow to create an Object in java? Explain Different ways to\ndo it.\nIn Java, an object is an instance of a class and can be created using\nthe new keyword. The new keyword is used to create an object of a\nclass by calling its constructor. Here's an example:\npublic class MyClass {\npublic MyClass() {\n// constructor implementation\n}\n}\nMyClass myObject = new MyClass();\nIn this example, MyClass is the class and myObject is the object that\nis created using the new keyword and calling the constructor of the\nclass MyClass(). Once an object is created, you can use it to call\nmethods and access fields of the class.\nIt's also possible to create an object using the Class.forName()\nmethod, which returns the Class object associated with the class or\ninterface with the given string name. With the Class object, you can\ncreate an instance of the class using the newInstance() method.\nClass<?> myClass = Class.forName(\"com.example.MyClass\");\nMyClass myObject = (MyClass) myClass.newInstance();",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 71,
          "text": "It's worth mentioning that when an object is created, the memory\nfor the object is allocated on the heap, and the object's constructor\nis called to initialize the object's state. When the object is no longer\nbeing used, the memory for the object is reclaimed by the garbage\ncollector.\nHow to create an immutable class?\nTo make a class immutable, you need to ensure that its state cannot\nbe modified once it has been initialized. Here are some steps to\ncreate an immutable class:\n1.  Declare all instance variables as private and final.\n2.  Provide only getter methods for the instance variables,\nand make sure they only return the value without allowing\nmodification.\n3.  Do not provide any setter methods or any other methods\nthat can modify the state of the object.\n4.  Ensure that the class cannot be subclassed by declaring it\nas final or making its constructor private.\nHere is an example of an immutable class:\npublic final class ImmutableClass {\nprivate final String name;\nprivate final int age;\npublic ImmutableClass(String name, int age) {\nthis.name = name;\nthis.age = age;\n}\npublic String getName() {\nreturn name;\n}\npublic int getAge() {\nreturn age;",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 72,
          "text": "}\n}\nHow to restrict object creation in java?\nIn Java, there are several ways to restrict the creation of objects:\nMaking the constructor private: By making the constructor\nprivate, the class can only be instantiated within the class. This\nmeans that the object of the class cannot be created by any other\nclass.\npublic class MyClass {\nprivate MyClass() {\n// constructor implementation\n}\n}\nUsing the singleton pattern: This pattern is used to create a\nsingle instance of a class, and the same instance is returned every\ntime the class is instantiated.\npublic class MySingleton {\nprivate static MySingleton instance = null;\nprivate MySingleton() {\n// constructor implementation\n}\npublic static MySingleton getInstance() {\nif (instance == null) {\ninstance = new MySingleton();\n}\nreturn instance;\n}\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 73,
          "text": "Using an abstract class or an interface: An abstract class or an\ninterface cannot be instantiated, so objects of an abstract class or\ninterface cannot be created.\nabstract class MyAbstractClass {\n// class implementation\n}\ninterface MyInterface {\n// interface methods\n}\nUsing a factory method: A factory method is a method that\ncreates and returns an object of a class. This method can be used to\ncreate an object of a class only if certain conditions are met.\npublic class MyFactory {\npublic static MyClass createMyClass(String parameter) {\n}\nHow to create a custom class loader in java?\nIn Java, a class loader is responsible for loading classes into the JVM\nat runtime. The JVM includes several built-in class loaders, such as\nthe bootstrap class loader and the system class loader. In some\ncases, you may need to create a custom class loader to load classes\nfrom a specific location or with specific characteristics. Here's an\nexample of how to create a custom class loader:\npublic class MyClassLoader extends ClassLoader {\npublic MyClassLoader(ClassLoader parent) {\nsuper(parent);\n}\npublic Class loadClass(String name) throws\nClassNotFoundException {\ntry {\n// Get the bytes of the class",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 74,
          "text": "byte[] classBytes = loadClassBytes(name);\nif (classBytes == null) {\nthrow new ClassNotFoundException();\n}\n// Define the class using the bytes\nreturn defineClass(name, classBytes, 0, classBytes.length);\n} catch (IOException e) {\nthrow new ClassNotFoundException(\"Could not load class \"\n+ name, e);\n}\n}\nprivate byte[] loadClassBytes(String name) throws IOException {\n// Code to load the class bytes from a specific location\n// and return the bytes as a byte[]\n}\n}\nIn this example, the MyClassLoader class extends the ClassLoader\nclass and overrides the loadClass method. The loadClass method\nuses the loadClassBytes method to load the class bytes from a\nspecific location and then calls the defineClass method to define the\nclass using the bytes.\nTo use the custom class loader, you can create an instance of the\nMyClassLoader class and use the loadClass method to load the class:\nMyClassLoader myClassLoader = new MyClassLoader(getParent());\nClass myClass = myClassLoader.loadClass()\nCan we write the main method without static?\nIn Java, the main method is the entry point of the program, and is\ntypically declared as \"public static void main(String [] args)\". The\nkeyword \"static\" is used to indicate that the main method is a class\nmethod and can be called without creating an instance of the class.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 75,
          "text": "It's possible to write the main method without the static keyword,\nbut in order to call it, you would need to create an instance of the\nclass first, then call the main method on that instance.\nclass Main {\npublic void main(String [] args) {\n// code\n}\n}\nyou would need to create an instance of Main to call the main\nmethod like this:\nMain main = new Main();\nmain.main(args);\nIt's not typical to use main method without static keyword, as it's\nnot the standard way of running the program and also it will cause\nconfusion among developers.\n \nExplain the diamond problem in java and how to resolve it.\nThe Diamond problem in Java is a problem that arises when a class\ninherits from multiple classes that have a common base class. This\nproblem occurs because Java does not support multiple inheritance\nof classes, but it allows a class to inherit from multiple interfaces. \nclass A {\npublic void method1() {\n// implementation\n}\n}\ninterface B extends A {\npublic void method2();\n}\ninterface C extends A {\npublic void method3();\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 76,
          "text": "class D Implements B, C {\n// implementation\n}\nHere, class D inherits from both interfaces B and C, which both\ninherit from class A. If class A defines a method named method1, it\nis unclear which version of method1 should be inherited by class D,\nsince it could inherit it from either B or C.\nThis problem is known as the Diamond problem because of the\nshape of the inheritance diagram, which looks like a diamond.\nThere are several ways to solve the diamond problem in Java:\nExplicitly specifying which method to inherit: You can explicitly\nspecify which method to inherit by using the super keyword. For\nexample, you can inherit method1 from class A using the following\ncode:\nclass D Implements B, C {\npublic void method1() {\nsuper.A.method1();\n}\n// implementation\n}\nProviding an implementation of the common method in the sub-\nclass: You can provide an implementation of the common method in\nthe sub-class, which will override any implementation provided by\nthe super-class or interfaces.\nUsing Interfaces: In case of interfaces, Java 8 has introduced a\nfeature called 'default' methods which solves the diamond problem,\nit allows the interface to provide a default implementation of the\nmethod, so that the implementing class can either use the default\nimplementation or provide its own implementation.\nIt's important to notice that the Diamond problem is specific to class\ninheritance and not interfaces, as interfaces do not have",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 77,
          "text": "implementation, they only have method signatures, this problem is\nsolved by default methods, as the class can use any implementation\nof the method provided by the interfaces or can provide its own\nimplementation.\n \nHow to write a wrapper class in java?\nA wrapper class in Java is a class that wraps (or \"encapsulates\") a\nprimitive data type, such as an int or a double, and provides\nadditional functionality that is not available with the primitive data\ntype. The wrapper classes in Java are located in the java.lang\npackage and are named after the primitive data type they wrap, with\nthe first letter capitalized.\nHere is an example of how to write a wrapper class for the int data\ntype:\npublic class IntWrapper {\nprivate int value;\npublic IntWrapper(int value) {\nthis.value = value;\n}\npublic int getValue() {\nreturn value;\n}\npublic void setValue(int value) {\nthis.value = value;\n}\npublic void increment() {\nvalue++;\n}\npublic void decrement() {\nvalue--;",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 78,
          "text": "}\npublic String toString() {\nreturn Integer.toString(value);\n}\n}\nIn the above example, the IntWrapper class wraps an int variable,\ncalled \"value\", and provides additional functionality such as\nincrement() and decrement() methods that can be used to\nincrement or decrement the value, and a toString() method that\nreturns a string representation of the value.\nHere's an example of how to use the IntWrapper class:\nIntWrapper iw = new IntWrapper(5);\nSystem.out.println(iw.getValue()); // 5\niw.increment();\nSystem.out.println(iw.getValue()); // 6\nSystem.out.println(iw); // 6\nIt's worth noting that Java provides wrapper classes for all of the\nprimitive data types like int, char, double, boolean, etc. These\nclasses are called as Integer, Character, Double, Boolean etc. These\nclasses have additional functionalities that we can use like parseInt,\nparseDouble etc.\nIn summary, a wrapper class in Java is a class that wraps a primitive\ndata type, such as an int or a double, and provides additional\nfunctionality that is not available with the primitive data type, you\ncan write a wrapper class by creating a class with variable of\nprimitive type, and adding additional functionality to the class and\nuse it as per requirement.\nHow does HashMap work internally?\nA HashMap in Java is a data structure that stores key-value pairs and\nis implemented using a hash table. It uses a hash function to map",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 79,
          "text": "keys to indices in an array, called a bucket. The hash function takes\na key as input and returns an index, called a hash code, which is\nused to determine the location of the key-value pair in the bucket.\nInternally, a HashMap consists of an array of Entry objects, where\neach Entry object stores a key-value pair and a reference to the next\nEntry object in the same bucket. When a key-value pair is added to\nthe HashMap, the hash function is used to calculate the hash code of\nthe key, which is used to determine the index of the bucket in the\narray. If there is no Entry object at that index, a new Entry object is\ncreated and added to the array. If there is already an Entry object at\nthat index, the new key-value pair is added to the linked list of Entry\nobjects at that index.\nWhen a key-value pair is retrieved from the HashMap, the hash\nfunction is used to calculate the hash code of the key, which is used\nto determine the index of the bucket in the array. The linked list of\nEntry objects at that index is then searched for the key-value pair\nthat has the same key as the one being retrieved.\nThe HashMap uses an array and linked list, which allows for\nconstant-time O(1) performance for basic operations like put() and\nget() in an average case, and O(n) in the worst case when there's a\nhigh number of collisions. The load factor is a metric that determines\nwhen the HashMap should resize the array to maintain good\nperformance. The default load factor is 0.75, which means that\nwhen the number of key-value pairs in the HashMap exceeds 75% of\nthe size of the array, the array is resized to prevent excessive\ncollisions.\n \nExplain the internal implementation of HashMap.\nHashMap is a popular data structure in Java known for its efficient\nkey-value storage and retrieval. Understanding its internal\nimplementation can shed light on its performance characteristics and\ntrade-offs. Here's a breakdown:\nKey Components:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 80,
          "text": "Hash Table: HashMap uses an array of buckets called a hash table\nto store key-value pairs. The size of this array plays a crucial role in\nperformance.\nNodes: Each key-value pair is stored in a \"Node\" object. This node\ncontains the key, value, hashcode of the key, and a reference to the\nnext node (for collision resolution).\nHash Function: This function converts the key into an integer\nindex within the hash table range. A good hash function minimizes\ncollisions, where multiple keys map to the same index.\nCollision Resolution Strategy: When collisions occur, HashMap\nemploys a strategy to store additional nodes at the same index.\nCommon strategies include chaining (using linked lists) and open\naddressing (probing for empty slots).\nSteps involved in operations:\nput(key, value):\nCalculate the hashcode of the key.\nUse the hash function to find the corresponding index in\nthe hash table.\nIf no nodes exist at that index, add a new node with the\nkey-value pair.\nIf a collision occurs:\n1.  Chaining: Add the new node to the linked list at the\nindex.\n2.  Open addressing: Probe for an empty slot nearby\nusing a specific strategy.\nget(key):\nCalculate the hashcode of the key.\nUse the hash function to find the corresponding index in\nthe hash table.\nTraverse the linked list (if chaining) or probe for the\nmatching key (open addressing).",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 81,
          "text": "If the key is found, return the associated value. Otherwise,\nreturn null.\nImportant:\nHashMap performance relies heavily on a good hash\nfunction and efficient collision resolution.\nChaining is generally preferred for smaller HashMaps due\nto its simplicity, while open addressing can be faster for\nlarger ones with a well-chosen probing strategy.\nThe load factor (number of entries divided by the table\nsize) affects performance. Rehashing occurs when the\nload factor exceeds a threshold, dynamically resizing the\ntable to maintain efficiency.\n \nWhich Classes are eligible to be used inside the resource\nblock?\nThe try-with-resources statement is a feature introduced in Java 7\nthat allows you to automatically close resources that are declared in\nthe try-block. This eliminates the need for a finally block to close the\nresources and ensures that the resources are closed even if an\nexception is thrown.\nTo use the try-with-resources statement, a class must implement the\nAutoCloseable interface. The AutoCloseable interface has a single\nmethod close() which is called when the try block exits.\nThe following classes are eligible to be used inside the resource\nblock:\nAny class that implements the AutoCloseable interface, such as:\nFileInputStream, FileOutputStream, BufferedReader, BufferedWriter,\nScanner, PrintWriter, Connection, Statement.\n \nHow does HashSet works internally?\nA HashSet is a collection class in Java that implements the Set\ninterface. It stores a collection of unique elements, which means",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 82,
          "text": "that it does not allow duplicate elements. The HashSet class\ninternally uses a HashMap to store the elements.\nWhen an element is added to the HashSet, it is first passed through\na hash function which calculates a unique hash code for the\nelement. This hash code is used as the key in the underlying\nHashMap, and the element is used as the value.\nWhen an element is retrieved from the HashSet, the hash code of\nthe element is calculated and used to look up the corresponding\nvalue in the underlying HashMap. If the value is found, it is returned,\notherwise, it means the element is not present in the HashSet.\nThe HashSet class uses the equals() method to compare the\nelements for equality. When an element is added to the HashSet, the\nHashSet calls the equals() method to check if the element is already\npresent in the HashSet. If the element is already present, it is not\nadded to the HashSet, otherwise, it is added to the HashSet.\nThe HashSet class also uses the hashCode() method to determine\nthe position of an element in the underlying HashMap. The\nhashCode() method returns an integer value, which is used as the\nindex of the element in the HashMap.\nIt's important to notice that the performance of HashSet depends on\nthe implementation of the hashCode() method. If the hashCode()\nmethod is implemented poorly, it could lead to many elements being\nstored in the same bucket, which can cause performance issues.\nIt's also worth mentioning that the HashSet is not thread-safe, if\nmultiple threads are accessing a HashSet at the same time, it's\nnecessary to use synchronization or other thread-safe collections like\nConcurrentHashSet.\n \nWhat is the difference between HashMap and HashTable?\nIn Java, both HashMap and Hashtable are used to store key-value\npairs, but they have some key differences:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 83,
          "text": "Synchronization: Hashtable is synchronized, which means that all\nits methods are thread-safe. This means that only one thread can\naccess a Hashtable at a time. On the other hand, HashMap is not\nsynchronized, which means that multiple threads can access a\nHashMap at the same time. This can lead to better performance but\nalso to data inconsistencies if not used properly.\nHashtable<String, String> table = new Hashtable<>();\nHashMap<String, String> map = new HashMap<>();\nNull Keys and Values: Hashtable does not allow null keys or values, it\nwill throw NullPointerException if you try to insert a null key or value\ninto a Hashtable. While HashMap allows one null key and multiple\nnull values.\nIteration: Hashtable's enumerator is not fail-fast, while HashMap's\niterator is fail-fast. Fail-fast means that if the HashMap is modified\nwhile an iteration over the HashMap is in progress in any way except\nthrough the iterator's own remove method, the iterator will throw a\nConcurrentModificationException.\nPerformance: Hashtable is slower than HashMap because it is\nsynchronized, while HashMap is faster because it is not\nsynchronized.\nLegacy: Hashtable is a legacy class and was introduced in the first\nversion of Java, while HashMap was introduced in Java 2.\nIn general, HashMap is a better choice than Hashtable when you\ndon't need thread-safety and need faster performance, and when\nyou need to use null keys or values. While Hashtable is good when\nyou need thread-safety, but the performance is slower than\nHashMap.\nIt's important to notice that since Java 5, ConcurrentHashMap is the\nrecommended alternative for a thread-safe Hashtable and its\nperformance is much better.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 84,
          "text": "What is the difference between HashMap and Linked-\nHashMap?\nHashMap and LinkedHashMap are two different implementations of\nthe Map interface in Java.\nHashMap is an implementation of the Map interface that uses a hash\ntable to store the key-value pairs. It provides constant-time\nperformance for most operations, such as put(), get(), and\ncontainsKey(). However, the order of the elements in a HashMap is\nnot guaranteed, and may vary between different runs of the\napplication.\nLinkedHashMap is a subclass of HashMap that maintains a linked list\nof the entries in the map, in the order in which they were added. It\nprovides a predictable iteration order, which is the order in which the\nentries were added to the map. LinkedHashMap is slightly slower\nthan HashMap because it maintains a doubly-linked list to maintain\nthe order of elements.\nHere are some key differences between HashMap and\nLinkedHashMap:\nOrder of elements: HashMap does not guarantee the order of the\nelements, while LinkedHashMap maintains the order of elements in\nwhich they were inserted.\nPerformance: HashMap provides better performance than\nLinkedHashMap due to fewer overheads of maintaining order.\nIteration: LinkedHashMap provides predictable iteration order while\niteration order in HashMap is not guaranteed.\nNull keys and values: Both HashMap and LinkedHashMap allow null\nkeys and values.\nMemory consumption: LinkedHashMap uses more memory than\nHashMap due to additional overhead of maintaining the linked list.\nIn summary, if you require a predictable iteration order or need to\nmaintain the order in which elements were added to the map, use",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 85,
          "text": "LinkedHashMap. Otherwise, use HashMap, which provides better\nperformance and lower memory consumption.\nWhat is the difference between HashMap and\nConcurrentHashmap?\nHashMap and ConcurrentHashmap are both used to store key-value\npairs, but they have some key differences:\nSynchronization: HashMap is not synchronized, which means that\nmultiple threads can access a HashMap at the same time. This can\nlead to better performance but also to data inconsistencies if not\nused properly. On the other hand, ConcurrentHashmap is thread-\nsafe, which means that all its methods are thread-safe. This means\nthat only one thread can access a ConcurrentHashmap at a time,\nand it will not throw ConcurrentModificationException if one thread is\niterating over it while another thread modifies it.\nHashMap<String, String> map = new HashMap<>();\nConcurrentHashMap<String, String> cmap = new\nConcurrentHashMap<>();\nPerformance: HashMap is faster than ConcurrentHashMap because it\nis not synchronized, while ConcurrentHashMap is slower because it is\nthread-safe.\nConcurrent Operations: ConcurrentHashMap is designed to support\nhigh-concurrency and it can be used in multi-threaded environments\nwhere multiple threads can read and write to it simultaneously.\nHashMap is not designed to support high-concurrency, and it's not\nsuitable to be used in multi-threaded environments.\nIteration: HashMap's iterator is fail-fast, while ConcurrentHashMap's\niterator is weakly consistent. Fail-fast means that if the HashMap is\nmodified while an iteration over the HashMap is in progress in any\nway except through the iterator's own remove method, the iterator\nwill throw a ConcurrentModificationException. Weakly consistent\nmeans that the iterator may reflect some, but not necessarily all, of\nthe changes made to the map since the iterator was created.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 86,
          "text": "Legacy: HashMap is a legacy class and was introduced in the first\nversion of Java, while ConcurrentHashMap was introduced in Java 5.\nIn general, ConcurrentHashMap is a better choice than HashMap\nwhen you need thread-safety and when you need to use the map in\na multi-threaded environment. While HashMap is good when you\ndon't need thread-safety and need faster performance.\n \nCan we insert the null key in the HashMap and HashTable?\nIn Java, both HashMap and Hashtable allow you to insert a null key.\nHowever, it is not recommended to use null keys in a HashMap or\nHashtable, as it can lead to unexpected behavior and errors.\nWhen a null key is used in a HashMap, the hashCode() method of\nthe key returns 0, which is used to determine the index of the\nbucket in the array. All the keys that have a hashCode() of 0 will be\nstored in the same bucket, and this can lead to collisions and poor\nperformance.\nWhen a null key is used in a Hashtable, the hashCode() method of\nthe key returns 0, which is used to determine the index of the\nbucket in the array. All the keys that have a hashCode() of 0 will be\nstored in the same bucket, and this can lead to collisions and poor\nperformance.\nIt's important to notice that even though it's allowed to insert null\nkeys in a HashMap and Hashtable, it's not a good practice, since it\ncan lead to unexpected behavior and errors. Instead, it's\nrecommended to use a sentinel value or a special object as a key to\nrepresent a null value, and handle it in a specific way.\n \nHow to create an immutable map in Java?\nIn Java, there are several ways to create an immutable map:\nUsing the Collections.unmodifiableMap() method: This method\nreturns an unmodifiable view of the specified map. Any attempt to\nmodify the map will throw an UnsupportedOperationException.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 87,
          "text": "Map<String, String> map = new HashMap<>();\nmap.put(\"key1\", \"value1\");\nmap = Collections.unmodifiableMap(map);\nUsing the Map.of() method: Java 9 introduced the Map.of() method,\nwhich creates an immutable map of the specified key-value pairs.\nMap<String, String> map = Map.of(\"key1\", \"value1\", \"key2\",\n\"value2\");\nUsing the Map.ofEntries() method: Java 9 also introduced the\nMap.ofEntries() method, which creates an immutable map from the\nspecified entries.\nMap<String, String> map = Map.ofEntries(\nMap.entry(\"key1\", \"value1\"),\nMap.entry(\"key2\", \"value2\")\n);\nUsing the ImmutableMap.of() method from Guava library: Google's\nGuava library provides an ImmutableMap class that has a of()\nmethod which creates an immutable map of the specified key-value\npairs.\nMap<String, String> map = ImmutableMap.of(\"key1\", \"value1\",\n\"key2\", \"value2\");\nUsing the ImmutableMap.Builder class from Guava library: You can\nalso use the ImmutableMap.Builder class to build an immutable map\nby adding key-value pairs to it.\nMap<String, String> map = new ImmutableMap.Builder<String,\nString>()\n.put(\"key1\", \"value1\")\n.put(\"key2\", \"value2\")\n.build();\nAll of the above methods will create an immutable map, which\nmeans that any attempt to modify the map will result in an",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 88,
          "text": "exception being thrown.\nWhat are the in-built immutable classes in java?\nJava provides several built-in immutable classes that are commonly\nused in programming:\nString: The String class is an immutable class that represents a\nsequence of characters. Once a String object is created, its value\ncannot be changed.\nInteger, Long, Short, Byte, Character, Double, Float: These are the\nclasses for the primitive data types int, long, short, byte, char,\ndouble and float respectively. They are also immutable classes and\nonce object of these classes is created, it's value cannot be changed.\nBigInteger and BigDecimal: These are immutable classes that\nare used to represent large integers and decimal numbers,\nrespectively.\nEnum: Enum types are classes that represent enumerated values.\nThey are also immutable classes and once an object of Enum is\ncreated, it's value cannot be changed.\nLocalDate, LocalTime, LocalDateTime, Instant: These are\nclasses from the java.time package, they represent date, time,\ndatetime and timestamp respectively. They are also immutable\nclasses and once an object of these classes is created, it's value\ncannot be changed.\nOptional: This is a class from the java.util package, it is used to\nrepresent an optional value. The Optional class is immutable, and\nonce an Optional object is created, its value cannot be changed.\nIt's important to notice that even though these classes are\nimmutable, their state can be changed when they are used as fields\nin a class, to prevent this, it's necessary to make the fields final and\nprivate.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 89,
          "text": "What is index in java? Advantages and disadvantagesin\nDatabase?\nIn Java, an index is a data structure that allows efficient lookups of\nelements in a collection or table. An index is used to speed up the\nsearch process by allowing the program to quickly locate a specific\nelement in the collection or table, rather than having to scan through\nthe entire collection or table.\nAn index can be used in many different types of data structures,\nsuch as arrays, lists, and tables. In a database, an index is used to\nimprove the performance of queries by allowing the database to\nquickly locate the rows that match a specific condition.\nThere are several types of indexes that can be used in a database,\nsuch as:\nPrimary key index: This is a unique index that is used to enforce the\nintegrity of the primary key constraint.\nUnique index: This index is used to enforce the integrity of unique\nconstraints.\nClustered index: This index determines the physical order of data in\na table. Each table can have only one clustered index.\nNon-clustered index: This index contains a copy of the indexed\ncolumn(s) along with a pointer to the actual data row. Each table\ncan have multiple non-clustered indexes.\nFull-text index: This index is used to support full-text searches.\nThe advantages of using index in a database are:\nIt improves the performance of search queries by allowing\nthe database to quickly locate the rows that match a\nspecific condition.\nIt can help to enforce the integrity of the primary key and\nunique constraints.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 90,
          "text": "It can help to improve the performance of join operations\nby allowing the database to quickly locate the related\nrows.\nThe disadvantages of using index in a database are:\nIt can increase the size of the database and reduce the\noverall performance if the index is not used properly.\nIt can increase the time required to insert, update or\ndelete data in a table as the indexes need to be updated\nas well.\nIn some cases, the index can be less efficient than a table\nscan, especially if the table is small or the percentage of\nrows that match the condition is low.\nIt's important to notice that when creating an index, it's necessary to\nconsider the trade-off between the benefits of improved query\nperformance and the costs of increased storage and update\noverhead.\n \nWhat is the difference between CompletableFuture and a\nCallable and Runnable Future?\nIn Java, there are several ways to perform\nasynchronous operations:\nCallable: A Callable is similar to a Runnable, but it can return a value\nand throw a checked exception. It can be submitted to an\nExecutorService to be executed and return a Future object. The\nFuture object can be used to check if the computation is complete,\nwait for its completion, and retrieve the result of the computation.\nCallable<Integer> myCallable = () -> {\n// perform computation\nreturn result;\n};",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 91,
          "text": "Future<Integer> future = executorService.submit(myCallable);\nRunnable: A Runnable is a task that can be executed by an Executor.\nIt does not return a value and cannot throw a checked exception. It\ncan be submitted to an ExecutorService to be executed and return a\nFuture object. The Future object can be used to check if the\ncomputation is complete and wait for its completion.\nRunnable myRunnable = () -> {\n// perform computation\n};\nFuture<?> future = executorService.submit(myRunnable);\nA CompletableFuture can be used to compose multiple asynchronous\noperations together, handle errors, and provide callbacks. It can be\nused to perform actions when the computation is complete, such as\napplying a function to the result, chaining multiple operations\ntogether, or handling errors. It also allows to create a future that is\nalready completed with a value or an exception.\n \nHow to parse XML file with JSON in java?\nParsing an XML file and converting it to JSON in Java can be done\nusing a library such as Jackson or Gson. Here's an example of how\nto do it with Jackson:\nFirst, you will need to add the Jackson library to your project. You\ncan do this by adding the following dependency to your build file:\n<dependency>\n<groupId>com.fasterxml.jackson.dataformat</groupId>\n<artifactId>jackson-dataformat-xml</artifactId>\n<version>2.11.3</version>\n</dependency>\nNext, you will need to read the XML file and convert it to an object\nusing the XmlMapper class.\nXmlMapper xmlMapper = new XmlMapper();",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 92,
          "text": "JsonNode jsonNode = xmlMapper.readTree(new\nFile(\"path/to/xml/file.xml\"));\nFinally, you can convert the JsonNode object to a JSON string using\nthe writeValueAsString() method.\nString jsonString = xmlMapper.writeValueAsString(jsonNode);\nYou can also use Gson library for this purpose, it has the feature of\nhandling both XML and JSON.\nIt's important to notice that this process is not a direct conversion\nfrom XML to JSON, it's rather parsing the XML into JsonNode object\nand then converting that object to a JSON string, this is why the\nmethod used is writeValueAsString()\nIt's also worth mentioning that some of the information from the\nXML file may not be preserved during this process, such as\ncomments, processing instructions, and text nodes that do not have\na corresponding element.\nHow to parse JSON to a HashMap?\nThere are several libraries available in Java to parse JSON to a\nHashMap, some of the most popular libraries are:\nJackson: Jackson is a popular JSON processing library for Java. It\nprovides a simple and easy-to-use API for parsing JSON to a\nHashMap. Here is an example of how to use Jackson to parse JSON\nto a HashMap:\nString jsonString = \"{\\\"name\\\":\\\"John\\\",\\\"age\\\":30}\";\nObjectMapper mapper = new ObjectMapper();\nHashMap<String, Object> map = mapper.readValue(jsonString, new\nTypeReference<HashMap<String, Object>>(){});\nGson: Gson is another popular JSON processing library for Java. It\nprovides a simple and easy-to-use API for parsing JSON to a\nHashMap. Here is an example of how to use Gson to parse JSON to\na HashMap:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 93,
          "text": "String jsonString = \"{\\\"name\\\":\\\"John\\\",\\\"age\\\":30}\";\nGson gson = new Gson();\nHashMap<String, Object> map = gson.fromJson(jsonString, new\nTypeToken<HashMap<String, Object>>(){}.getType());\norg.json: org.json is a built-in Java library for parsing and generating\nJSON. It provides a simple and easy-to-use API for parsing JSON to\na HashMap.\n \nWhat are fail-safe and fail-fast iterators?\nFail-safe iterators do not throw ConcurrentModificationException if\nthe underlying collection is modified while iterating over it. They\ncreate a snapshot of the collection at the time of iteration, so\nchanges made while iterating do not affect the iteration.\nFail-fast iterators, on the other hand, throw a\nConcurrentModificationException if the underlying collection is\nmodified while iterating over it. They check for modifications at\nevery iteration, so if a change is made, the exception is thrown\nimmediately.\nWhat is the object class in Java? what are the methods in it?\nJava JDK (Java Development Kit) provides many built-in classes with\ntheir respective methods. Some commonly used object class\nmethods in Java JDK are:\nequals(Object obj): This method compares the current object with\nthe specified object and returns true if they are equal, else it returns\nfalse.\nhashCode(): This method returns the hash code of the object. The\nhash code is a unique integer value that is used by hash-based data\nstructures such as HashMap, HashSet, etc.\ntoString(): This method returns a string representation of the object.\nIt is generally used for debugging and logging purposes.\nclone(): This method creates a new object that is a copy of the\ncurrent object. The clone() method is used to create a copy of an\nobject without modifying the original object.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 94,
          "text": "getClass(): This method returns the class of the current object. It is\nused to get the runtime class of the object.\nwait(): This method causes the current thread to wait until it is\nnotified. It is generally used in multi-threaded applications.\nnotify(): This method wakes up a single thread that is waiting on the\nobject's monitor.\nfinalize(): This method is called by the garbage collector when the\nobject is no longer referenced.\nThese are some of the commonly used object class methods in Java\nJDK. However, there are many other methods available in Java JDK\nfor different classes, and you can explore them in the Java\ndocumentation.\nWhy and how to use clone method in Java?\nThe clone() method in Java is used to create a new object that is a\ncopy of the original object. This method creates a new object with\nthe same state as the original object, i.e., it copies all the field\nvalues of the original object to the new object.\nThe clone() method is defined in the Object class and can be used to\ncreate a copy of any object, provided that the class implements the\nCloneable interface. The Cloneable interface is a marker interface,\nwhich means it does not contain any methods, but it indicates that\nthe class is cloneable.\nHere are some reasons why you may want to use the clone()\nmethod:\nTo create a backup of an object: You may want to create a backup\nof an object so that you can restore its state later if needed. The\nclone() method can be used to create a backup of an object.\nTo create a copy of an object: You may want to create a copy of an\nobject to modify its state without affecting the original object. The\nclone() method can be used to create a copy of an object.\nTo create an object with default values: You may want to create an\nobject with default values, and the clone() method can be used to",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 95,
          "text": "create an object with the same default values as the original object.\nHere's how you can use the clone() method:\nMake sure that the class implements the Cloneable interface.\nOverride the clone() method in the class.\nInside the clone() method, call the super.clone() method to create a\ncopy of the object.\nCast the returned object to the class type.\nReturn the cloned object.\nHere's an example code snippet that demonstrates how to use the\nclone() method:\nclass MyClass implements Cloneable {\nprivate int value;\npublic MyClass(int value) {\nthis.value = value;\n}\npublic void setValue(int value) {\nthis.value = value;\n}\npublic int getValue() {\nreturn value;\n}\n@Override\npublic Object clone() throws CloneNotSupportedException {\nreturn super.clone();\n}\n}\npublic class Main {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 96,
          "text": "public static void main(String[] args) throws\nCloneNotSupportedException {\nMyClass obj1 = new MyClass(10);\nMyClass obj2 = (MyClass) obj1.clone();\nSystem.out.println(\"obj1 value: \" + obj1.getValue());\nSystem.out.println(\"obj2 value: \" + obj2.getValue());\nobj2.setValue(20);\nSystem.out.println(\"obj1 value after obj2 modification: \" +\nobj1.getValue());\nSystem.out.println(\"obj2 value after modification: \" +\nobj2.getValue());\n}\n}\nIn the above example, we have created a class MyClass that\nimplements the Cloneable interface and overrides the clone()\nmethod to create a copy of the object. We have then created two\nobjects of MyClass and cloned one of them using the clone()\nmethod. We have then modified the value of the cloned object and\nchecked if it affects the original object.\nWhat parsing libraries you have used so far?\nThere are several parsing libraries available in Java that can be used\nto parse various types of data such as XML, JSON, CSV, etc. Some of\nthe popular parsing libraries in Java are:\nJackson: Jackson is a high-performance JSON parser for Java. It\ncan parse JSON data from a file or a stream and map it to Java\nobjects. It provides annotations to customize the mapping process\nand supports bidirectional mapping between JSON and Java objects.\nGson: Gson is another popular JSON parser for Java. It can parse\nJSON data into Java objects and vice versa. It also provides support\nfor custom serialization and deserialization of Java objects.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 97,
          "text": "JAXB: JAXB stands for Java Architecture for XML Binding. It is a\nframework that allows Java developers to map XML schemas to Java\nclasses. It provides tools to generate Java classes from XML schemas\nand to marshal/unmarshal XML data to/from Java objects.\nJsoup: Jsoup is a Java library for working with HTML documents. It\nprovides a simple API to parse HTML documents and extract\ninformation from them. It also supports HTML cleaning and\nmanipulation.OpenCSV: OpenCSV is a CSV parsing library for Java. It\ncan read and write CSV files and provides support for custom\nmapping between CSV fields and Java objects.\nApache Tika: Apache Tika is a content detection and analysis\nframework for Java. It can detect the content type of a file and\nparse its contents into a structured format. It supports parsing of\nvarious file formats such as PDF, HTML, XML, Microsoft Office\ndocuments, etc.\nThese are some of the popular parsing libraries in Java that can be\nused to parse various types of data. The choice of a parsing library\ndepends on the specific requirements and the data format being\nparsed.\nWhat is the difference between comparable and comparator?\nIn Java, both Comparable and Comparator are interfaces that are\nused to compare objects and establish their order in collections like\nlists or arrays. However, they serve different purposes and are used\nin different contexts:\n1. Comparable:\nThe Comparable interface is used to define the natural ordering of\nobjects. When a class implements the Comparable interface, it\nindicates that instances of that class have a default way to be\nsorted. The natural ordering is defined by implementing the\ncompareTo() method, which returns a negative integer if the current\nobject is \"less than\" the other object, zero if they are \"equal,\" and a\npositive integer if the current object is \"greater than\" the other\nobject.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 98,
          "text": "For example, consider a Person class that implements Comparable to\nsort instances based on their age:\npublic class Person implements Comparable<Person> {\nprivate String name;\nprivate int age;\n// Constructor, getters, and setters\n@Override\npublic int compareTo(Person otherPerson) {\nreturn Integer.compare(this.age, otherPerson.age);\n}\n}\nBy implementing Comparable, instances of the Person class can be\nsorted using methods like Collections.sort() or Arrays.sort() without\nneeding to provide a separate comparator.\n2. Comparator:\nThe Comparator interface, on the other hand, is used to provide\ncustom comparison logic for objects that may not have a natural\nordering or when you want to sort objects based on different criteria\nthan their inherent properties. A Comparator is a separate class that\nimplements the comparison logic. This approach allows you to have\nmultiple ways of sorting objects without modifying their original\nclass.\nFor instance, let's say you want to sort instances of the Person class\nnot only by age but also by name. You can create a separate\nNameComparator class that implements the Comparator<Person>\ninterface:\nimport java.util.Comparator;\npublic class NameComparator implements Comparator<Person> {\n@Override\npublic int compare(Person person1, Person person2) {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 99,
          "text": "return person1.getName().compareTo(person2.getName());\n}\n}\nThen, you can sort instances of Person using this NameComparator:\nList<Person> people = new ArrayList<>();\n// Add people to the list\nCollections.sort(people, new NameComparator());\nIn summary, the key differences between Comparable and\nComparator in Java are:\n- Comparable is used to define the natural ordering within a class\nitself.\n- Comparator is used to define external comparison logic for classes\nthat may not have a natural ordering or when you want to sort\nbased on different criteria. It allows you to create multiple sorting\nstrategies without modifying the original class.\nExplain the classpath exception?\nIn Java, the Classpath is a parameter that specifies the locations\nwhere the Java Virtual Machine (JVM) should look for class files that\nare needed by a running application. The Classpath can be set as an\nenvironment variable or passed as a command-line argument.\nA Classpath exception occurs when the JVM is unable to find the\nrequired class file in the specified Classpath locations. This can\nhappen for several reasons, such as:\nIncorrect Classpath: The Classpath specified may not be correct or\nmay not include the required directory or JAR file.\nMissing class files: The required class file may be missing or may\nhave been moved or deleted from the Classpath.\nIncompatible versions: The class file may be compiled with a\ndifferent version of Java than the one being used to run the\napplication, resulting in a version incompatibility error.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 100,
          "text": "Security restrictions: The JVM may be running under a security\nmanager that restricts access to the specified Classpath locations.\nPermissions issues: The user running the application may not have\nsufficient permissions to access the required Classpath locations.\nTo resolve a Classpath exception, the following steps can be taken:\nVerify the Classpath: Verify that the Classpath specified is correct\nand includes the required directory or JAR file.\nCheck for missing class files: Check if the required class file is\nmissing or has been moved or deleted.\nCheck for version compatibility: Ensure that the required class file is\ncompiled with the same version of Java as the one being used to run\nthe application.\nCheck for security restrictions: Check if the JVM is running under a\nsecurity manager that restricts access to the specified Classpath\nlocations.\nCheck permissions: Ensure that the user running the application has\nsufficient permissions to access the required Classpath locations.\nIn summary, a Classpath exception occurs when the JVM is unable to\nfind the required class file in the specified Classpath locations. This\ncan be resolved by verifying the Classpath, checking for missing\nclass files, version compatibility, security restrictions, and\npermissions issues.\nWhat is the hierarchy of exceptions?\nIn Java, exceptions are organized in a hierarchical manner, with the\njava.lang.Throwable class at the root of the hierarchy. The\nThrowable class has two direct subclasses: Error and Exception. The\nError class represents unrecoverable errors that usually occur at the\nsystem level, such as OutOfMemoryError. The Exception class\nrepresents recoverable errors and has several subclasses, such as\nRuntimeException and IOException.\nHere's a hierarchy of some of the most common exception classes in\nJava:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 101,
          "text": "Throwable\n├── Error\n│   ├── AssertionError\n│   ├── OutOfMemoryError\n│   └── StackOverflowError\n└── Exception\n├── RuntimeException\n│   ├── NullPointerException\n│   ├── IndexOutOfBoundsException\n│   ├── IllegalArgumentException\n│   ├── IllegalStateException\n│   └── ArithmeticException\n└── Checked Exceptions\n├── IOException\n├── SQLException\n└── ClassNotFoundException\nAs shown in the hierarchy above, RuntimeException and its\nsubclasses represent unchecked exceptions that do not need to be\ndeclared in a method's throws clause. All other exceptions are\nchecked exceptions, which must be declared in a method's throws\nclause or handled within the method using a try-catch block.\nIt is important to note that Java allows the creation of custom\nexception classes by extending the Exception class or one of its\nsubclasses. By doing so, developers can create their own custom\nexceptions that represent specific errors or situations in their\napplication.\nExplain Throw, Throws, and Throwable keywords in java.\nIn Java, the keywords \"throw\", \"throws\", and \"Throwable\" are used\nto handle and manage exceptions in a program:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 102,
          "text": "The \"throw\" keyword is used to explicitly throw an exception. When\na method encounters an exceptional situation and it cannot handle\nit, it can throw an exception to the calling method. This allows the\ncalling method to handle the exception in an appropriate way. The\ngeneral form of the throw statement is \"throw exception_object;\",\nwhere exception_object is an instance of a class that extends the\nThrowable class.\npublic void method() throws Exception {\nif (condition) {\nthrow new Exception(\"Exception occurred\");\n}\n}\nThe \"throws\" keyword is used in the method signature to indicate\nthat a method can throw one or more exceptions. The general form\nof the throws clause is \"throws exception_class, exception_class,...\",\nwhere exception_class is the type of exception that the method can\nthrow. It's important to notice that when a method throws an\nexception, it's not handling it, it's just indicating that it can happen.\npublic void method() throws Exception {\n// code\n}\nThe \"Throwable\" class is the parent class of all exceptions and errors\nin Java. It is the superclass of all classes that can be thrown by the\nJava Virtual Machine (JVM) or the user. The Throwable class defines\nseveral methods that can be used to print the stack trace of an\nexception, get the message of an exception, and get the cause of an\nexception.\nIn summary, \"throw\" keyword is used to throw an exception,\n\"throws\" keyword is used to indicate that a method can throw an\nexception and \"Throwable\" is the base class for all the exception and\nerrors in Java.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 103,
          "text": "What is a String in java?\nIn Java, String is a class that represents a sequence of characters. It\nis one of the most commonly used classes in Java and is included in\nthe java.lang package, which means that it is automatically imported\ninto every Java program.\nA String object can be created using a string literal or by using the\nnew keyword and a constructor. For example:\nString str1 = \"Hello, world!\";\nString str2 = new String(\"Hello, world!\");\nBoth of these statements create a String object that contains the\nsequence of characters \"Hello, world!\".\nOnce a String object is created, its value cannot be changed. In\nother words, String is an immutable class. Therefore, any operation\non a String object creates a new String object.\nThe String class provides many useful methods for manipulating\nstrings, such as charAt(), indexOf(), substring(), toUpperCase(),\ntoLowerCase(), trim(), length(), and many others.\nString objects are also widely used in Java as parameters to method\ncalls, in concatenation operations, and as return values from\nmethods.\nIn summary, String is a class in Java that represents a sequence of\ncharacters and is widely used for string manipulation and processing.\nWhy String is immutable?\nHere are the key reasons why String is immutable in Java and other\nlanguages:\n1. Security:\nStrings are often used to store sensitive information like passwords,\nURLs, and database connection strings. Immutability makes them\ntamper-proof, preventing accidental or malicious modification of\nsensitive data. This enhances security and reduces the risk of\nvulnerabilities.\n2. Caching and Performance:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 104,
          "text": "Java caches String literals in a String pool for efficient reuse. If\nStrings were mutable, changes to one String could affect other\nStrings using the same literal, leading to unpredictable behavior.\nImmutability ensures that String values remain consistent and\npredictable, even when shared across multiple references.\n3. Synchronization and Thread Safety:\nImmutable objects are inherently thread-safe, as their state cannot\nbe modified by multiple threads concurrently. This eliminates the\nneed for synchronization mechanisms (like locks) when working with\nStrings in multithreaded environments, simplifying code and\nimproving performance.\n4. Class Loading:\nJava uses String objects for class names and resource paths.\nImmutability ensures that these references remain stable and\nreliable throughout the application's lifecycle, preventing issues with\nclass loading and resource access.\n5. Use as Keys in Hash-Based Data Structures:\nStrings are commonly used as keys in hash-based data structures\nlike HashMap and HashSet. Immutability guarantees that the\nhashcode of a String remains consistent throughout its lifetime,\nmaking these data structures work correctly and efficiently.\n6. Substring Operations:\nWhile String objects themselves are immutable, Java provides\nmethods to create new String objects that are modified versions of\nexisting ones. For example, the substring() method returns a new\nString that is a portion of the original String, without altering the\noriginal object.\n7. StringBuilder and StringBuffer:\nFor scenarios where you need to modify String content frequently,\nJava offers mutable alternatives: StringBuilder (for non-thread-safe\noperations) and StringBuffer (for thread-safe operations). These",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 105,
          "text": "classes are designed for efficient String manipulation and\nmodification.\nWhere is a new string is stored?\nThe storage location of a new String depends on how it's created:\n1. String Literal Pool:\nWhen you create a String using a literal (e.g., String str = \"Hello\";),\nJava checks the String pool first.\nIf an identical String already exists in the pool, it reuses that object\nfor efficiency.\nThis means multiple variables can refer to the same String object in\nmemory, saving space.\n2. Heap Memory:\nIf the String literal doesn't exist in the pool, a new String object is\ncreated and stored in the heap memory.\nThis happens in two main cases:\nWhen you create a String using the new keyword: String str = new\nString(\"Hello\");\nWhen you modify an existing String, resulting in a new String object:\nString str2 = str.concat(\" World\");\n3. String Interning:\nYou can explicitly place a String in the pool using the intern()\nmethod: String internedStr = \"Hello\".intern();\nThis ensures that all String variables with the same content refer to\nthe same object in the pool, even if they were created with new.\nWhere do strings get stored and where does the reference\nget stored?\nStrings in Java are stored in the heap memory. The heap memory is\na region of memory that is used to store objects. When you create a\nstring object, the Java Virtual Machine (JVM) allocates space for the\nobject in the heap memory.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 106,
          "text": "The reference to the string object is stored on the stack. The stack is\na region of memory that is used to store local variables and method\nparameters. When you assign a string object to a variable, the JVM\nstores the reference to the object in the stack memory.\nHere is an example of how strings are stored in memory:\nString myString = \"Hello, world!\";\nIn this example, the string object \"Hello, world!\" is stored in the\nheap memory. The reference to the string object is stored in the\nstack memory, in the variable myString.\nThe JVM manages the heap memory and the stack memory\nautomatically. This means that you do not need to worry about\nallocating or freeing memory for string objects.\nIf you don’t want to use the String class then what is the\nalternative?\nIf you don't want to use the String class in Java, you can use the\nfollowing alternatives:\nStringBuilder: The StringBuilder class is a mutable string class that\ncan be used to create and modify strings. StringBuilder objects are\nthread-safe, meaning that they can be safely used in multithreaded\napplications.\nStringBuffer: The StringBuffer class is similar to the StringBuilder\nclass, but it is not thread-safe. StringBuffer objects are slower than\nStringBuilder objects, but they are safe to use in multithreaded\napplications.\nCharacter arrays: Character arrays can be used to represent strings.\nHowever, character arrays are not as efficient as string objects, and\nthey are more difficult to use.\nCan we create a customized immutable String class, how to\nachieve it?\nIn Java, the String class is already an immutable class, so it is not\nnecessary to create a custom String class for immutability. However,\nit is possible to create a similar custom class that is immutable.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 107,
          "text": "To create a custom immutable string class, you can follow these\nsteps:\nDefine a private final field of type String to store the string value.\nCreate a constructor that accepts a String parameter and initializes\nthe private field.\nDo not provide any setter methods that can modify the value of the\nprivate field.\nOverride the toString() method to return the value of the private\nfield.\nIf necessary, override the equals() and hashCode() methods to\nensure that objects of this class can be properly compared and used\nas keys in hash-based collections.\nHere's an example implementation of a custom immutable string\nclass:\npublic final class ImmutableString {\nprivate final String value;\npublic ImmutableString(String value) {\nthis.value = value;\n}\npublic String toString() {\nreturn value;\n}\npublic boolean equals(Object obj) {\nif (this == obj) {\nreturn true;\n}\nif (obj == null || getClass() != obj.getClass()) {\nreturn false;\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 108,
          "text": "ImmutableString other = (ImmutableString) obj;\nreturn Objects.equals(value, other.value);\n}\npublic int hashCode() {\nreturn Objects.hash(value);\n}\n}\nIn this implementation, the value field is declared as final, which\nmakes it immutable. The constructor initializes the value field using\nthe provided String parameter. The toString(), equals(), and\nhashCode() methods are overridden to ensure proper functionality.\nBy following this approach, you can create a custom class that\nbehaves similarly to the String class but is immutable.\nWhat is the difference between String, StringBuffer and\nStringBuilder?\nIn Java, String, StringBuffer, and StringBuilder are classes that are\nused to manipulate strings, but they differ in their characteristics and\nusage.\nString is an immutable class, which means that once a String object\nis created, its value cannot be changed. Therefore, any operation on\na String object creates a new object. For example, if two String\nobjects are concatenated using the + operator, a new String object\nis created. This can be inefficient if many string manipulations are\nneeded, as it creates a lot of temporary objects.\nStringBuffer and StringBuilder are mutable classes that can be used\nto perform string manipulation operations efficiently. StringBuffer\nwas introduced in Java 1.0, while StringBuilder was added in Java\n1.5. Both classes provide methods for appending, inserting, deleting,\nand replacing characters in a string.\nThe main difference between StringBuffer and StringBuilder is that\nStringBuffer is thread-safe, which means that multiple threads can\nsafely access and modify the same StringBuffer object at the same",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 109,
          "text": "time without any issues. On the other hand, StringBuilder is not\nthread-safe, and therefore should be used in single-threaded\nenvironments.\nIn summary:\nString is immutable, so any operation on a String object creates a\nnew object.\nStringBuffer and StringBuilder are mutable and provide methods for\nefficient string manipulation.\nStringBuffer is thread-safe, while StringBuilder is not.\nTherefore, String is best used for situations where the string value\nwill not change frequently, while StringBuffer or StringBuilder should\nbe used for situations where frequent string manipulations are\nrequired. If the code is running in a multi-threaded environment,\nStringBuffer should be used to avoid concurrency issues. If the code\nis running in a single-threaded environment, StringBuilder can be\nused for even better performance.\nIs StringBuffer synchronized? Where is synchronized used in\nStringBuffer?\nYes, StringBuffer is a synchronized class in Java, which means that\nits methods are thread-safe and can be accessed by multiple threads\nconcurrently without causing data inconsistency or other issues.\nIn the StringBuffer class, the synchronized keyword is used to make\nthe methods thread-safe. Specifically, the synchronized keyword is\nused to make the following methods synchronized:\nappend()\ninsert()\ndelete()\ndeleteCharAt()\nreplace()\nsubstring()\ncharAt()",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 110,
          "text": "setCharAt()\nlength()\ncapacity()\nensureCapacity()\ntrimToSize()\ntoString()\nBy making these methods synchronized, multiple threads can access\nthem safely without interfering with each other.\nIt's worth noting that in Java 5, a new class called StringBuilder was\nintroduced, which is similar to StringBuffer but is not synchronized.\nIf you do not need thread-safety, you can use StringBuilder instead\nof StringBuffer, as it can be faster in some cases. However, if you\nneed to access a mutable string from multiple threads concurrently,\nyou should use StringBuffer to ensure thread-safety.\nWhy are Java substrings bad?\nThe substring() method in Java is a useful method that is used to\nextract a portion of a string. However, it is important to use it\ncarefully to avoid potential errors and performance issues.\nOne common issue with the substring() method is that it creates a\nnew string object every time it is called. This can lead to\nperformance problems if it is called repeatedly in a loop or in\nperformance-critical code. To avoid this, you can use the\nStringBuilder or StringBuffer classes to build a string gradually\ninstead of using substring().\nAnother potential issue with substring() is that it can throw an\nIndexOutOfBoundsException if the starting index or ending index is\nout of bounds. To avoid this, you should always check the length of\nthe string before calling substring() and ensure that the indices are\nwithin the valid range.\nIt's also important to note that the substring() method returns a new\nstring object that shares the same character array as the original\nstring object. This means that if you modify the substring, it will also",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 111,
          "text": "modify the original string. To avoid this, you can create a new string\nobject from the substring.\nIn summary, the substring() method is a useful method for\nextracting a portion of a string, but it should be used carefully to\navoid potential errors and performance issues.\nWhat is a Runtime exception and how they are they\nimplemented?\nIn Java, runtime exceptions are a type of exception that can occur\nduring the execution of a program. They are not checked at compile-\ntime, and they do not need to be declared in the method signature\nusing a throws clause. Instead, they are thrown implicitly by the JVM\nwhen an error condition occurs at runtime.\nRuntime exceptions are implemented as subclasses of the\nRuntimeException class, which itself is a subclass of the Exception\nclass. Some examples of runtime exception classes in Java include\nNullPointerException, ArrayIndexOutOfBoundsException, and\nArithmeticException.\nRuntime exceptions can be caused by a variety of factors, such as\ninvalid input, incorrect usage of APIs, or unexpected conditions such\nas a divide-by-zero error. When a runtime exception occurs, the JVM\nwill throw an instance of the corresponding exception class, which\ncan then be caught and handled by the program if necessary.\nTo catch runtime exceptions in a Java program, you can use a try-\ncatch block. For example:\ntry {\n// code that may throw a runtime exception\n} catch (NullPointerException e) {\n// handle the null pointer exception\n} catch (ArrayIndexOutOfBoundsException e) {\n// handle the array index out of bounds exception\n} catch (Exception e) {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 112,
          "text": "// handle any other exception\n}\nIt's important to note that while runtime exceptions do not need to\nbe declared in the method signature, they should still be handled\nproperly in the program to avoid unexpected termination or other\nissues. \nDraw the collection hierarchy?\nIn Java, the Collection Framework is a set of classes and interfaces\nthat provides a unified architecture for storing and manipulating\ngroups of objects. The Collection Framework includes several key\ninterfaces and classes, arranged in a hierarchical manner:\nCollection: This is the top-level interface in the Collection\nFramework. It represents a group of objects and provides methods\nfor adding, removing, and querying the elements of the collection.\nThe Collection interface has two main sub-interfaces:\nList: This interface extends the Collection interface and represents\nan ordered collection of elements. List allows duplicates and\nprovides methods for accessing elements by their index.\nSet: This interface also extends the Collection interface, but it\nrepresents a collection of unique elements. Set does not allow\nduplicates and provides methods for testing whether a particular\nelement is present in the set.\nQueue: This interface extends the Collection interface and\nrepresents a collection of elements that can be accessed in a specific\norder. Queue provides methods for adding, removing, and accessing\nelements from the collection based on the order in which they were\nadded.\nMap: This interface represents a collection of key-value pairs. Map\nallows you to store and retrieve elements based on their associated\nkey. Map does not extend the Collection interface, but it is still\nconsidered part of the Collection Framework.\nThere are also several classes in the Collection Framework that\nprovide implementations of the various interfaces, such as ArrayList",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 113,
          "text": "and LinkedList for the List interface, HashSet and TreeSet for the Set\ninterface, and HashMap and TreeMap for the Map interface. These\nclasses provide different performance characteristics and are\ndesigned for different use cases.\nOverall, the Collection Framework in Java provides a powerful and\nflexible set of tools for storing and manipulating groups of objects,\nand its hierarchical structure allows for easy organization and use of\nthe various interfaces and classes.\nWhat is the difference between these syntaxes?\nList list = new Arraylist<>();\nArraylist alist = new Arraylist<>();\nBoth syntaxes create an instance of the ArrayList class in Java, but\nthey differ in the type of reference variable that is used to store the\nreference to the object.\nList list = new ArrayList<>();\nThis syntax creates a new ArrayList object and assigns it to a\nreference variable of type List. This is an example of programming to\nan interface, which is a best practice in Java. By using List instead of\nArrayList, the code becomes more flexible and easier to maintain, as\nthe implementation class can be changed without affecting the rest\nof the code.\nArrayList alist = new ArrayList<>();\nThis syntax creates a new ArrayList object and assigns it to a\nreference variable of type ArrayList. This is an example of\nprogramming to an implementation, which is generally less flexible\nthan programming to an interface. While it may be appropriate in\nsome cases to use a specific implementation class, it can make the\ncode more difficult to maintain if changes need to be made in the\nfuture.\nIn general, it's recommended to use the first syntax (List list = new\nArrayList<>();) to create instances of collection classes in Java,\nunless there is a specific reason to use the implementation class",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 114,
          "text": "directly (ArrayList alist = new ArrayList<>();). This allows for\ngreater flexibility and maintainability of the code.\nWhat collection will we use for manipulation (ArrayList or\nLinkedList)?\nArrayList and LinkedList are both implementations of the List\ninterface in Java, but they have some important differences in their\nimplementation and performance characteristics:\nData structure: ArrayList is implemented as a resizable array, while\nLinkedList is implemented as a doubly-linked list. This means that\nArrayList can access elements by index in constant time (O(1)),\nwhile LinkedList has to traverse the list to access an element, which\ntakes linear time (O(n)).\nInsertion and deletion: Insertion and deletion operations are faster\nin LinkedList because they only involve modifying the pointers of\nadjacent elements, while in ArrayList, elements have to be shifted to\nmaintain the order of the list.\nRandom access: Random access is faster in ArrayList because it can\naccess elements by index in constant time (O(1)), while LinkedList\nhas to traverse the list to access an element, which takes linear time\n(O(n)).\nMemory usage: ArrayList uses less memory than LinkedList because\nit only needs to store the elements and a backing array, while\nLinkedList needs to store the elements and pointers to the previous\nand next elements.\nIn general, ArrayList is a better choice if you need to access\nelements frequently by index and if you don't need to insert or\ndelete elements frequently. On the other hand, LinkedList is a better\nchoice if you need to insert or delete elements frequently and if you\ndon't need to access elements frequently by index.\nWhat is the use of an iterator in Java?\nIn Java, an Iterator is an interface that provides a way to iterate\nover a collection of objects, such as a List, Set, or Map. It allows you",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 115,
          "text": "to traverse the elements in a collection one by one and perform\nvarious operations on them.\nThe Iterator interface defines three methods:\nhasNext(): Returns true if there are more elements in the collection,\nand false otherwise.\nnext(): Returns the next element in the collection.\nremove(): Removes the last element returned by next() from the\ncollection.\nBy using an Iterator, you can iterate over the elements in a collection\nwithout having to know the specific implementation of the collection.\nThis makes your code more flexible and reusable.\nHere's an example of using an Iterator to iterate over the elements\nin an ArrayList:\nArrayList<String> list = new ArrayList<>();\nlist.add(\"apple\");\nlist.add(\"banana\");\nlist.add(\"cherry\");\nIterator<String> iterator = list.iterator();\nwhile (iterator.hasNext()) {\nString element = iterator.next();\nSystem.out.println(element);\n}\nThis code creates an ArrayList of strings, adds some elements to it,\nand then creates an Iterator for the list. The while loop uses the\nhasNext() and next() methods of the Iterator to iterate over the\nelements in the list and print them to the console.\nWhat is the default capacity of HashMap?\nThe default capacity of a Java HashMap is 16. This means that when\nyou create a new HashMap object without specifying a capacity, it\nwill be initialized with a capacity of 16.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 116,
          "text": "However, it's important to note that the capacity of a HashMap can\nbe increased or decreased dynamically based on the number of key-\nvalue pairs in the map and the load factor, which is another\nparameter that determines when the HashMap should resize itself.\nIf the number of key-value pairs in the HashMap grows beyond a\ncertain threshold based on the load factor, the capacity of the\nHashMap will be automatically increased to maintain efficient\nperformance. Conversely, if the number of key-value pairs in the\nmap decreases, the capacity may also be reduced to save memory.\nHow does HashMap behaves when it reaches its maximum\ncapacity?\nWhen a HashMap reaches its maximum capacity, it will automatically\nresize itself to accommodate more key-value pairs. This process is\ncalled rehashing.\nDuring rehashing, a new internal array is created with twice the\ncapacity of the original array. Each key-value pair from the old array\nis then hashed again and added to the new array at a new index,\nbased on the new array size and the hash code of the key.\nRehashing is necessary to maintain the performance of the\nHashMap. As the number of key-value pairs in the map grows, the\nlikelihood of hash collisions increases, which can slow down the\nperformance of the map. By resizing the map when it reaches its\nmaximum capacity, the likelihood of collisions is reduced, and the\nmap can continue to perform efficiently.\nHowever, rehashing can be an expensive operation, as it involves\niterating through all the key-value pairs in the map and recalculating\ntheir hash codes. To minimize the number of rehashing operations,\nit's important to choose an appropriate initial capacity and load\nfactor for the HashMap based on the expected number of key-value\npairs that it will hold.\nHow to create a custom object as key in HashMap?\nTo use a custom object as a key inside a HashMap, you need to\nensure that the custom object implements the hashCode() and",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 117,
          "text": "equals() methods.\nThe hashCode() method is used by the HashMap to compute a hash\nvalue for the key, which is used to determine the index in the\ninternal array where the key-value pair will be stored. The equals()\nmethod is used by the HashMap to compare keys for equality, which\nis necessary to resolve collisions that occur when different keys have\nthe same hash code.\nHere is an example of how to create a custom object as a key inside\na HashMap:\npublic class Person {\nprivate String name;\nprivate int age;   \npublic Person(String name, int age) {\nthis.name = name;\nthis.age = age;\n}   \n// Implement the hashCode() method based on the object's fields\n@Override\npublic int hashCode() {\nint result = 17;\nresult = 31 * result + name.hashCode();\nresult = 31 * result + age;\nreturn result;\n}   \n// Implement the equals() method to compare objects based on\nthe object's fields\n@Override\npublic boolean equals(Object obj) {\nif (this == obj) return true;",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 118,
          "text": "if (!(obj instanceof Person)) return false;\nPerson other = (Person) obj;\nreturn name.equals(other.name) && age == other.age;\n}\n}\n// Create a HashMap with Person objects as keys\nMap<Person, String> people = new HashMap<>();\nPerson john = new Person(\"John\", 30);\nPerson sarah = new Person(\"Sarah\", 25);\npeople.put(john, \"555-1234\");\npeople.put(sarah, \"555-5678\");\n// Retrieve a value using a Person object as the key\nString johnsPhone = people.get(new Person(\"John\", 30));\nIn this example, the Person class implements the hashCode() and\nequals() methods to use the name and age fields as the basis for\ncomparison. A HashMap is then created using Person objects as\nkeys, and key-value pairs are added to the map. Finally, a value is\nretrieved from the map using a new Person object with the same\nname and age fields as the key.\nDoes HashMap store value in ordered way or not?\nNo, a HashMap does not store its values in any particular order. The\norder in which the key-value pairs are stored in a HashMap is not\nguaranteed, and may change over time as the internal structure of\nthe HashMap is modified due to resizing or other operations.\nThe order of the key-value pairs in a HashMap is determined by the\nhash code of the keys, which is used to compute the index where\neach key-value pair is stored in the internal array of the HashMap.\nBecause the hash codes of the keys are used to determine the\nstorage location of the values, there is no inherent ordering of the\nkey-value pairs based on their values.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 119,
          "text": "If you need to maintain a specific ordering of the key-value pairs in a\ncollection, you should consider using a different data structure such\nas a LinkedHashMap, which maintains the insertion order of its\nelements, or a TreeMap, which maintains a natural ordering of its\nelements based on their keys.\nWhat is HashSet and TreeSet?\nBoth HashSet and TreeSet are implementations of the Set interface\nin Java.\nA HashSet is an unordered collection of unique elements. It uses a\nhash table to store the elements, which allows for constant-time\nperformance for basic operations such as add, remove, and contains.\nHowever, because the elements are not ordered, the order in which\nthey are stored is not guaranteed.\nHere is an example of how to create a HashSet and add elements to\nit:\nSet<String> set = new HashSet<>();\nset.add(\"apple\");\nset.add(\"banana\");\nset.add(\"orange\");\nA TreeSet, on the other hand, is an ordered collection of unique\nelements. It is implemented as a self-balancing binary search tree,\nwhich allows for log(n) performance for basic operations such as\nadd, remove, and contains. Because the elements are ordered, the\norder in which they are stored is guaranteed according to their\nnatural ordering or a custom comparator.\nHere is an example of how to create a TreeSet and add elements to\nit:\nSet<String> set = new TreeSet<>();\nset.add(\"apple\");\nset.add(\"banana\");\nset.add(\"orange\");",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 120,
          "text": "In general, you should choose a HashSet when you don't care about\nthe order of the elements and need fast performance for basic\noperations, and a TreeSet when you need to maintain a specific\nordering of the elements or perform range queries over the\nelements.\nHow to get values from HashSet?\nTo get the values in a HashSet in Java, you can use an iterator or a\nfor-each loop.\nHere is an example of how to use an iterator to get the values in a\nHashSet:\nSet<String> set = new HashSet<>();\nset.add(\"apple\");\nset.add(\"banana\");\nset.add(\"orange\");\nIterator<String> iterator = set.iterator();\nwhile (iterator.hasNext()) {\nString value = iterator.next();\nSystem.out.println(value);\n}\nIn this example, an iterator is obtained from the HashSet using the\niterator() method, and the hasNext() method is called to check if\nthere are more elements to iterate over. If there are, the next()\nmethod is called to retrieve the next element in the set, and the\nvalue is printed to the console.\nAlternatively, you can use a for-each loop to iterate over the\nelements of the HashSet:\nSet<String> set = new HashSet<>();\nset.add(\"apple\");\nset.add(\"banana\");\nset.add(\"orange\");",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 121,
          "text": "for (String value : set) {\nSystem.out.println(value);\n}\nIn this example, a for-each loop is used to iterate over the elements\nof the HashSet. The loop variable value is set to each element in\nturn, and the value is printed to the console.\nWhat is the difference between them, which one will compile\nand what is the best way to declare?\nList ls = new List ().\nList ls = new ArrayList ().\nArraylist arr = new ArrayList ().\nThe first line of code is not valid in Java, as List is an interface and\ncannot be directly instantiated.\nThe second line of code creates an ArrayList object and assigns it to\na List reference variable:\nList<Object> ls = new ArrayList<>();\nThis code creates an empty ArrayList that can store objects of any\ntype, and assigns it to the ls reference variable of type List. This is a\ncommon practice in Java, as it allows for greater flexibility in the\ncode, since you can switch to a different List implementation (such\nas LinkedList) without changing the rest of the code.\nThe third line of code creates an ArrayList object and assigns it to an\nArrayList reference variable:\nArrayList<Object> arr = new ArrayList<>();\nDifference between ArrayList and LinkedList?\nBoth ArrayList and LinkedList are implementations of the List\ninterface in Java, but they have different characteristics that make\nthem suitable for different use cases. Here are some key differences\nbetween ArrayList and LinkedList:\nData Structure: ArrayList is based on a dynamic array, while\nLinkedList is based on a doubly-linked list.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 122,
          "text": "Memory Allocation: ArrayList allocates memory in chunks, while\nLinkedList allocates memory for each element separately.\nIndexing: ArrayList provides fast random access to elements using\nan index, while LinkedList provides slower access because it needs\nto traverse the list from the beginning or end to reach a specific\nelement.\nInsertion/Deletion: ArrayList is slower for inserting or deleting\nelements in the middle of the list, because it requires shifting\nelements to fill the gap. LinkedList is faster for these operations,\nbecause it only requires updating the links between nodes.\nIteration: ArrayList is faster for iterating over all elements in the list,\nbecause it can use an index to access elements directly. LinkedList is\nslower for this operation, because it needs to traverse the list using\nits links.\nHere is an example to illustrate the difference between ArrayList and\nLinkedList:\nList<String> arrayList = new ArrayList<>();\narrayList.add(\"one\");\narrayList.add(\"two\");\narrayList.add(\"three\");\narrayList.add(\"four\");\nList<String> linkedList = new LinkedList<>();\nlinkedList.add(\"one\");\nlinkedList.add(\"two\");\nlinkedList.add(\"three\");\nlinkedList.add(\"four\");\n// Random access using index\nString element1 = arrayList.get(1); // O(1)\nString element2 = linkedList.get(1); // O(n)\n// Insertion in the middle of the list",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 123,
          "text": "arrayList.add(2, \"two-and-a-half\"); // O(n)\nlinkedList.add(2, \"two-and-a-half\"); // O(1)\n// Iteration over all elements\nfor (String element : arrayList) { // O(n)\nSystem.out.println(element);\n}\nfor (String element : linkedList) { // O(n)\nSystem.out.println(element);\n}\nDifference between Set and List collection?\nIn Java, Set and List are both interfaces that represent collections of\nobjects. However, they have different characteristics and are used\nfor different purposes.\nThe main differences between Set and List are:\nDuplicates: Set does not allow duplicate elements, while List does. If\nyou try to add a duplicate element to a Set, it will not be added,\nwhile in a List it will be added as a new element.\nOrder: List maintains the order of elements as they are added to the\nlist, while Set does not guarantee any specific order of elements.\nIndexing: List provides indexed access to its elements using an\ninteger index, while Set does not. You can access an element in a\nList using its index, while in a Set you need to iterate over the\nelements to find the one you want.\nIteration: Both List and Set provide ways to iterate over their\nelements, but the order of iteration is guaranteed for List and not for\nSet.\nHere is an example to illustrate the difference between Set and List:\nList<String> list = new ArrayList<>();\nlist.add(\"one\");\nlist.add(\"two\");",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 124,
          "text": "list.add(\"three\");\nlist.add(\"two\");\nSet<String> set = new HashSet<>();\nset.add(\"one\");\nset.add(\"two\");\nset.add(\"three\");\nset.add(\"two\");\nSystem.out.println(list); // prints [one, two, three, two]\nSystem.out.println(set); // prints [one, two, three]\nIn this example, we create a List and a Set with the same elements.\nWe add a duplicate element (\"two\") to both collections. When we\nprint the collections, we see that the List contains the duplicate\nelement, while the Set does not. This is because the Set does not\nallow duplicates, while the List does.\nOverall, you should use a List when you need to maintain the order\nof elements and allow duplicates, and a Set when you don't care\nabout the order of elements and need to ensure that there are no\nduplicates.\nDifference between HashSet and HashMap?\nIn Java, both HashSet and HashMap are used to store collections of\nobjects, but they have different characteristics and are used for\ndifferent purposes.\nThe main differences between HashSet and HashMap are:\nKey-Value pairs: HashMap stores key-value pairs, while HashSet only\nstores values. In other words, HashMap allows you to associate a\nvalue with a key, while HashSet only stores individual values.\nDuplicates: HashSet does not allow duplicate elements, while\nHashMap allows duplicate values but not duplicate keys. If you try to\nadd a duplicate value to a HashSet, it will not be added, while in a\nHashMap it will be added as a new value. If you try to add a",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 125,
          "text": "duplicate key to a HashMap, the existing value will be replaced by\nthe new value.\nOrdering: HashMap does not guarantee any specific order of its\nelements, while HashSet does not maintain the order of its\nelements. If you need to maintain the order of elements in a\ncollection, you should use LinkedHashMap or LinkedHashSet.\nRetrieval: In HashMap, you can retrieve values using a key, while in\nHashSet you need to iterate over the elements to find the one you\nwant.\nHere is an example to illustrate the difference between HashSet and\nHashMap:\nHashMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"one\", 1);\nhashMap.put(\"two\", 2);\nhashMap.put(\"three\", 3);\nHashSet<Integer> hashSet = new HashSet<>();\nhashSet.add(1);\nhashSet.add(2);\nhashSet.add(3);\nSystem.out.println(hashMap.get(\"two\")); // prints 2\nSystem.out.println(hashSet.contains(2)); // prints true\nIn this example, we create a HashMap with key-value pairs and a\nHashSet with individual values. We retrieve a value from the\nHashMap using a key and check if a value exists in the HashSet.\nOverall, you should use HashMap when you need to associate a\nvalue with a key and allow duplicate values, and use HashSet when\nyou need to store unique values and don't need to associate them\nwith keys.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 126,
          "text": "Why does HashMa not maintain the order like Linked-\nHashMap?\nHashMap does not maintain the order of keys because it is designed\nto be as fast and memory-efficient as possible. Maintaining the\ninsertion order of keys would require additional overhead, both in\nterms of time and space.\nHashMap uses a hash table to store its entries. A hash table is a\ndata structure that maps keys to values by using a hash function to\nconvert each key to a unique index. This allows HashMap to quickly\nfind the value for a given key.\nTo maintain the insertion order of keys, HashMap would need to use\na different data structure, such as a linked list. A linked list is a data\nstructure that stores items in a linear sequence. Each item in a\nlinked list has a pointer to the next item in the sequence. This allows\nlinked lists to maintain the order in which items are added.\nHow does LinkedHashMap is able to maintain the insertion\norder?\nLinkedHashMap is able to maintain the insertion order of keys by\nusing a doubly-linked list to store its entries. A doubly-linked list is a\ndata structure that stores items in a linear sequence. Each item in a\ndoubly-linked list has a pointer to the next item in the sequence and\na pointer to the previous item in the sequence. This allows doubly-\nlinked lists to maintain the order in which items are added.\nWhen you add an entry to a LinkedHashMap, it is added to the end\nof the doubly-linked list. When you iterate over a LinkedHashMap,\nthe entries are returned in the order in which they were added,\nbecause the iterator traverses the doubly-linked list.\nLinkedHashMap {\n// Hash table\nkey1 -> value1\nkey2 -> value2\nkey3 -> value3",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 127,
          "text": "// Doubly-linked list\nhead -> key1 -> key2 -> key3 -> tail\n}\nDifference between LinkedHashMap and Priority queue?\nLinkedHashMap and PriorityQueue are two different types of\ncollections in Java with different characteristics and use cases.\nLinkedHashMap is a type of HashMap that maintains the insertion\norder of elements. In other words, the elements in a LinkedHashMap\nare stored in the order they were added to the map. It uses a doubly\nlinked list to maintain the order of elements, which makes it slightly\nslower than a regular HashMap.\nOn the other hand, PriorityQueue is an implementation of the Queue\ninterface that orders its elements according to their natural ordering\nor a custom comparator. The elements are stored in a heap data\nstructure, which allows for efficient insertion and removal of\nelements in logarithmic time complexity.\nThe main difference between LinkedHashMap and PriorityQueue is\ntheir ordering strategy. LinkedHashMap maintains the insertion order\nof elements, while PriorityQueue maintains a priority order based on\na sorting strategy. Additionally, LinkedHashMap is a map, which\nmeans it associates keys with values, while PriorityQueue is a queue\nthat stores elements in a particular order.\nHere is an example to illustrate the difference between\nLinkedHashMap and PriorityQueue:\nLinkedHashMap<String, Integer> linkedHashMap = new\nLinkedHashMap<>();\nlinkedHashMap.put(\"one\", 1);\nlinkedHashMap.put(\"two\", 2);\nlinkedHashMap.put(\"three\", 3);\nPriorityQueue<Integer> priorityQueue = new PriorityQueue<>();\npriorityQueue.add(3);",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 128,
          "text": "priorityQueue.add(1);\npriorityQueue.add(2);\nSystem.out.println(linkedHashMap); // prints {one=1, two=2,\nthree=3}\nSystem.out.println(priorityQueue); // prints [1, 3, 2]\nIn this example, we create a LinkedHashMap with three elements\nand a PriorityQueue with three elements. We print both collections\nto show the difference in their ordering strategy.\nOverall, you should use LinkedHashMap when you need to maintain\nthe insertion order of elements and access them by key, while\nPriorityQueue should be used when you need to maintain a priority\norder of elements and access them in a first-in-first-out (FIFO) order.\nWrite a Hashcode implementation and what is return type of\nit?\nhashCode() is a method defined in the Object class in Java that\nreturns an integer hash code for the object. The hash code is\ntypically used by hash-based data structures like HashMap, HashSet,\nand Hashtable to quickly look up objects and improve performance.\nHere is an example implementation of hashCode() for a class\nPerson:\npublic class Person {\nprivate String name;\nprivate int age;\nprivate String address;   \n// constructor, getters, setters   \n@Override\npublic int hashCode() {\nfinal int prime = 31;\nint result = 1;\nresult = prime * result + age;",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 129,
          "text": "result = prime * result + ((address == null) ? 0 :\naddress.hashCode());\nresult = prime * result + ((name == null) ? 0 :\nname.hashCode());\nreturn result;\n}\n}\nIn this implementation, we use the prime number 31, which is\ncommonly used in Java hash code implementations. We then\nmultiply the result variable by prime and add each member variable\nof the class to the hash code calculation. We use the hashCode()\nmethod of each member variable that is an object to get its hash\ncode, and we check for null values to avoid NullPointerExceptions.\nThe return type of hashCode() is int. The returned hash code should\nideally be unique for each object, but it is not required to be unique.\nInstead, it should be consistent with the equals() method of the\nclass, which is used to determine if two objects are equal. If two\nobjects are equal according to equals(), they should have the same\nhash code. If two objects are not equal according to equals(), they\ncan have the same hash code (this is called a hash code collision),\nbut this can decrease the performance of hash-based data\nstructures.\nWhat is ConcurrentHashmap?\nConcurrentHashmap is a thread-safe implementation of the Map\ninterface in Java. It was introduced in Java 5 to provide a high-\nperformance, scalable, and concurrent hash table that can be used\nin multi-threaded environments.\nThe main feature of ConcurrentHashmap is its ability to allow\nmultiple threads to access and modify the map concurrently without\nthe need for external synchronization. This is achieved by dividing\nthe map into multiple segments, each of which is protected by a\nseparate lock. This allows multiple threads to read and write to",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 130,
          "text": "different segments of the map simultaneously, improving the\nperformance of concurrent operations.\nConcurrentHashmap provides the same basic operations as a regular\nHashMap, such as put(), get(), remove(), and containsKey(). It also\nprovides additional atomic operations, such as putIfAbsent(),\nremove(), and replace(), which can be used to perform atomic\nupdates to the map.\nConcurrentHashMap is particularly useful in applications where\nmultiple threads need to access a shared map concurrently, such as\nin web servers, database systems, and other multi-threaded\napplications.\nHere's an example of how to use ConcurrentHashMap:\nConcurrentHashMap<String, Integer> map = new\nConcurrentHashMap<>();\n// Add elements to the map\nmap.put(\"one\", 1);\nmap.put(\"two\", 2);\nmap.put(\"three\", 3);\n// Retrieve elements from the map\nSystem.out.println(map.get(\"one\")); // prints 1\n// Remove an element from the map\nmap.remove(\"two\");\n// Check if a key exists in the map\nSystem.out.println(map.containsKey(\"two\")); // prints false\nIn this example, we create a ConcurrentHashMap and add three\nelements to it. We then retrieve an element by key, remove an\nelement by key, and check if a key exists in the map.\nNote that ConcurrentHashMap does not provide any guarantees\nabout the order in which elements are inserted or accessed, so if\nyou need to maintain ordering, you should use a different type of\nmap, such as LinkedHashMap.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 131,
          "text": "What is the Internal implementation of ConcurrentHashmap?\nIn Java 8, the introduction of default and static methods in\ninterfaces allows for new functionality and more flexibility in the way\nthat interfaces can be used. The main differences between static and\ndefault methods are:\nStatic methods: A static method is a method that is associated with\nthe interface itself, rather than with any instance of the interface.\nThey can be called directly on the interface, without needing an\ninstance of the class that implements it.\nDefault methods: A default method is a method that has a default\nimplementation in the interface. Classes that implement the interface\nare not required to override the default method, but can choose to\ndo so if they need to provide a different implementation.\nAccess Modifiers: Static methods can have any access modifiers like\npublic, private, protected, default. But for default methods, the\naccess modifiers can only be public or default.\nOverriding: Classes that implement the interface can override the\ndefault methods to provide their own implementation, but they\ncannot override static methods.\nPurpose: The main purpose of static methods in interfaces is to\nprovide utility methods that can be called directly on the interface\nwithout needing an instance. The main purpose of default methods\nis to provide a default implementation of an interface method that\ncan be used by classes that implement the interface, without\nneeding to override the method.\nUse case: Static methods are useful when you want to provide utility\nmethods that are not tied to any particular instance of a class.\nDefault methods are useful when you want to provide a default\nimplementation for a method that is common to all classes that\nimplement the interface, but can be overridden if needed.\n ",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 132,
          "text": "Is it possible to modify ConcurrentHashmap using iterator?\nModifying a ConcurrentHashMap using an iterator is not\nrecommended, as it can lead to race conditions and other\nconcurrency issues.\nWhen you use an iterator to iterate over a ConcurrentHashmap, the\niterator provides a snapshot of the current state of the map, and any\nmodifications made to the map while the iterator is active may not\nbe reflected in the iterator's view of the map.\nTo modify a ConcurrentHashmap, it is generally recommended to use\nthe map's built-in thread-safe methods, such as putIfAbsent,\nreplace, or remove. These methods are designed to handle\nconcurrent modifications to the map safely, without requiring the use\nof iterators.\nIf you do need to modify a ConcurrentHashMap while iterating over\nit, one approach is to use the ConcurrentHashMap's keySet() method\nto obtain a set of keys, and then iterate over the set while making\nmodifications to the map using the built-in thread-safe methods.\nThis approach can help avoid concurrency issues, but it may not be\nsuitable for all use cases, depending on the specific requirements of\nyour application.\nWhat is the concurrent collection?\nConcurrent collections are a type of data structure in Java that are\ndesigned to be used in multi-threaded environments, where multiple\nthreads can access and modify the data structure concurrently. They\nprovide thread-safe and efficient access to data, and are essential in\nbuilding scalable and high-performance multi-threaded applications.\nThe following are some of the commonly used concurrent collections\nin Java:\nConcurrentHashMap: A thread-safe implementation of the Map\ninterface that provides efficient and scalable access to key-value\npairs.\nConcurrentSkipListMap: A thread-safe implementation of the\nNavigableMap interface that maintains its elements in a sorted order,",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 133,
          "text": "and provides efficient and scalable access to key-value pairs.\nCopyOnWriteArrayList: A thread-safe implementation of the List\ninterface that provides efficient and scalable access to elements, and\nallows concurrent iteration over the list without the risk of\nConcurrentModificationException.\nLinkedBlockingQueue: A thread-safe implementation of the\nBlockingQueue interface that provides efficient and scalable access\nto a queue of elements, and allows multiple threads to add and\nremove elements concurrently.\nConcurrentLinkedQueue: A thread-safe implementation of the Queue\ninterface that provides efficient and scalable access to a queue of\nelements, and allows multiple threads to add and remove elements\nconcurrently.\nConcurrentSkipListSet: A thread-safe implementation of the\nSortedSet interface that maintains its elements in a sorted order, and\nprovides efficient and scalable access to elements.\nThese concurrent collections are essential in building high-\nperformance and scalable multi-threaded applications, and they\nprovide a wide range of functionalities to suit different use cases.\nCan we insert Null in ConcurrentHashmap?\nIt depends on the version of Java you are using.\nIn Java 8 and below, it's not allowed to insert a null key or value in a\nConcurrentHashMap, it will throw a NullPointerException.\nHowever, starting with Java 9, ConcurrentHashMap has been\nupdated to allow for null keys and values. However, it's not\nrecommended to use null keys or values in a ConcurrentHashMap,\nsince it can lead to unexpected behaviour and errors.\nIt's important to notice that, even though it's allowed to insert null\nkeys and values, it's not a good practice, since concurrent data\nstructures like ConcurrentHashMap are designed to handle\nconcurrent operations and null keys and values can lead to\nunexpected behaviour and errors.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 134,
          "text": "It's also worth mentioning that if you use the putIfAbsent method, it\ndoes not accept null keys or values, and it throws\nNullPointerException when trying to insert null keys or values.\n \nWhat is a Concurrent Modification exception, and how to\nprevent that?\nA Concurrent Modification exception is a runtime exception that\noccurs when multiple threads try to modify a collection (such as a\nlist, set, or map) at the same time. The exception is thrown because\nthe collection is not designed to be modified by multiple threads\nsimultaneously, and as a result, the collection's state can become\ninconsistent.\nTo prevent a Concurrent Modification exception, you can use one of\nthe following strategies:\nSynchronization: You can use the synchronized keyword to\nsynchronize access to the collection, so that only one thread can\naccess the collection at a time.\nList<String> list = new ArrayList<>();\nsynchronized (list) {\nlist.add(\"item\");\nlist.remove(\"item\");\n}\nUsing a thread-safe collection: Java provides thread-safe collections,\nsuch as ConcurrentHashMap and CopyOnWriteArrayList, that are\ndesigned to be modified by multiple threads simultaneously. These\ncollections use locks internally to ensure that the state of the\ncollection remains consistent.\nList<String> list = new CopyOnWriteArrayList<>();\nlist.add(\"item\");\nlist.remove(\"item\");",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 135,
          "text": "Using an Iterator: Using an Iterator to iterate over the collection and\nmodify it, Iterator has a fail-fast behaviour, and it throws\nConcurrentModificationException if it detects that the collection has\nbeen modified while iterating over it.\nList<String> list = new ArrayList<>();\nIterator<String> it = list.iterator();\nwhile (it.hasNext()) {\nString item = it.next();\nif (item.equals(\"item\")) {\nit.remove();\n}\n}\nUsing a for-each loop: Using a for-each loop to iterate over the\ncollection and modify it, it will throw\nConcurrentModificationException when the collection is modified.\nList<String> list = new ArrayList<>();\nfor (String item : list) {\nif (item.equals(\"item\")) {\nlist.remove(item);\n}\n}\nIt's important to note that all of the above solutions are based on\nthe collection type, the number of threads and the read-write\noperations that you are going to perform. The best solution is the\none that fits the best with the project requirements.\nWhat is serialization?\nSerialization is the process of converting an object into a stream of\nbytes that can be stored or transmitted over a network, and later\nreconstructed to create a new object with the same properties as\nthe original. The process of serialization is commonly used in Java",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 136,
          "text": "for data persistence, inter-process communication, and distributed\ncomputing.\nTo make an object serializable, it must implement the Serializable\ninterface, which is a marker interface that indicates to the Java\nVirtual Machine (JVM) that the object can be serialized. When an\nobject is serialized, all of its instance variables and non-transient\nfields are written to a stream of bytes, along with information about\nthe object's class and superclasses.\nJava provides two main mechanisms for serializing and deserializing\nobjects: ObjectOutputStream and ObjectInputStream.\nObjectOutputStream is used to write the serialized object to an\noutput stream, while ObjectInputStream is used to read the\nserialized object from an input stream.\nHere's an example of how to serialize an object in Java:\nimport java.io.*;\npublic class SerializationDemo {\npublic static void main(String[] args) {\ntry {\n// create an object to be serialized\nPerson person = new Person(\"John\", 25);           \n// serialize the object to a file\nFileOutputStream fileOut = new\nFileOutputStream(\"person.ser\");\nObjectOutputStream out = new\nObjectOutputStream(fileOut);\nout.writeObject(person);\nout.close();\nfileOut.close();           \nSystem.out.println(\"Serialized data is saved in person.ser\");\n} catch (IOException e) {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 137,
          "text": "e.printStackTrace();\n}\n}\n}\nclass Person implements Serializable {\nprivate String name;\nprivate int age;\npublic Person(String name, int age) {\nthis.name = name;\nthis.age = age;\n}   \npublic String getName() {\nreturn name;\n}\npublic int getAge() {\nreturn age;\n}\n}\nIn this example, we create a Person object and serialize it to a file\nnamed person.ser. The Person class implements the Serializable\ninterface, which allows it to be serialized using ObjectOutputStream.\nOnce the object is serialized, it can be deserialized and reconstructed\nlater using ObjectInputStream.\nSerialization is a powerful tool in Java, but it also has some\nlimitations and potential drawbacks. Serialized objects can take up a\nlot of disk space or network bandwidth, and they may not be\ncompatible with different versions of the same class. It's important\nto carefully design and test serialization code to ensure that it meets\nthe requirements of the application.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 138,
          "text": "Uses of serialization? Why is this needed?\nIn addition to serialization, there are a few other use cases for Java\nobject streams:\nRemote Method Invocation (RMI): RMI is a mechanism for making\nremote method calls in Java. When a remote method call is made,\nthe arguments and return values are serialized and sent over the\nnetwork using object streams.\nCaching: Object streams can be used for caching objects in memory\nor on disk. By serializing and deserializing objects, we can save the\nobject state to a file or database and then reload it later as needed.\nCopying Objects: In some cases, it may be useful to create a copy of\nan object. By serializing and deserializing the object, we can create\nan independent copy with the same state as the original.\nDeep Cloning: Object streams can also be used to create deep\nclones of objects. By serializing and deserializing an object, we can\ncreate a new object with the same state, but with new references to\nall of its fields.\nMessaging: Object streams can be used for messaging between\ndifferent parts of a Java application. By serializing and deserializing\nobjects, we can send messages that contain complex data structures\nover a messaging system.\nOverall, object streams are a powerful and flexible tool in Java, with\nmany potential use cases beyond just serialization.\nWhen to use ArrayList and when to use LinkedList?\nArrayList and LinkedList are both classes that implement the List\ninterface in Java and provide a way to store and manipulate\ncollections of elements. However, their internal implementations are\ndifferent.\nArrayList:\nIt uses an array as its underlying data structure.\nRandom access is fast since array provides constant time for get and\nset operations.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 139,
          "text": "Insertions and deletions are slow since arrays are of fixed size and\nwhen an element is inserted or deleted, all the elements after the\ninsertion or deletion point have to be shifted.\nIt can be used when the number of read operations are more than\nthe write operations.\nLinkedList:\nIt uses a doubly-linked list as its underlying data structure.\nEach element in a linked list contains a reference to the next and\nprevious element.\nInsertions and deletions are faster since only the references need to\nbe updated.\nRandom access is slow since it requires traversing the linked list\nstarting from the head or tail.\nIt can be used when the number of write operations are more than\nthe read operations.\nIt's important to note that, the choice between ArrayList and\nLinkedList depends on the use case and the operations that will be\nperformed on the collection. If you need fast random access, go for\nArrayList, if you need fast insertions and deletions and don't mind\nslower random access, go for LinkedList.\nAlso, it's worth mentioning that, LinkedList also implements the\nDeque interface and can be used as a double-ended queue, while\nArrayList doesn't have that capability.\nWhat is Garbage Collection?\nGarbage collection is a process in which a program's runtime system\nautomatically manages memory allocation and deallocation by\nfreeing up memory that is no longer being used by the program. In\nother words, it is the automatic process of freeing memory occupied\nby objects that are no longer being referenced by the program.\nIn Java, memory is allocated to objects at runtime by the JVM. When\nan object is no longer being used by the program, it becomes\neligible for garbage collection. The garbage collector runs",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 140,
          "text": "periodically to identify and remove objects that are no longer being\nused, freeing up memory for use by other objects.\nThe garbage collector works by identifying all objects that are no\nlonger being used, marking them as garbage, and then reclaiming\nthe memory occupied by those objects. The garbage collector uses\nvarious algorithms to identify and reclaim memory, such as reference\ncounting, mark-and-sweep, and copying.\nGarbage collection is important because it helps to prevent memory\nleaks and ensures that the program uses memory efficiently. Without\ngarbage collection, a program would need to manually manage\nmemory allocation and deallocation, which can be time-consuming\nand error-prone.\nIn Java, garbage collection is an integral part of the language and is\nmanaged automatically by the JVM, allowing programmers to focus\non writing code rather than managing memory.\nWhat is System.gc in java?\nIn Java, System.gc() is a method that is used to suggest to the JVM\nthat it should run the garbage collector to free up unused memory.\nThe System.gc() method is not guaranteed to immediately run the\ngarbage collector, as the JVM may decide to delay or ignore the\nrequest based on various factors such as system load, memory\nusage, or garbage collection algorithms. Therefore, it is generally not\nrecommended to rely on this method for precise memory\nmanagement, as the JVM will automatically run the garbage collector\nas needed.\nIt's worth noting that calling System.gc() unnecessarily can actually\nhave a negative impact on performance, as it can cause the JVM to\nspend time running the garbage collector when it's not necessary.\nTherefore, it's generally best to let the JVM manage memory\nautomatically and only use System.gc() when there is a specific need\nto force garbage collection, such as when profiling or debugging a\nprogram.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 141,
          "text": "What kind of algorithm is used in the garbage collector?\nmark-and-sweep algorithm and parallel GC are one of the algorithms\nused in garbage collector mechanism.\nThe mark-and-sweep algorithm is called a tracing garbage collector\nbecause it traces out the entire collection of objects that are directly\nor indirectly accessible by the program.\nParallel garbage collection - It uses mark-copy in the Young\nGeneration and mark-sweep-compact in the Old Generation.\nWhat are fast and fail-safe in collection framework?\nIn the collection framework, fast and fail-safe refer to two different\ntypes of iterators.\nFast iterators are designed to throw a\nConcurrentModificationException if the collection is modified while\nthe iterator is in use. This is because fast iterators keep track of the\ncurrent position in the collection using a modification count. If the\ncollection is modified, the modification count is incremented. When\nthe iterator checks the modification count, it will throw an exception\nif it has changed, indicating that the collection has been modified\nsince the iterator was created.\nFail-safe iterators are designed to not throw an exception if the\ncollection is modified while the iterator is in use. This is because fail-\nsafe iterators operate on a copy of the collection, not the original\ncollection. When the iterator is created, it takes a snapshot of the\ncollection. This snapshot is then used to iterate over the collection. If\nthe collection is modified while the iterator is in use, the iterator will\nnot be affected.\nexamples of fast and fail-safe iterators in the Java collection\nframework:\nFast iterators:\nArrayList iterator\nHashMap iterator\nFail-safe iterators:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 142,
          "text": "CopyOnWriteArrayList iterator\nConcurrentHashMap iterator\nWhere are static methods or static variables stored in Java\nmemory?\nStatic methods and static variables in Java are stored in the\nMetaspace memory area. Metaspace is a region of memory that is\nused to store class metadata, such as the class name, its methods\nand fields, and its superclass. Static methods and variables are\nstored in Metaspace because they are associated with the class\nitself, rather than with any particular instance of the class.\nBefore Java 8, static methods and variables were stored in a\nseparate area of memory called the PermGen. However, the\nPermGen was a fixed size, which could lead to problems if a program\ncreated a lot of classes. As a result, the PermGen was removed in\nJava 8 and replaced with Metaspace. Metaspace is a more flexible\nmemory area that can grow or shrink as needed.\nHow to create custom exceptions in Java?\nBy Extending Exception or Runtime Exception class you can create\ncustom exception class and write your custom implementation.\ne.g.\npublic class MyCheckedException extends Exception {\npublic MyCheckedException(String message) {\nsuper(message);\n}\n}\nWhat is the difference between Class and Instance variables?\nCharacteristi\nc Class variable Instance variable\nShared by all instances of Not shared by other instances of\nScope the class the class\nDeclared with the static Declared without the static\nDeclaration keyword keyword",
          "tables": [
            [
              [
                "",
                "",
                ""
              ],
              [
                "Characteristi",
                "",
                ""
              ],
              [
                "c",
                "Class variable",
                "Instance variable"
              ],
              [
                "",
                "",
                ""
              ],
              [
                "",
                "Shared by all instances of",
                "Not shared by other instances of"
              ],
              [
                "Scope",
                "the class",
                "the class"
              ],
              [
                "",
                "",
                ""
              ],
              [
                "",
                "Declared with the static",
                "Declared without the static"
              ],
              [
                "Declaration",
                "keyword",
                "keyword"
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 143,
          "text": "Initialized for each instance of the\nInitialization Initialized once class\nAccessed using the class Accessed using the object\nAccess name reference\nWhat is the difference between Throw and Throws?\nCharacteristic throw throws\nTo explicitly throw an exception To declare that a method may\nfrom a method or any block of throw a specific type of\nPurpose code. exception.\nUsed within a method or any\nUsage block of code. Used in the method signature.\nCan be used to throw either\nException checked or unchecked Can only be used to declare\ntypes exceptions. checked exceptions.\nWhat is the difference between try/catch block and throws?\nCharacteristi\nc Try/catch block Throws\nTo declare that a method\nTo handle exceptions that occur may throw a specific type\nPurpose within the block of exception\nUsed in method\nUsage Used within code blocks declarations\nIf an exception occurs within the try If an exception is thrown\nblock, the program will jump to the by a method, the caller of\ncorresponding catch block, which the method is responsible\nControl flow will handle the exception for handling it\nWhat is thedifference between HashMap and\nLinkedHashMap?\nFeature HashMap LinkedHashMap\nMaintains insertion order of keys No Yes\nHash\nInternal implementation table Hash table + doubly-linked list\nPerformance Faster Slower",
          "tables": [
            [
              [
                "",
                ""
              ],
              [
                "Initialization",
                "Initialized once"
              ],
              [
                "",
                ""
              ],
              [
                "",
                "Accessed using the class"
              ],
              [
                "Access",
                "name"
              ]
            ],
            [
              [
                "",
                ""
              ],
              [
                "Characteristic",
                "throw"
              ],
              [
                "",
                ""
              ],
              [
                "",
                "To explicitly throw an exception"
              ],
              [
                "",
                "from a method or any block of"
              ],
              [
                "Purpose",
                "code."
              ],
              [
                "",
                ""
              ],
              [
                "",
                "Used within a method or any"
              ],
              [
                "Usage",
                "block of code."
              ],
              [
                "",
                ""
              ],
              [
                "",
                "Can be used to throw either"
              ],
              [
                "Exception",
                "checked or unchecked"
              ],
              [
                "types",
                "exceptions."
              ]
            ],
            [
              [
                "",
                ""
              ],
              [
                "Characteristi",
                ""
              ],
              [
                "c",
                "Try/catch block"
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                "To handle exceptions that occur"
              ],
              [
                "Purpose",
                "within the block"
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "Usage",
                "Used within code blocks"
              ],
              [
                "",
                ""
              ],
              [
                "",
                "If an exception occurs within the try"
              ],
              [
                "",
                "block, the program will jump to the"
              ],
              [
                "",
                "corresponding catch block, which"
              ],
              [
                "Control flow",
                "will handle the exception"
              ]
            ],
            [
              [
                "",
                ""
              ],
              [
                "Feature",
                "HashMap"
              ],
              [
                "",
                ""
              ],
              [
                "Maintains insertion order of keys",
                "No"
              ],
              [
                "",
                ""
              ],
              [
                "",
                "Hash"
              ],
              [
                "Internal implementation",
                "table"
              ],
              [
                "",
                ""
              ],
              [
                "Performance",
                "Faster"
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 144,
          "text": "Memory usage Less More\nWhat is the difference between == and equals?\nThe == operator in Java is used to compare the reference equality\nof two objects. This means that it compares the memory addresses\nof the two objects. If the two objects have the same memory\naddress, then the == operator will return true, otherwise it will\nreturn false.\nThe equals() method in Java is used to compare the logical equality\nof two objects. This means that it compares the values of the two\nobjects. If the two objects have the same values, then the equals()\nmethod will return true, otherwise it will return false.\nFor primitive types, the == operator and the equals() method are\nequivalent. However, for object types, the == operator and the\nequals() method are not equivalent. The == operator will only\nreturn true if the two objects have the same memory address, while\nthe equals() method will return true if the two objects have the\nsame values.\nHere is an example of how to use the == operator and the equals()\nmethod to compare strings:\nIf an exception is declared in throws and if an exception is\nencountered what will happen?\nIf an exception is declared in throws and if an exception is\nencountered, the exception will be thrown to the caller of the\nmethod. The caller of the method is then responsible for handling\nthe exception.\npublic class MyClass {\npublic void myMethod() throws MyException {\n// Code that may throw a MyException\n}\n}",
          "tables": [
            [
              [
                "Memory usage",
                "Less"
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 145,
          "text": "The throws declaration in the myMethod() method tells the caller of\nthe method that it may throw a MyException. The caller of the\nmethod must then handle the exception if it occurs.\nHow to achieve inheritance without using an interface?\nYou can achieve inheritance without using an interface by using the\nextends keyword to extend a class. When you extend a class, you\ninherit all of the public and protected fields and methods of the base\nclass.\npublic class Animal {\nprivate String name;\npublic Animal(String name) {\nthis.name = name;\n}\npublic String getName() {\nreturn name;\n}\n}\npublic class Dog extends Animal {\npublic Dog(String name) {\nsuper(name);\n}\npublic void bark() {\nSystem.out.println(\"Woof!\");\n}\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 146,
          "text": "CHAPTER 4: MULTITHREADING\nWhat is Multithreading?\nMultithreading is a programming concept that involves the execution\nof multiple threads in a single process or program. A thread is an\nindependent path of execution within a program that can run\nconcurrently with other threads.\nIn a single-threaded program, the program executes instructions in a\nlinear fashion, with each instruction completing before the next one\nbegins. In a multithreaded program, multiple threads can run\nconcurrently, with each thread executing a different part of the\nprogram at the same time.\nMultithreading is used to achieve concurrency in a program, which\ncan lead to improved performance and responsiveness. For example,\na multithreaded program can allow one thread to handle user input\nand another thread to perform a long-running task in the\nbackground, without blocking the user interface.\nHowever, multithreading also introduces new challenges, such as\nthread synchronization and race conditions. Proper synchronization\nmechanisms need to be implemented to ensure that threads can\naccess shared resources safely and prevent data corruption or\nunexpected program behaviour.\nMultithreading is widely used in modern software development,\nparticularly in applications that require high performance or\nresponsiveness, such as web servers, video games, and scientific\nsimulations.\nWhat is a ThreadPool In java?\nIn Java, a thread pool is a collection of pre-initialized threads that\nare used to execute a set of tasks. Thread pools are used to",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 147,
          "text": "optimize the performance of concurrent programs by reducing the\noverhead of creating and destroying threads.\nThe main advantage of using a thread pool is that it allows multiple\ntasks to be executed concurrently by reusing threads from a pool,\nrather than creating a new thread for each task. This reduces the\noverhead of creating and destroying threads, which can be\nexpensive in terms of memory and CPU usage.\nThe Java concurrency API provides a built-in thread pool\nimplementation called ExecutorService. ExecutorService is an\ninterface that provides methods to submit tasks to a thread pool and\nmanage its lifecycle. The Executors class provides utility methods for\ncreating different types of ExecutorService implementations, such as\na fixed thread pool, cached thread pool, or scheduled thread pool.\nHere is an example of how to create and use a thread pool in Java:\nExecutorService executor = Executors.newFixedThreadPool(5);\nfor (int i = 0; i < 10; i++) {\nRunnable task = new Task(i);\nexecutor.submit(task);\n}\nexecutor.shutdown();\nIn this example, a fixed thread pool with a maximum of 5 threads is\ncreated using the newFixedThreadPool method of the Executors\nclass. Ten tasks are then submitted to the thread pool using the\nsubmit method of the ExecutorService interface. Finally, the\nshutdown method is called to initiate a graceful shutdown of the\nthread pool.\nHow to create a Thread Pool and how to use it in the\ndatabase connection pool?\nA thread pool is a collection of worker threads that can be used to\nexecute multiple tasks concurrently. A thread pool can be used to\nimprove the performance of an application by reducing the overhead\nof creating and destroying threads for each task.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 148,
          "text": "int numberOfThreads = 10;\nExecutor executor =\nExecutors.newFixedThreadPool(numberOfThreads);\nThe above code creates a fixed-size thread pool with 10 worker\nthreads. The Executors.newFixedThreadPool() method takes an\ninteger argument that specifies the number of worker threads in the\nthread pool.\nOnce the thread pool is created, you can submit tasks to be\nexecuted by the worker threads using the Executor.execute()\nmethod:\nexecutor.execute(new MyTask());\nA Thread Pool can also be used to create a database connection\npool; this is a technique used to maintain a pool of open connections\nto a database. When a connection is requested, a connection from\nthe pool is returned. When the connection is no longer needed, it is\nreturned to the pool, rather than being closed.\nThis approach can improve the performance of the application by\nreducing the overhead of creating and closing connections to the\ndatabase.\nHere's an example of how to create a connection pool using the\nApache DBCP library:\nBasicDataSource dataSource = new BasicDataSource();\ndataSource.setDriverClassName(\"com.mysql.jdbc.Driver\");\ndataSource.setUrl(\"jdbc:mysql://localhost:3306/mydb\");\ndataSource.setUsername(\"user\");\ndataSource.setPassword(\"password\");\ndataSource.setInitialSize(10);\ndataSource.setMaxTotal(50);\nOnce the connection pool is created, you can retrieve a connection\nfrom the pool using the BasicDataSource.getConnection() method.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 149,
          "text": "Connection connection = dataSource.getConnection();\n \nWhat is the lifecycle of thread in java?\nThe life cycle of a thread in Java includes several states:\nNew: The thread is in the new state when it is first created using the\nnew Thread() constructor, but before the start() method is called.\nRunnable: The thread is in the runnable state when the start()\nmethod is called. It's now eligible to run and can be scheduled by\nthe JVM to execute.\nRunning: The thread is in the running state when it is currently\nexecuting.\nBlocked: The thread is in the blocked state when it is waiting for a\nresource, such as a lock or a semaphore.\nWaiting: The thread is in the waiting state when it is waiting for\nanother thread to perform a specific action.\nTimed Waiting: The thread is in the timed waiting state when it is\nwaiting for a specific period of time.\nTerminated: The thread is in the terminated state when it has\ncompleted execution or when it has been interrupted by another\nthread.\nA thread pool, on the other hand, is a collection of worker threads\nthat can be used to execute multiple tasks concurrently. When a task\nis submitted to the thread pool, it is added to a queue and a worker\nthread from the pool is assigned to execute the task.\nThe life cycle of a thread in a thread pool includes the following\nstates:\nIdle: The thread is in the idle state when it is first created and is\nwaiting for a task to be assigned.\nRunning: The thread is in the running state when it is executing a\ntask.\nCompleted: The thread is in the completed state when it has\nfinished executing a task and is returned to the idle state.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 150,
          "text": "When a thread pool is created, a fixed number of worker threads are\ncreated and added to the pool. These worker threads remain in the\npool until the thread pool is shut down. When a task is submitted to\nthe thread pool, a worker thread is picked from the pool, the task is\nexecuted and the thread is returned to the pool again. This process\nis repeated for each task that is submitted to the thread pool.\nHow to do Thread dump analysis in java?\nThread dump analysis is the process of examining the state of\nthreads in a Java program to identify and diagnose issues such as\ndeadlocks, high CPU usage, or performance bottlenecks. Here are\nthe steps to perform a thread dump analysis in Java:\nTake a thread dump: A thread dump is a snapshot of the state of all\nthreads in a Java program. To take a thread dump, you can use the\njstack command-line tool or a Java profiler such as VisualVM or\nYourKit. For example, to take a thread dump using jstack, you can\nrun the following command:\njstack <pid>\nWhere <pid> is the process ID of the Java program.\nAnalyze the thread dump: Once you have a thread dump, you can\nanalyze it to identify potential issues such as deadlocks or high CPU\nusage. Look for threads that are blocked or waiting, as these can\nindicate potential issues. Pay attention to the stack traces of each\nthread, as they can provide valuable information about what the\nthread is doing and what resources it is waiting for.\nIdentify the root cause: Based on the information gathered from the\nthread dump analysis, you can identify the root cause of the issue\nand take appropriate action to address it. For example, if you\nidentify a deadlock, you may need to modify the code to avoid\nacquiring locks in a circular order or use a timeout on locks to avoid\nindefinite blocking.\nIn addition to thread dumps, there are other tools and techniques\navailable for thread analysis in Java, such as profiling tools like\nVisualVM, JProfiler, or YourKit, or logging frameworks like log4j or",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 151,
          "text": "SLF4J. These tools can provide more detailed information about\nthread activity and performance in a Java program.\nWhy is a Threadpool needed in multithreading?\nThread pools are useful in multithreaded programming because they\nprovide a way to manage and optimize the performance of\nconcurrent programs. Here are some reasons why thread pools are\nneeded:\nReduced overhead: Creating and destroying threads can be\nexpensive in terms of memory and CPU usage. Thread pools provide\na way to reuse threads for multiple tasks, reducing the overhead of\nthread creation and destruction.\nIncreased scalability: By using a thread pool, you can increase the\nnumber of tasks that can be executed concurrently without having to\ncreate a new thread for each task. This can help to improve the\nscalability of a program by allowing it to handle more concurrent\nrequests.\nImproved resource management: Thread pools provide a way to\nlimit the number of threads that can be created, which can help to\nprevent resource exhaustion and improve the overall performance of\na program.\nBetter performance: Thread pools can improve the performance of a\nprogram by reducing the amount of time it takes to create and\ndestroy threads, and by allowing tasks to be executed concurrently.\nSimplified concurrency management: Thread pools provide a higher-\nlevel abstraction for managing concurrent tasks, making it easier to\nwrite and maintain multithreaded code.\nOverall, thread pools are an important tool for optimizing the\nperformance and scalability of concurrent programs, and are widely\nused in Java and other programming languages.\nWhat is deadlock I multithreading?\nDeadlock in Java is a situation that occurs when two or more threads\nare blocked and waiting for each other to release the resources they",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 152,
          "text": "hold. As a result, none of the threads can proceed with their\nexecution, leading to a complete halt in the program.\nA typical scenario for a deadlock involves two or more threads\nacquiring locks on multiple resources in different orders. For\nexample, Thread A may acquire a lock on Resource X, while Thread\nB acquires a lock on Resource Y. If Thread A then attempts to\nacquire a lock on Resource Y while Thread B attempts to acquire a\nlock on Resource X, both threads will be blocked, waiting for the\nother thread to release the lock. This situation is known as a\ndeadlock.\nDeadlocks can be difficult to detect and diagnose, as they typically\ndo not result in any error messages or exceptions. They can lead to\nsignificant performance degradation or even complete program\nfailure if not properly handled.\nTo prevent deadlocks, it's important to follow best practices for\nconcurrent programming, such as avoiding nested locks, acquiring\nlocks in a consistent order, and using timeouts on locks to avoid\nindefinite blocking. Additionally, tools such as deadlock detection\nalgorithms and thread profiling tools can be used to identify and\ndiagnose deadlocks in a program.\nHow to check if there is deadlock and how to prevent it?\nTo check if there is a deadlock in a Java program, you can use\nvarious tools and techniques. One of the most common ways to\ndetect a deadlock is by analyzing a thread dump. A thread dump is a\nsnapshot of the current state of all threads in a Java program. You\ncan use the jstack command-line tool or a Java profiler to capture a\nthread dump and analyze it to check for deadlocks.\nTo prevent deadlocks in a Java program, you can use several\ntechniques, including:\nAcquire locks in a consistent order: One of the main causes of\ndeadlocks is when multiple threads acquire locks on resources in\ndifferent orders. To prevent this, you can define a consistent order\nfor acquiring locks and ensure that all threads follow the same order.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 153,
          "text": "Use timeouts on lock acquisition: To prevent deadlocks caused by\nthread contention for a lock, you can use timeouts on lock\nacquisition. This allows threads to wait for a lock for a limited time,\nafter which they release the lock and try again later.\nAvoid nested locks: Nested locks, where a thread acquires one lock\nwhile holding another lock, can increase the likelihood of deadlocks.\nTo prevent this, you can try to design your code to avoid nested\nlocks wherever possible.\nUse higher-level concurrency abstractions: Higher-level concurrency\nabstractions, such as semaphores, barriers, or thread-safe data\nstructures, can help to simplify the management of concurrent code\nand reduce the likelihood of deadlocks.\nTest and debug your code: Testing and debugging your code using\ntools such as jUnit, JMeter, or debuggers can help you identify and\nfix potential issues before they cause deadlocks in production.\nBy using these techniques, you can prevent deadlocks and ensure\nthe reliability and performance of your Java program.\nWhat is the difference between deadlock and Livelock?\nCharacteristi\nc Deadlock Livelock\nTwo or more threads Two or more threads are continuously\nare waiting for each changing their state in response to\nother to release a each other's actions, but none of the\nresource in order to threads are making any progress\nDefinition proceed. towards their goals.\nNone of the threads The threads are making progress, but\nProgress can make progress. not towards their goals.\nIdentify and break the Identify and eliminate the source of the\nResolution deadlock cycle. livelock.\nWhat are the Symptoms of deadlock?\nA deadlock in a Java program can manifest in several ways, but\nthere are some common symptoms that you can look for to identify",
          "tables": [
            [
              [
                "",
                ""
              ],
              [
                "Characteristi",
                ""
              ],
              [
                "c",
                "Deadlock"
              ],
              [
                "",
                ""
              ],
              [
                "",
                "Two or more threads"
              ],
              [
                "",
                "are waiting for each"
              ],
              [
                "",
                "other to release a"
              ],
              [
                "",
                "resource in order to"
              ],
              [
                "Definition",
                "proceed."
              ],
              [
                "",
                ""
              ],
              [
                "",
                "None of the threads"
              ],
              [
                "Progress",
                "can make progress."
              ],
              [
                "",
                ""
              ],
              [
                "",
                "Identify and break the"
              ],
              [
                "Resolution",
                "deadlock cycle."
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 154,
          "text": "a deadlock. Here are some of the most common symptoms of a\ndeadlock in Java:\nThreads appear to be stuck or unresponsive: When a deadlock\noccurs, one or more threads may appear to be stuck or\nunresponsive, which can cause the program to become unresponsive\nas well.\nThe program hangs or stops responding: If a deadlock occurs, the\nprogram may hang or stop responding, even though it appears to be\nrunning normally.\nCPU usage spikes: A deadlock can cause a spike in CPU usage, as\nthe program may be using more CPU resources than necessary to\nexecute a task.\nThreads are waiting for resources: In a deadlock situation, one or\nmore threads may be waiting for resources, such as locks or shared\ndata, that are held by other threads that are waiting for resources\nheld by the first thread.\nThread dump analysis shows a circular wait: When analyzing a\nthread dump, you may see a circular wait, where one thread is\nwaiting for a resource held by another thread, which is in turn\nwaiting for a resource held by the first thread.\nIf you suspect that your Java program is experiencing a deadlock,\nyou can use various tools and techniques, such as thread dump\nanalysis or profiling, to identify and fix the issue.\nWhat is Static synchronization in java?\nIn Java, the keyword \"static\" is used to indicate that a method or\nvariable belongs to the class rather than to an instance of the class.\nA static method or variable can be accessed without creating an\ninstance of the class.\nStatic synchronization is a mechanism used to synchronize the\naccess to a static method or variable by multiple threads. In Java, a\nstatic method or variable can be accessed by multiple threads\nsimultaneously, which can lead to data inconsistencies if not used",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 155,
          "text": "properly. To prevent this, a static method or variable can be\nsynchronized, so that only one thread can access it at a time.\nTo synchronize a static method in Java, you can use the keyword\n\"synchronized\" before the method declaration.\npublic static synchronized void myStaticMethod() {\n//method body\n}\nTo synchronize a static variable in Java, you can use the keyword\n\"synchronized\" before the variable declaration or you can use a class\nlevel lock to synchronize the block of code that access the variable.\npublic static int myStaticVariable;\npublic static void addToStaticVariable(int value) {\nsynchronized (MyClass.class) {\nmyStaticVariable += value;\n}\n}\nIt's important to notice that when you synchronize a static method\nor variable in Java, you are synchronizing the access to that method\nor variable across all instances of the class. This can lead to poor\nperformance if the synchronized block of code is accessed frequently\nby multiple threads, it's important to make sure that the\nsynchronization is used only when it's necessary and make sure that\nthe synchronized block of code is as small as possible.\n \nWhich exception can be thrown from the threads run\nmethod?\nThe run() method of a Thread class in Java can throw an unchecked\nexception, ThreadDeath. Additionally, any exception thrown by the\ncode inside the run() method will propagate out of the run() method\nand can be caught by an appropriate exception handler.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 156,
          "text": "ThreadDeath is a special exception that is used by the Java Virtual\nMachine (JVM) to terminate a thread. It is not intended to be caught\nor handled by application code, and typically indicates that the\nthread has completed its execution.\nIt's important to note that ThreadDeath is an unchecked exception,\nwhich means that it does not need to be declared in a throws clause\nor caught by a catch block.\nIt's always a good practice to include try-catch block in the run\nmethod, it will handle any unexpected exception and prevent the\nthread from getting terminated abruptly.\n \nWhat is thread-local?\nThread-local is a Java class that allows you to store data that is\nspecific to a given thread.\nSome of the Use case:\n•  Sharing data between different parts of the same thread\nwithout having to pass it around explicitly.\n•  Storing data that is specific to a particular user or request.\n•  Implementing the singleton pattern.\nWhat is thread-local, weak references, volatile, finalize,\nfinally andserialization?\n1. Thread Local: Thread-local variables are unique to each thread\nand do not share their values with other threads.\n2. Weak References: Weak references allow objects to be eligible for\ngarbage collection when no strong references exist.\n3. Volatile: The volatile keyword in Java ensures that a variable's\nvalue is always read and written from/to main memory, preventing\nthread-specific caching.\n4. Finalize: The finalize method in Java is called by the garbage\ncollector before an object is reclaimed. It's rarely used due to its\nunpredictability.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 157,
          "text": "5. Finally: finally is a block in exception handling that is executed\nregardless of whether an exception is thrown or not.\n6. Serialization: Serialization is the process of converting objects into\na byte stream, often used for storage or network transmission.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 158,
          "text": "CHAPTER 5: JAVA-8\nWhat are the features of Java 8 and Java 11?\nJava 8 was a major release of the Java programming language and\nplatform, and it introduced several new features and improvements.\nSome of the most notable features of Java 8 include:\nLambda expressions: A way to define and pass around blocks of\ncode as if they were objects, which allows for more concise,\nfunctional-style code.\nFunctional interfaces: Interfaces that have exactly one abstract\nmethod, which allows for behaviour parameterization and the ability\nto pass behaviour as a method argument.\nStreams: A new API for processing collections of data that allows\nfor operations such as filtering, mapping, and reducing to be\nperformed in a more functional and readable way.\nDate and time API: A new API for working with date and time,\nwhich replaces the legacy java.util.Date and java.util.Calendar\nclasses.\nConcurrent Accumulators: A set of classes designed for use with\nparallel streams, which allow for the efficient accumulation of values.\nJava 11, released in 2018, is a long-term support release and it\nbrings several important changes and improvements over Java 8.\nSome of the most notable features of Java 11 include:\nLocal-variable type inference: A new syntax that allows you to\ninfer the type of a variable from the value being assigned to it, which\ncan make your code more readable and concise.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 159,
          "text": "What are lambda expressions and their use in java 8?\nLambda expressions are a new feature introduced in Java 8 that\nallow developers to write more concise, functional-style code. They\nare a way to define and pass around blocks of code as if they were\nobjects.\nA lambda expression is composed of three parts:\nA list of parameters (or none) enclosed in parentheses.\nThe \"arrow\" token ->\nThe body of the lambda expression, which can be a single\nexpression or a block of code.\nHere is an example of a simple lambda expression that takes two\nintegers and returns their sum:\n(int a, int b) -> {return a + b; }\nLambda expressions can be used to define functional interfaces,\nwhich are interfaces that have a single abstract method. The\njava.util.function package in Java 8 includes several functional\ninterfaces such as Consumer, Function, Predicate and Supplier.\nLambda expressions can also be passed to methods or used as\narguments for functional interfaces. For example, the forEach\nmethod of the java.util.stream.Stream class takes a Consumer\nfunctional interface as an argument, allowing you to pass in a\nlambda expression to perform a specific action on each element in\nthe stream.\nLambda expressions can also be used with other features of Java 8\nsuch as streams and the new date and time API to perform\noperations such as filtering, mapping and reducing collections of\ndata, in a more functional and readable way.\nIt's worth noting that, although lambda expressions can help make\nyour code more concise and readable, they can also make it more\ndifficult to understand if they are not used correctly. It's important to\nuse them in a way that makes the code easy to understand and",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 160,
          "text": "maintain.\n \nWhat are the Java 8 Interface changes?\nJava 8 introduced several changes to the way interfaces work,\nincluding the addition of default methods and static methods. These\nchanges were made to allow interfaces to provide more functionality\nand to make it easier to add new methods to existing interfaces\nwithout breaking existing code.\nDefault methods: Java 8 introduced the concept of default\nmethods, which are methods that have a default implementation in\nan interface. This allows interfaces to provide a default\nimplementation for methods, without requiring the classes that\nimplement the interface to provide one.\nStatic methods: Java 8 also introduced the ability for interfaces to\nhave static methods, which are methods that can be called on the\ninterface itself, rather than on an instance of the interface.\nFunctional interface: Java 8 also introduced functional interface,\nan interface that has exactly one abstract method. This is used to\ncreate lambda expressions, which are used to implement the single\nabstract method of the functional interface.\nPrivate methods: Java 9 introduced the ability to define private\nmethods within interfaces. This feature allows the interfaces to have\nmore encapsulation and organization and allows the interface to\nprovide more functionality.\nThese changes to interfaces in Java 8 and later have made it\npossible to add new functionality to existing interfaces in a\nbackwards-compatible way, and have also made it easier to create\nmore functional and modular code.\n \nWhat is a Functional interface in Java-8?\nIn Java 8, a functional interface is an interface that has exactly one\nabstract method. The \"functional\" in the name refers to the fact that",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 161,
          "text": "the interface can be used as the target of a lambda expression or\nmethod reference.\nFunctional interfaces are also known as Single Abstract Method\nInterfaces or SAM Interfaces. A functional interface can have any\nnumber of default and static methods.\nFunctional interfaces are annotated with @FunctionalInterface\nannotation.\nThe main use of functional interfaces is to create lambda\nexpressions, which are used to implement the single abstract\nmethod of the functional interface.\nFor example,\n@FunctionalInterface\ninterface MyFunctionalInterface {\npublic void myMethod();\n}\nThis is a functional interface because it has only one abstract\nmethod, myMethod().\nA functional interface can be implemented using a lambda\nexpression, like this:\nMyFunctionalInterface myObject = () -> {\n// code here\n};\nJava 8 library has many functional interface such as:\njava.util.function.Function<T,R>: Represents a function that takes an\nargument of type T and returns an argument of type R.\njava.util.function.Consumer<T>: Represents an operation that takes\na single input argument and returns no result.\njava.util.function.Predicate<T>: Represents a predicate (boolean-\nvalued function) of one argument.\njava.util.function.Supplier<T>: Represents a supplier of results.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 162,
          "text": "The above are examples of functional interfaces which are widely\nused in the Java 8 Stream API and other functional programming\nconstructs in Java 8.\n \nWhat are the types of Functional interfaces?\nThere are several types of functional interfaces in Java 8, each with\na specific purpose. Some of the most commonly used functional\ninterfaces include:\nConsumer<T>: Represents an operation that takes a single input\nargument and returns no result. This interface is typically used to\nperform some operation on an object, such as printing it to the\nconsole.\nSupplier<T>: Represents a supplier of results. This interface is\ntypically used to create a new object or retrieve a value from a data\nsource.\nPredicate<T>: Represents a predicate (boolean-valued function)\nof one argument. This interface is typically used to test a condition\nand return a boolean value.\nFunction<T, R>: Represents a function that takes an argument of\ntype T and returns an argument of type R. This interface is typically\nused to transform an object from one type to another.\nUnaryOperator<T>: Represents an operation on a single operand\nthat produces a result of the same type as its operand. It is a\nspecialization of Function for the case where the operand and result\nare of the same type.\nBinaryOperator<T>: Represents an operation upon two operands\nof the same type, producing a result of the same type as the\noperands.\nBiConsumer<T, U>: Represents an operation that accepts two\ninput arguments and returns no result.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 163,
          "text": "BiFunction<T, U, R>: Represents a function that takes two\narguments and produces a result.\nBiPredicate<T, U>: Represents a predicate (boolean-valued\nfunction) of two arguments.\nRunnable: Represents a command that can be executed.\nThese are some of the most common functional interfaces, but there\nare many others in the Java standard library, each with its own\nspecific use case.\nWhat is Method Reference in Java 8?\nIn Java 8, a method reference is a shorthand notation for a lambda\nexpression that simply invokes an existing method. The basic syntax\nfor a method reference is:\nClassName::methodName\nFor example, if you have a class called \"MyClass\" with a method\ncalled \"myMethod\", you could use a method reference to invoke that\nmethod like this:\nMyClass::myMethod\nYou can also use method references with constructors and array\nconstructors. The basic syntax for a constructor reference is:\nClassName::new\nFor example, if you have a class called \"MyClass\", you could use a\nconstructor reference to create a new instance of that class like this:\nMyClass::new\nAnd the basic syntax for a array constructor reference is:\nTypeName[]::new\nFor example, if you want to create an array of integers, you could\nuse an array constructor reference like this:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 164,
          "text": "int[]::new\nMethod references can be used in situations where a lambda\nexpression would be used to invoke an existing method, such as\nwhen passing a method as an argument to a higher-order function.\n \nWhat is Optional in java?\nIn Java, the Optional class is a container object which may or may\nnot contain a non-null value. It is introduced in Java 8 as a part of\nthe java.util package. It is used to represent a value that may not be\npresent, and to prevent null pointer exceptions.\nThe main methods of the Optional class are:\nof(T value): Creates an Optional instance with the given non-null\nvalue.\nofNullable(T value): Creates an Optional instance with the given\nvalue, which can be null.\nempty(): Creates an empty Optional instance.\nisPresent(): Returns true if the Optional contains a value, false\notherwise.\nget(): Returns the contained value, if present. If the Optional is\nempty, it throws a NoSuchElementException.\norElse(T other): Returns the contained value if present, otherwise\nreturns the given default value.\norElseGet(Supplier<? extends T> supplier): Returns the contained\nvalue if present, otherwise returns the result of the given supplier\nfunction.\norElseThrow(Supplier<? extends X> exceptionSupplier): Returns the\ncontained value if present, otherwise throws the exception provided\nby the given supplier function.\nifPresent(Consumer<? super T> consumer): If a value is present,\ninvoke the specified consumer with the value, otherwise do nothing.\nIt is best practice to use Optional when the return type of a method\ncan return null as it forces to handle the null case explicitly.\nFor example,",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 165,
          "text": "Optional<String> optional = Optional.ofNullable(null);\nif(optional.isPresent()) {\nSystem.out.println(optional.get());\n} else {\nSystem.out.println(\"No value\");\n}\nIn this example, the value of the optional is null, so the output\nwould be \"No value\".\n \nWhat are the Intermediate and terminal operations in java 8?\nIn Java 8, the Stream API is used to process collections of data in a\nfunctional manner. The Stream API provides two types of operations:\nintermediate and terminal.\nIntermediate operations are operations that are performed on a\nstream, but do not produce a final result. They are used to transform\nthe elements of a stream in some way, and return a new stream that\ncontains the transformed elements. Examples of intermediate\noperations include filter, map, and flatMap.\nTerminal operations are operations that produce a final result or a\nside-effect. They are used to consume the elements of a stream and\nproduce a final result, such as a count, a sum, or a list. Examples of\nterminal operations include forEach, reduce, and collect.\nIntermediate operations are lazy, meaning that they are not\nexecuted until a terminal operation is called. This allows multiple\nintermediate operations to be chained together, with the result of\none operation being passed as the input to the next.\nFor example,\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\nint sum = numbers.stream()\n.filter(n -> n % 2 == 0)\n.map(n -> n * 2)",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 166,
          "text": ".reduce(0, Integer::sum);\nIn this example, filter is an intermediate operation that filters the\nstream of numbers to keep only even numbers. map is an\nintermediate operation that transforms each number in the stream\nby doubling it. reduce is a terminal operation that sums the numbers\nin the stream and returns the result.\nIt is important to note that once a terminal operation is called, the\nstream is considered consumed and it can't be reused.\n \nWhat is parallel processing in Java-8, and what are its uses?\nParallel processing in Java 8 refers to the ability to perform\noperations on a stream in parallel, using multiple threads. The Java 8\nStream API provides the parallel() method, which can be used to\ncreate a parallel stream from an existing sequential stream.\nA parallel stream automatically splits the data into smaller chunks\nand assigns each chunk to a separate thread for processing. The\nresults from each thread are then combined to produce the final\nresult.\nParallel processing can be useful for improving the performance of\ncertain types of operations, such as filtering and mapping, on large\ndata sets. It can also be used to perform complex computations in\nparallel, such as reducing a large data set to a single value.\nFor example,\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nint sum =\nnumbers.parallelStream().mapToInt(Integer::intValue).sum();\nIn this example, the parallelStream() method is used to create a\nparallel stream of the numbers, and the mapToInt() and sum()\nmethods are used to calculate the sum of the numbers in parallel.\nIt's important to note that parallel processing may not always be\nbeneficial and it is dependent on the size of data and nature of",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 167,
          "text": "operation. It's always good to check the performance of the\noperation in both parallel and sequential mode and compare the\nresults.\nWhat is the difference between Flat and flat-map methods in\nJava-8?\nflatMap is a method in Java Streams that is used to convert a stream\nof collections or arrays into a single flattened stream. In contrast,\nthe flat method is not a standard method in Java Streams.\nHere is an example of using flatMap to flatten a stream of\ncollections:\nList<List<Integer>> nestedList = Arrays.asList(\nArrays.asList(1, 2),\nArrays.asList(3, 4),\nArrays.asList(5, 6)\n);\nList<Integer> flattenedList = nestedList.stream()\n.flatMap(Collection::stream)\n.collect(Collectors.toList());\nSystem.out.println(flattenedList); // Output: [1, 2, 3, 4, 5, 6]\nIn this example, we start with a List of List objects. We use the\nflatMap method to convert each inner List into a stream of integers,\nand then concatenate all the streams into a single stream of\nintegers. Finally, we collect the resulting stream into a new List\nobject.\nThe flat method, on the other hand, is not a standard method in\nJava Streams. It may be implemented as a custom method or library\nmethod, but its behavior would depend on the implementation.\nWhat is default method its use?\nA default method is a method defined in an interface that has a\ndefault implementation. Default methods were introduced in Java 8",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 168,
          "text": "to allow interfaces to be extended without breaking existing\nimplementations.\nPrior to Java 8, interfaces could only contain method signatures,\nwhich meant that any class that implemented an interface was\nrequired to provide an implementation for all of its methods. This\ncould be problematic when you wanted to add new methods to an\nexisting interface, because it would break all of the existing\nimplementations.\nWith default methods, you can provide a default implementation for\na method in an interface, which means that classes that implement\nthe interface are not required to provide their own implementation.\nIf a class does not provide its own implementation for a default\nmethod, it will use the default implementation defined in the\ninterface.\nDefault methods are useful for extending existing interfaces without\nbreaking existing implementations. They can also be used to provide\na common implementation for a method that is applicable to all\nclasses that implement the interface.\nFor example, consider an interface for a collection of items:\npublic interface Collection<T> {\nvoid add(T item);\nboolean contains(T item);\nint size();\ndefault boolean isEmpty() {\nreturn size() == 0;\n}\n}\nThis interface defines three methods for adding items to the\ncollection, checking if an item is contained in the collection, and\ngetting the size of the collection. It also defines a default method,\nisEmpty(), that returns true if the size of the collection is 0.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 169,
          "text": "Classes that implement this interface are not required to provide\ntheir own implementation for isEmpty(), because a default\nimplementation is already provided in the interface. However, they\ncan override the default implementation if they need to provide a\ndifferent behaviour.\nWhat is default and static methods in Java-8?\nDefault and static methods are two new features that were\nintroduced in Java 8.\nDefault methods allow you to add new methods to interfaces without\nbreaking existing code. This is done by providing a default\nimplementation of the method in the interface. Classes that\nimplement the interface can override the default implementation, or\nthey can simply use the default implementation.\nexample of a default method:\npublic interface Animal {\ndefault void eat() {\nSystem.out.println(\"I am eating.\");\n}\n}\nAny class that implements the Animal interface will have access to\nthe eat() method, even if the class does not explicitly implement the\neat() method.\nStatic methods are methods that can be declared in interfaces. Static\nmethods belong to the interface itself, not to any specific instance of\nthe interface. Static methods can be called without creating an\ninstance of the interface.\npublic interface Animal {\nstatic void makeSound() {\nSystem.out.println(\"I am making a sound.\");\n}\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 170,
          "text": "The makeSound() method can be called without creating an instance\nof the Animal interface:\nAnimal.makeSound(); // prints \"I am making a sound.\"\nDefault and static methods can be used to improve the design of\nJava applications in a number of ways. For example, default\nmethods can be used to add new functionality to existing interfaces,\nand static methods can be used to provide utility methods that are\navailable to all classes that implement a particular interface.\nWhat are the memory changes that happened in java8?\nThe following are some of the memory changes that happened in\nJava 8:\nMetaspace: Java 8 introduced Metaspace to replace PermGen.\nMetaspace is a region of memory that is used to store class\nmetadata, such as class names, field and method names, and\nmethod bytecode. Metaspace is part of the native memory heap,\nwhich means that it is not limited by the maximum heap size.\nG1 garbage collector: Java 8 introduced the G1 garbage collector as\nthe default garbage collector. The G1 garbage collector is a\nconcurrent garbage collector, which means that it can collect\ngarbage while the application is still running. This can improve the\nperformance of applications that have large heaps.\nCompressedOops: Java 8 introduced CompressedOops, which is a\ntechnique that can reduce the memory footprint of Java objects.\nCompressedOops works by compressing object pointers from 64 bits\nto 32 bits on 64-bit platforms. This can reduce the memory footprint\nof Java objects by up to 50%.\nString deduplication: Java 8 introduced String deduplication, which is\na technique that can reduce the memory footprint of String objects.\nString deduplication works by storing a single copy of each unique\nString object in memory. This can reduce the memory footprint of\nString objects by up to 50%.\nOverall, the memory changes in Java 8 have made Java applications\nmore memory-efficient. This is important for applications that run on",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 171,
          "text": "devices with limited memory, such as mobile devices and embedded\nsystems.\nWhat is the new Java 8 changes in HashMap?\nJava 8 made the following changes to HashMap:\nNew hash function for Strings: Java 8 introduced a new hash\nfunction for Strings that is more resistant to hash collisions. This can\nimprove the performance of HashMap when it is used to store\nStrings.\nTreeification: Java 8 added a new feature called \"treeification\" to\nHashMap. Treeification automatically converts a linked list of entries\nin a bucket to a red-black tree when the number of entries in the\nbucket exceeds a certain threshold. This can improve the\nperformance of HashMap when there are a large number of hash\ncollisions.\nConcurrentHashMap: Java 8 introduced a new concurrent\nimplementation of HashMap called ConcurrentHashMap.\nConcurrentHashMap is designed to be safe for concurrent access by\nmultiple threads.\nWhy are the variable inside lambda function final in java?\nVariables inside lambda functions are final in Java because it helps to\nprevent concurrency problems. Lambda functions are often used to\ncapture variables from the surrounding scope. If these variables\nwere not final, then it would be possible for multiple threads to\nmodify the variables at the same time, which could lead to\nunexpected results.\nint x = 0;\nRunnable runnable = () -> {\nx++; // This would cause a concurrency problem if multiple\nthreads were executing this lambda function at the same time.\n};\nThread thread1 = new Thread(runnable);\nThread thread2 = new Thread(runnable);",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 172,
          "text": "thread1.start();\nthread2.start();\nIf the x variable were not final, then it is possible that both threads\nwould increment the x variable at the same time, and the final value\nof x would be unpredictable.\nBy making variables inside lambda functions final, Java can ensure\nthat these variables cannot be modified by multiple threads at the\nsame time. This helps to prevent concurrency problems and makes\nJava code more robust.\nHere is an example of how to use a lambda function without causing\na concurrency problem:\nint x = 0;\nRunnable runnable = () -> {\n// This is safe because the variable x is final.\nint y = x + 1;\nSystem.out.println(y);\n};\nThread thread1 = new Thread(runnable);\nThread thread2 = new Thread(runnable);\nthread1.start();\nthread2.start();\nIn this example, the x variable is final, so it cannot be modified by\nmultiple threads at the same time. This ensures that both threads\nwill read the same value for the x variable, and the output of the\nprogram will be predictable.\nOverall, making variables inside lambda functions final is a good\npractice that can help to prevent concurrency problems and make\nJava code more robust.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 173,
          "text": "CHAPTER 6: SPRING-FRAMEWORK\nWhat is dependency injection?\nDependency injection is a design pattern used in software\ndevelopment that involves separating the creation of an object from\nits dependencies. It allows for a more flexible and testable code by\ndecoupling the components of a software system.\nIn simple terms, dependency injection is a technique for providing\nthe dependencies of an object from the outside, rather than having\nthe object itself create or find them. This is achieved by injecting the\ndependencies into the object's constructor or by using a dedicated\ndependency injection framework.\nBy using dependency injection, software components become more\nmodular and reusable. Changes to one component can be made\nwithout affecting the other components of the system, making it\neasier to maintain and extend the software. Additionally, it promotes\nbetter testing practices, as dependencies can be easily mocked or\nreplaced during testing.\nOverall, dependency injection is an important tool for creating well-\nstructured and maintainable software systems.\nWhat are the types of dependency injection and what benefit\nwe are getting using that?\nDependency injection : Dependency injection (DI) is a design\npattern that allows objects to be supplied with their dependencies,\nrather than having to create them themselves. There are several\ntypes of dependency injection, each with its own benefits:\nConstructor injection: In this type of injection, the dependencies\nare passed to the constructor of the class when it is instantiated.\nThis ensures that the class always has the required dependencies\nand can be useful for enforcing class invariants.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 174,
          "text": "Setter injection: In this type of injection, the dependencies are\npassed to setter methods of the class after it has been instantiated.\nThis allows the class to be reused in different contexts, as the\ndependencies can be changed at runtime.\nField injection: In this type of injection, the dependencies are\ninjected directly into the fields of the class. This can be useful for\nsimple classes with a small number of dependencies.\nMethod injection: In this type of injection, the dependencies are\npassed to a method of the class after it has been instantiated. This\nallows the class to be reused in different contexts, as the\ndependencies can be changed at runtime.\nEach type of dependency injection has its own benefits, and the\nchoice of which one to use will depend on the specific requirements\nof the application.\nConstructor injection is useful when a class needs to be in a specific\nstate when it is created. It makes the class more robust and less\nsusceptible to bugs caused by incomplete initialization.\nSetter injection allows the class to be reusable, as the dependencies\ncan be changed at runtime, making it easy to test the class with\ndifferent dependencies.\nField injection is the simplest way of injecting dependencies and it\ndoesn't require any additional methods or constructors.\nMethod injection allows the class to be reusable, as the\ndependencies can be changed at runtime and it can be used to\nconfigure objects that need to be initialized with specific values.\nOverall, dependency injection allows for more flexible and\nmaintainable code by decoupling the implementation of a class from\nthe creation and management of its dependencies. This makes it\neasier to test, understand, and evolve the code over time.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 175,
          "text": "Which type of dependency injection do you prefer?\nThe preferred type of dependency injection depends on the specific\nuse case and the requirements of the application.\nHere are some benefits and considerations for each type of\ndependency injection:\nConstructor injection:\nPreferred when a bean has a mandatory dependency that must be\nprovided at instantiation.\nConstructor injection ensures that all dependencies are provided and\nvalid at instantiation.\nConstructor injection makes the code more readable and self-\nexplanatory.\nConstructor injection makes the code more testable, as the\ndependencies are explicit.\nSetter injection:\nPreferred when a bean has optional dependencies that can be\nprovided later.\nSetter injection allows the bean to be instantiated without all of its\ndependencies.\nSetter injection makes the code more readable and self-explanatory.\nSetter injection makes the code more testable, as the dependencies\nare explicit.\nField injection:\nPreferred when a bean has a mandatory dependency that must be\nprovided at instantiation.\nField injection is less verbose than constructor injection.\nField injection can make the code more difficult to read and\nunderstand.\nField injection can make the code more difficult to test, as the\ndependencies are not explicit.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 176,
          "text": "Ultimately, the choice of which type of dependency injection to use\ndepends on the specific requirements of your application and your\nteam's coding style.\n \nHow does inversion of control works inside the Spring\nContainer?\nInversion of Control (IoC) is a design pattern that allows control to\nbe transferred from the application code to an external container. In\nthe context of a Java application, this container is often referred to\nas an IoC container or a dependency injection (DI) container.\nIoC containers are responsible for creating and managing objects,\nand they do this by relying on a set of configuration rules that define\nhow objects are created and wired together.\nHere's how IoC works inside an IoC container:\nConfiguration: In order to use an IoC container, you\nneed to configure it with a set of rules that define how\nobjects should be created and wired together. This\nconfiguration is typically done using XML or Java\nannotations.\nObject creation: When your application requests an\nobject from the container, the container uses the\nconfiguration rules to create a new instance of the\nrequested object.\nDependency injection: The container injects any\nrequired dependencies into the newly created object.\nThese dependencies are typically defined in the\nconfiguration rules.\nObject lifecycle management: The container manages\nthe lifecycle of the objects it creates. This means that it's\nresponsible for creating, initializing, and destroying objects\nas required by the application.\nInversion of control: By relying on the container to\ncreate and manage objects, the application code no longer\nhas direct control over the object creation process.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 177,
          "text": "Instead, the container takes on this responsibility, and the\napplication code simply requests the objects it needs from\nthe container.\nOverall, the IoC container is responsible for managing object\ncreation and lifecycle management, while the application code is\nresponsible for defining the rules that govern how objects are\ncreated and wired together. This separation of concerns allows for\ngreater flexibility and modularity in the application, as the application\ncode can be easily modified without affecting the underlying object\ncreation and management processes.\nWhat is the difference Between BeanFactory and\nApplicationContext?\nIn Spring Framework, both the BeanFactory and the\nApplicationContext are used to manage the lifecycle and\ndependencies of beans, but they have some key differences.\nBeanFactory: BeanFactory is the root interface for accessing a\nSpring container. It is the basic container providing only\nconfiguration management, without advanced features like\ninternationalization or event propagation. BeanFactory is lightweight\nand suitable for simple applications, but it does not provide some\nadvanced features like internationalization, event handling, and AOP\nsupport.\nApplicationContext: The ApplicationContext interface is a sub-\ninterface of BeanFactory. It provides additional features such as\nsupport for internationalization (I18N) messages, application-layer\nspecific contexts such as the WebApplicationContext for use in web\napplications, and the ability to publish application events to\ninterested event listeners. It also provides support for AOP and can\nautomatically publish events to listeners.\nIn summary, the BeanFactory is a more lightweight and simple\ncontainer, while the ApplicationContext is a more advanced container\nthat provides additional features such as internationalization, event\nhandling, and AOP support. If your application needs only the basic",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 178,
          "text": "functionality of a container, the BeanFactory may be a better choice,\nwhile if your application needs more advanced features, the\nApplicationContext may be a better choice.\n \nWhat is difference between application context and bean\ncontext?\nIn Spring Framework, both the application context and bean context\nrepresent the context in which Spring-managed beans live. However,\nthere are some key differences between these two concepts:\nScope: The application context is the top-level context for a Spring\napplication, and it manages the lifecycle of all beans within the\napplication. The bean context, on the other hand, is a child context\nthat is created for a specific set of beans, typically defined within a\nmodule or subsystem of the application.\nConfiguration: The application context is responsible for configuring\nthe entire application, and it can be configured using XML,\nannotations, or Java code. The bean context, on the other hand, is\ntypically configured using XML or annotations, and it only contains\nthe configuration for the beans within that context.\nLifecycle: The application context is responsible for managing the\nlifecycle of the entire application, including starting up and shutting\ndown the application. The bean context, on the other hand, only\nmanages the lifecycle of the beans within that context.\nAccessibility: The application context is accessible throughout the\nentire application, while the bean context is only accessible within\nthe context in which it is created.\nIn summary, the application context is the top-level context that\nmanages the entire Spring application, while the bean context is a\nchild context that manages a specific set of beans within the\napplication. The application context is responsible for configuring\nand managing the lifecycle of the entire application, while the bean\ncontext only manages the beans within its scope.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 179,
          "text": "What is the Spring bean lifecycle?\nIn Spring Framework, a bean is an object that is managed by the\nSpring IoC container. The lifecycle of a bean is the set of events that\noccur from its creation until its destruction.\nThe Spring bean lifecycle can be divided into three phases:\ninstantiation, configuration, and destruction.\nInstantiation: In this phase, Spring IoC container\ncreates the instance of the bean. Spring Framework\nsupports several ways of instantiating a bean, such as\nthrough a constructor, a static factory method, or an\ninstance factory method.\nConfiguration: In this phase, Spring IoC container\nconfigures the newly created bean. This includes\nperforming dependency injection, applying any bean post-\nprocessors, and registering any initialization and\ndestruction call-backs.\nDestruction: In this phase, Spring IoC container destroys\nthe bean instance. It is the last phase of the Spring bean\nlifecycle.\nIn addition to these three phases, Spring Framework also provides\nseveral callbacks that allow developers to specify custom\ninitialization and destruction logic for a bean. These callbacks\ninclude:\n@PostConstruct: Invoked after the bean has been constructed and\nall dependencies have been injected\ninit-method: Specifies a method to be called after the bean has been\nconstructed and all dependencies have been injected\ndestroy-method: Specifies a method to be called just before the\nbean is destroyed.\n@PreDestroy: Invoked before the bean is destroyed.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 180,
          "text": "The Spring bean lifecycle is controlled by the Spring IoC container,\nwhich creates, configures, and manages the lifecycle of the beans.\nDevelopers can take advantage of the bean lifecycle callbacks to add\ncustom initialization and destruction logic to their beans, making it\neasier to manage the lifecycle of their objects and ensuring that\nresources are properly.\n \nWhat are bean scopes? What are prototype and request\nbean scopes?\nIn Spring Framework, a bean scope defines the lifecycle and the\nvisibility of a bean within the Spring IoC container. Spring Framework\nprovides several built-in bean scopes, each with a specific purpose\nand behaviour.\nThe following are the most commonly used bean scopes in Spring\nFramework:\nsingleton: This is the default scope for a bean. A\nsingleton bean is created only once per Spring IoC\ncontainer and is shared by all the clients that request it.\nprototype: A prototype bean is created every time it is\nrequested by a client. This scope is useful for beans that\nare stateful, and the state should not be shared between\nclients.\nrequest: A request-scoped bean is created for each HTTP\nrequest and is only available to the beans that are\ninvolved in handling that request.\nsession: A session-scoped bean is created for each HTTP\nsession and is only available to the beans that are involved\nin handling that session.\napplication: An application-scoped bean is created for\nthe entire lifetime of the web application, and is available\nto all beans throughout the application.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 181,
          "text": "websocket: A websocket-scoped bean is created for the\nduration of a WebSocket session, and is available to all\nbeans that are involved in handling that session.\nIt's important to note that the scope of a bean affects the lifecycle\nand visibility of that bean within the Spring IoC container. By\nchoosing the appropriate scope for a bean, developers can control\nhow and when the bean is created and how it interacts with other\nbeans in the application.\n \nWhat is the stateless bean in spring? name it and explain it.\nA stateless bean in Spring Framework is a bean that does not\nmaintain any state between method invocations. This means that\nthe bean does not store any information about the previous\ninvocations, and each method call is handled independently.\nStateless beans are typically used for services that perform actions\nor calculations, but do not maintain any state between invocations.\nThis can include services that perform mathematical calculations,\naccess external resources, or perform other tasks that do not require\nthe bean to maintain state.\nStateless beans can be implemented as singleton beans, and\nmultiple clients can share the same instance of the bean. Since\nstateless beans do not maintain any state, they can be easily scaled\nhorizontally by adding more instances of the bean to handle the\nincreased load.\nStateless beans also have the advantage of being simpler and easier\nto reason about, since they do not have to worry about maintaining\nstate between invocations. Additionally, since stateless beans do not\nmaintain any state, they can be easily serialized and replicated for\nhigh availability and scalability.\nHow is the bean injected in spring?\nIn Spring, a bean is injected (or wired) into another bean using the\nDependency Injection (DI) pattern. DI is a design pattern that allows",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 182,
          "text": "a class to have its dependencies provided to it, rather than creating\nthem itself.\nSpring provides several ways to inject beans into other beans,\nincluding:\nConstructor injection: A bean can be injected into another bean by\npassing it as a constructor argument. Spring will automatically create\nan instance of the dependent bean and pass it to the constructor.\npublic class BeanA {\nprivate final BeanB beanB;\npublic BeanA(BeanB beanB) {\nthis.beanB = beanB;\n}\n}\nSetter injection: A bean can be injected into another bean by\npassing it as a setter method argument. Spring will automatically call\nthe setter method and pass the dependent bean.\npublic class BeanA {\nprivate BeanB beanB;\n@Autowired\npublic void setBeanB(BeanB beanB) {\nthis.beanB = beanB;\n}\n}\nField injection: A bean can be injected into another bean by\nannotating a field with the @Autowired annotation. Spring will\nautomatically set the field with the dependent bean.\npublic class BeanA {\n@Autowired\nprivate BeanB beanB;\n}\nInterface injection: A bean can be injected into another bean by\nimplementing an interface. Spring will automatically set the field with\nthe dependent bean.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 183,
          "text": "public class BeanA implements BeanBUser {\n@Autowired\nprivate BeanB beanB;\n}\nIt's important to note that, you can use any combination of the\nabove methods, but you should choose the appropriate one\ndepending on your use case.\nAlso, Spring uses a technique called Autowiring to automatically wire\nbeans together, Autowiring can be done by type, by name, or by\nconstructor.\nBy default, Spring will try to autowire beans by type, but if there are\nmultiple beans of the same type, it will try to autowire by name\nusing the bean's name defined in the configuration file.\n \nHow to handle cyclic dependency between beans?\nLet’s say for example: Bean A is dependent on Bean B and Bean B is\ndependent on Bean A. How does the spring container handle eager\n& lazy loading?\nA cyclic dependency between beans occurs when two or more beans\nhave a mutual dependency on each other, which can cause issues\nwith the creation and initialization of these beans.\nThere are several ways to handle cyclic dependencies between\nbeans in Spring:\nLazy Initialization: By using the @Lazy annotation on one of the\nbeans involved in the cycle, it can be initialized only when it is\nactually needed.\n@Lazy\n@Autowired\nprivate BeanA beanA;\nConstructor injection: Instead of using setter or field injection, you\ncan use constructor injection, which will make sure that the",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 184,
          "text": "dependencies are provided before the bean is fully initialized.\npublic class BeanA {\nprivate final BeanB beanB;\npublic BeanA(BeanB beanB) {\nthis.beanB = beanB;\n}\n}\nUse a proxy: A proxy can be used to break the cycle by delaying the\ninitialization of one of the beans until it is actually needed. Spring\nAOP can be used to create a proxy for one of the beans involved in\nthe cycle.\nUse BeanFactory: Instead of injecting the bean directly, you can use\nBeanFactory to retrieve the bean when it's actually needed.\npublic class BeanA {\nprivate BeanB beanB;\n@Autowired\npublic BeanA(BeanFactory beanFactory) {\nthis.beanB = beanFactory.getBean(BeanB.class);\n}\n}\nIt's important to note that, the best way to handle cyclic\ndependencies will depend on the specific requirements of your\napplication. Therefore, you should carefully analyze the problem and\nchoose the approach that best suits your needs.\nWhat method would you call a before starting/loading a\nSpring boot application?\nIn Spring Boot, there are several methods that can be called before\nstarting or loading a Spring Boot application. Some of the most\ncommonly used methods are:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 185,
          "text": "main() method: The main() method is typically the entry point of a\nSpring Boot application. It is used to start the Spring Boot\napplication by calling the SpringApplication.run() method.\n@PostConstruct method: The @PostConstruct annotation can be\nused to mark a method that should be called after the bean has\nbeen constructed and all dependencies have been injected. This can\nbe used to perform any necessary initialization before the application\nstarts.\nCommandLineRunner interface: The CommandLineRunner interface\ncan be implemented by a bean to run specific code after the Spring\nApplication context has been loaded.\nApplicationRunner interface: The ApplicationRunner interface can be\nimplemented by a bean to run specific code after the Spring\nApplication context has been loaded and the Application arguments\nhave been processed.\n@EventListener : The @EventListener annotation can be used to\nregister a method to listen to specific Application events like\nApplicationStartingEvent, ApplicationReadyEvent and so on.\nIt's important to note that the choice of method will depend on the\nspecific requirements of the application, such as whether the\nmethod needs to be called after the application context has been\nloaded or after specific Application events.\n \nHow to handle exceptions in the spring framework?\nThere are several ways to handle exceptions in the Spring\nFramework:\ntry-catch block: You can use a try-catch block to catch and handle\nexceptions in the method where they occur. This approach is useful\nfor handling specific exceptions that are likely to occur within a\nparticular method.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 186,
          "text": "@ExceptionHandler annotation: You can use the\n@ExceptionHandler annotation on a method in a @Controller class\nto handle exceptions that are thrown by other methods in the same\nclass. This approach is useful for handling specific exceptions in a\ncentralized way across multiple methods in a controller.\n@ControllerAdvice annotation: You can use the\n@ControllerAdvice annotation on a class to define a global exception\nhandler for multiple controllers in your application. This approach is\nuseful for handling specific exceptions in a centralized way across\nmultiple controllers.\nHandlerExceptionResolver interface: You can implement the\nHandlerExceptionResolver interface to create a global exception\nhandler for your entire application. This approach is useful for\nhandling specific exceptions in a centralized way across the entire\napplication.\nErrorPage: You can define an ErrorPage in your application to\nredirect to a specific page when a certain exception occurs. This\napproach is useful for displaying a user-friendly error page when an\nexception occurs.\n@ResponseStatus annotation: You can use the\n@ResponseStatus annotation on an exception class to define the\nHTTP status code that should be returned when the exception is\nthrown.\nHow does filter work in spring?\nIn Spring Framework, a filter is a component that can be used to\npre-process and post-process requests and responses in a web\napplication. Filters are executed before and after the request is\nhandled by the controller. They can be used for various purposes\nsuch as:\nLogging and auditing\nAuthentication and Authorization\nEncoding and Decoding",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 187,
          "text": "Compression\nCaching\nA filter in Spring can be implemented as a class that implements the\njavax.servlet.Filter interface. This interface defines three methods:\ninit(FilterConfig), doFilter(ServletRequest, ServletResponse,\nFilterChain), and destroy(). The init() method is called when the\nfilter is first initialized, the doFilter() method is called for each\nrequest, and the destroy() method is called when the filter is being\ntaken out of service.\nTo use a filter in a Spring application, you can register the filter using\nFilterRegistrationBean or @WebFilter annotation. Once a filter is\nregistered, it can be mapped to a specific URL pattern or servlet.\nThe doFilter() method of a filter is where the actual processing takes\nplace. The method is passed a ServletRequest, a ServletResponse,\nand a FilterChain object. The FilterChain object represents the chain\nof filters that are executed for a particular request. The doFilter()\nmethod can choose to pass the request and response to the next\nfilter in the chain by calling the doFilter() method on the FilterChain\nobject, or it can choose to handle the request itself and not pass the\nrequest and response to the next filter.\nIn summary, filters are a powerful way to add pre-processing and\npost-processing to requests and responses in a Spring web\napplication. They can be used for various purposes such as logging,\nauthentication, encoding, compression, and caching. A filter is a\nclass that implements the javax.servlet.Filter interface, it can be\nregistered using FilterRegistrationBean or @WebFilter annotation,\nand it can be mapped to a specific URL pattern or servlet.\n \nWhat is the Spring-MVC flow?\nSpring MVC is a popular web framework for building Java web\napplications. It provides a Model-View-Controller architecture that\nseparates the application logic into three components: the model,\nthe view, and the controller.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 188,
          "text": "The Spring MVC flow involves the following steps:\nClient sends a request: The user sends a request to the Spring MVC\napplication through a browser or any other client application.\nDispatcherServlet receives the request: The DispatcherServlet is a\ncentral controller in the Spring MVC architecture. It receives the\nrequest from the client and decides which controller should handle\nthe request.\nHandlerMapping selects the appropriate controller: The\nHandlerMapping component maps the request URL to the\nappropriate controller based on the URL pattern configured in the\nSpring configuration file.\nController processes the request: The controller handles the request\nand performs the necessary processing logic. It may interact with\nthe model component to retrieve data or update the data.\nModel updates the data: The model component manages the data\nand provides an interface for the controller to retrieve or update the\ndata.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 189,
          "text": "ViewResolver selects the appropriate view: The ViewResolver\ncomponent maps the logical view name returned by the controller to\nthe actual view template.\nView renders the response: The view template is rendered to\ngenerate the response. It may include data from the model\ncomponent.\nDispatcherServlet sends the response: The DispatcherServlet sends\nthe response back to the client through the appropriate view\ntechnology, such as JSP, HTML, or JSON.\nThe Spring MVC flow is a cyclical process, as the client may send\nadditional requests to the application, and the cycle repeats.\nCan singleton bean scope handle multiple parallel requests?\nA singleton bean in Spring has a single instance that is shared across\nall requests, regardless of the number of parallel requests. This\nmeans that if two requests are processed simultaneously, they will\nshare the same bean instance and access to the bean's state will be\nshared among the requests.\nHowever, it's important to note that if the singleton bean is stateful,\nand the state is shared among requests, this could lead to race\nconditions and other concurrency issues. For example, if two\nrequests are trying to modify the same piece of data at the same\ntime, it could lead to data inconsistencies.\nTo avoid these issues, it's important to make sure that any stateful\nsingleton beans are designed to be thread-safe. One way to do this\nis to use synchronization or other concurrency control mechanisms\nsuch as the synchronized keyword, Lock or ReentrantLock classes, or\nthe @Transactional annotation if the bean is performing database\noperations.\nOn the other hand, if the singleton bean is stateless, it can handle\nmultiple parallel requests without any issues. It can be used to\nprovide shared functionality that doesn't depend on the state of the\nbean.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 190,
          "text": "In conclusion, a singleton bean can handle multiple parallel requests,\nbut it's important to be aware of the state of the bean and to ensure\nthat it's designed to be thread-safe if it has shared state.\nTell me the Design pattern used inside the spring framework.\nThe Spring Framework makes use of several design patterns to\nprovide its functionality. Some of the key design patterns used in\nSpring are:\nInversion of Control (IoC): This pattern is used throughout the\nSpring Framework to decouple the application code from the\nframework and its components. The IoC container is responsible for\nmanaging the lifecycle of beans and injecting dependencies between\nthem.\nSingleton: A singleton pattern is used to ensure that there is only\none instance of a bean created in the Spring IoC container. The\nsingleton pattern is used to create a single instance of a class, which\nis shared across the entire application.\nFactory: The factory pattern is used in Spring to create objects of\ndifferent classes based on the configuration. Spring provides a\nfactory pattern to create beans, which is based on the factory\nmethod design pattern.\nTemplate Method: The template method pattern is used in Spring to\nprovide a common structure for different types of operations. Spring\nprovides several template classes such as JdbcTemplate, Hibernate\nTemplate, etc. that provide a common structure for performing\ndatabase operations.\nDecorator: The decorator pattern is used in Spring to add additional\nfunctionality to existing beans. The Spring AOP (Aspect-Oriented\nProgramming) module uses the decorator pattern to add additional\nfunctionality to existing beans through the use of proxies.\nObserver: The observer pattern is used in Spring to notify other\nbeans of changes to the state of a bean. Spring provides the",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 191,
          "text": "ApplicationEvent and ApplicationListener interfaces, which can be\nused to implement the observer pattern.\nCommand: The command pattern is used in Spring to encapsulate\nthe execution of a particular piece of code in a command object.\nThis pattern is used in Spring to create reusable and testable code.\nFaçade: The façade pattern is used in Spring to simplify the interface\nof a complex system. The Spring Framework uses the façade pattern\nto provide a simplified interface for interacting with its components.\nThese are just a few examples of the design patterns used in Spring,\nthere are many more. Spring framework makes use of these\npatterns to provide a consistent and simple way to build\napplications, making it easier to manage complex systems.\n \nIs singleton bean scope thread-safe?\nBy default, a singleton bean in Spring is thread-safe, as only one\ninstance of the bean is created and shared among all requests.\nHowever, it's important to note that the thread-safety of a singleton\nbean depends on the implementation of the bean and the way it's\nbeing used.\nIf the singleton bean is stateless, it can handle multiple parallel\nrequests without any issues, as it does not maintain any state.\nIf the singleton bean is stateful, and the state is shared among\nrequests, it could lead to race conditions and other concurrency\nissues if not designed properly. For example, if two requests are\ntrying to modify the same piece of data at the same time, it could\nlead to data inconsistencies. To avoid these issues, it's important to\nmake sure that any stateful singleton beans are designed to be\nthread-safe by using synchronization or other concurrency control\nmechanisms such as the synchronized keyword, Lock or\nReentrantLock classes, or the @Transactional annotation if the bean\nis performing database operations.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 192,
          "text": "In summary, a singleton bean is thread-safe by default, but the\nthread-safety of a singleton bean depends on the implementation of\nthe bean and the way it's being used. If the bean is stateless it can\nhandle multiple parallel requests without issues, if it's stateful it\nshould be designed to be thread-safe in order to handle multiple\nparallel requests correctly.\n \nHow do factory design patterns work in terms of the spring\nframework?\nIn Spring, the factory design pattern is used to create objects of\ndifferent classes based on the configuration. The Spring IoC\ncontainer uses the factory pattern to create beans, which is based\non the factory method design pattern.\nThe factory method is a design pattern that provides a way to create\nobjects of different classes based on a factory interface. In Spring,\nthe IoC container acts as the factory, and the factory interface is\nrepresented by the BeanFactory or ApplicationContext interfaces.\nThe IoC container is responsible for creating and managing the\nlifecycle of beans. When you define a bean in the configuration, the\nIoC container will use the factory pattern to create an instance of\nthe bean. The IoC container will then manage the lifecycle of the\nbean, including injecting dependencies, initializing the bean, and\ndestroying the bean when it is no longer needed.\nHere's an example of how you can define a bean in Spring using the\nfactory design pattern:\n@Configuration\npublic class MyConfig {\n@Bean\npublic MyService myService() {\nreturn new MyService();\n}\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 193,
          "text": "In this example, the myService() method is annotated with @Bean.\nThis tells Spring to create an instance of the MyService class when\nthe IoC container is created. The IoC container will use the factory\npattern to create the instance and manage its lifecycle.\nAnother way to use factory pattern in spring is to use FactoryBean\ninterface, which allows you to create beans that are created by a\nfactory method, it's a factory of bean. The FactoryBean interface\ndefines a single method, getObject(), which returns the object that\nshould be exposed as the bean in the Spring application context.\nIn summary, the factory design pattern is used in the Spring\nFramework to create objects of different classes based on the\nconfiguration. The Spring IoC container acts as the factory, and the\nfactory interface is represented by the BeanFactory or\nApplicationContext interfaces, creating and managing the lifecycle of\nbeans, and also can be used by implementing FactoryBean interface\nto create beans in a factory method.\n \nHow the proxy design pattern is used in spring?\nThe proxy design pattern is used in Spring to add additional\nfunctionality to existing objects. The Spring Framework uses the\nproxy pattern to provide AOP (Aspect-Oriented Programming)\nfunctionality, which allows you to add cross-cutting concerns, such\nas logging, security, and transaction management, to your\napplication in a modular and reusable way.\nIn Spring, AOP proxies are created by the IoC container, and they\nare used to intercept method calls made to the target bean. This\nallows you to add additional behaviour, such as logging or security\nchecks, before or after the method call is made to the target bean.\nAOP proxies are created using one of three proxy types: JDK\ndynamic proxies, CGLIB proxies, or AspectJ proxies.\nJDK dynamic proxies: This is the default proxy type in Spring, and it\nis used to proxy interfaces.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 194,
          "text": "CGLIB proxies: This proxy type is used to proxy classes, and it works\nby creating a subclass of the target bean.\nAspectJ proxies: This proxy type uses the AspectJ library to create\nproxies, and it allows you to use AspectJ pointcuts and advice in\nyour application.\nSpring uses the proxy pattern to provide AOP functionality by\ngenerating a proxy object that wraps the target bean. The proxy\nobject will intercept method calls made to the target bean, and it will\ninvoke additional behavior, such as logging or security checks, before\nor after the method call is made to the target bean.\nHere's an example of how you can use Spring AOP to add logging to\na bean:\n@Aspect\n@Component\npublic class LoggingAspect {\n@Before(\"execution(* com.example.service.*.*(..))\")\npublic void logBefore(JoinPoint joinPoint) {\nlog.info(\"Started method: \" +\njoinPoint.getSignature().getName());\n}\n}\nIn this example, the LoggingAspect class is annotated with @Aspect\nand @Component to make it a Spring bean. The @Before annotation\nis used to specify that the logBefore() method should be executed\nbefore the method call is made to the target bean. The logBefore()\nmethod uses the JoinPoint argument to log the name of the method\nthat is being called.\nIn summary, the proxy design pattern is used in Spring to add\nadditional functionality to existing objects by intercepting method\ncalls made to the target bean and invoke additional behavior before\nor after the method call using AOP functionality. The proxy objects\nare generated by the IoC container using one of three proxy types:\nJDK dynamic proxies, CGLIB proxies, or AspectJ proxies.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 195,
          "text": "What if we call singleton bean from prototype or prototype\nbean from singleton How many objects returned?\nWhen a singleton bean is called from a prototype bean or vice versa,\nthe behavior depends on how the dependency is injected.\nIf a singleton bean is injected into a prototype bean, then each time\nthe prototype bean is created, it will receive the same instance of\nthe singleton bean. This is because the singleton bean is only\ncreated once during the startup of the application context, and that\nsame instance is then injected into the prototype bean each time it\nis created.\nOn the other hand, if a prototype bean is injected into a singleton\nbean, then each time the singleton bean is called, a new instance of\nthe prototype bean will be created. This is because prototype beans\nare not managed by the container, and a new instance is created\neach time a dependency is injected.\nHere's an example to illustrate this:\n@Component\n@Scope(\"singleton\")\npublic class SingletonBean {\n// code for singleton bean\n}\n@Component\n@Scope(\"prototype\")\npublic class PrototypeBean {\n@Autowired\nprivate SingletonBean singletonBean;\n// code for prototype bean\n}\nIn this example, when a prototype bean is created and injected with\nthe singleton bean, it will receive the same instance of the singleton",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 196,
          "text": "bean each time it is created. However, if the singleton bean is\ncreated and injected with the prototype bean, it will receive a new\ninstance of the prototype bean each time it is called.\nIt's important to note that mixing singleton and prototype scopes in\na single application context can lead to unexpected behavior and\nshould be avoided unless necessary. It's best to use one scope\nconsistently throughout the application context.\nWhat is the difference between Spring boot and spring?\nwhy choose one over the other? Here are some reasons to choose\nSpring Framework:\nYou need a comprehensive set of features and capabilities for your\napplication.\nYou want to build a modular application where you can pick and\nchoose only the components that you need.\nYou need a high degree of flexibility and customization in your\napplication.\nHere are some reasons to choose Spring Boot:\nYou want to quickly set up a stand-alone Spring application without\nneeding to do a lot of configuration.\nYou want to take advantage of pre-configured dependencies and\nsensible defaults.\nYou want to easily deploy your application as a self-contained\nexecutable JAR file.\nOverall, both Spring and Spring Boot are powerful frameworks that\ncan be used to build enterprise-level applications. The choice\nbetween them depends on the specific needs of your application and\nthe level of flexibility and customization that you require.\nHow can you create a prototype bean?\nA prototype bean in Spring can be created by setting the \"scope\"\nattribute of the bean definition to \"prototype\". This tells the Spring\nframework to create a new instance of the bean each time it is",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 197,
          "text": "requested from the application context, instead of returning a single\nshared instance as is the case with a singleton-scoped bean.\nHere's an example of how you can create a prototype bean using\nXML configuration:\n<bean id=\"prototypeBean\" class=\"com.example.PrototypeBean\"\nscope=\"prototype\">\n<!-- property definitions go here -->\n</bean>\nAnd here's an example using Java configuration:\n@Configuration\npublic class AppConfig {\n@Bean(name=\"prototypeBean\")\n@Scope(\"prototype\")\npublic PrototypeBean prototypeBean() {\nreturn new PrototypeBean();\n}\n}\nIn both cases, each time you request the prototype bean from the\napplication context, you will get a new instance of the\nPrototypeBean class.\n \nWhat is Method overloading and method overriding? Where\nit has been used in the spring framework?\nMethod overloading and method overriding in the Spring\nFramework:\nMethod overloading and method overriding are used extensively in\nthe Spring Framework. For example, the @Autowired annotation can\nbe used to autowire dependencies into a Spring bean. The\n@Autowired annotation can be overloaded to support different types\nof dependencies, such as field dependencies, constructor\ndependencies, and setter dependencies.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 198,
          "text": "Another example of method overloading in the Spring Framework is\nthe getBean() method of the ApplicationContext interface. The\ngetBean() method can be overloaded to accept different types of\nparameters, such as the bean name, the bean type, and the bean\nqualifiers.\nMethod overriding is also used extensively in the Spring Framework.\nFor example, the AbstractBeanDefinitionReader class defines a\nloadBeanDefinitions() method that is overridden by different bean\ndefinition readers, such as the ClassPathBeanDefinitionScanner class\nand the XmlBeanDefinitionReader class.\nIf I want my class should not be extended and the instance cannot\nbe created by other classes then how to declare class?\n1.Declare the class as final. This will prevent other classes from\nextending it.\n2.Make the constructor private. This will prevent other classes from\ncreating instances of the class.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 199,
          "text": "CHAPTER 7: SPRING-BOOT\nTell me About Spring-Boot’s Entry point and how\n@SpringbootApplication annotation works?\nIn Spring Boot, the entry point of a web application is a class with\nthe @SpringBootApplication annotation, which is typically located in\nthe main package of the application. This class contains the main()\nmethod, which is executed when the application starts.\nHere's an example of a typical entry point class for a Spring Boot\napplication:\n@SpringBootApplication\npublic class MyApplication {\npublic static void main(String[] args) {\nSpringApplication.run(MyApplication.class, args);\n}\n}\nIn this example, the MyApplication class is the entry point of the\napplication and the main() method starts the Spring Boot application\nby calling the SpringApplication.run() method.\nThe @SpringBootApplication annotation is a combination of several\nother annotations, like @Configuration, @EnableAutoConfiguration,\nand @ComponentScan, which are used to configure the Spring\napplication.\nThe @Configuration annotation indicates that the class is a source of\nbean definitions for the application context.\nThe @EnableAutoConfiguration annotation tells Spring Boot to start\nadding beans based on classpath settings, other beans, and various\nproperty settings.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 200,
          "text": "The @ComponentScan annotation tells Spring to look for other\ncomponents, configurations, and services in the package, allowing it\nto find the controllers.\nIt's important to note that, you can use the SpringApplication.run()\nmethod to run a Spring application from any class in your code, but\nthe class with the @SpringBootApplication annotation is typically\nused as the entry point because it provides a convenient way to\nconfigure a Spring application using Spring Boot features.\nExplain below Spring-Boot annotations?\n@Component:\nThe @Component annotation is a fundamental annotation in\nthe Spring Framework and is used in Spring Boot to mark a\nclass as a Spring-managed component. Spring components\nare objects that are managed by the Spring IoC container\nand can be injected with dependencies, managed in the\ncontainer, and wired together with other components.\nWhen a class is annotated with @Component, Spring Boot\nautomatically detects it and creates an instance of the class\nas a bean in the Spring application context. The\n@Component annotation is a meta-annotation, which means\nthat it can be used to create other annotations such as\n@Service, @Repository, and @Controller.\nHere's an example of a class annotated with @Component in\nSpring Boot:\n@Component\npublic class MyComponent {\n// class implementation\n}\nIn the above example, MyComponent is a Spring-managed\ncomponent that can be injected with dependencies,",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 201,
          "text": "managed by the Spring IoC container, and wired together\nwith other components.\nIn summary, the @Component annotation is a fundamental\nannotation in Spring Boot that marks a class as a Spring-\nmanaged component. It is used to create beans in the Spring\napplication context, which can be injected with dependencies\nand wired together with other components.\n@Autowired:\nThe @Autowired annotation is used in Spring Boot to automatically\nwire beans together based on their dependencies. When a class is\nannotated with @Autowired, Spring Boot automatically injects the\ndependent beans into the class.\nHere's an example of a class using @Autowired to inject a\ndependent bean:\n@Service\npublic class MyService {   \nprivate final MyRepository myRepository;\n@Autowired\npublic MyService(MyRepository myRepository) {\nthis.myRepository = myRepository;\n}\n// Class implementation\n}\nIn the above example, the MyService class is a Spring-managed\nservice that has a dependency on a MyRepository bean. The\n@Autowired annotation is used in the constructor to automatically\ninject the MyRepository bean into the class.\nWhen Spring Boot starts up, it scans the application context for\nbeans that have dependencies and automatically wires them",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 202,
          "text": "together. This allows you to write modular and maintainable code by\ndecoupling the components of your application.\nThe @Autowired annotation can also be used on fields and setter\nmethods, but constructor injection is generally considered best\npractice as it ensures that all dependencies are provided when the\nobject is created.\nIn summary, the @Autowired annotation is used in Spring Boot to\nautomatically wire beans together based on their dependencies. It\ncan be used on constructors, fields, and setter methods to inject\ndependent beans into a class.\n@GetMapping:\nThe @GetMapping annotation is used in Spring Boot to map HTTP\nGET requests to a method in a controller class. When a GET request\nis received for a specific URL, Spring Boot looks for a method in the\ncontroller class annotated with @GetMapping that matches the URL\nand executes the method.\nHere's an example of a method in a controller class annotated with\n@GetMapping:\n@RestController\npublic class MyController {\n@GetMapping(\"/hello\")\npublic String helloWorld() {\nreturn \"Hello, World!\";\n}\n// Other methods\n}\nIn the above example, the helloWorld method is annotated with\n@GetMapping(\"/hello\"), which maps the URL /hello to the method.\nWhen a GET request is received for the URL /hello, Spring Boot\nexecutes the helloWorld method and returns the string \"Hello,\nWorld!\" as the response.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 203,
          "text": "The @GetMapping annotation can also be used with URL variables to\nextract values from the URL and use them in the method. Here's an\nexample:\nIn the above example, the hello method is annotated with\n@GetMapping(\"/hello/{name}\"), which maps the URL /hello/{name}\nto the method. The @PathVariable annotation is used on the name\nparameter to extract the value of the name variable from the URL\nand use it in the method.\nIn summary, the @GetMapping annotation is used in Spring Boot to\nmap HTTP GET requests to a method in a controller class. It can be\nused with or without URL variables to extract values from the URL\nand use them in the method.\n@PostMapping:\nThe @PostMapping annotation is used in Spring Boot to map HTTP\nPOST requests to a method in a controller class. When a POST\nrequest is received for a specific URL, Spring Boot looks for a\nmethod in the controller class annotated with @PostMapping that\nmatches the URL and executes the method.\nHere's an example of a method in a controller class annotated with\n@PostMapping:\n@RestController\npublic class MyController {\n@PostMapping(\"/submit\")\npublic String submitForm(@RequestBody FormObject form) {\n// process the form data\nreturn \"Form submitted successfully!\";\n}\n// Other methods\n}\nIn the above example, the submitForm method is annotated with\n@PostMapping(\"/submit\"), which maps the URL /submit to the",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 204,
          "text": "method. When a POST request is received for the URL /submit,\nSpring Boot executes the submitForm method and passes the form\ndata as a FormObject object to the method.\nThe @RequestBody annotation is used to tell Spring Boot to\ndeserialize the request body into a FormObject object. This allows\nyou to easily handle complex form data in your controller methods.\nThe @PostMapping annotation can also be used with URL variables\nto extract values from the URL and use them in the method. Here's\nan example:\n@RestController\npublic class MyController {\n@PostMapping(\"/submit/{id}\")\npublic String submitForm(@PathVariable Long id, @RequestBody\nFormObject form) {\n// process the form data and the id\nreturn \"Form submitted successfully for ID \" + id + \"!\";\n}\n// Other methods\n}\nIn the above example, the submitForm method is annotated with\n@PostMapping(\"/submit/{id}\"), which maps the URL /submit/{id} to\nthe method. The @PathVariable annotation is used on the id\nparameter to extract the value of the id variable from the URL and\nuse it in the method.\nIn summary, the @PostMapping annotation is used in Spring Boot to\nmap HTTP POST requests to a method in a controller class. It can be\nused with or without URL variables to extract values from the URL\nand use them in the method. The @RequestBody annotation is used\nto deserialize the request body into a Java object.\n@Repository:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 205,
          "text": "The @Repository annotation is used in Spring Framework to indicate\nthat the annotated class is a repository, which is a class that\nprovides data access operations (e.g., reading, writing, and querying\ndata) for a specific domain object or set of domain objects.\nBy annotating a class with @Repository, Spring Boot will\nautomatically create an instance of that class and manage its\nlifecycle as a Spring bean. This means that the repository can be\ninjected into other Spring-managed components (e.g., services or\ncontrollers) using the @Autowired annotation.\nHere's an example of a repository class annotated with @Repository:\n@Repository\npublic class MyRepository {\npublic void save(MyObject myObject) {\n// save the object to the database\n}\npublic MyObject findById(Long id) {\n// find the object with the given id in the database\nreturn null;\n}\n// other data access methods\n}\nIn the above example, the MyRepository class is annotated with\n@Repository, which tells Spring Boot that this class is a repository.\nThe class provides two data access methods, save and findById,\nwhich can be used to save or retrieve instances of MyObject from\nthe database.\nThe @Autowired annotation can be used to inject the repository into\nother Spring-managed components. For example, here's a service\nclass that uses the MyRepository class:\n@Service",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 206,
          "text": "public class MyService {\n@Autowired\nprivate MyRepository myRepository;\npublic void save(MyObject myObject) {\nmyRepository.save(myObject);\n}\npublic MyObject findById(Long id) {\nreturn myRepository.findById(id);\n}\n// other service methods\n}\nIn the above example, the MyService class is annotated with\n@Service, which tells Spring Boot that this class is a service. The\n@Autowired annotation is used to inject the MyRepository bean into\nthe MyService class. The service methods save and findById use the\nrepository to perform data access operations.\nIn summary, the @Repository annotation is used in Spring Boot to\nindicate that a class is a repository, which provides data access\noperations for a specific domain object or set of domain objects.\nSpring Boot automatically creates and manages instances of\n@Repository-annotated classes as Spring beans.\n@Service:\nThe @Service annotation is used in Spring Framework to indicate\nthat the annotated class is a service, which is a class that provides\nbusiness logic operations or acts as an intermediary between the\ncontroller and the repository layers.\nBy annotating a class with @Service, Spring Boot will automatically\ncreate an instance of that class and manage its lifecycle as a Spring\nbean. This means that the service can be injected into other Spring-\nmanaged components (e.g., other services or controllers) using the\n@Autowired annotation.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 207,
          "text": "Here's an example of a service class annotated with @Service:\n@Service\npublic class MyService {\n@Autowired\nprivate MyRepository myRepository;\npublic void save(MyObject myObject) {\nmyRepository.save(myObject);\n}\npublic MyObject findById(Long id) {\nreturn myRepository.findById(id);\n}\n// other service methods\n}\nIn the above example, the MyService class is annotated with\n@Service, which tells Spring Boot that this class is a service. The\nclass provides two service methods, save and findById, which use\nthe MyRepository class to perform data access operations.\nThe @Autowired annotation is used to inject the MyRepository bean\ninto the MyService class. This allows the service to use the\nrepository to perform data access operations.\nThe @Service annotation is typically used to annotate classes that\nprovide business logic or coordinate data access operations between\nmultiple repositories. Services can also be used to implement other\napplication-specific operations.\nIn summary, the @Service annotation is used in Spring Boot to\nindicate that a class is a service, which provides business logic or\nacts as an intermediary between the controller and repository layers.\nSpring Boot automatically creates and manages instances of\n@Service-annotated classes as Spring beans, which can be injected\ninto other Spring-managed components using the @Autowired\nannotation.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 208,
          "text": "@Controller:\nThe @Controller annotation is used in Spring Framework to indicate\nthat the annotated class is a controller, which is a class that handles\nincoming web requests and returns an HTTP response.\nBy annotating a class with @Controller, Spring Boot will\nautomatically create an instance of that class and manage its\nlifecycle as a Spring bean. This means that the controller can be\ninjected into other Spring-managed components (e.g., services)\nusing the @Autowired annotation.\nHere's an example of a controller class annotated with @Controller:\n@Controller\npublic class MyController {\n@Autowired\nprivate MyService myService;\n@GetMapping(\"/my-path\")\npublic String handleRequest(Model model) {\nMyObject myObject = myService.findById(1L);\nmodel.addAttribute(\"myObject\", myObject);\nreturn \"my-view\";\n}\n// other controller methods\n}\nIn the above example, the MyController class is annotated with\n@Controller, which tells Spring Boot that this class is a controller.\nThe class provides a single controller method, handleRequest, which\nhandles incoming GET requests to the /my-path path.\nThe @Autowired annotation is used to inject the MyService bean\ninto the MyController class. This allows the controller to use the\nservice to perform business logic operations.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 209,
          "text": "The handleRequest method retrieves a MyObject from the\nMyService, adds it to the Model object, and returns the name of a\nview (my-view) that will be rendered to the client.\nIn summary, the @Controller annotation is used in Spring Boot to\nindicate that a class is a controller, which handles incoming web\nrequests and returns an HTTP response. Spring Boot automatically\ncreates and manages instances of @Controller-annotated classes as\nSpring beans, which can be injected into other Spring-managed\ncomponents using the @Autowired annotation.\nWhat is the Difference between @Component ,@Service\n,@Repository and @Controller annotations?\nIn Spring Framework, the @Component, @Service, @Repository,\nand @Controller annotations are all used to mark classes as Spring\nbeans, but they are typically used for different types of classes.\n@Component: This is a general-purpose annotation that\ncan be used to mark any class as a Spring bean. It is\ntypically used for classes that do not fit into any of the\nother categories, such as utility classes or classes that\nperform generic tasks.\n@Service: This annotation is used to mark classes that\nprovide business services, such as service classes that\nperform business logic and interact with repositories to\nretrieve and persist data.\n@Repository: This annotation is used to mark classes\nthat provide data access and storage services, such as\nclasses that interact with databases, file systems, or other\ndata sources.\n@Controller: This annotation is used to mark classes that\nhandle incoming HTTP requests, such as classes that\ndefine REST controllers or MVC controllers in a web\napplication.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 210,
          "text": "It's worth noting that these annotations are not mutually exclusive,\nyou can use multiple annotations on a single class to provide more\ncontext about the class and its function. Also, it's important to note\nthat these annotations are part of the spring-stereotype package,\nwhich is a package of stereotypes for annotating classes that play a\nspecific role within your application.\nIn summary, the main difference between these annotations is their\nintended use, @Component is a general-purpose annotation while\n@Service, @Repository, and @Controller are intended to be used in\nspecific roles.\n \nWhat is the use of component scan? \nThe @ComponentScan annotation is used in Spring to enable\nautomatic scanning of packages for classes annotated with Spring's\nstereotype annotations like @Component, @Service, @Repository,\nand @Controller. It tells Spring to search for and register these\nclasses as beans in the application context.\nWhen the @ComponentScan annotation is used on a class or\npackage, Spring will scan the specified package and its sub-\npackages for classes annotated with stereotype annotations and\nregister them as beans in the application context. This allows you to\neasily create and manage the objects of these classes, without\nhaving to manually create and configure them.\nHere's an example of a class that uses the @ComponentScan\nannotation:\n@Configuration\n@ComponentScan(\"com.example.myapp.services\")\npublic class MyConfig {\n// ...\n}\nIn this example, the @ComponentScan annotation is used to scan\nthe package \"com.example.myapp.services\" for classes annotated",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 211,
          "text": "with stereotype annotations, and register them as beans in the\napplication context.\nIt's important to note that the @ComponentScan annotation can be\nused on a class or package level, if it's used on a class, Spring will\nonly scan the package of the class, if it's used on a package, Spring\nwill scan the package and its sub-packages.\nThe @ComponentScan annotation is used in conjunction with other\nannotations like @Configuration and @EnableAutoConfiguration to\nconfigure the Spring application.\nAlso, you can use the basePackages or basePackageClasses attribute\nto specify the packages to scan, instead of using the default package\nof the class where the annotation is used.\n \nHow does the Spring boot auto-detect feature works?\nSpring Boot's auto-detection feature is a mechanism that allows\nSpring Boot to automatically configure and wire up various\ncomponents of a Spring application based on the dependencies that\nare present on the classpath.\nWhen Spring Boot starts up, it automatically scans the classpath of\nthe application for certain annotations, such as @Component,\n@Service, and @Repository, and registers any classes that are\nannotated with these annotations as beans in the Spring application\ncontext.\nAdditionally, Spring Boot also automatically detects and configures\ncertain components based on the presence of specific libraries on\nthe classpath. For example, if the application has the spring-data-jpa\nlibrary on the classpath, Spring Boot will automatically configure and\nenable JPA-based repositories in the application.\nIt also supports auto-configuring other components such as security,\ndata source, web, etc based on the libraries present in the classpath.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 212,
          "text": "This feature allows developers to quickly and easily set up a new\nSpring application without having to manually configure each\nindividual component. It also makes it easy to add or remove\nfeatures from the application by simply adding or removing the\nappropriate libraries from the classpath.\nHowever, it's important to note that if you want to customize the\nauto-configured feature or want to use a different version of a\nlibrary, you can override the auto-configured settings by providing\nyour own configuration.\nWhat is the difference between @Controller and\n@RestController annotation?\nThe @Controller and @RestController annotations are both used in\nSpring to handle incoming HTTP requests. However, they have some\ndifferences in their behavior and use cases.\nThe @Controller annotation is used to indicate that a class defines a\nSpring MVC controller. This means that the class is responsible for\nhandling HTTP requests and returning responses. Typically, a\n@Controller class will have methods annotated with\n@RequestMapping (or other similar annotations), which define the\nURL paths and HTTP methods that the controller should handle. The\nmethods in a @Controller class often return a view name or a\nModelAndView object, which is then rendered by a view resolver to\ngenerate the final response HTML.\nOn the other hand, the @RestController annotation is a specialized\nversion of @Controller. It combines @Controller and\n@ResponseBody annotations, which means that all methods in a\n@RestController class return a response body directly to the client.\nThis response body is usually formatted as JSON or XML, and it can\nbe a simple object, a collection, or any other serializable data.\n@RestController is typically used to build RESTful web services that\nexpose data APIs.\nTo summarize:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 213,
          "text": "@Controller is used for building web pages or returning views,\nwhere the response can be a view name or a ModelAndView object.\n@RestController is used for building RESTful web services, where the\nresponse is serialized and returned as a response body.\nBoth annotations can be used to handle incoming HTTP requests,\nbut the choice between them depends on the use case and the type\nof response that is required.\n \nWhat does @ResponseBody Annotations signify?\nThe @ResponseBody annotation is a Spring annotation used in a\ncontroller to indicate that the return value of a method should be\nbound to the web response body. When a method is annotated with\n@ResponseBody, Spring will automatically convert the returned\nvalue to JSON or XML and write it to the response body.\nThis annotation can be used on a method level or on a class level, in\nthe latter case all the methods of the controller will return the\nresponse body.\nHere's an example of a controller method that uses the\n@ResponseBody annotation:\n@Controller\npublic class MyController {\n@ResponseBody\n@RequestMapping(\"/example\")\npublic Object example() {\nreturn new Object();\n}\n}\nIn this example, the example() method returns an object, and the\n@ResponseBody annotation tells Spring to convert the object to\nJSON or XML and write it to the response body.\nIt's important to note that, if you use this annotation on a method,\nSpring will not try to resolve a view for the request and instead it will",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 214,
          "text": "directly return the response body.\nAlso, Spring provide the @RestController annotation as a convenient\nalternative, which is a combination of @Controller and\n@ResponseBody, that is typically used for creating RESTful web\nservices.\n \nHow to exclude any configuration?\nIn Spring Boot, you can exclude a configuration by using the exclude\nattribute of the @EnableAutoConfiguration annotation. This attribute\nis used to specify a list of classes that should be excluded from the\nauto-configuration process.\nHere's an example of a class that uses the exclude attribute to\nexclude a specific configuration:\n@SpringBootApplication(exclude =\n{SecurityAutoConfiguration.class})\npublic class MyApplication {\npublic static void main(String[] args) {\nSpringApplication.run(MyApplication.class, args);\n}\n}\nIn this example, the SecurityAutoConfiguration class is excluded\nfrom the auto-configuration process.\nYou can also exclude configurations via the application.properties or\napplication.yml file by setting the spring.autoconfigure.exclude\nproperty to a comma-separated list of configuration class names or\npackage names.\nspring.autoconfigure.exclude=org.springframework.boot.autoconfigu\nre.security.servlet.SecurityAutoConfiguration\nIt's important to note that, excluding a configuration may cause\nother configurations to stop working if they depend on the excluded\nconfiguration. Therefore, you should carefully analyze the impact of",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 215,
          "text": "excluding a configuration and ensure that your application still works\nas expected.\nAlso, you can use the spring.autoconfigure.exclude property to\nexclude any configuration, not only security-related.\nHow to make the post method idempotent inside spring\nboot?\nIn Spring Boot, the HTTP methods (GET, POST, PUT, DELETE, etc.)\nare mapped to specific Java method handlers using the\n@RequestMapping annotation. To make a POST method idempotent,\nyou would need to change the behavior of the method so that it can\nbe safely called multiple times without changing the result beyond\nthe initial application of the method.\nOne way to achieve this is to use the same unique identifier for the\nresource being created for each subsequent identical request, and\nreturn the existing resource if it already exists. This way, the same\nresource will be created only once and subsequent identical requests\nwill return the existing resource.\nHere is an example of how you could implement an idempotent\nPOST method in Spring Boot:\n@PostMapping(\"/resource\")\npublic ResponseEntity<Resource> createResource(@RequestBody\nResource resource) {\nResource existingResource =\nresourceService.findByUniqueId(resource.getUniqueId());\nif (existingResource != null) {\nreturn new ResponseEntity<>(existingResource,\nHttpStatus.OK);\n} else {\nResource createdResource =\nresourceService.create(resource);\nreturn new ResponseEntity<>(createdResource,\nHttpStatus.CREATED);\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 216,
          "text": "}\nIn the example above, the createResource method checks if a\nresource with the same unique identifier already exists before\ncreating a new one, and returns the existing resource if it does.\nIt's also important to consider the cache-control headers in the\nresponse, to ensure that the request is not cached, so that every\nrequest to the server is done, and the server can check the\nidempotence.\nNote that this is just one way to make a POST method idempotent,\nand other methods can be used depending on the requirements of\nyour specific application.\n \nWhat is spring-boot profile?\nIn Spring Boot, profiles are used to configure different environments\nor runtime scenarios of an application. A profile is a set of\nconfigurations that can be used to customize an application's\nbehaviour in various environments such as development, production,\nor testing.\nSpring Boot allows you to define different profiles for your\napplication, each with its own set of configuration properties. For\nexample, you can define a \"development\" profile for local\ndevelopment, a \"production\" profile for deployment, and a \"testing\"\nprofile for automated testing.\nYou can activate a profile by specifying it as a command-line\nargument or by setting the \"spring.profiles.active\" property in your\napplication's configuration file. When a profile is activated, Spring\nBoot will load the corresponding configuration properties and use\nthem to configure the application.\nProfiles in Spring Boot are a powerful tool for managing the\nconfiguration of your application in different environments. They\nmake it easy to switch between different configurations and ensure\nthat your application is properly configured for each environment.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 217,
          "text": "How to set the properties across different environments like\nDev, QA and PROD?\nThere are several ways to set properties across different\nenvironments like Dev, QA, and Prod in Spring Boot. Some of the\nmost common approaches include:\nUsing profiles: Spring Boot allows you to define different sets of\nproperties for different environments using profiles.\nProfiles are activated using the spring.profiles.active or\nspring.profiles.include properties in the application.properties file. Y\nou can create a separate application-{profile}.properties file for each\nprofile, where {profile} is the name of the profile. For example, you\ncan create an application-dev.properties file for the dev profile and\nan application-prod.properties file for the prod profile.\nUsing command line arguments: You can pass environment-specific\nproperties to your Spring Boot application using command line\narguments. For example, you can run the application with the --\nspring.profiles.active=prod option to activate the prod profile.\nUsing environment variables: Spring Boot can also read properties\nfrom environment variables. You can set environment variables for\ndifferent environments and reference them in the\napplication.properties file.\nUsing externalized configuration: Spring Boot allows you to\nexternalize configuration by storing properties in a file outside of the\napplication. You can store the properties for different environments\nin different files and then specify the location of the file when\nrunning the application.\nUsing ConfigServer: You can use Spring Cloud Config Server to\nmanage externalized configuration, it will allow you to store\nconfiguration properties in a central place and retrieve them from\nyour application based on the environment.\nIt's important to note that, the best approach to set properties\nacross different environments will depend on the specific\nrequirements of your application and the infrastructure you have.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 218,
          "text": "Therefore, you should carefully analyze the problem and choose the\napproach that best suits your needs.\n \nDescribe the AOP concept and which annotations are used.\nHow do you define the point cuts?\nAOP (Aspect-Oriented Programming) is a programming paradigm\nthat aims to increase modularity by allowing the separation of cross-\ncutting concerns. AOP allows you to define reusable modules of code\nthat can be \"woven\" into the main program logic at runtime.\nAOP is built on top of the traditional Object-Oriented Programming\n(OOP) model and allows you to define and apply additional behavior\nto objects and classes in a non-invasive way.\nAOP is based on the following concepts:\nAspect: An aspect is a module of code that encapsulates a cross-\ncutting concern, such as logging, security, or transaction\nmanagement.\nJoin point: A join point is a point in the execution of a program, such\nas the execution of a method or the handling of an exception.\nAdvice: An advice is the action taken by an aspect at a specific join\npoint. There are several types of advice, such as before, after, and\naround advice.\nPointcut: A pointcut is a predicate that identifies the join points\nwhere advice should be applied.\nWeaving: Weaving is the process of applying aspects to the\nprogram, which is typically done at runtime.\nAOP provides a way to modularize cross-cutting concerns, it allows\nto separate the core business logic of an application from the\naspects that provide additional functionality such as logging,\nsecurity, and transaction management. This results in a more",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 219,
          "text": "modular and maintainable codebase, as well as reducing code\nduplication.\nSpring Framework provides support for AOP through the Spring AOP\nmodule, which allows you to easily implement AOP in your Spring-\nbased applications.\n \nWhat is Spring-transaction management?\nSpring provides a comprehensive and consistent transaction\nmanagement framework that allows you to declaratively manage\ntransactions in your application. The Spring Framework provides a\nconsistent programming model for transaction management that can\nbe used across different transaction APIs, such as JDBC, Hibernate,\nJPA, and JTA.\nThe main components of the Spring transaction management\nframework are:\nPlatformTransactionManager: This is the central interface in the\nSpring transaction management framework, and it is responsible for\nmanaging transactions. Spring provides several implementations of\nthis interface for different transaction APIs, such as\nDataSourceTransactionManager, HibernateTransactionManager,\nJpaTransactionManager, and JtaTransactionManager.\n@Transactional annotation: This annotation is used to mark methods\nor classes as transactional. When a method or class is marked with\nthis annotation, the Spring Framework will automatically start and\ncommit a transaction before and after the method is called.\nTransactionDefinition and TransactionStatus: These interfaces are\nused to define and manage the properties of a transaction, such as\nthe isolation level, timeout, and rollback rules.\nHere's an example of how you can use the @Transactional\nannotation to mark a method as transactional:\n@Service\npublic class MyService {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 220,
          "text": "@Transactional\npublic void updateData() {\n// Perform database updates\n}\n}\nIn this example, the updateData() method is marked with the\n@Transactional annotation. When this method is called, the Spring\nFramework will automatically start.\n \nHow to use transaction management in spring boot?\nSpring Boot provides several options for transaction management,\nincluding declarative and programmatic approaches. The most\ncommon approach is to use the declarative transaction management\nprovided by Spring's @Transactional annotation.\nHere's an example of how you can use the @Transactional\nannotation to manage transactions in a Spring Boot application:\n@Service\npublic class MyService {\n@Autowired\nprivate MyRepository myRepository;\n@Transactional\npublic void updateData(Long id, String data) {\nMyEntity myEntity = myRepository.findById(id);\nmyEntity.setData(data);\nmyRepository.save(myEntity);\n}\n}\nIn the example above, the updateData method is annotated with\n@Transactional, which tells Spring to start a new transaction before\nexecuting the method. When the method completes, Spring will\nautomatically commit the transaction. If an exception is thrown,\nSpring will automatically roll back the transaction.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 221,
          "text": "You can also configure the @Transactional annotation to specify the\ntransaction isolation level, the propagation behavior, and other\nproperties. Here's an example of how you can configure the\n@Transactional annotation:\n@Transactional(isolation = Isolation.READ_COMMITTED, timeout =\n30)\nIn this example, the isolation level is set to READ_COMMITTED,\nwhich means that the current transaction can only read data that\nhas been committed by other transactions. The timeout is set to 30\nseconds, which means that the transaction will automatically rollback\nif it takes longer than 30 seconds to complete.\nAnother way to manage transactions in Spring Boot is to use the\nPlatformTransactionManager interface and the TransactionTemplate\nclass. This is called programmatic transaction management. Here's\nan example of how you can use the TransactionTemplate class to\nmanage transactions:\n@Service\npublic class MyService {\n@Autowired\nprivate MyRepository myRepository;\n@Autowired\nprivate TransactionTemplate transactionTemplate;\npublic void updateData(Long id, String data) {\ntransactionTemplate.execute(new\nTransactionCallbackWithoutResult() {\n@Override\nprotected void\ndoInTransactionWithoutResult(TransactionStatus status) {\nMyEntity myEntity = myRepository.findById(id);\nmyEntity.setData(data);\nmyRepository.save(myEntity);\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 222,
          "text": "});\n}\n}\nIn this example, the updateData method uses the\nTransactionTemplate class to execute a transaction. The code that\nneeds to be executed within a transaction is placed in the\ndoInTransactionWithoutResult method. The TransactionTemplate\nclass will automatically start a new transaction before executing the\nmethod, and will automatically commit or roll back the transaction\nbased on the outcome of the method.\nIt's important to note that when using declarative transaction\nmanagement, you need to configure a PlatformTransactionManager\nbean that will be used by the @Transactional annotation, which is\nautomatically done by Spring Boot when using a relational database.\nAlso, you need to make sure that the transaction management\nconfiguration is consistent with the underlying data source and the\nORM framework you use.\n \nHow to handle a transaction and the isolation levels of the\ntransaction?\nIn a Spring application, you can handle transactions using the Spring\nFramework's transaction management abstraction, which is built on\ntop of the Java Transaction API (JTA).\nTo start a transaction, you can use the @Transactional annotation on\nthe service method or class level. This annotation tells Spring to\nstart a new transaction before the method is executed and to\ncommit or rollback the transaction after the method is executed.\n@Service\npublic class ExampleService {\n@Transactional\npublic void exampleMethod() {\n// Code that needs to be executed in a transaction",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 223,
          "text": "}\n}\nIsolation level controls how the data is isolated between different\ntransactions. The isolation levels are:\nREAD UNCOMMITTED: A transaction can read data that has not\nbeen committed by other transactions. This is the lowest level of\nisolation.\nREAD COMMITTED: A transaction can only read data that has been\ncommitted by other transactions. This is a higher level of isolation.\nREPEATABLE READ: A transaction can read data that has been\ncommitted by other transactions, but other transactions cannot\nmodify or insert data that the current transaction has read.\nSERIALIZABLE: A transaction can read data that has been\ncommitted by other transactions, and other transactions cannot\nmodify or insert data that the current transaction has read.\nAdditionally, no two transactions can read or write data at the same\ntime. This is the highest level of isolation.\nYou can set the isolation level of a transaction using the isolation\nattribute of the @Transactional annotation. For example, to set the\nisolation level to READ COMMITTED, you can do the following:\n@Transactional(isolation = Isolation.READ_COMMITTED)\npublic void exampleMethod() {\n// Code that needs to be executed in a transaction\n}\nIt's important to note that the isolation level that you choose will\ndepend on your application's specific requirements, and that\ndifferent isolation levels can have different performance impacts.\nAlso, Spring provides several options to configure the transaction\nmanager and to handle the transaction such as\nJpaTransactionManager and DataSourceTransactionManager, which",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 224,
          "text": "allows you to use different strategies to handle transactions and\nisolation levels depending on the data access technology you are\nusing in your application.\n \nHow to handle security in spring-boot?\nSpring Boot provides several options for handling security in a web\napplication. The most common approach is to use the Spring\nSecurity framework, which is a powerful and highly customizable\nauthentication and access-control framework.\nHere's an example of how you can configure Spring Security in a\nSpring Boot application:\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n@Autowired\nprivate UserDetailsService userDetailsService;\n@Autowired\nprivate PasswordEncoder passwordEncoder;\n@Override\nprotected void configure(AuthenticationManagerBuilder auth)\nthrows Exception {\nauth.userDetailsService(userDetailsService).passwordEncoder(\npasswordEncoder);\n}\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\nhttp.authorizeRequests()\n.antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n.antMatchers(\"/user/**\").hasRole(\"USER\")\n.anyRequest().permitAll()\n.and()\n.formLogin();",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 225,
          "text": "}\n}\nIn this example, the SecurityConfig class is annotated with\n@Configuration and @EnableWebSecurity to enable Spring Security.\nThe class extends WebSecurityConfigurerAdapter which provides a\nconvenient base class for customizing the security configuration.\nThe configure(AuthenticationManagerBuilder auth) method is used\nto configure the authentication manager. In this example, it is\nconfigured to use a UserDetailsService and a PasswordEncoder to\nauthenticate users.\nThe configure(HttpSecurity http) method is used to configure the\nsecurity for web requests. In this example, it is configured to require\na role of \"ADMIN\" for requests to the \"/admin/\" path, a role of\n\"USER\" for requests to the \"/user/\" path and permit all other\nrequests. The method also enables form-based authentication.\nYou can also use other authentication methods such as OAuth2,\nJWT, etc.\nIt's important to note that the security configuration will only be\neffective if the spring-security-web and spring-security-config\nmodules are on the classpath. When using Spring Boot, these\nmodules are included by default in the spring-boot-starter-security\nstarter.\nAlso, it's important to keep in mind that security is a complex topic\nand it's important to always keep the system updated and to test the\nsecurity measures in place, to ensure that the system is secure and\nto fix any vulnerabilities that may arise.\nWhat is a JWT token and how does spring boot fetch that\ninformation?\nJWT (JSON Web Token) is a compact, URL-safe means of\nrepresenting claims to be transferred between two parties. It is often\nused to authenticate users and exchange information securely. JWT\nconsists of three parts: a header, a payload, and a signature. The",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 226,
          "text": "header and payload are Base64Url encoded JSON strings, and the\nsignature is a digital signature that ensures the authenticity of the\ntoken.\nA typical JWT token looks like this:\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODk\nwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwR\nJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\nIn Spring Boot, you can use the spring-security-jwt library to handle\nJWT tokens. The library provides a JwtTokenProvider class that you\ncan use to generate and validate JWT tokens.\nHere's an example of how you can use the JwtTokenProvider class in\na Spring Boot application:\n@Service\npublic class JwtTokenProvider {\n@Value(\"${security.jwt.token.secret-key}\")\nprivate String secretKey;\n@Value(\"${security.jwt.token.expire-length}\")\nprivate long validityInMilliseconds;\npublic String createToken(String username, List<Role> roles) {\nClaims claims = Jwts.claims().setSubject(username);\nclaims.put(\"roles\", roles.stream().map(s -> new\nSimpleGrantedAuthority(s.getAuthority())).filter(Objects::nonNull).col\nlect(Collectors.toList()));\nDate now = new Date();\nDate validity = new Date(now.getTime() +\nvalidityInMilliseconds);\nreturn Jwts.builder()\n.setClaims(claims)\n.setIssuedAt(now)\n.setExpiration(validity)\n.signWith(SignatureAlgorithm.HS256, secretKey)",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 227,
          "text": ".compact();\n}\npublic Authentication getAuthentication(String token) {\nUserDetails userDetails =\nthis.userDetailsService.loadUserByUsername(getUsername(token));\nreturn new\nUsernamePasswordAuthenticationToken(userDetails, \"\",\nuserDetails.getAuthorities());\n}\npublic String getUsername(String token) {\nreturn\nJwts.parser().setSigningKey(secretKey).parseClaimsJws(token).getBo\ndy().getSubject();\n}\npublic boolean validateToken(String token) {\ntry {\nJws<Claims> claims =\nJwts.parser().setSigningKey(secretKey).parseClaimsJws(token);\nif (claims.getBody().getExpiration().before(new Date())) {\nreturn false;\n}\nreturn true;\n} catch (JwtException | IllegalArgumentException e) {\nthrow new InvalidJwtAuthenticationException(\"Expired or\ninvalid JWT token\");\n}\n}\n \nHow does the JWT token work internally?\n(you should know the flow of it, and how the token is used\ninternally).\nA JWT (JSON Web Token) is a JSON object that is used to securely\ntransmit information between parties. The information can be",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 228,
          "text": "verified and trusted, because it is digitally signed. JWT tokens are\noften used to authenticate and authorize users in a RESTful API.\nJWT tokens consist of three parts:\nHeader: The header typically consists of two parts: the type of the\ntoken, which is JWT, and the signing algorithm being used, such as\nHMAC SHA256 or RSA.\nPayload: The payload contains the claims. Claims are statements\nabout an entity (typically, the user) and additional metadata. There\nare three types of claims: registered, public, and private claims.\nSignature: To create the signature part you have to take the\nencoded header, the encoded payload, a secret, the algorithm\nspecified in the header, and sign that. For example if you want to\nuse the HMAC SHA256 algorithm, the signature will be created in the\nfollowing way:\nHMACSHA256(\nbase64UrlEncode(header) + \".\" +\nbase64UrlEncode(payload),\nsecret)\nThe JWT token is passed to the client, usually in the form of an\nHTTP-only and secure cookie, which is then passed back to the\nserver with every request. The server can then use the signature to\nverify the authenticity of the token and the claims.\nIt's important to note that, JWT tokens are stateless, which means\nthat the server does not need to maintain a session or other state\nfor the client. This makes JWT tokens an attractive option for\nRESTful APIs and Single Page Applications (SPAs) that need to\nauthenticate and authorize users.\n \nHow does Transaction work in Spring boot Microservice, how\nto achieve that?\n(Basically, Microservice are mostly stateless and they don’t maintain\nthe state that is required for transactions.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 229,
          "text": "In Spring, maintaining state in a transaction typically involves storing\nstate in the application's context and then using that state during\nthe transaction.\nHere are a few ways to maintain state in a Spring Boot transaction:\nThreadLocal: You can use a ThreadLocal variable to store state in\nthe current thread and then use that state in the transaction. The\nThreadLocal variable can be accessed using the\nTransactionSynchronizationManager.getResource() method.\nThreadLocal<MyObject> myObjectThreadLocal = new\nThreadLocal<>();\nmyObjectThreadLocal.set(new MyObject());\nTransactionSynchronizationManager.bindResource(MyObject.class.get\nName(), myObjectThreadLocal);\nCustom synchronization: You can create a custom synchronization\nobject that implements the\norg.springframework.transaction.support.TransactionSynchronization\ninterface and stores the state in the beforeCommit() method. This\nobject can then be registered with the transaction using the\nTransactionSynchronizationManager.registerSynchronization()\nmethod.\nTransactionSynchronizationManager.registerSynchronization(new\nMyTransactionSynchronization(myObject));\nTransaction attribute: You can use the TransactionAttribute\nannotation to specify the transaction behavior on methods. By using\nthis annotation, you can access the current transaction, and keep\nthe state in it.\n@Transactional\npublic void myMethod(MyObject myObject){\nTransactionStatus status =\ntransactionManager.getTransaction(new\nDefaultTransactionDefinition());\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 230,
          "text": "How does Oauth2.0 works?\nOAuth 2.0 is an authorization framework that lets users grant\napplications access to their data on other websites or services,\nwithout sharing their password with the application. It acts as a\nsecure middleman between you, the application you want to use,\nand the website or service that holds your data. Here's how it works\nin a nutshell:\n1. You want to use an application: Let's say you want to connect\nyour Facebook account to a new fitness app.\n2. Application redirects you: The fitness app directs you to the\nFacebook login page.\n3. You log in to Facebook: You enter your Facebook username and\npassword.\n4. Facebook prompts authorization: Facebook asks you if you want\nto grant the fitness app access to your profile information and\nactivities.\n5. You grant or deny access: You review the requested permissions\nand choose to grant or deny the app access.\n6. Facebook sends token to app: If you grant access, Facebook\nsends the fitness app an access token, which is like a temporary key\nthat allows the app to access your data on Facebook.\n7. Application uses token: The fitness app uses the access token to\nread your Facebook data, such as your profile information and\nactivities, and integrate it into your fitness experience.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 231,
          "text": "Key benefits of OAuth 2.0:\nImproved security: You don't share your password with the\napplication, reducing the risk of it being compromised.\nGranular control: You can choose what data the application can\naccess.\nPrivacy-friendly: The application only gets the data you explicitly\nauthorize.\nWidely supported: Many popular websites and services use OAuth\n2.0.\nHow to ensure that token has not been tampered with?\nTo make sure that a JWT token has not been tampered with, you\nneed to check its signature.\nThe signature of a JWT token is created by taking the encoded\nheader, the encoded payload, a secret, and the algorithm specified in\nthe header, and signing that. The signature is then added to the JWT\ntoken as the third part.\nWhen the token is received by the server, the server will decode the\ntoken to retrieve the header and payload, and then it will re-create",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 232,
          "text": "the signature using the same secret and algorithm specified in the\nheader.\nIf the re-created signature matches the signature in the token, it\nmeans that the token has not been tampered with. But if the re-\ncreated signature does not match the signature in the token, it\nmeans that the token has been tampered with.\nIt's important to note that, keeping the secret key safe is important\nto the security of the JWT token, it should be stored in a secure\nlocation and should be rotated regularly.\nAlso, JWT tokens should be used over an SSL/TLS-secured\nconnection to prevent man-in-the-middle attacks, and you should\nalso validate the claims within the JWT token, such as expiration\ntime, audience, and issuer.\nHow to use @ControlAdvice for the exception handler?\n@ControllerAdvice is a Spring annotation that is used to create a\nglobal exception handler for your application. It can be used to apply\nthe same exception handling logic across multiple controllers. It can\nbe used to centralize the handling of exceptions that are thrown by\nmultiple controllers in your application.\nWhen you use @ControllerAdvice on a class, Spring will\nautomatically detect it and use it as a global exception handler. You\ncan then use the @ExceptionHandler annotation on a method inside\nthe @ControllerAdvice class to specify the type of exception that the\nmethod should handle.\nHere is an example of how you can use @ControllerAdvice and\n@ExceptionHandler to create a global exception handler:\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n@ExceptionHandler(CustomException.class)\npublic ResponseEntity<ErrorResponse>\nhandleCustomException(CustomException ex) {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 233,
          "text": "ErrorResponse error = new ErrorResponse(\"Error\",\nex.getMessage());\nreturn new ResponseEntity<>(error,\nHttpStatus.BAD_REQUEST);\n}\n}\nIn the example above, the @ControllerAdvice annotation is used to\nindicate that this class is a global exception handler. The\n@ExceptionHandler annotation is used to specify that the\nhandleCustomException method should handle CustomException\nexceptions. The method takes the CustomException object as an\nargument and returns a ResponseEntity object with a custom error\nresponse.\nYou can also use @ControllerAdvice to handle exceptions thrown by\nmethods in a specific package. You can do this by providing a\nbasePackages or value attribute on the @ControllerAdvice\nannotation, like this:\n@ControllerAdvice(basePackages =\n\"com.example.myapp.controllers\")\nThis will only apply the exception handling logic to controllers in the\nspecified package, while all other controllers will not be affected by\nthis.\nYou can use @ControllerAdvice in combination with\n@RestControllerAdvice to handle exceptions thrown by rest\ncontrollers specifically, or with @ExceptionHandler on a method\ninside a controller to handle specific exceptions for a specific\ncontroller.\n \nHow to handle exceptions in Spring boot applications? What\nare the best practices for doing so?\nIn Spring Boot, you can handle exceptions in several ways, here are\na few options:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 234,
          "text": "Global Exception Handling: You can create a global exception\nhandler class that handles exceptions that are thrown by any\ncontroller in the application. You can use the @ControllerAdvice\nannotation to create a global exception handler and the\n@ExceptionHandler annotation to specify which exceptions the\nhandler should handle.\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n@ExceptionHandler(value = Exception.class)\npublic ResponseEntity<Object> handleException(Exception ex) {\n// handling logic\nreturn new ResponseEntity<>(ex.getMessage(),\nHttpStatus.INTERNAL_SERVER_ERROR);\n}\n}\nLocal Exception Handling: You can handle exceptions within the\ncontroller methods where they occur. You can use the try-catch block\nor the @ExceptionHandler annotation to handle exceptions locally.\n@RestController\npublic class EmployeeController {\n@GetMapping(\"/employees/{id}\")\npublic Employee getEmployeeById(@PathVariable Long id) {\ntry {\nreturn employeeService.getEmployeeById(id);\n} catch (EmployeeNotFoundException ex) {\nthrow new\nResponseStatusException(HttpStatus.NOT_FOUND,\nex.getMessage());\n}\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 235,
          "text": "}\nCustom Exception Handling: You can create custom exceptions that\nextend the built-in exceptions, and then handle them in the global or\nlocal exception handlers.\n@ResponseStatus(value = HttpStatus.NOT_FOUND, reason =\n\"Employee not found\")\npublic class EmployeeNotFoundException extends RuntimeException\n{\n}\nHow to use a custom exception handler in Spring Boot?\nIn Spring Boot, you can use a custom exception handler to handle\nspecific exceptions that may be thrown by your application. To\ncreate a custom exception handler, you will need to create a class\nthat implements the HandlerExceptionResolver interface or extends\nthe AbstractHandlerExceptionResolver class and override the\nresolveException method.\nHere's an example of a custom exception handler class:\n@ControllerAdvice\npublic class CustomExceptionHandler extends\nResponseEntityExceptionHandler {\n@ExceptionHandler(CustomException.class)\npublic final ResponseEntity<ErrorResponse>\nhandleCustomException(CustomException ex, WebRequest request)\n{\nErrorResponse error = new ErrorResponse(ex.getMessage(),\nrequest.getDescription(false));\nreturn new ResponseEntity<>(error,\nHttpStatus.BAD_REQUEST);\n}\n}\nThe @ControllerAdvice annotation is used to indicate that the class\nis a global exception handler. The @ExceptionHandler annotation is",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 236,
          "text": "used to specify the type of exception that this method should\nhandle. The CustomException in the example above is a custom\nexception that you have defined in your application.\nThe handleCustomException method takes the CustomException\nobject and the WebRequest object as arguments, and returns a\nResponseEntity object with a custom error response.\nYou can also create a class that extends\nResponseEntityExceptionHandler which is a convenient base class for\nhandling exceptions and providing responses.\nThen in your configuration class, you should register your custom\nexception handler with Spring by using the @Autowired annotation.\n@Configuration\npublic class RestConfiguration {\n@Autowired\nprivate CustomExceptionHandler customExceptionHandler;\n@Bean\npublic HandlerExceptionResolver handlerExceptionResolver() {\nreturn customExceptionHandler;\n}\n}\nWith this, your custom exception handler will be registered and used\nby Spring to handle exceptions in your application.\nWrite an endpoint in spring boot for getting and saving\nemployees with syntax. \nIn Spring Boot, you can create endpoints for getting and saving\nemployees using controllers and services. Here's an example of how\nyou could create these endpoints:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 237,
          "text": "EmployeeController: This class defines the REST endpoints for\ngetting and saving employees.\n@RestController\n@RequestMapping(\"/employees\")\npublic class EmployeeController {\nprivate final EmployeeService employeeService;\npublic EmployeeController(EmployeeService employeeService) {\nthis.employeeService = employeeService;\n}\n@GetMapping\npublic List<Employee> getAllEmployees() {\nreturn employeeService.getAllEmployees();\n}\n@GetMapping(\"/{id}\")\npublic Employee getEmployeeById(@PathVariable Long id) {\nreturn employeeService.getEmployeeById(id);\n}\n@PostMapping\npublic Employee saveEmployee(@RequestBody Employee\nemployee) {\nreturn employeeService.saveEmployee(employee);\n}\n}\nThe @RestController annotation is used to indicate that the class is a\ncontroller and will handle HTTP requests. The @RequestMapping\nannotation is used to map the endpoint to a specific URL.\nThe @GetMapping and @PostMapping annotations are used to\nindicate that the methods handle GET and POST requests,\nrespectively. The @PathVariable annotation is used to extract a path\nvariable from the URL, and the @RequestBody annotation is used to\nextract the body of a POST request.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 238,
          "text": "EmployeeService: This class defines the business logic for getting\nand saving employees.\n@Service\npublic class EmployeeService {\nprivate final EmployeeRepository employeeRepository;\npublic EmployeeService(EmployeeRepository\nemployeeRepository) {\nthis.employeeRepository = employeeRepository;\n}\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 239,
          "text": "CHAPTER 8: MICROSERVICE\nWhat is Microservice?\nMicroservice, aka Microservice Architecture, is an architectural\nstyle that structures an application as a collection of small\nautonomous services, modelled around a business domain.\nIn Microservice architecture, each service is self-contained and\nimplements a single business capability.\nFeatures of Microservice:\nDecoupling - Services within a system are largely decoupled, so the\napplication as a whole can be easily built, altered, and scaled.\nComponentization - Microservice are treated as independent\ncomponents that can be easily replaced and upgraded.\nBusiness Capabilities - Microservice are very simple and focus on\na single capability.\nAutonomy - Developers and teams can work independently of each\nother, thus increasing speed.\nContinuous Delivery - Allows frequent releases of software\nthrough systematic automation of software creation, testing, and\napproval.\nResponsibility - Microservice do not focus on applications as\nprojects. Instead, they treat applications as products for which they\nare responsible.\nDecentralized Governance - The focus is on using the right tool\nfor the right job. That means there is no standardized pattern or any\ntechnology pattern. Developers have the freedom to choose the best\nuseful tools to solve their problems.\nAgility - Microservice support agile development. Any new feature\ncan be quickly developed and discarded again.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 240,
          "text": "What is the advantage of Microservice over monolithic\narchitecture?\nChallenges of monolithic architecture\nInflexible - Monolithic applications cannot be built using different\ntechnologies.\nUnreliable - If even one feature of the system does not work, then\nthe entire system does not work.\nUnscalable - Applications cannot be scaled easily since each time\nthe application needs to be updated, the complete system has to be\nrebuilt.\nBlocks Continuous Development - Many features of an\napplication cannot be built and deployed at the same time.\nSlow Development - Development in monolithic applications takes\na lot of time to be built since each and every feature has to be built\none after the other.\nNot Fit for Complex Applications - Features of complex applications\nhave tightly coupled dependencies.\nWhat is the disadvantage of Microservice architecture\nComplexity: The overall architecture can become complex,\nespecially when dealing with the coordination of many small\nservices.\nIncreased operational overhead: Managing and deploying many\nsmall microservices can increase operational overhead, such as\nmonitoring and testing.\nNetwork latency: Communication between microservices can add\nnetwork latency and reduce performance if not properly optimized.\nInter-service dependencies: Inter-service dependencies can\nbecome complex and difficult to manage, especially when dealing\nwith many small services.\nDifficulties in testing: Testing can become more complex and\ntime-consuming with a large number of microservices.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 241,
          "text": "Under what circumstances is the Microservice architecture\nare not preferable to you?\nWhile microservices have several benefits, there are some\ncircumstances in which they may not be the best option. Here are\nsome situations in which microservices might not be preferable:\nSmall projects: Microservices architecture is generally recommended\nfor large and complex systems. If your project is small and simple,\nthen it might not be worth the added complexity of implementing a\nmicroservices architecture.\nLimited resources: Implementing a microservices architecture can\nrequire a significant investment of resources, including time, money,\nand expertise. If you don't have access to the necessary resources,\nit might not be feasible to use a microservices architecture.\nHigh latency: Since microservices communicate with each other over\na network, there can be latency issues. If low latency is critical to\nyour application, then a monolithic architecture might be a better\nchoice.\nInterdependent services: If your services are heavily interdependent,\nthen implementing a microservices architecture might not provide\nsignificant benefits. It could lead to additional complexity and\noverhead without delivering much value.\nDevelopment team experience: A microservices architecture requires\nspecialized knowledge and experience to design and implement\neffectively. If your development team is not experienced in\nmicroservices, it might not be the best option.\nWhat are the design principles of Microservice?\nModularity: Services should be self-contained and should have a\nsingle, well-defined purpose.\nScalability: Services should be able to scale independently to\nhandle increasing load.\nDecentralization: The system should be decentralized, allowing for\nloosely-coupled services.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 242,
          "text": "High Availability: Services should be designed to be highly\navailable to ensure system reliability.\nResilience: Services should be designed to handle failures\ngracefully.\nData Management: Services should manage their own data and\nshould not share a common database.\nStatelessness: Services should be stateless to allow for easy\nscaling and caching.\nIndependent Deployment: Services should be deployable\nindependently of other services.\nObservability: The system should have built-in monitoring and\nlogging capabilities to allow for visibility into system behaviour.\nAutomation: Deployment, testing, and scaling should be\nautomated as much as possible.\nDo you know the 12-factor methodology to build a\nMicroservice?\nThe 12-factor methodology is a set of guidelines for building\nscalable, maintainable, and easily deployable software-as-a-service\n(SaaS) applications. It's particularly relevant for building Microservice\n-based applications, since Microservice represent a distributed\nsystem and can benefit from the principles of the 12-factor\nmethodology. Here are the 12 factors:\nCodebase: One codebase per app, with multiple deploys.\nDependencies: Explicitly declare and isolate dependencies.\nConfig: Store config in the environment.\nBacking services: Treat backing services as attached resources.\nBuild, release, run: Strictly separate build and run stages.\nProcesses: Execute the app as one or more stateless processes.\nPort binding: Export services via port binding.\nConcurrency: Scale out via the process model.\nDisposability: Maximize robustness with fast start-up and graceful\nshutdown.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 243,
          "text": "Dev/prod parity: Keep development, staging, and production as\nsimilar as possible.\nLogs: Treat logs as event streams.\nAdmin processes: Run admin/management tasks as one-off\nprocesses.\nBy following the principles of the 12-factor methodology, you can\nbuild microservices that are scalable, maintainable, and easily\ndeployable. This can help you to deliver high-quality applications\nthat meet the needs of your customers and users.\n \nWhy are Microservice stateless?\nMicroservice are designed to be stateless for several reasons:\nScalability: Stateless Microservice can be easily scaled horizontally\nby adding more instances, without having to worry about preserving\nstate across instances. This makes it easier to handle increased\ntraffic and load balancing.\nResilience: Stateless microservices can fail without affecting the\nsystem as a whole, since they don't rely on stored state. When a\nstateless microservice fails, another instance can simply take its\nplace, preserving the overall health of the system.\nPortability: Stateless microservices can be deployed to any\nenvironment without having to worry about preserving state. This\nmakes it easier to move microservices between environments, such\nas between development and production, or between data centres.\nSimplicity: Stateless microservices are simpler to implement,\nmaintain, and test, since they don't have to manage state. This\nmakes it easier to build, deploy, and manage a system made up of\nmany microservices.\nIn summary, stateless microservices provide greater scalability,\nresilience, portability, and simplicity compared to stateful\nmicroservices. However, there may be cases where stateful",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 244,
          "text": "microservices are necessary, for example, when dealing with user\nsessions or long-running transactions. In these cases, it's important\nto carefully manage state and ensure that stateful microservices are\nstill scalable, resilient, and portable.\n \nWhat is the advantage of Microservice using Spring Boot\nApplication + Spring Cloud?\nAdvantages of Microservice over Spring Boot Application + Spring\nCloud:\nImproved Scalability: Microservice architecture allows for better\nscalability by allowing services to be developed, deployed and scaled\nindependently.\nFaster Time-to-Market: By breaking down a monolithic\napplication into smaller, self-contained services, development teams\ncan work in parallel and iterate more quickly.\nResilience: Microservice provide improved resilience by allowing\nservices to fail independently without affecting the entire system.\nBetter Resource Utilization: Microservice allow for better\nresource utilization as services can be deployed on the best-suited\ninfrastructure.\nIncreased Flexibility: Microservice architecture provides increased\nflexibility as new services can be added or existing services can be\nupdated without affecting the entire system.\nImproved Maintainability: Microservice provide improved\nmaintainability by reducing the complexity of the overall system and\nmaking it easier to identify and fix problems.\nTechnology Heterogeneity: Microservice architecture enables\ntechnology heterogeneity, allowing for the use of different\ntechnologies for different services.\nImproved Team Collaboration: Microservice architecture can\nimprove team collaboration by breaking down a monolithic\napplication into smaller, self-contained services that can be\ndeveloped by smaller, cross-functional teams.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 245,
          "text": "How to share a database with multiple microservices?\nWhen implementing a microservices architecture, sharing a database\nbetween multiple microservices can be a common approach. Here\nare some guidelines on how to do it effectively:\nDesign the database schema with the microservices in mind: To\nensure that the database can be effectively shared between multiple\nmicroservices, it's important to design the schema with the\nmicroservices architecture in mind. This means creating tables and\ncolumns that are specific to the microservices that will be using\nthem, and avoiding dependencies that would create coupling\nbetween microservices.\nUse a database migration tool: To manage the changes in the\ndatabase schema over time, it's important to use a database\nmigration tool. This will allow you to apply changes to the database\nschema in a controlled way, ensuring that all microservices are\ncompatible with the new schema.\nImplement a database access layer: To abstract the database access\nlogic from the microservices, it's recommended to implement a\ndatabase access layer. This layer should handle all database\noperations and provide a simple interface for the microservices to\ninteract with.\nUse a shared database instance: To ensure that all microservices are\naccessing the same data, it's important to use a shared database\ninstance. This can be a single database server or a cluster of\nservers, depending on the requirements of the system.\nImplement data isolation: To ensure that one microservice does not\nunintentionally modify data that belongs to another microservice, it's\nrecommended to implement data isolation. This can be done by\nusing different database schemas or database instances for each\nmicroservice, or by using row-level security features to restrict\naccess to specific data.\nMonitor database performance: When sharing a database between\nmultiple microservices, it's important to monitor the performance of\nthe database. This can be done by monitoring query execution",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 246,
          "text": "times, database locks, and resource usage to ensure that the\ndatabase is performing optimally and not causing performance\nissues for the microservices.\nRegulatory requirements: Some industries have strict regulations\naround data privacy and security. Implementing a microservices\narchitecture might not be feasible if it does not meet the regulatory\nrequirements of your industry.\n \nDo you know Distributed tracing? What is its us?\nYes, distributed tracing is a technique used in distributed systems to\ntrack and monitor the flow of a request or transaction across\nmultiple services or microservices. It is a way to gain visibility into\ncomplex, distributed architectures and to diagnose performance and\nreliability issues.\nDistributed tracing involves instrumenting each service in a\ndistributed system to generate and propagate a unique identifier for\neach incoming request or transaction. This identifier is typically\ncalled a \"trace ID\", and it is used to tie together all the individual\nspans or segments that make up a single transaction.\nAs a transaction flows through the different services and\ncomponents of a distributed system, each component records\ninformation about its part of the transaction in a \"span\" or\n\"segment\". Each span includes information such as timing data,\nerror codes, and other relevant metadata. The spans are then\ncollected and correlated across all the services that participated in\nthe transaction, creating a trace of the entire transaction across the\ndistributed system.\nDistributed tracing is used to understand the performance of a\ndistributed system, to diagnose issues with specific transactions, and\nto identify the root causes of failures or errors. By correlating the\nspans across different services, it is possible to visualize the entire\nflow of a request and to pinpoint bottlenecks, errors, or other issues.\nDistributed tracing tools typically provide visualization tools, alerting",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 247,
          "text": "mechanisms, and other features to help operators and developers\nunderstand the health and performance of their distributed systems.\nDistributed tracing can be implemented using open-source tools like\nJaeger, Zipkin, and OpenTelemetry, or via commercial products from\ncloud providers and third-party vendors.\nHow distributed tracing is done in Microservice?\nDistributed tracing is a technique used to track the flow of a request\nas it travels across multiple Microservice in a distributed system. It\nhelps to understand the performance and behaviour of a\nMicroservice architecture by providing visibility into the interactions\nbetween Microservice.\nHere are the steps involved in distributed tracing in Microservice:\nInstrumentation: Each Microservice is instrumented with tracing\ninformation, typically by adding trace headers to the requests sent\nbetween Microservice. This information can include a unique trace\nidentifier, the name of the Microservice, and timing information.\nPropagation: The trace information is propagated along with each\nrequest as it flows between Microservice. This allows the trace\ninformation to be captured and recorded by each Microservice that\nhandles the request.\nCollection: The trace information is collected by a tracing system,\nwhich can be a standalone component or integrated into a log\nmanagement or monitoring tool.\nAnalysis: The collected trace information is analysed to gain\ninsights into the performance and behaviour of the Microservice.\nThis can include identifying bottlenecks, tracking the flow of requests\nthrough the system, and measuring the response time of individual\nMicroservice.\nVisualization: The results of the analysis can be visualized in a way\nthat helps to understand the relationships between microservices\nand identify any issues or inefficiencies.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 248,
          "text": "Distributed tracing can be performed using dedicated tracing tools,\nsuch as Zipkin, Jaeger, or Appdash, or integrated into existing\nmonitoring and log management tools, such as ELK or Datadog.\nHow to connect internal and external services in\nmicroservices.\nThere are various designs that can be used to connect internal and\nexternal services in a microservice architecture, depending on the\nspecific requirements of the system. Some common patterns are:\nAPI Gateway: An API gateway acts as a single entry point for all\nexternal requests, forwarding them to the appropriate microservice\nfor handling. The gateway can also perform tasks such as\nauthentication, rate limiting, and caching.\nService Discovery: In this pattern, Microservice register\nthemselves with a central registry, and clients use the registry to find\nthe location of the Microservice they need to interact with. This can\nbe done using a technology such as DNS or a dedicated service\ndiscovery tool like Eureka or Consul.\nLoad Balancer: A load balancer distributes incoming requests to\nmultiple instances of a Microservice, improving reliability and\nscalability. Load balancing can be performed by a dedicated load\nbalancing tool, or it can be built into the API gateway.\nCircuit Breaker: A circuit breaker is a pattern that helps prevent\ncascading failures in a Microservice architecture by adding resilience\nto communication between Microservice. The circuit breaker acts as\na proxy between the client and the Microservice, monitoring the\nhealth of the Microservice and failing over to a backup instance if\nnecessary.\nEvent-Driven Architecture: In this pattern, Microservice\ncommunicate with each other using events, rather than direct\nrequests. This can help decouple Microservice and reduce the\ncoupling between them.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 249,
          "text": "These patterns can be combined and customized as needed to\ncreate a suitable solution for your specific use case.\n \nWhich Microservice design pattern have you used so far and\nwhy?\nService Registry: A Service Registry is a centralized directory that\nmicroservices can use to locate each other's endpoints. It helps with\nservice discovery, load balancing, and failover, and makes it easier to\nmanage a distributed system. Examples of service registries include\nConsul and Eureka.\nCircuit Breaker: A Circuit Breaker is a pattern that can help to\nprevent cascading failures in a distributed system. It monitors\nrequests to a service and can \"trip\" the circuit when too many\nrequests fail or when the service becomes unresponsive. When the\ncircuit is tripped, subsequent requests can be immediately rejected\nor diverted to a fallback mechanism.\nAPI Gateway: An API Gateway is a centralized entry point for a set\nof microservices. It can handle authentication, rate limiting, request\nrouting, and other cross-cutting concerns. The API Gateway helps to\nsimplify the client-side by providing a unified interface to a set of\nMicroservice.\nEvent-Driven Architecture: An Event-Driven Architecture is a pattern\nthat involves using events to communicate between microservices.\nInstead of tightly coupling services through synchronous REST APIs,\nevents can be used to decouple services and to provide more\nflexibility and scalability.\nCQRS: CQRS (Command Query Responsibility Segregation) is a\npattern that involves separating the responsibility of handling read\nand write operations into separate services. It can help to simplify\nthe design of a system by separating concerns and reducing\ncomplexity. It can also help to improve performance by allowing read\nand write operations to be optimized separately.\nEach of these patterns can help to improve the scalability, reliability,\nand maintainability of a microservice architecture. The choice of",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 250,
          "text": "pattern will depend on the specific requirements and constraints of\nthe system being developed.\nWhich design patterns are used for database design in\nMicroservice?\nCommon design patterns used for database design in Microservice\nare:\nDatabase per Service: Each service has its own database,\nallowing for a high degree of independence and autonomy.\nShared Database: A shared database is used by multiple services\nto store data that is commonly used across the system.\nEvent Sourcing: The state of the system is stored as a series of\nevents, allowing for better scalability and fault tolerance.\nCommand Query Responsibility Segregation (CQRS): Queries\nand commands are separated, allowing for improved scalability and\nperformance.\nSaga: A long-running transaction is broken down into smaller,\nautonomous transactions that can be executed by different services.\nMaterialized View: A pre-computed view of data is used to\nprovide fast access to commonly used data.\nAPI Composition: APIs are composed to provide a unified view of\ndata from multiple services.\nRead Replicas: Read replicas are used to offload read requests\nfrom the primary database, improving performance and scalability.\n \nWhat is the SAGA Microservice pattern?\nSAGA is a Microservice Pattern:\nThe Saga pattern is a design pattern used in distributed systems to\nmanage long-running transactions involving multiple services. It is a\nway to ensure that these transactions maintain data consistency and\nintegrity even in the face of failures and errors.\nIn the Saga pattern, a transaction is divided into a series of smaller,\nmore granular sub-transactions, also known as \"saga steps\", each of\nwhich can be executed independently by a single service. Each sub-",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 251,
          "text": "transaction updates its own local data and sends messages to other\nservices to trigger their corresponding sub-transactions.\nIf a sub-transaction fails, the Saga pattern uses a compensating\naction to undo the changes made by the previous steps and\nmaintain consistency across the entire transaction. This can be\nthought of as a kind of \"rollback\" mechanism for distributed\ntransactions.\nThe Saga pattern can be implemented in different ways depending\non the specific system and requirements. One common approach is\nto use a choreography-based saga, where each service is responsible\nfor executing its own sub-transactions and communicating with other\nservices directly. Another approach is to use an orchestration-based\nsaga, where a central coordinator service is responsible for executing\nand coordinating the different sub-transactions.\nThe Saga pattern can be a powerful tool for managing long-running\ndistributed transactions, but it also comes with some trade-offs. It\ncan be more complex to implement than simpler transaction models,\nand it can require careful design and testing to ensure that it can\nhandle all possible failure scenarios. However, in complex distributed\nsystems where data consistency is critical, the Saga pattern can be a\nvaluable tool for maintaining data integrity and avoiding data\ninconsistencies.\nExplain the CQRS concept?\nCommand Query Responsibility Segregation (CQRS) is a design\npattern that separates read and write operations in a system. This\nmeans that the operations that retrieve data (queries) are separated\nfrom the operations that update data (commands).\nThe main idea behind CQRS is to improve performance by allowing\nthe read and write operations to be optimized and scaled\nindependently. The read operations can be optimized for read-heavy\nworkloads, while the write operations can be optimized for write-\nheavy workloads.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 252,
          "text": "By separating read and write operations, CQRS also provides a\nhigher degree of isolation and can simplify the implementation of\ncomplex business logic. Additionally, CQRS can improve the ability to\nhandle concurrent access to data, allowing for better scalability and\nfault tolerance.\nCQRS is often used in Microservice architectures and event-driven\nsystems, where different parts of the system can have different\nrequirements for read and write operations.\nWhich Microservice pattern will you use for read-heavy and\nwrite-heavy applications?\nFor read-heavy applications, you may use the CQRS (Command\nQuery Responsibility Segregation) pattern. This pattern separates\nthe responsibilities of reading and writing data into separate\nmicroservices. The write-side microservice is responsible for handling\nupdates and writes to the database, while the read-side microservice\nis responsible for serving up data for queries.\nBy separating these responsibilities, you can scale each microservice\nindependently based on the needs of your application. For example,\nyou can scale up the read-side microservice to handle increased read\ntraffic, or scale down the write-side microservice to handle lower\nwrite traffic.\nFor write-heavy applications, you may use the Event Sourcing\npattern. This pattern involves storing every change to the state of\nyour application as an event. Each microservice can subscribe to\nthese events and update its own state accordingly. This allows\nmultiple microservices to collaborate and ensures that all changes\nare captured and recorded.\nIn both cases, you can also consider using a message queue to\nhandle asynchronous communication between the microservices,\nand a cache to improve performance for read-heavy applications.\n ",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 253,
          "text": "Explain the Choreography pattern in Microservice?\nChoreography in Microservice refers to the way in which services\ncommunicate and coordinate with each other without the need for a\ncentral authority or central point of control. Instead, each service is\nresponsible for handling its own behaviour and communicating with\nother services as needed.\nIn a choreographed system, services exchange messages or events\nto coordinate their behaviour. For example, one service might send\nan event to another service indicating that a certain action has taken\nplace, and the receiving service can respond as necessary.\nThe main advantage of choreography is that it provides a more\ndecentralized and flexible system, where services can evolve and\nchange independently. This can lead to improved scalability, as\nservices can be added or removed without affecting the entire\nsystem. Additionally, choreography can improve reliability, as a\nfailure in one service does not affect the rest of the system.\nChoreography is often used in event-driven systems and is an\nalternative to the centralized coordination provided by a central\nauthority, such as a service registry or a centralized API gateway.\n \nWhat are the types of fault tolerance mechanisms in Spring\nMicroservice?\nSpring framework provides several mechanisms for implementing\nfault tolerance in Microservice:\nCircuit Breaker: The Spring Cloud Netflix Hystrix library provides a\ncircuit breaker implementation. The circuit breaker acts as a proxy\nbetween a Microservice and its dependencies. It monitors the health\nof the dependencies and opens the circuit if a certain number of\nfailures occur within a defined time window. This prevents further\nfailures and allows the Microservice to degrade gracefully.\nLoad Balancing: Spring Cloud Netflix Ribbon provides client-side\nload balancing. It allows a Microservice to distribute incoming",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 254,
          "text": "requests across multiple instances of a dependent Microservice. This\nhelps to increase availability and resilience, since the Microservice\ncan still function even if one of its dependencies fails.\nRetry: Spring Retry provides declarative control of retry behaviour.\nIt allows a Microservice to automatically retry a failed request to a\ndependent Microservice, with configurable parameters such as\nmaximum number of retries and back off policies.\nTimeouts: Spring Cloud Hystrix provides timeout functionality for\ndependent Microservice. It allows a Microservice to specify a timeout\nfor a request, and fail fast if the dependent Microservice does not\nrespond within the defined timeout period.\nMonitoring and Management: Spring Boot provides built-in\nsupport for monitoring and management of Microservice. This\nincludes monitoring of application health, metrics, and logs, as well\nas management of the application lifecycle, such as starting and\nstopping the application.\nBy using these fault tolerance mechanisms, you can build robust and\nresilient Microservice with Spring framework. This can help you to\ndeliver high-quality applications that are able to withstand failures\nand handle high levels of traffic and load.\n \nWhat is circuit breaker pattern? What are examples of it?\nThe Circuit Breaker pattern is a design pattern used to prevent\nfailures in a distributed system by adding a layer of protection\nbetween the calling service and the called service. The Circuit\nBreaker acts as a switch that can be opened or closed based on the\nhealth of the called service.\nHere's a simple example of how you can implement the Circuit\nBreaker pattern in the Spring framework:\nCreate a Circuit Breaker class that implements the\nHystrixCircuitBreaker interface:\n@Service",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 255,
          "text": "public class MyCircuitBreaker implements HystrixCircuitBreaker {\n@Autowired\nprivate MyService myService;\n@HystrixCommand(fallbackMethod = \"defaultResponse\")\npublic String callService() {\nreturn myService.doSomething();\n}\npublic String defaultResponse() {\nreturn \"Default Response\";\n}\n}\nIn this example, we use the @HystrixCommand annotation to wrap\nthe call to the MyService class in a circuit breaker. If the call to\nMyService fails, the defaultResponse method will be called as a\nfallback.\nConfigure the Hystrix Circuit Breaker in your Spring configuration:\n@Configuration\n@EnableCircuitBreaker\npublic class CircuitBreakerConfig {\n@Bean\npublic MyCircuitBreaker myCircuitBreaker() {\nreturn new MyCircuitBreaker();\n}\n}\nIn this example, we enable the Circuit Breaker pattern using the\n@EnableCircuitBreaker annotation.\nWhen the callService method is called, the Hystrix Circuit Breaker\nwill monitor the health of the MyService class and, if necessary, open\nthe circuit and fall back to the defaultResponse method. This helps",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 256,
          "text": "to prevent failures from propagating throughout the system and\ncausing widespread disruption.\n \nExplain the annotations used to implement circuit breaker in\nspring boot?\nIn Spring Boot, circuit breakers can be implemented using the\nspring-cloud-starter-circuitbreaker library, which provides support for\nseveral different circuit breaker implementations, including Hystrix.\nTo use the circuit breaker in Spring Boot, you can use the following\nannotations:\n@HystrixCommand: This annotation is used to wrap a method\nwith a circuit breaker. When the circuit breaker trips, the method will\nreturn a fallback response instead of the normal response.\n@HystrixProperty: This annotation is used to configure the\nproperties of the circuit breaker, such as the timeout and the number\nof failures before the circuit breaker trips.\nHere is an example of how to use the @HystrixCommand and\n@HystrixProperty annotations to implement a circuit breaker in\nSpring Boot:\n@Service\npublic class MyService {\n@HystrixCommand(fallbackMethod = \"fallback\",\ncommandProperties = {\n@HystrixProperty(name =\n\"execution.isolation.thread.timeoutInMilliseconds\", value = \"2000\"),\n@HystrixProperty(name =\n\"circuitBreaker.requestVolumeThreshold\", value = \"5\"),\n@HystrixProperty(name =\n\"circuitBreaker.errorThresholdPercentage\", value = \"50\"),\n@HystrixProperty(name =\n\"circuitBreaker.sleepWindowInMilliseconds\", value = \"5000\")\n})\npublic String callDependency() {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 257,
          "text": "// Call the dependent service\n}\npublic String fallback() {\n// Return a fallback response\n}\n}\nWhich library have you used to implement circuit breaker in\nspring boot? \nThere are several libraries and frameworks available for\nimplementing circuit breakers in various programming languages.\nSome of the popular ones include:\nHystrix (Java): A library developed by Netflix, it is one of the most\npopular circuit breaker implementations for Java.\nResilience4j (Java): An lightweight, easy-to-use library for fault\ntolerance in Java.\nPolly (.NET): A library for .NET that provides support for circuit\nbreakers, timeouts, and retries.\nRuby Circuit Breaker (Ruby): A library for Ruby that implements the\ncircuit breaker pattern.\nGo-Hystrix (Go): A Go implementation of the Hystrix library,\nproviding circuit breaker functionality for Go applications.\nElixir Circuit Breaker (Elixir): An implementation of the circuit breaker\npattern for Elixir applications.\nThese libraries provide a convenient and easy-to-use way to\nimplement circuit breakers in your applications, allowing you to\nimprove the resilience and fault tolerance of your system.\n ",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 258,
          "text": "How to call methods Asynchronously, in the spring\nframework how can we do that?\nIn the Spring framework, you can call methods asynchronously using\nthe @Async annotation. The @Async annotation marks a method as\nbeing executed asynchronously by a task executor.\nHere's an example of how you can use the @Async annotation:\n@Service\npublic class MyService {\n@Async\npublic CompletableFuture<String> doSomethingAsync() {\n// Perform some task asynchronously\nreturn CompletableFuture.completedFuture(\"Task completed\");\n}\n}\nIn order to use the @Async annotation, you need to configure a task\nexecutor in your Spring configuration. Here's an example:\n@Configuration\n@EnableAsync\npublic class AsyncConfig {\n@Bean(name = \"taskExecutor\")\npublic Executor taskExecutor() {\nreturn Executors.newFixedThreadPool(10);\n}\n}\nIn this example, we create a task executor using a FixedThreadPool\nwith a pool size of 10. When the doSomethingAsync method is\ncalled, it will be executed asynchronously by the task executor. The\nCompletableFuture returned by the method can be used to retrieve\nthe result of the asynchronous task when it becomes available.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 259,
          "text": "How to call another microservice asynchronously?\nTo call another microservice asynchronously, you can use a message\nqueue. The basic flow is:\nOne microservice produces a message and sends it to a message\nqueue.\nAnother microservice consumes the message from the queue and\nperforms the desired action.\nThe message queue acts as a buffer between the two microservices,\nallowing them to communicate asynchronously. This approach has\nseveral benefits:\nLoose coupling: Microservices can communicate with each other\nwithout having to know the details of the other microservice's\nimplementation.\nScalability: The message queue can be scaled independently of the\nmicroservices, allowing for improved scalability.\nResilience: If one microservice fails, the message queue can hold\nthe messages until the other microservice is able to process them.\nThere are several message queues available, such as RabbitMQ,\nApache Kafka, and ActiveMQ, and you can choose the one that best\nfits your needs. To use a message queue, you need to write code to\nproduce and consume messages from the queue.\nHow to communicate between two microservices?\nThere are several ways to communicate between two microservices:\nHTTP/REST: The most common way of communication between\nmicroservices is through REST APIs over HTTP. Microservices can\nexpose a RESTful API that other microservices can use to request\ndata or perform actions.\nMessage Queueing: Microservices can communicate with each\nother asynchronously through a message queue such as RabbitMQ\nor Apache Kafka. Microservices can publish messages to the queue",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 260,
          "text": "and other microservices can subscribe to the queue and receive\nmessages.\nEvent-Driven Architecture: Microservices can use event-driven\narchitecture to communicate with each other. In this approach,\nmicroservices can publish events to a centralized event bus and\nother microservices can subscribe to these events and react to them.\ngRPC: gRPC is a high-performance, open-source framework for\nbuilding microservices. It uses a binary format for communication\nbetween microservices and can be used for both synchronous and\nasynchronous communication.\nRegardless of the communication method chosen, it's important to\nensure that communication between microservices is secure and that\nonly authorized microservices are able to communicate with each\nother.\nHow to restrict the Microservice from calling the other\nMicroservice?\n(Let's say there are A, B, C, D, and E-services and I want to\nrestrict A form calling C, D, and E. how will you do that?)\nOne way to restrict a microservice from calling another microservice\nis to use API gateway to enforce the access control rules. The API\ngateway can be configured to only allow authorized microservices to\nmake API requests to other microservices. Additionally, you can use\nauthentication and authorization mechanisms such as OAuth, JWT,\nor API keys to secure the API endpoints and ensure that only\nauthorized microservices are able to access them.\nAnother way to restrict microservice access is to use network\nsegmentation and firewall rules to restrict network access between\nmicroservices. This can help prevent unauthorized microservices\nfrom accessing other microservices on the network.\nFinally, you can also use code-level access control in each\nmicroservice, for example by using role-based access control\n(RBAC), to control which microservices can call which APIs and what\nactions they can perform.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 261,
          "text": "How to save your username password in the spring boot-\nbased Microservice application?\n(What is the best practice)\nIn a Spring Boot-based microservices application, it is generally\nconsidered best practice to store sensitive information such as\nusername and password in a secure location, separate from the\napplication code. There are several ways to achieve this, here are a\nfew options:\nEnvironment Variables: You can store the username and\npassword as environment variables on the machine where the\nmicroservice is running. This approach is considered secure as\nenvironment variables are typically stored outside of the file system\nand are not accessible to unauthorized users.\nConfiguration files: You can store the username and password in\na separate configuration file that is encrypted and stored in a secure\nlocation. The configuration file can then be accessed by the\nmicroservice at runtime.\nHashicorp Vault: You can use Hashicorp Vault to securely store,\nmanage, and access sensitive data such as username and password.\nVault provides a centralized and secure way to store and access\nsecrets.\nExternal Service: You can also use external services like AWS\nSecrets Manager, Azure KeyVault, Google Cloud Key Management\nService (KMS) to store and manage your credentials.\nIt's important to note that, whatever the approach you choose, you\nshould make sure that the sensitive information is encrypted and\nstored in a secure location that is only accessible to authorized users\nand services. Also, you should use the best practice of never\nhardcoding the sensitive information in the code, this could help to\navoid security issues, and make it easy to rotate and manage your\ncredentials.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 262,
          "text": "CHAPTER 9: MEMORY\nMANAGEMENT IN JAVA\nWhat is Memory management in Java?\nMemory management in Java is handled by the Java Virtual Machine\n(JVM), which automatically manages the allocation and deallocation\nof memory for objects. The JVM uses a technique called garbage\ncollection to periodically scan the heap (the area of memory where\nobjects are stored) and identify objects that are no longer being\nused by the application. These objects are then removed from\nmemory, freeing up space for new objects.\nJava has several different garbage collectors that can be used, each\nwith its own set of features and trade-offs. The default garbage\ncollector in most JVMs is called the \"Serial GC\", which is a basic\ngarbage collector that runs serially on a single thread. Other garbage\ncollectors include the \"Parallel GC\", which uses multiple threads to\nspeed up garbage collection, and the \"G1 GC\", which is designed for\nlarge heap sizes and can help reduce the frequency of long pauses\ncaused by garbage collection.\nJava also provides a way for developers to explicitly manage\nmemory through the use of manual memory management\ntechniques such as the new keyword and the finalize() method.\nHowever, it's not recommended to use manual memory management\nin Java, as it can lead to memory leaks and other issues. The JVM's\ngarbage collector does a much better job of managing memory and\nit's better to let it do its job.\nIn addition, Java also provides several memory managements\nrelated flags that can be used to configure the JVM memory usage\nand performance. Such as, -Xmx and -Xms to configure the\nmaximum and minimum heap size, -XX:NewRatio to configure the",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 263,
          "text": "size of young and old generation, -XX:+UseG1GC to configure the\nG1 Garbage collector.\nIt's worth noting that, effective Memory management requires a\ndeep understanding of JVM internals, Garbage Collection and Java\nMemory Model. Incorrect usage of memory management flags can\nlead to poor performance and stability issues.\nOverall, these changes to the Java Memory Model in Java 8 help to\nimprove the performance and safety of multi-threaded Java\napplications.\n \nWhat is Meta-Space in java ? What benefits does it offer?\nIn Java 8 and later, the Meta-Space is a memory space that is used\nto store class metadata. It is separate from the Java heap, which is\nused to store objects and other data.\nThe MetaSpace is used to store information about classes and\ninterfaces, such as their methods, fields, and annotations. This\ninformation is used by the Java Virtual Machine (JVM) to dynamically\nload and link classes at runtime.\nThe MetaSpace is allocated a fixed amount of memory, which is\nspecified using the -XX:MaxMetaspaceSize command-line option.\nWhen the MetaSpace is full, the JVM will attempt to free up space by\nunloading classes that are no longer in use. If this is not sufficient,\nthe JVM will throw a java.lang.OutOfMemoryError: Metaspace error.\nIt is important to monitor the MetaSpace usage and adjust the -\nXX:MaxMetaspaceSize as necessary to ensure that there is enough\nspace for the classes that are needed at runtime.\nIt's worth noting that, starting from Java 11, the MetaSpace has\nbeen replaced by the \"Class Data Sharing\" (CDS) feature. CDS allows\nto share read-only class data across multiple JVMs, reducing the\nmemory footprint and the time required to start the JVM.\n ",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 264,
          "text": "What is memory leak in java? how to rectify that in java? \nA memory leak in Java occurs when an application continues to hold\nonto objects that are no longer needed, preventing the garbage\ncollector from freeing up memory. This can lead to the application\nusing more and more memory over time, eventually causing it to\ncrash or become unresponsive. Memory leaks can be caused by a\nvariety of issues, such as incorrect object references, failure to close\nresources, or using third-party libraries that have memory leaks. To\nfix a memory leak, you will need to identify the source of the\nproblem and correct it. This can involve using tools such as memory\nprofilers, heap dumps, and thread dumps to help identify the root\ncause of the leak.\nHow to use a profiler to find the memory leak? \nThere are several ways to use a profiler to identify memory leaks in\nJava:\nUse a built-in profiler: Many integrated development environments\n(IDEs) such as Eclipse and IntelliJ IDEA have built-in profilers that\ncan be used to detect memory leaks. These profilers typically\nprovide information such as heap usage, object references, and\ngarbage collection statistics.\nUse a standalone profiler: Standalone profilers such as VisualVM and\nJProfiler can be used to profile Java applications. These profilers\nprovide more advanced features such as heap dump analysis, thread\nprofiling, and memory leak detection.\nUse command-line tools: The Java Virtual Machine (JVM) provides\nseveral command-line tools that can be used to profile memory\nusage, such as jmap, jstat, and jhat. These tools can be used to\ncreate heap dumps, monitor garbage collection statistics, and\nanalyze memory usage.\nTo use a profiler, you will need to first run your application in\nprofiling mode, and then analyze the data that the profiler collects.\nThis may include analyzing heap dumps, looking at object\nreferences, and identifying patterns of memory usage. Once you",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 265,
          "text": "have identified the source of the leak, you can then take steps to fix\nthe problem.\nIt's worth noting that, Profilers can be quite complex, it's advisable\nto have some familiarity with Java Memory Model, Garbage\nCollection and JVM internals to effectively use them.\n \nWhat is out of memory error?\nAn \"Out of Memory\" error in Java occurs when the application\nrequests more memory from the JVM than is available. This can\nhappen for a number of reasons, such as:\nThe application is using more memory than is available on the\nsystem: The JVM has a maximum limit on the amount of memory it\ncan use, which is determined by the -Xmx command line option. If\nthe application is using more memory than this limit, an Out of\nMemory error will occur.\nMemory leaks: If an application holds onto objects that are no\nlonger needed, it can cause the JVM to run out of memory. This is\nknown as a memory leak.\nInsufficient heap size: The heap is the area of memory where the\nJVM stores objects. If the heap size is not large enough, the JVM\nmay not be able to allocate enough memory for the application's\nneeds, resulting in an Out of Memory error.\nHigh usage of non-heap memory: The JVM also uses non-heap\nmemory for things like class metadata, JIT compilation data and\nnative resources. If the non-heap memory usage is high, it can\ncause Out of Memory error.\nTo fix an Out of Memory error, you will need to identify the cause of\nthe problem and take steps to address it. This may include\nincreasing the amount of memory available to the JVM, fixing\nmemory leaks, or optimizing the application's memory usage.\nIt's worth noting that, Out of Memory errors can be challenging to\ndebug, it's advisable to use a profiler and analyse the heap dump or\nthread dump to understand the root cause of the error.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 266,
          "text": "CHAPTER 10: REST\nWhat are the HTTP methods in REST?\nREST (Representational State Transfer) is an architectural style for\nbuilding web services, and it supports the following HTTP methods:\nGET: Used to retrieve a resource or a collection of resources. The\nGET method should be used for read-only operations and should not\nhave any side-effects.\nPOST: Used to create a new resource. The POST method can be\nused to submit data to the server, such as form data or JSON\npayloads.\nPUT: Used to update an existing resource. The PUT method can be\nused to submit data to the server, and it should completely replace\nthe resource if it exists.\nPATCH: Used to partially update an existing resource. The PATCH\nmethod can be used to submit a set of changes to the server, and it\nshould only modify the specified attributes of the resource.\nDELETE: Used to delete a resource. The DELETE method should\ndelete the resource if it exists and should have no additional side-\neffects.\nThese methods correspond to the CRUD (Create, Read, Update,\nDelete) operations that can be performed on resources in a RESTful\nservice. The appropriate method should be used depending on the\ntype of operation being performed. Additionally, some RESTful\nservices may support additional methods, such as HEAD and\nOPTIONS, for performing specific operations.\n ",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 267,
          "text": "What are the idempotent methods in REST?\nIn REST (Representational State Transfer), idempotent methods are\nHTTP methods that can be safely called multiple times without\nchanging the result beyond the initial application of the method. The\nfollowing HTTP methods are considered idempotent:\nGET\nPUT\nDELETE\nThese methods can be called multiple times without any side effects\nand should always return the same result.\nOn the other hand, non-idempotent methods, such as POST, can\nhave side effects and should be called only once.\n \nWhat are the standards to follow to build a rest service?\nREST (Representational State Transfer) is a popular architectural\nstyle for building web services. To build a RESTful service that\nadheres to best practices, there are several standards and guidelines\nthat can be followed, including:\nUse HTTP Verbs: RESTful services should use HTTP verbs such as\nGET, POST, PUT, and DELETE to perform operations on resources.\nURI Design: RESTful URIs should be designed to identify resources\nand their relationships. They should be self-descriptive and\nhierarchical, with nouns being used as resource names and verbs\nbeing used as resource actions.\nUse HTTP Status Codes: RESTful services should use appropriate\nHTTP status codes to indicate the result of an operation, such as 200\nOK for success, 404 Not Found for a missing resource, and 500\nInternal Server Error for a server-side error.\nUse HATEOAS: RESTful services should use HATEOAS (Hypermedia\nas the Engine of Application State) to allow clients to discover and\ninteract with resources. HATEOAS uses links in the response to\nprovide information about available actions and resources.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 268,
          "text": "Statelessness: RESTful services should be stateless, meaning that\nthey do not maintain client state between requests. This helps to\nimprove scalability and reliability, as it eliminates the need for server-\nside state storage.\nContent Negotiation: RESTful services should support content\nnegotiation, allowing clients to request resources in the format they\nprefer, such as JSON or XML.\nVersioning: RESTful services should be versioned to allow for\nchanges in the API over time. This can be done by including the\nversion number in the URI or in the media type.\nSecurity: RESTful services should be secure, with appropriate\nmeasures taken to prevent unauthorized access,\nWhat is the difference between POST and PUT methods?\nPOST Method:\nPurpose: POST is primarily used to submit data to be processed to a\nspecified resource. It is commonly used when you want to create a\nnew resource on the server.\nIdempotence: It is not idempotent, meaning that multiple identical\nrequests may have different outcomes, especially if used to create\nnew resources each time.\nSafety: It is not considered safe because it may cause changes on\nthe server.\nPUT Method:\nPurpose: PUT is used to update a resource or create it if it doesn't\nexist at a specified URL. It is often used when you want to fully\nreplace an existing resource with new data.\nIdempotence: It is idempotent, meaning that multiple identical\nrequests will have the same effect as a single request. If the\nresource doesn't exist, PUT will create it, and if it does, it will update\nit.\nSafety: It is considered safe when used for updates because it\ndoesn't create new resources; it only modifies or replaces existing",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 269,
          "text": "ones.\n \nWhat is sent in headers? Can we intercept the header? If\nyes, how?\nYes, it is possible to intercept the header in a RESTful service. The\nheader is part of an HTTP request and contains metadata about the\nrequest, such as the type of request, the format of the payload, and\nthe authentication credentials.\nIn some cases, it may be necessary to intercept the header in order\nto process the request or to provide additional information about the\nrequest. This can be done by using middleware, which is a software\ncomponent that sits between the client and the server. Middleware\ncan inspect and modify the request and response headers, and it\ncan also perform other tasks, such as logging, authentication, and\nauthorization.\nFor example, if a RESTful service needs to authenticate the client, it\ncan use middleware to inspect the header for an authentication\ntoken. If the token is present, the middleware can verify its\nauthenticity and allow the request to continue. If the token is not\npresent or is invalid, the middleware can return an error response,\nsuch as a 401 Unauthorized.\nIn summary, intercepting the header is a common practice in\nRESTful services, and it can be used to implement additional\nfunctionality, such as authentication, logging, and request\nmodification.\nHow to secure REST API?\nSecuring a REST API involves a combination of different techniques\nand technologies to ensure that only authorized clients can access\nthe API and that the data transmitted between the client and the\nserver is protected.\nHere are some common ways to secure a REST API:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 270,
          "text": "Authentication: This is the process of verifying the identity of the\nclient. REST APIs can use various authentication methods such as\nBasic Authentication, Token-based Authentication (OAuth2, JWT) or\nAPI keys.\nAuthorization: This is the process of determining whether a client\nis allowed to perform a specific action on a resource. Authorization\ncan be done using role-based access control (RBAC) or access\ncontrol lists (ACLs).\nEncryption: This is the process of protecting data in transit by\nencrypting it. REST APIs can use HTTPS to encrypt the data\ntransmitted between the client and the server.\nValidation: This is the process of validating the input data to\nensure that it meets certain criteria. REST APIs can use input\nvalidation libraries to validate data before processing it.\nRate Limiting: This is the process of limiting the number of\nrequests that a client can make to an API within a certain time\nperiod. This can help prevent Denial of Service (DoS) attacks.\nLogging and Auditing: This is the process of recording API access\nand activity, which can be used to detect and investigate security\nincidents.\nHow to pass a parameter in request, is it via URL or as a\nJSON object?\nThere are multiple ways to pass a parameter in a request, and the\nchoice depends on the application's requirements and the API\ndesign. Two common ways to pass parameters in a request are:\nVia URL: The URL query string can be used to pass parameters in a\nrequest. The parameters are appended to the URL after the \"?\"\ncharacter, and multiple parameters are separated by \"&\". For\nexample, http://example.com/api/users?name=john&age=30.\nAs a JSON object: Another way to pass parameters is to include\nthem in the request body as a JSON object. This is common in",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 271,
          "text": "RESTful APIs that use HTTP POST or PUT methods to create or\nupdate resources. For example, the request body could be { \"name\":\n\"john\", \"age\": 30 }.\nBoth methods have their advantages and disadvantages. Passing\nparameters via URL is easy to understand and implement, and the\nparameters can be easily bookmarked or shared. However, passing\nsensitive data via URL is not secure as it can be easily intercepted\nand viewed by third parties.\nOn the other hand, passing parameters as a JSON object in the\nrequest body is more secure as it is not visible in the URL. However,\nit may require more effort to implement and may not be as easy to\nunderstand for beginners.\nIn summary, passing parameters via URL or as a JSON object in the\nrequest body are both valid methods, and the choice depends on the\napplication's requirements and the API design.\nIt's important to note that, securing a REST API requires a holistic\napproach that considers all aspects of the API and its environment,\nsuch as the infrastructure, network, and clients. Also, security best\npractices and standards such as OWASP and PCI-DSS should be\nfollowed.\nAlso, you can use Spring Security to secure your REST API.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 272,
          "text": "CHAPTER 11: DESIGN PATTERN &\nSYSTEM DESIGN\nDesign Rest API for tiny URL application, how many\nendpoints it requires?\nBased on that there is a discussion on it.\n1. Endpoint to create a Tiny URL\nRequest\nPOST /tinyurls\nBody:\n{\n\"long_url\": \"https://www.example.com/very/long/url\"\n}\nResponse\nStatus: 201 Created\nBody:\n{\n\"short_url\": \"http://tiny.url/abc123\",\n\"long_url\": \"https://www.example.com/very/long/url\"\n}\n2. Endpoint to retrieve the original URL from a Tiny URL\nRequest\nGET /tinyurls/{short_url_id}\nResponse\nStatus: 302 Found\nLocation: https://www.example.com/very/long/url",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 273,
          "text": "3. Endpoint to retrieve statistics for a Tiny URL\nRequest\nGET /tinyurls/{short_url_id}/stats\nResponse\nStatus: 200 OK\nBody:\n{\n\"click_count\": 42,\n\"last_clicked_at\": \"2022-01-01T12:00:00Z\"\n}\nNote: The implementation details (such as the format of the short\nURL and the storage backend) and the error handling are omitted for\nsimplicity.\n \nWhat is a singleton design pattern?\nSingleton design pattern:\nThe singleton design pattern is a creational design pattern that\nensures that a class has only one instance while providing a global\naccess point to this instance. The singleton pattern is often used\nwhen a single object is needed to coordinate actions across the\nsystem.\nTo implement the singleton pattern, you will need to:\nDefine a class with a private constructor, so that no other class can\ninstantiate it.\nDeclare a static variable of the same type as the class, and create an\ninstance of the class in the variable.\nDeclare a static method that returns the instance of the class.\nHere is an example of a singleton class in Java:\npublic class Singleton {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 274,
          "text": "private static Singleton instance;\nprivate Singleton() {}\npublic static Singleton getInstance() {\nif (instance == null) {\ninstance = new Singleton();\n}\nreturn instance;\n}\n}\nTo use the singleton, you would call the getInstance the method is\nlike this:\nThe singleton pattern is useful when you need to ensure that a class\nhas only one instance, and you need to provide a global access point\nto that instance. It is also useful when you need to control the\nnumber of objects that are created because you can ensure that\nonly one object is created. However, the singleton pattern can make\nit difficult to test your code, because you cannot use the constructor\nto create new instances of the singleton class for testing purposes.\n \nHow to break the singleton design pattern? \nThe Singleton design pattern is a creational pattern that ensures that\nonly one instance of a class can exist in a system, and provides a\nglobal point of access to that instance. However, in some situations,\nit may be necessary to break the Singleton pattern and create\nmultiple instances of the class. Here are some common techniques\nfor breaking the Singleton pattern:\nUse Dependency Injection: One way to break the Singleton\npattern is to use dependency injection to pass an instance of the\nSingleton class into other classes that require it. This allows multiple\ninstances to be created, and can be useful when testing or when you\nneed to have different instances with different configurations.\nUse Reflection: Another way to break the Singleton pattern is to\nuse reflection to access the private constructor of the Singleton class",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 275,
          "text": "and create a new instance. This is not recommended in most cases,\nas it can cause unexpected behavior and can be a security risk.\nUse a Subclass: You can also create a subclass of the Singleton\nclass and override its behavior. The subclass can then be used to\ncreate multiple instances with different behavior, while the original\nSingleton class continues to provide a single instance.\nUse a Factory: Another way to break the Singleton pattern is to\nuse a factory class that creates instances of the Singleton class. This\nallows you to create multiple instances with different configurations,\nwhile still providing a global point of access to the instances.\nIt's important to note that breaking the Singleton pattern can have\nimplications for the overall design of the system, so it should be\ndone with caution and only when necessary. The Singleton pattern is\noften used to enforce a specific behaviour or guarantee a certain\nlevel of performance, so breaking it should be done with a clear\nunderstanding of the implications.\n \nWhat is the solution to fix the above problem?\nThe Singleton design pattern is a creational pattern that ensures that\nonly one instance of a class can exist in a system, and provides a\nglobal point of access to that instance. While it's possible to break\nthe Singleton pattern as I described in the previous answer, it's\ngenerally best to maintain the Singleton pattern to ensure that the\nclass behaves consistently and as intended.\nHere are some techniques to help prevent breaking the Singleton\npattern:\nUse a Private Constructor: A key part of the Singleton pattern is\nthe use of a private constructor. This prevents other classes from\ncreating new instances of the Singleton class. By ensuring that the\nconstructor remains private, you can help prevent the pattern from\nbeing broken.\nUse Static Initialization: In many programming languages, static\ninitialization ensures that a static class member is initialized only",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 276,
          "text": "once, the first time it is accessed. This can help to ensure that only\none instance of the Singleton class is created.\nUse a Final Instance Variable: Another way to help prevent\nbreaking the Singleton pattern is to use a final instance variable to\nstore the Singleton instance. This ensures that the instance is only\ncreated once and cannot be changed.\nUse a Thread-Safe Implementation: In a multi-threaded\nenvironment, it's important to ensure that the Singleton instance is\nthread-safe. This can be achieved by using a thread-safe\nimplementation such as double-checked locking or the Initialization-\non-demand holder idiom.\nUse a Private Inner Class: Another approach to implementing the\nSingleton pattern is to use a private inner class to hold the Singleton\ninstance. This ensures that the instance is only created once and\ncannot be accessed from outside the class.\nBy using these techniques, you can help prevent the Singleton\npattern from being broken and ensure that the class behaves\nconsistently and as intended.\nWhat is a Builder Design pattern?\nBuilder Design Pattern\nThe Builder design pattern is a creational design pattern that allows\nfor the step-by-step construction of complex objects using a specific\nconstruction process. It separates the construction of an object from\nits representation so that the same construction process can create\ndifferent representations.\nThe Builder pattern is useful when you want to create complex\nobjects, but the construction process for these objects is relatively\nsimple. It allows you to create the object step by step and provides\na way to retrieve the final object once it has been constructed.\nHere is an example of how the Builder pattern might be\nimplemented in Java:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 277,
          "text": "public class BuilderExample {\npublic static void main(String[] args) {\n// create the director\nDirector director = new Director();\n// create the builder\nBuilder builder = new ConcreteBuilder();\n// construct the complex object\ndirector.construct(builder);\n// retrieve the finished product\nComplexObject complexObject = builder.getResult();\n}\n}\nclass ComplexObject {\n// fields for the complex object\n}\nclass Director {\npublic void construct(Builder builder) {\n// use the builder to construct the complex object\n}\n}\nabstract class Builder {\n// methods for constructing the complex object\npublic abstract ComplexObject getResult();\n}\nclass ConcreteBuilder extends Builder {\nprivate ComplexObject object = new ComplexObject();\n// methods for constructing the complex object\npublic ComplexObject getResult() {\nreturn object;\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 278,
          "text": "}\n \nWhich design pattern is used by spring AOP? Explain with\nlogic?\nSpring AOP (Aspect-Oriented Programming) is based on the\nDecorator design pattern. The Decorator pattern is a structural\npattern that allows adding new behaviors to existing objects\ndynamically by placing these objects inside special wrapper objects\nthat contain the behaviors. In AOP, aspects are defined as modules\ncontaining certain behaviors that can be combined with other\napplication objects. The aspect is applied to the application objects\nusing proxies. In this way, AOP provides a way to add behaviors to\nexisting objects without affecting the underlying code.\nWhat is Adapter design pattern & Proxy design pattern?\nAdaptor design pattern:\nThe Adapter design pattern is a structural pattern that allows two\nincompatible interfaces to work together. It converts the interface of\none class into another interface that clients expect. This pattern is\noften used when an existing class's interface does not match the\ninterface required by a client, or when a client needs to work with\nmultiple classes that have different interfaces.\nThe Adapter pattern involves the following components:\nTarget Interface: This is the interface that the client expects to work\nwith.\nAdaptee: This is the class that has the interface that does not match\nthe target interface.\nAdapter: This is the class that adapts the interface of the Adaptee to\nthe Target Interface.\nThe Adapter pattern can be implemented in two ways: Class Adapter\nand Object Adapter.\nIn the Class Adapter approach, the Adapter class extends the\nAdaptee class and implements the Target Interface. The Adapter",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 279,
          "text": "class inherits the behavior of the Adaptee class and adds the\nbehavior required to match the Target Interface.\nIn the Object Adapter approach, the Adapter class contains an\ninstance of the Adaptee class and implements the Target Interface.\nThe Adapter class delegates the requests from the client to the\nAdaptee instance and adds the behavior required to match the\nTarget Interface.\nHere's an example to illustrate how the Adapter pattern works:\nSuppose you have a client that expects a simple interface for a\nprinter that only has a print() method. However, you have an\nexisting class called AdvancedPrinter that has a complex interface\nwith multiple methods. You can create an Adapter class that adapts\nthe interface of the AdvancedPrinter to the simple interface expected\nby the client. The Adapter class would have a print() method that\ncalls the appropriate methods on the AdvancedPrinter to accomplish\nthe print operation. The client can then use the Adapter class to\nprint documents without having to know about the complex interface\nof the AdvancedPrinter.\nProxy Design pattern:\nThe Proxy design pattern is a structural pattern that provides a\nsurrogate or placeholder for another object to control access to it.\nThe Proxy pattern allows you to create a representative object that\ncan act as an intermediary between a client and the real object. The\nproxy object can perform additional functionality such as security\nchecks, caching, or remote communication.\nThe Proxy pattern involves the following components:\nSubject: This is the interface that both the Real Subject and the\nProxy implement. It defines the common interface for the Real\nSubject and the Proxy so that the client can work with both objects\ninterchangeably.\nReal Subject: This is the object that the client wants to access. It\nimplements the Subject interface and provides the real\nimplementation of the operations.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 280,
          "text": "Proxy: This is the object that acts as a surrogate for the Real\nSubject. It also implements the Subject interface and forwards the\nrequests from the client to the Real Subject. In addition to\nforwarding requests, the Proxy may also perform additional\nfunctionality such as caching, logging, or security checks.\nThe Proxy pattern can be implemented in several ways, including:\nVirtual Proxy: This is a type of Proxy that creates an object on\ndemand. When the client requests an operation, the Virtual Proxy\nchecks whether the Real Subject has been created, and if not, it\ncreates it. This is useful when creating the Real Subject is expensive,\nand you want to delay its creation until it is actually needed.\nProtection Proxy: This is a type of Proxy that checks whether the\nclient has the necessary permissions to access the Real Subject. If\nthe client has the required permissions, the Proxy forwards the\nrequest to the Real Subject. Otherwise, it denies the request.\nRemote Proxy: This is a type of Proxy that acts as a local\nrepresentative for a remote object. When the client requests an\noperation, the Remote Proxy forwards the request to the remote\nobject and returns the result.\nHere's an example to illustrate how the Proxy pattern works:\nSuppose you have a resource-intensive object that needs to be\naccessed frequently. You can create a Proxy object that acts as a\nsurrogate for the real object. The Proxy object can cache the results\nof the operations and return the cached results to the client when\nthe same operation is requested again. This can save time and\nresources by avoiding the need to recreate the object or perform\nexpensive operations repeatedly.\nWhat is Decorator Pattern?\nDecorator Pattern:\nThe Decorator pattern is a design pattern in object-oriented\nprogramming that allows behavior to be added to an individual\nobject, either statically or dynamically, without affecting the behavior",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 281,
          "text": "of other objects from the same class. It is a structural pattern that\nallows objects to have additional behavior or responsibilities without\nthe need to create a subclass of the original object.\nIn the Decorator pattern, a set of decorator classes are created that\nadd new functionality to the original object. These decorators\nconform to the same interface as the object being decorated, and\nthey contain a reference to the object they are decorating. The\ndecorators can add new behavior to the object by intercepting its\nmethod calls and modifying their behavior or adding new\nfunctionality.\nHere are some key features of the Decorator pattern:\nIt is a way to extend the functionality of an object without sub\nclassing.\nDecorators can be stacked on top of each other to add multiple\nlayers of functionality.\nDecorators can be added and removed at runtime, which makes it\neasy to change an object's behaviour dynamically.\nThe original object can remain unchanged, which helps to ensure\nthat existing code and unit tests still work as expected.\nThe Decorator pattern allows for a clear separation of concerns\nbetween the object being decorated and the code that adds new\nbehaviour.\nA common real-world example of the Decorator pattern is with\nstreaming services. For example, a user might have a basic\nstreaming service that allows them to access a limited library of\ncontent. They can then choose to add a set of decorator services,\nsuch as one for high-definition video, another for access to live\nevents, and yet another for access to an expanded library of\ncontent. Each decorator adds a layer of functionality to the basic\nstreaming service, allowing the user to customize their experience\nand access additional features without needing to switch to a\ndifferent service.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 282,
          "text": "What is a facade design pattern?\nThe facade design pattern is a structural design pattern that\nprovides a unified interface to a set of interfaces in a subsystem. It\ndefines a high-level interface that makes the subsystem easier to\nuse and hides the complexity of the subsystem from the client.\nThe facade pattern is often used in libraries and frameworks to\nprovide a simplified interface to their functionality. For example, a\nfacade could be used to provide a single method for starting a\ndatabase connection, initializing a logging system, and configuring a\nweb server.\nThe facade pattern can also be used to decouple clients from the\nimplementation of a subsystem. This can make the code more\nflexible and easier to maintain. For example, if a client needs to use\nmultiple classes in a subsystem, the facade can provide a single\ninterface that the client can use. This allows the client to be\nindependent of the implementation of the subsystem.\npublic class DatabaseFacade {\nprivate DatabaseConnection connection;\nprivate Logger logger;\npublic DatabaseFacade(DatabaseConnection connection, Logger\nlogger) {\nthis.connection = connection;\nthis.logger = logger;\n}\npublic void openConnection() {\nconnection.open();\nlogger.log(\"Database connection opened\");\n}\npublic void closeConnection() {\nconnection.close();",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 283,
          "text": "logger.log(\"Database connection closed\");\n}\npublic void executeQuery(String query) {\n// Execute the query\nlogger.log(\"Query executed: \" + query);\n}\n}\nThe DatabaseFacade class provides a simplified interface to the\ndatabase subsystem. It hides the complexity of the database\nsubsystem from the client. To use the database, the client simply\nneeds to create an instance of the DatabaseFacade class and call its\nmethods.\nThe facade pattern is a useful design pattern for simplifying the use\nof complex subsystems and decoupling clients from the\nimplementation of subsystems.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 284,
          "text": "CHAPTER 12:\nSQL/DATABASE/HIBERNATE-JPA\nWrite a SQL query to find 5th max salary from employee\ntable?\nThe exact SQL query to find the 5th highest salary from an\nemployee table will depend on the database system you are using.\nHere is a general SQL query that can be used for most SQL-based\ndatabase systems:\nSELECT salary\nFROM (\nSELECT salary, ROW_NUMBER() OVER (ORDER BY salary DESC) AS\nrow_num\nFROM employee\n) AS sub_query\nWHERE row_num = 5;\nThis query uses a subquery to assign a row number to each salary in\nthe employee table, ordered by salary in descending order. The outer\nquery then selects the salary where the row number is equal to 5,\nwhich gives the 5th highest salary.\nWrite a SQL query to remove duplicate employee records?\nThe SQL query to remove duplicate employee records will depend on\nthe definition of \"duplicate\". Here's a general query that removes\nduplicate records based on all columns in the table:\nDELETE FROM employee\nWHERE id NOT IN (\nSELECT MIN(id)\nFROM employee\nGROUP BY column1, column2, ...",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 285,
          "text": ");\nIn this query, the subquery selects the minimum id for each group of\nduplicate records. The outer query then deletes all records whose id\nis not in the subquery result, effectively removing all duplicate\nrecords except one.\nYou can replace column1, column2, ... with the specific columns that\ndefine a duplicate record. For example, if two employee records are\nconsidered duplicates if they have the same first name, last name,\nand hire date, the query would look like this:\nDELETE FROM employee\nWHERE id NOT IN (\nSELECT MIN(id)\nFROM employee\nGROUP BY first_name, last_name, hire_date\n);\n \nWrite a query to find employee numbers in each department.\nTo find the number of employees in each department, you can use\nthe SQL GROUP BY clause with the COUNT() aggregate function.\nHere's an example query that should work in most relational\ndatabase management systems (RDBMS):\nSELECT department, COUNT(*) as num_employees\nFROM employees\nGROUP BY department\nIn this query, we select the department column from the employees\ntable and count the number of employees in each department using\nthe COUNT(*) aggregate function. We also give the count column an\nalias num_employees.\nThe GROUP BY clause groups the results by the department column,\nso we get one row for each unique department in the employees\ntable.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 286,
          "text": "The output of this query would be a list of departments with the\nnumber of employees in each department.\nFor example, if we have an employees table with columns\nemployee_id, employee_name, department, and salary, and some\nsample data like this:\nemployee_id | employee_name | department | salary\n------------+---------------+------------+-------\n1           | Alice         | HR         | 50000\n2           | Bob           | IT         | 60000\n3           | Charlie       | IT         | 55000\n4           | Dave          | HR         | 45000\n5           | Eve           | Marketing  | 70000\n6           | Frank         | IT         | 65000\n7           | Grace         | Marketing  | 60000\n8           | Harry         | HR         | 55000\n9           | Ivan          | IT         | 70000\nThen, the output of the query would be:\ndepartment | num_employees\n-----------+--------------\nHR         | 3\nIT         | 4\nMarketing  | 2\nIn this output, we can see that there are three employees in the HR\ndepartment, four employees in the IT department, and two\nemployees in the Marketing department.\nWrite SQL Query to find students who are enrolled in courses\nwhose price is above 50000?\nSELECT s.*",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 287,
          "text": "FROM students s\nINNER JOIN enrollments e ON s.student_id = e.student_id\nINNER JOIN courses c ON e.course_id = c.course_id\nWHERE c.price > 50000;\nCreate Database design for Employee and address?\nCREATE TABLE employees (\nid INT PRIMARY KEY AUTO_INCREMENT,\nfirst_name VARCHAR(50) NOT NULL,\nlast_name VARCHAR(50) NOT NULL,\nage INT NOT NULL,\nemail VARCHAR(100) NOT NULL,\naddress_id INT,\nFOREIGN KEY (address_id) REFERENCES addresses(id)\n);\nCREATE TABLE addresses (\nid INT PRIMARY KEY AUTO_INCREMENT,\nstreet VARCHAR(100) NOT NULL,\ncity VARCHAR(50) NOT NULL,\nstate VARCHAR(50) NOT NULL,\nzip VARCHAR(10) NOT NULL\n);\nWhat does the JDBC forName() method do for you when you\nconnect to any DB?\nThe forName() method is a static method in the java.lang.Class class\nthat is used to load a JDBC driver at runtime. In the context of\nJDBC, a driver is a software component that provides the necessary\nfunctionality to connect to a specific type of database.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 288,
          "text": "The forName() method takes a string parameter that specifies the\nfully qualified name of the class that implements the JDBC driver. For\nexample, to load the JDBC driver for MySQL, you would use the\nfollowing code:\nClass.forName(\"com.mysql.jdbc.Driver\");\nThis code loads the class com.mysql.jdbc.Driver using the current\nclass loader. The class loader then initializes the driver, which\nregisters itself with the DriverManager class. Once the driver is\nregistered, it can be used to establish a connection to the database.\nIt's worth noting that the forName() method is used less frequently\nin modern JDBC code, as many JDBC drivers now include a static\ninitialization block that registers the driver automatically when the\nclass is loaded. In such cases, you can simply include the JDBC\ndriver JAR file in your project's classpath and use the\nDriverManager.getConnection() method to establish a connection to\nthe database.\nDo you know triggers and how do they work?\nYes, I am familiar with database triggers and how they work.\nA trigger is a database object that is automatically executed in\nresponse to certain events, such as changes to data in a table.\nTriggers are typically used to enforce business rules, audit changes\nto data, or synchronize data across different tables or databases.\nTriggers are associated with a specific table or view and can be set\nto execute either before or after an event occurs. The events that\ncan trigger a trigger include inserts, updates, and deletes to the\ntable. When a trigger is fired, it can execute one or more SQL\nstatements or call a stored procedure.\nThe basic syntax for creating a trigger in SQL is as follows:\nCREATE [OR REPLACE] TRIGGER trigger_name\n{BEFORE | AFTER} {INSERT | UPDATE | DELETE}\nON table_name\n[FOR EACH ROW]",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 289,
          "text": "BEGIN\n-- Trigger logic here\nEND;\nIn this example, trigger_name is the name of the trigger,\ntable_name is the name of the table or view that the trigger is\nassociated with, and BEFORE or AFTER specifies when the trigger\nshould be executed. The FOR EACH ROW clause indicates that the\ntrigger should execute once for each row affected by the triggering\nevent.\nOnce a trigger is created, it is automatically executed whenever the\nspecified event occurs. Triggers can be a powerful tool for enforcing\ndata integrity and automating database tasks, but it's important to\nuse them judiciously to avoid performance issues and unexpected\nresults.\nExplain database Joins?\nIn a relational database, data is typically stored in multiple tables.\nDatabase joins are used to combine data from two or more tables\ninto a single result set based on a common column or set of\ncolumns.\nThere are several types of joins in a relational database, including:\nInner Join: An inner join returns only the rows that have matching\nvalues in both tables being joined. The join is performed by\ncomparing values in the columns that are common to both tables.\nLeft Join: A left join returns all the rows from the left table and the\nmatching rows from the right table. If there is no matching row in\nthe right table, the result will contain null values for the right table\ncolumns.\nRight Join: A right join is similar to a left join, but it returns all the\nrows from the right table and the matching rows from the left table.\nIf there is no matching row in the left table, the result will contain\nnull values for the left table columns.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 290,
          "text": "Full Outer Join: A full outer join returns all the rows from both\ntables, including those that do not have matching values in the other\ntable. If there is no matching row in one of the tables, the result will\ncontain null values for the columns of the missing table.\nCross Join: A cross join returns the Cartesian product of the two\ntables, which means that every row from one table is combined with\nevery row from the other table.\nHere's an example to illustrate how a join works:\nSuppose you have two tables: Customers and Orders. The\nCustomers table has columns for CustomerID, Name, and Address,\nwhile the Orders table has columns for OrderID, CustomerID, and\nOrderDate. You can join these two tables to get a result set that\ncontains information about customers and their orders.\nTo perform an inner join on these tables, you would match the rows\nin the Customers table with the rows in the Orders table based on\nthe CustomerID column. The resulting joined table would contain\nonly the rows where there is a matching value in both tables.\nTo perform a left join on these tables, you would return all the rows\nfrom the Customers table and the matching rows from the Orders\ntable based on the CustomerID column. If there is no matching row\nin the Orders table, the result would contain null values for the\nOrderID and OrderDate columns.\nTo perform a right join on these tables, you would return all the\nrows from the Orders table and the matching rows from the\nCustomers table based on the CustomerID column. If there is no\nmatching row in the Customers table, the result would contain null\nvalues for the Name and Address columns.\nThese are just a few examples of how joins can be used to combine\ndata from multiple tables in a relational database.\nWhat is complex join in Hibernate?\nHibernate is a powerful ORM (Object-Relational Mapping) framework\nthat allows you to work with complex join queries.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 291,
          "text": "One way to perform complex join queries in Hibernate is to use the\nCriteria API, which allows you to build queries programmatically. The\nCriteria API provides a fluent and type-safe way to construct queries,\nand it supports a wide variety of operations, including inner and\nouter joins, subqueries, and projections.\nHere's an example of how you can use the Criteria API to perform an\ninner join:\nCriteria criteria = session.createCriteria(Order.class, \"o\")\n.createAlias(\"o.customer\", \"c\")\n.add(Restrictions.eq(\"c.name\", \"John\"))\n.setProjection(Projections.property(\"o.total\"))\n.addOrder(Order.desc(\"o.total\"));\nList results = criteria.list();\nIn this example, the createAlias() method is used to create an inner\njoin between the Order and Customer entities on the customer\nproperty of the Order entity. The Restrictions.eq() method is used to\nadd a filter on the name property of the Customer entity, and the\nsetProjection() method is used to select the total property of the\nOrder entity.\nAnother way to perform complex join queries in Hibernate is to use\nthe HQL (Hibernate Query Language) which is similar to SQL.\nQuery query = session.createQuery(\"SELECT o.total FROM Order o\nJOIN o.customer c WHERE c.name = :name ORDER BY o.total\nDESC\");\nquery.setParameter(\"name\", \"John\");\nList results = query.list();\nIn this example, the JOIN clause is used to create an inner join\nbetween the Order and Customer entities on the customer property\nof the Order entity. The WHERE clause is used to add a filter on the\nname property of the Customer entity, and the ORDER BY clause is\nused to sort the results by the total property of the Order entity.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 292,
          "text": "In conclusion, hibernate provides several ways to perform complex\njoin queries, such as the Criteria API and HQL.\nHow to store and navigate hierarchies?\nStoring and navigating hierarchies can be accomplished in several\nways, depending on the specific needs of the application. Here are a\nfew common approaches:\nAdjacency List Model: In this model, each node in the hierarchy is\nstored as a record in a database table, with a column that references\nthe parent node. This makes it easy to navigate the hierarchy, as\nyou can simply perform a recursive query to retrieve all the\ndescendants of a given node. However, this approach can be\ninefficient for very large hierarchies, as it requires multiple database\nqueries.\nNested Set Model: In this model, each node is represented by two\ncolumns in the database table, which indicate the range of nodes\nthat fall within its subtree. This approach can be more efficient than\nthe adjacency list model for navigating hierarchies, as it only\nrequires a single query to retrieve all the descendants of a given\nnode. However, it can be more complex to implement, as it requires\nmaintaining the nested set values when nodes are added, deleted,\nor moved.\nMaterialized Path Model: In this model, each node is represented by\na string that includes the path to the root node, delimited by a\nseparator (e.g. /). This approach can be efficient for querying a\nspecific node or subtree, as it only requires a simple string\ncomparison. However, it can be less efficient for complex queries or\nfor updating the hierarchy, as it requires updating the paths of all\nthe affected nodes.\nClosure Table Model: In this model, a separate table is created to\nrepresent the relationships between nodes in the hierarchy. Each\nrecord in the closure table represents a direct path between two\nnodes in the hierarchy, allowing for efficient queries and updates.\nHowever, this approach can be more complex to implement and can\nrequire more storage space than the other models.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 293,
          "text": "Once you've decided on a model for storing hierarchies, navigating\nthe hierarchy can be accomplished by querying the database for the\nappropriate nodes and relationships, and using recursion or iteration\nto traverse the tree structure. The specific approach will depend on\nthe details of the model and the requirements of the application.\nWhat is the data type of the index in Database?\nIn a database, the data type of an index depends on the type of\ndata being indexed.\nFor example, if the index is created on a column that contains string\nvalues, such as a column that stores the names of customers, the\nindex data type will likely be a string type, such as VARCHAR or\nTEXT. If the index is created on a column that contains numeric\nvalues, such as a column that stores prices, the index data type will\nlikely be a numeric type, such as INT or DECIMAL.\nIn general, the index data type should match the data type of the\ncolumn being indexed. This ensures that the index can be used\nefficiently to speed up queries that search for specific values in the\ncolumn. It's also important to consider the length of the indexed\nvalues, as longer values may require more storage space and may\naffect the performance of the index.\nIt's worth noting that in addition to the data type of the indexed\ncolumn, the database may also use a specific data structure for the\nindex, such as a B-tree or hash table, to improve the efficiency of\nindex lookups. The specific data structure used will depend on the\ndatabase system and the configuration options used when creating\nthe index.\nWrite a query to find duplicate entries in a table against a\ncolumn?\nTo find duplicate entries in a table against a specific column, you can\nuse a GROUP BY clause and a HAVING clause to filter the results\nbased on the count of the entries. Here's an example query that\nfinds duplicate entries in a table called my_table against a column\ncalled my_column:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 294,
          "text": "SELECT my_column, COUNT(*) as count\nFROM my_table\nGROUP BY my_column\nHAVING count > 1;\nIn this query, we group the results by the values in the my_column\ncolumn using the GROUP BY clause. We then use the COUNT\nfunction to count the number of entries in each group, and we give\nthis count the alias count. Finally, we use the HAVING clause to filter\nthe results to only show groups with a count greater than 1,\nindicating that there are duplicate entries in the table for that\ncolumn value.\nThis query will return a list of values in the my column column that\nhave more than one entry in the table, along with the count of\nentries for each value. You can use this information to identify the\nduplicate entries in the table and take appropriate action, such as\ndeleting the duplicates or modifying the schema to prevent future\nduplicates.\nWhat is the differences between Indexing and Partitioning?\nIndexing and partitioning are two common techniques used in\ndatabase optimization, but they have different purposes and use\ncases.\nIndexing is the process of creating an index on one or more columns\nin a table, in order to speed up the retrieval of data from that table.\nAn index is a data structure that is used to improve the performance\nof search operations on a table by allowing the database to find\nspecific rows more quickly. Indexes can be created on single or\nmultiple columns and can be either unique or non-unique. Indexing\ncan help to improve the performance of read operations on the\ntable, but it can also have a negative impact on the performance of\nwrite operations, as the index must be updated every time data is\ninserted, updated or deleted.\nPartitioning, on the other hand, is the process of dividing a large\ntable into smaller, more manageable pieces called partitions, based",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 295,
          "text": "on some criteria such as date range or geographic location.\nPartitioning can improve the performance of both read and write\noperations on the table by allowing the database to process only the\nnecessary partitions, instead of the entire table. Partitioning can also\nhelp with data management, as it allows administrators to more\neasily archive or delete old data.\nIn summary, the main difference between indexing and partitioning\nis that indexing is used to improve the performance of search\noperations on a table, while partitioning is used to improve the\nperformance of both read and write operations on a large table.\nBoth techniques can be used together to optimize the performance\nof a database, but they should be chosen based on the specific use\ncase and requirements of the application.\nExplain the Hibernate-JPA structure.\nHibernate is a powerful ORM (Object-Relational Mapping) framework\nthat allows you to work with databases in a Java-based application.\nIt is based on the JPA (Java Persistence API) standard, which is the\nJava standard for ORM.\nThe main components of the Hibernate-JPA structure are:\nEntity: An entity represents a table in the database, and it is mapped\nto a Java class. Each entity has a set of fields, which represent the\ncolumns in the table, and it also has a set of methods to interact\nwith the data.\nEntityManager: The Entity Manager is the main interface for\ninteracting with the database. It provides methods for performing\nCRUD (Create, Read, Update, Delete) operations, as well as methods\nfor querying the database.\nEntityManagerFactory: The Entity Manager Factory is responsible for\ncreating and managing EntityManager instances. It is typically\ncreated once during application initialization and is used to create\nEntityManager instances for each database transaction.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 296,
          "text": "Persistence Unit: The Persistence Unit defines the configuration\nsettings for the Entity Manager Factory, such as the data source,\ndatabase dialect, and mapping information.\nEntityManager and Session: Entity Manager is the interface defined\nby JPA, Session is the interface defined by Hibernate. Entity Manager\nis built on top of the Session, and it provides a simpler, more\nconsistent interface for working with JPA entities.\nTransaction: A transaction represents a unit of work that is\nperformed against the database. A transaction can include one or\nmore operations, such as inserting, updating, or deleting data.\nMapping files: Hibernate uses XML or annotations in the entity\nclasses to map the entities to the database tables and columns. It\ndefines the relationship between the entities and how the entities\nshould be persisted and retrieved from the database.\nIn summary, Hibernate-JPA structure is based on the JPA standard, it\nallows you to work with databases in a Java-based application. It\nhas several main components such as Entity, EntityManager,\nEntityManagerFactory,Persistence Unit,Transaction and Mapping files\nthat work together to provide a consistent and powerful way to\ninteract with databases.\n \nWhich annotation/configuration is required to enable the\nnative SQL in JPA?\nTo enable native SQL in JPA, you can use the @SqlResultSetMapping\nannotation or the <sql-result-set-mapping> element in the\npersistence.xml file.\nThe @SqlResultSetMapping annotation is used to map the results of\na native SQL query to an entity or a DTO (Data Transfer Object). It\nis used in conjunction with the EntityManager.createNativeQuery()\nmethod to execute the native SQL query and map the results to the\nspecified entity or DTO.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 297,
          "text": "Here's an example of how you can use the @SqlResultSetMapping\nannotation to map the results of a native SQL query to an entity:\n@SqlResultSetMapping(\nname=\"EmployeeResult\",\nentities={\n@EntityResult(\nentityClass=Employee.class,\nfields={\n@FieldResult(name=\"id\", column=\"emp_id\"),\n@FieldResult(name=\"name\", column=\"emp_name\"),\n@FieldResult(name=\"salary\", column=\"emp_salary\")\n}\n)\n}\n)\nIn this example, the @SqlResultSetMapping annotation is used to\nmap the results of a native SQL query to the Employee entity. The\nname attribute is used to specify a unique name for the mapping,\nand the entities attribute is used to define the entity mappings.\nAlternatively, you can also use the <sql-result-set-mapping> element\nin the persistence.xml file to define the result set mapping.\n \nExplain Entity in JPA and all annotations used to create Entity\nclass. \nIn JPA, an entity is a Java class that represents a table in the\ndatabase. It is used to map the data in the database to Java objects,\nand it provides a way to interact with the data using the Entity\nManager.\nHere are some of the main annotations used to create an entity class\nin JPA:\n@Entity: This annotation is used to mark a class as an entity. It is\ntypically placed on the class definition, and it tells the JPA provider",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 298,
          "text": "that this class should be treated as an entity and mapped to a table\nin the database.\n@Table: This annotation is used to specify the name of the table\nthat the entity should be mapped to. It can be used to specify the\nschema, catalog, and other properties of the table.\n@Id: This annotation is used to mark a field as the primary key for\nthe entity. The field that is annotated with @Id will be mapped to\nthe primary key column of the table.\n@Column: This annotation is used to specify the properties of a field\nthat should be mapped to a column in the table. It can be used to\nspecify the name of the column, the data type, and other properties\nof the column.\n@GeneratedValue: This annotation is used to specify how the\nprimary key should be generated. It can be used to specify that the\nprimary key should be generated automatically by the database or\nby the JPA provider.\n@ManyToOne and @OneToMany : These annotations are used to\ndefine the relationship between entities. @ManyToOne is used to\ndefine a many-to-one relationship between two entities, while\n@OneToMany is used to define a one-to-many relationship between\ntwo entities.\n@Transient: This annotation is used to mark a field that should not\nbe persisted to the database. The field that is annotated with\n@Transient will not be mapped to a column in the table.\nHow can we define a composite key in the Entity class?\nIn JPA, a composite key is a primary key that is made up of more\nthan one field. To define a composite key in an entity class, you can\nuse the @IdClass or @EmbeddedId annotation.\nThe @IdClass annotation is used to define a composite key using a\nseparate primary key class. The primary key class must have the",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 299,
          "text": "same fields as the composite key in the entity class, and it must\nimplement the Serializable interface. Here's an example of how you\ncan use the @IdClass annotation to define a composite key:\n@Entity\n@IdClass(CompositeKey.class)\npublic class Employee {\n@Id\nprivate int id;\n@Id\nprivate String name;\n// ...\n}\npublic class CompositeKey implements Serializable {\nprivate int id;\nprivate String name;\n// ...\n}\nIn this example, the Employee entity class has a composite key\nmade up of the id and name fields. The CompositeKey class is used\nas the primary key class, and it has the same fields as the composite\nkey in the Employee entity class.\nThe @EmbeddedId annotation is used to define a composite key by\nembedding an @Embeddable class within the entity class. The\n@Embeddable class contains the fields that make up the composite\nkey. Here's an example of how you can use the @EmbeddedId\nannotation to define a composite key:\n@Entity\npublic class Employee {\n@EmbeddedId\nprivate CompositeKey key;\n// ...\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 300,
          "text": "@Embeddable\npublic class CompositeKey implements Serializable {\nprivate int id;\nprivate String name;\n// ...\n}\nIn this example, the Employee entity class has a composite key\nmade up of the id and name fields, which are embedded within.\n \nWhat are the JPA Annotation used for a composite attribute?\nIn JPA, you can use the @Embedded annotation to map a composite\nattribute, which is a group of simple attributes that together form a\nsingle logical attribute.\nThe @Embedded annotation is used on a field or property of an\nentity class, and it tells the JPA provider to treat the field as an\nembedded object. The embedded object should be annotated with\n@Embeddable.\nHere's an example of how you can use the @Embedded annotation\nto map a composite attribute:\n@Entity\npublic class Employee {\n@Embedded\nprivate Address address;\n// ...\n}\n@Embeddable\npublic class Address {\nprivate String street;\nprivate String city;\nprivate String state;\nprivate String zip;\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 301,
          "text": "In this example, the Employee entity class has a composite attribute\ncalled address, which is an instance of the Address class. The\nAddress class is annotated with @Embeddable which tells JPA\nprovider that this class is an embeddable class, and it should be\ntreated as an embedded object.\nThe @Embedded annotation can also be used with\n@AttributeOverride and @attributeOverrides to customize the\ncolumn name and table name of the attribute fields.\nIn summary, the @Embedded annotation is used to map a\ncomposite attribute, which is a group of simple attributes that\ntogether form a single logical attribute in JPA. It is used on a field or\nproperty of an entity class and tells the JPA provider to treat the field\nas an embedded object. The embedded object should be annotated\nwith @Embeddable.\n \nWhich annotation is used to handle the joins between\nmultiple tables at the Entity class level?\nThe @OneToMany and @ManyToOne annotations are used to handle\nthe relationship between entities in a one-to-many and many-to-one\nrelationship respectively at the entity class level in JPA (Java\nPersistence API). These annotations are used to map the foreign key\nrelationships between entities.\nHow do you handle unidirectional join and bidirectional join at the\nEntity level?\nIn JPA, a unidirectional join is when one entity has a relationship to\nanother entity, but the other entity does not have a relationship back\nto the first entity. This can be handled by using the @OneToMany or\n@ManyToOne annotation on the entity that has the relationship to\nthe other entity, but not on the other entity.\nA bidirectional join, on the other hand, is when both entities have a\nrelationship to each other. This can be handled by using the\n@OneToMany and @ManyToOne annotations on both entities, and",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 302,
          "text": "also using the mappedBy attribute to specify the entity that owns\nthe relationship.\nFor example, if we have an entity called \"Department\" and another\nentity called \"Employee\", where a department can have multiple\nemployees, but an employee can only belong to one department, we\ncan set up a bidirectional relationship as follows:\n@Entity\npublic class Department {\n@OneToMany(mappedBy = \"department\")\nprivate List<Employee> employees;\n}\n@Entity\npublic class Employee {\n@ManyToOne\nprivate Department department;\n}\nHere, the \"Department\" entity is the owner of the relationship and\nthe \"Employee\" entity is the inverse end of the relationship.\nIt's important to note that for bidirectional relationship, it's crucial to\nkeep both sides of the relationship in sync.\nHow to handle relationships in spring data JPA?\nHere are some commonly used approaches for handling relationships\nin Spring Data JPA:\nOne-to-One Relationship: To define a one-to-one relationship\nbetween two entities, you can use the @OneToOne annotation. This\nannotation can be used on a field or a getter method in the entity\nclass that represents the owning side of the relationship. For\nexample:\n@Entity\npublic class Employee {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 303,
          "text": "@OneToOne\n@JoinColumn(name = \"address_id\")\nprivate Address address;\n}\n@Entity\npublic class Address {\n@OneToOne(mappedBy = \"address\")\nprivate Employee employee;\n}\nIn this example, the Employee entity has a one-to-one relationship\nwith the Address entity. The @OneToOne annotation is used on the\naddress field in the Employee entity to define the relationship. The\n@JoinColumn annotation is used to specify the foreign key column\nname in the employee’s table.\nOne-to-Many Relationship: To define a one-to-many relationship\nbetween two entities, you can use the @OneToMany and\n@ManyToOne annotations. The @OneToMany annotation is used on\na collection field or a getter method in the entity class that\nrepresents the owning side of the relationship, and the\n@ManyToOne annotation is used on a field or a getter method in the\nentity class that represents the inverse side of the relationship. For\nexample:\n@Entity\npublic class Employee {\n@OneToMany(mappedBy = \"employee\")\nprivate List<Address> addresses;\n}\n@Entity\npublic class Address {\n@ManyToOne",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 304,
          "text": "@JoinColumn(name = \"employee_id\")\nprivate Employee employee;\n}\nIn this example, the Employee entity has a one-to-many relationship\nwith the Address entity. The @OneToMany annotation is used on the\naddresses field in the Employee entity to define the relationship, and\nthe @ManyToOne annotation is used on the employee field in the\nAddress entity to specify the many-to-one side of the relationship.\nThe @JoinColumn annotation is used to specify the foreign key\ncolumn name in the addresses table.\nHow to handle the Parent and child relationship in JPA?\nJPA (Java Persistence API) is a specification for managing the\nmapping of Java objects to relational databases. To handle a parent-\nchild relationship in JPA, you can use the following annotations:\n@OneToMany and @ManyToOne: These annotations are used to\ndefine a one-to-many relationship between two entities, where one\nentity is the parent and the other is the child. The @OneToMany\nannotation is added to the parent entity, and the @ManyToOne\nannotation is added to the child entity.\n@JoinColumn: This annotation is used to define the foreign key\ncolumn in the child table that references the primary key column in\nthe parent table.\nCascadeType: JPA provides several options for cascading operations\nfrom the parent to the child entities, such as CascadeType.PERSIST,\nCascadeType.REMOVE, and CascadeType.ALL.\nFor example, If you have a parent Entity Department and child Entity\n@Entity\npublic class Department {\n@Id\nprivate Long id;\nprivate String name;",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 305,
          "text": "@OneToMany(mappedBy = \"department\", cascade =\nCascadeType.ALL, orphanRemoval = true)\nprivate List<Employee> employees;\n//getters and setters\n}\n@Entity\npublic class Employee {\n@Id\nprivate Long id;\nprivate String name;\n@ManyToOne\n@JoinColumn(name = \"department_id\")\nprivate Department department;\n//getters and setters\n}\nIt is important to note that you should always test your JPA\nconfigurations and use appropriate indexes to improve performance.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 306,
          "text": "CHAPTER 13: CODING\nJava 8 Stream API coding questions:\nWrite a Program to find the duplicates in an array using\nstream API.\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\npublic class DuplicateFinder {\npublic static void main(String[] args) {\nint[] arr = {1, 2, 3, 1, 2, 4, 5};\nList<Integer> list = Arrays.stream(arr)\n.boxed()\n.collect(Collectors.toList());\nlist.stream()\n.filter(i -> Collections.frequency(list, i) > 1)\n.distinct()\n.forEach(System.out::println);\n}\n}\n \nHow to sort the employee list in ascending and descending\norder using java 8 streams API?\nYou can use the sorted method of the Stream API in Java 8 to sort a\nlist of employees in ascending or descending order. By default, the\nsorted method sorts the elements in the stream in natural order,\nwhich means that it uses the elements' compareTo method if the\nelements are Comparable, or it throws a ClassCastException if they\nare not.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 307,
          "text": "Here's an example of how you can sort a list of employees in\nascending order based on their salary:\nList<Employee> employees = getEmployeeList(); // get the list of\nemployees\nemployees.stream()\n.sorted(Comparator.comparing(Employee::getSalary))\n.forEach(System.out::println);\nAnd here's an example of how you can sort the same list in\ndescending order based on the employee's name:\nemployees.stream()\n.sorted(Comparator.comparing(Employee::getName).reversed\n())\n.forEach(System.out::println);\nNote that the reversed method on the comparator returns a\ncomparator that gives the opposite ordering of the original\ncomparator.\n \nFind the highest salary of an employee from the HR\ndepartment using Java stream API.\nYou have been given an employee list with EMP<Id, Name, Salary,\nDeptt>, and\nYou can use the filter and max methods of the Stream API in Java 8\nto find the highest salary of an employee from the HR department.\nHere's an example:\nList<Employee> employees = getEmployeeList(); // get the list of\nemployees\nOptional<Employee> highestPaidHrEmployee = employees.stream()\n.filter(e ->\n\"HR\".equals(e.getDeptt()))",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 308,
          "text": ".max(Comparator.comparing(E\nmployee::getSalary));\nif (highestPaidHrEmployee.isPresent()) {\nSystem.out.println(\"The highest paid HR employee is: \" +\nhighestPaidHrEmployee.get().getName());\n} else {\nSystem.out.println(\"No HR employees found in the list.\");\n}\nIn this example, the filter method is used to select only the\nemployees from the HR department, and the max method is used to\nfind the employee with the highest salary. The max method returns\nan Optional object that may or may not contain the maximum value,\ndepending on whether the stream is empty or not. So we use the\nisPresent method to check if a value was found before accessing it.\nFind all employees who live in ‘Pune’ city, sort them by their\nname, and print the names of employees using Stream API.\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.List;\npublic class Employee {\nprivate String name;\nprivate String city;\npublic Employee(String name, String city) {\nthis.name = name;\nthis.city = city;\n}\npublic String getName() {\nreturn name;",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 309,
          "text": "}\npublic String getCity() {\nreturn city;\n}\npublic static void main(String[] args) {\n// Creating a list of employees\nList<Employee> employees = new ArrayList<>();\nemployees.add(new Employee(\"John Smith\", \"New York\"));\nemployees.add(new Employee(\"Jane Doe\", \"Chicago\"));\nemployees.add(new Employee(\"Bob Johnson\", \"Pune\"));\nemployees.add(new Employee(\"Sarah Lee\", \"Pune\"));\n// Filtering and sorting employees who live in Pune\nList<Employee> puneEmployees = employees.stream()\n.filter(e -> e.getCity().equals(\"Pune\"))\n.sorted(Comparator.comparing(Employee::getName))\n.toList();\n// Printing the names of employees who live in Pune\nSystem.out.println(\"Employees who live in Pune:\");\npuneEmployees.stream()\n.map(Employee::getName)\n.forEach(System.out::println);\n}\n}\nThe code uses the filter method to filter out employees who live in\nPune, then the sorted method to sort them by name, and finally, the\nmap method to extract the names of the employees. The toList\nmethod is used to convert the filtered and sorted stream of\nemployees to a list.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 310,
          "text": "The output of the code would be:\nEmployees who live in Pune:\nBob Johnson\nSarah Lee\nFind an average of even numbers using Java 8 stream API?\nimport java.util.Arrays;\npublic class AverageOfEvenNumbersExample {\npublic static void main(String[] args) {\nint[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\ndouble average = Arrays.stream(numbers)\n.filter(n -> n % 2 == 0)\n.mapToDouble(n -> n)\n.average()\n.orElse(0.0);\nSystem.out.println(\"The average of even numbers is \" +\naverage);\n}\n}\nIn this example, we define an array number with some integers. We\nthen use the Arrays.stream method to create a stream of integers\nfrom the array. We filter out the even numbers using the filter\nmethod, which takes a predicate that returns true for even numbers.\nWe then use the mapToDouble method to convert the\nStream<Integer> to an DoubleStream. We call the average method\nto get the average of the even numbers. If there are no even\nnumbers in the array, we use the orElse method to return a default\nvalue of 0.0.\nThe output of this program for the array {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nwould be:\nThe average of even numbers is 6.0",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 311,
          "text": "How to use sorting in Java-8?\nIn Java 8, you can use the sorted method of the Stream API to sort\nelements in a collection. By default, the sorted method sorts\nelements in their natural order, but you can also provide a\nComparator to specify the sort order.\nHere's an example of how you can sort a list of integers in ascending\norder using the sorted method:\nList<Integer> numbers = Arrays.asList(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5);\nnumbers.stream()\n.sorted()\n.forEach(System.out::println);\nAnd here's an example of how you can sort a list of strings in\ndescending order based on their length:\nList<String> words = Arrays.asList(\"apple\", \"banana\", \"cherry\",\n\"date\", \"elderberry\");\nwords.stream()\n.sorted(Comparator.comparingInt(String::length).reversed())\n.forEach(System.out::println);\nIn this example, we use the Comparator.comparingInt method to\ncreate a comparator that compares strings based on their length,\nand then we use the reversed method to reverse the sort order.\nNote that the sorted method returns a new stream with the\nelements sorted in the specified order, and it does not modify the\noriginal stream or collection.\nWrite a program using stream API - Find the employee count\nin each department in the employee list?\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 312,
          "text": "public class Employee {\nprivate String name;\nprivate String department;\npublic Employee(String name, String department) {\nthis.name = name;\nthis.department = department;\n}\npublic String getName() {\nreturn name;\n}\npublic String getDepartment() {\nreturn department;\n}\n}\npublic class FindEmployeeCountByDepartment {\npublic static void main(String[] args) {\nList<Employee> employees = Arrays.asList(\nnew Employee(\"Alice\", \"Engineering\"),\nnew Employee(\"Bob\", \"Sales\"),\nnew Employee(\"Carol\", \"Engineering\"),\nnew Employee(\"Dave\", \"Marketing\"),\nnew Employee(\"Eve\", \"Sales\")\n);\n// Create a stream of the employee list.\nStream<Employee> employeeStream = employees.stream();\n// Group the employees by department.\nMap<String, Long> employeeCountByDepartment =\nemployeeStream",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 313,
          "text": ".collect(Collectors.groupingBy(Employee::getDepartment\n, Collectors.counting()));\n// Print the results.\nSystem.out.println(employeeCountByDepartment);\n}\n}\nOutput : {Engineering=2, Sales=2, Marketing=1}\nFind employees based on location or city and sort in\nalphabetical manner using stream API?\n(like a-z and each city employee’s salary should be sorted max to\nmin salary)\nimport java.util.*;\nimport java.util.stream.Collectors;\npublic class EmployeeFilter {\npublic static void main(String[] args) {\nList<Employee> employees = Arrays.asList(\nnew Employee(\"John\", \"New York\", 5000),\nnew Employee(\"Jane\", \"New York\", 6000),\nnew Employee(\"Bob\", \"Chicago\", 4500),\nnew Employee(\"Alice\", \"Chicago\", 5500),\nnew Employee(\"Sam\", \"San Francisco\", 7000),\nnew Employee(\"Emily\", \"San Francisco\", 6500)\n);\nString location = \"Chicago\";\nList<Employee> filteredEmployees = employees.stream()\n.filter(e -> e.getLocation().equals(location))\n.sorted(Comparator.comparing(Employee::getName))",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 314,
          "text": ".sorted(Comparator.comparing(Employee::getSalary).rev\nersed())\n.collect(Collectors.toList());\nSystem.out.println(\"Filtered employees: \" +\nfilteredEmployees);\n}\nstatic class Employee {\nprivate final String name;\nprivate final String location;\nprivate final int salary;\npublic Employee(String name, String location, int salary) {\nthis.name = name;\nthis.location = location;\nthis.salary = salary;\n}\npublic String getName() {\nreturn name;\n}\npublic String getLocation() {\nreturn location;\n}\npublic int getSalary() {\nreturn salary;\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 315,
          "text": "@Override\npublic String toString() {\nreturn \"Employee{\" +\n\"name='\" + name + '\\'' +\n\", location='\" + location + '\\'' +\n\", salary=\" + salary +\n'}';\n}\n}\n}\nIn this program, we first define a List of Employee objects with some\nelements, where each employee has a name, a location (city), and a\nsalary.\nWe then define a location variable to filter the employees based on\nthe given location.\nWe use a stream to filter the employees based on the given location\nusing the filter() method, and then sort them in alphabetical order\nby name using the sorted() method with\nComparator.comparing(Employee::getName). Finally, we sort each\ncity employee’s salary from highest to lowest using the sorted()\nmethod with\nComparator.comparing(Employee::getSalary).reversed().\nWe collect the filtered and sorted employees into a list using the\ncollect() method with Collectors.toList(), and print the result using\nthe System.out.println() statement.\nFiltered employees: [Employee{name='Alice', location='Chicago',\nsalary=5500}, Employee{name='Bob', location='Chicago',\nsalary=4500}]",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 316,
          "text": "Find the occurrence of names of employees from the\nList<Employee>, and find the frequency of each name.\nimport java.util.*;\npublic class EmployeeNameFrequency {\npublic static void main(String[] args) {\nList<Employee> employees = Arrays.asList(\nnew Employee(\"John\", \"New York\", 5000),\nnew Employee(\"Jane\", \"New York\", 6000),\nnew Employee(\"Bob\", \"Chicago\", 4500),\nnew Employee(\"Alice\", \"Chicago\", 5500),\nnew Employee(\"Sam\", \"San Francisco\", 7000),\nnew Employee(\"Emily\", \"San Francisco\", 6500),\nnew Employee(\"John\", \"Chicago\", 5500),\nnew Employee(\"Jane\", \"San Francisco\", 6500),\nnew Employee(\"Bob\", \"San Francisco\", 7000)\n);\nMap<String, Integer> nameFrequencyMap = new\nHashMap<>();\nfor (Employee employee : employees) {\nString name = employee.getName();\nnameFrequencyMap.put(name,\nnameFrequencyMap.getOrDefault(name, 0) + 1);\n}\nSystem.out.println(\"Name frequency: \" +\nnameFrequencyMap);\n}\nstatic class Employee {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 317,
          "text": "private final String name;\nprivate final String location;\nprivate final int salary;\npublic Employee(String name, String location, int salary) {\nthis.name = name;\nthis.location = location;\nthis.salary = salary;\n}\npublic String getName() {\nreturn name;\n}\npublic String getLocation() {\nreturn location;\n}\npublic int getSalary() {\nreturn salary;\n}\n@Override\npublic String toString() {\nreturn \"Employee{\" +\n\"name='\" + name + '\\'' +\n\", location='\" + location + '\\'' +\n\", salary=\" + salary +\n'}';\n}\n}\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 318,
          "text": "We then define a nameFrequencyMap map to store the frequency of\neach name.\nWe iterate over the employees using a for-each loop, and for each\nemployee, we extract the name using the getName() method. We\nthen put the name in the nameFrequencyMap map and increment its\nfrequency using nameFrequencyMap.getOrDefault(name, 0) + 1.\nFinally, we print the nameFrequencyMap map using the\nSystem.out.println() statement.\nThe output of the above program would be:\nName frequency: {Bob=2, Emily=1, Alice=1, Sam=1, Jane=2,\nJohn=2}\nWrite a Program to print only numbers from an alphanumeric\nchar array using stream API in java-8.\nimport java.util.Arrays;\npublic class AlphanumericFilterExample {\npublic static void main(String[] args) {\nString str = \"a1b2c3d4e5f6g7h8i9j0\";\nchar[] arr = str.toCharArray();\nSystem.out.println(\"Original array: \" + Arrays.toString(arr));\nint[] nums = new String(arr)\n.chars()\n.filter(Character::isDigit)\n.map(Character::getNumericValue)\n.toArray();\nSystem.out.println(\"Numbers only: \" +\nArrays.toString(nums));\n}\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 319,
          "text": "character array. Then we create a stream from the characters of the\nstring, filter only the numeric characters using the isDigit method of\nthe Character class, convert the character to a numeric value using\nthe getNumericValue method, and finally convert the result to an int\narray using the toArray method.\nOriginal array: [a, 1, b, 2, c, 3, d, 4, e, 5, f, 6, g, 7, h, 8, i, 9, j, 0]\nNumbers only: [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\nWrite a program to find the sum of the entire array result\nusing java 8 streams?\nimport java.util.Arrays;\npublic class ArraySum {\npublic static void main(String[] args) {\nint[] arr = {1, 2, 3, 4, 5};\nint sum = Arrays.stream(arr).sum();\nSystem.out.println(\"Sum of array elements: \" + sum);\n}\n}\nIn this program, we first define an integer array arr with some\nelements. Then we use the Arrays.stream() method to create a\nstream of integers from the array, and then we call the sum()\nmethod on the stream to find the sum of all the elements in the\narray.\nFinally, we print the sum using the System.out.println() statement.\nWrite a program to find even numbers from a list of integers\nand multiply by 2 using stream java 8?\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\npublic class EvenNumbers {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 320,
          "text": "public static void main(String[] args) {\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9,\n10);\nList<Integer> evenNumbersDoubled = numbers.stream()\n.filter(n -> n % 2 == 0)\n.map(n -> n * 2)\n.collect(Collectors.toList());\nSystem.out.println(\"Even numbers doubled: \" +\nevenNumbersDoubled);\n}\n}\nIn this program, we first define a list of integers numbers with some\nelements. Then we create a stream of integers from the list using\nthe stream() method on the list.\nWe then use the filter() method on the stream to filter out all the\nodd numbers, and then use the map() method to multiply each even\nnumber by 2.\nFinally, we collect the result of the stream into a list using the\ncollect() method with Collectors.toList() and print the result using\nthe System.out.println() statement.\nThe output of the above program would be:\nEven numbers doubled: [4, 8, 12, 16, 20]\nWrite a program to find the occurrence of each word in a\ngiven string in java?\nimport java.util.HashMap;\nimport java.util.Map;\npublic class WordCounter {\npublic static void main(String[] args) {\nString str = \"Hello world hello java world\";",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 321,
          "text": "Map<String, Integer> wordCounts = new HashMap<>();\n// Split the string into words\nString[] words = str.split(\" \");\n// Count the occurrence of each word\nfor (String word : words) {\nif (!wordCounts.containsKey(word)) {\nwordCounts.put(word, 1);\n} else {\nint count = wordCounts.get(word);\nwordCounts.put(word, count + 1);\n}\n}\n// Print the occurrence of each word\nfor (String word : wordCounts.keySet()) {\nSystem.out.println(word + \": \" + wordCounts.get(word));\n}\n}\n}\nThe program takes a string as input and uses a HashMap to store\nthe count of each word. It splits the string into words using the split\nmethod, and then iterates through each word, incrementing its\ncount in the HashMap. Finally, it prints the occurrence of each word.\nThe output of the program for the input string \"Hello world hello\njava world\" would be:\nworld: 2\njava: 1\nHello: 1\nhello: 1",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 322,
          "text": "Write a Program to find a common element from three\ninteger ArrayList. eg. arr1, arr2, and arr3.\nimport java.util.ArrayList;\nimport java.util.Arrays;\npublic class CommonElement {\npublic static void main(String[] args) {\nArrayList<Integer> arr1 = new ArrayList<>(Arrays.asList(1, 2,\n3, 4, 5));\nArrayList<Integer> arr2 = new ArrayList<>(Arrays.asList(2, 4,\n6, 8, 10));\nArrayList<Integer> arr3 = new ArrayList<>(Arrays.asList(3, 5,\n7, 9, 11));\nfor (int num : arr1) {\nif (arr2.contains(num) && arr3.contains(num)) {\nSystem.out.println(\"Common element found: \" + num);\n}\n}\n}\n}\nIn this program, we first define three ArrayList of integers arr1, arr2,\nand arr3 with some elements.\nWe then iterate over the elements of the first list arr1 using a for-\neach loop, and for each element, we check if it is present in the\nother two lists arr2 and arr3 using the contains() method. If the\nelement is present in both lists, we print it as a common element.\nThe output of the above program would be:\nCommon element found: 2\nCommon element found: 4\nCommon element found: 5",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 323,
          "text": "Write a program to convert string to integer in java without\nany API?\npublic static int stringToInt(String str) throws\nNumberFormatException {\nint num = 0;\nint len = str.length();\nboolean negative = false;\nif (len == 0) {\nthrow new NumberFormatException(\"Empty string\");\n}\nint i = 0;\nchar firstChar = str.charAt(0);\nif (firstChar == '-') {\nnegative = true;\ni++;\n} else if (firstChar == '+') {\ni++;\n}\nfor (; i < len; i++) {\nchar ch = str.charAt(i);\nif (ch >= '0' && ch <= '9') {\nnum = num * 10 + (ch - '0');\n} else {\nthrow new NumberFormatException(\"Invalid character: \" +\nch);\n}\n}\nreturn negative ? -num : num;",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 324,
          "text": "}\nIn this implementation, we first check if the input string is empty\nand throw a NumberFormatException if it is. Then we check if the\nfirst character is a sign indicator (+ or -) and set a flag negative\naccordingly. We iterate over the remaining characters of the string\nand compute the integer value by multiplying the previous value by\n10 and adding the current digit. If we encounter an invalid character,\nwe throw a NumberFormatException.\nHere's an example usage of the method:\nString str = \"12345\";\nint num = stringToInt(str);\nSystem.out.println(num);\nWrite a program to find the first occurrence of a character in\na string in java?\npublic class FirstOccurrenceExample {\npublic static void main(String[] args) {\nString str = \"Hello World\";\nchar ch = 'o';\nint index = str.indexOf(ch);\nif (index == -1) {\nSystem.out.println(\"Character not found\");\n} else {\nSystem.out.println(\"First occurrence of '\" + ch + \"' is at\nindex \" + index);\n}\n}\n}\nIn this example, we define a string str and a character ch. We then\nuse the indexOf method of the String class to find the first\noccurrence of the character in the string. If the character is not",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 325,
          "text": "found, the indexOf method returns -1. Otherwise, it returns the\nindex of the first occurrence of the character.\nThe output of this program for the string \"Hello World\" and the\ncharacter 'o' would be:\nWrite a program to find the missing number in an Array in\njava.\npublic class MissingNumberExample {\npublic static void main(String[] args) {\nint[] arr = {1, 2, 3, 4, 6, 7, 8, 9, 10};\nint n = arr.length + 1;\nint expectedSum = (n * (n + 1)) / 2;\nint actualSum = 0;\nfor (int i = 0; i < arr.length; i++) {\nactualSum += arr[i];\n}\nint missingNumber = expectedSum - actualSum;\nSystem.out.println(\"The missing number is \" +\nmissingNumber);\n}\n}\nIn this example, we define an array arr that has a missing number.\nWe then calculate the length of the array plus 1, which gives us the\nnumber of elements in the sequence including the missing number.\nWe calculate the sum of the first n natural numbers using the\nformula (n * (n + 1)) / 2, and store it in expectedSum. We calculate\nthe sum of the elements in the array by iterating over the elements\nand adding them up, and store it in actualSum. We then subtract\nactualSum from expectedSum to get the missing number.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 326,
          "text": "The output of this program for the array {1, 2, 3, 4, 6, 7, 8, 9, 10}\nwould be:\nThe missing number is 5\nWrite a Program to Find a possible combination of the given\nstring “GOD”?\npublic class StringCombinationExample {\npublic static void main(String[] args) {\nString str = \"GOD\";\nint n = str.length();\nSystem.out.println(\"All possible combinations of the string \\\"\"\n+ str + \"\\\":\");\ncombinations(\"\", str);\n}\nprivate static void combinations(String prefix, String str) {\nint n = str.length();\nif (n == 0) {\nSystem.out.println(prefix);\n} else {\nfor (int i = 0; i < n; i++) {\ncombinations(prefix + str.charAt(i), str.substring(0, i) +\nstr.substring(i + 1, n));\n}\n}\n}\n}\nIn this example, we define a string str with the value \"GOD\". We\nthen call the combinations method with an empty prefix and the\nstring str. The combinations method takes a prefix and a string as",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 327,
          "text": "arguments. If the length of the string is 0, it prints the prefix.\nOtherwise, it recursively calls itself with each character of the string\nadded to the prefix, and the character removed from the string.\nThe output of this program for the string \"GOD\" would be:\nAll possible combinations of the string \"GOD\":\nGOD\nGDO\nOGD\nODG\nDOG\nDGO\nWrite a program for valid parenthesis in java?\nkeep track of opening and closing parentheses. The idea is to iterate\nthrough the string, push an opening parenthesis onto the stack, and\npop a closing parenthesis off the stack whenever we encounter one.\nIf the stack is empty when we encounter a closing parenthesis or\nthere are leftover opening parentheses in the stack at the end of the\niteration, then the string is not valid.\nHere's an example program that checks for valid parentheses in Java\nusing a stack:\nimport java.util.*;\npublic class ValidParentheses {\npublic static boolean isValid(String s) {\nStack<Character> stack = new Stack<>();\nfor (char c : s.toCharArray()) {\nif (c == '(' || c == '{' || c == '[') {\nstack.push(c);\n} else if (c == ')' && !stack.isEmpty() && stack.peek() ==\n'(') {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 328,
          "text": "stack.pop();\n} else if (c == '}' && !stack.isEmpty() && stack.peek() ==\n'{') {\nstack.pop();\n} else if (c == ']' && !stack.isEmpty() && stack.peek() ==\n'[') {\nstack.pop();\n} else {\nreturn false;\n}\n}\nreturn stack.isEmpty();\n}\npublic static void main(String[] args) {\nString s1 = \"()\";\nString s2 = \"()[]{}\";\nString s3 = \"(]\";\nString s4 = \"([)]\";\nString s5 = \"{[]}\";\nSystem.out.println(s1 + \" is valid: \" + isValid(s1));\nSystem.out.println(s2 + \" is valid: \" + isValid(s2));\nSystem.out.println(s3 + \" is valid: \" + isValid(s3));\nSystem.out.println(s4 + \" is valid: \" + isValid(s4));\nSystem.out.println(s5 + \" is valid: \" + isValid(s5));\n}\n}\nindicating whether s contains a valid set of parentheses. We initialize\na stack stack to keep track of opening parentheses. We then iterate",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 329,
          "text": "through each character c in the string s. If c is an opening\nparenthesis, we push it onto the stack. If c is a closing parenthesis,\nwe check if the stack is not empty and the top of the stack contains\nthe corresponding opening parenthesis. If both of these conditions\nare true, we pop the opening parenthesis from the stack. If c is not\na valid parenthesis, we return false. After iterating through the entire\nstring, we return true if the stack is empty (meaning we matched all\nopening parentheses with closing parentheses) or false otherwise.\nThe main method in this example demonstrates how to use the\nisValid method with some sample inputs. The output of running this\nprogram would be:\n() is valid: true\n()[]{} is valid: true\n(] is valid: false\n([)] is valid: false\n{[]} is valid: true\nWrite a program to find duplicates in an ArrayList.\nTo find duplicates in an ArrayList in Java, you can create a HashSet\nto keep track of unique elements and a separate ArrayList to store\nthe duplicates. The idea is to iterate through the elements of the\nArrayList and add them to the HashSet. If an element is already in\nthe HashSet, it is a duplicate and we add it to the duplicate\nArrayList.\nHere's an example program that finds duplicates in an ArrayList in\nJava:\nimport java.util.*;\npublic class FindDuplicates {\npublic static List<Integer> findDuplicates(List<Integer> list) {\nSet<Integer> set = new HashSet<>();\nList<Integer> duplicates = new ArrayList<>();",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 330,
          "text": "for (Integer i : list) {\nif (!set.add(i)) {\nduplicates.add(i);\n}\n}\nreturn duplicates;\n}\npublic static void main(String[] args) {\nList<Integer> list = Arrays.asList(1, 2, 3, 1, 4, 2, 5);\nList<Integer> duplicates = findDuplicates(list);\nSystem.out.println(\"Duplicates: \" + duplicates);\n}\n}\nWrite a program for the Quick sort algorithm.\npublic class QuickSort {\npublic static void quickSort(int[] array, int left, int right) {\nif (left < right) {\nint pivotIndex = partition(array, left, right);\nquickSort(array, left, pivotIndex - 1);\nquickSort(array, pivotIndex + 1, right);\n}\n}\nprivate static int partition(int[] array, int left, int right) {\nint pivot = array[right];\nint i = left - 1;\nfor (int j = left; j < right; j++) {\nif (array[j] < pivot) {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 331,
          "text": "i++;\nswap(array, i, j);\n}\n}\nswap(array, i + 1, right);\nreturn i + 1;\n}\nprivate static void swap(int[] array, int i, int j) {\nint temp = array[i];\narray[i] = array[j];\narray[j] = temp;\n}\npublic static void main(String[] args) {\nint[] array = {5, 2, 9, 1, 5, 6, 7};\nquickSort(array, 0, array.length - 1);\nfor (int i : array) {\nSystem.out.print(i + \" \");\n}\n}\n}\nWrite a program to check the minimum number of\noccurrences of a character in a given string in java.\nimport java.util.Scanner;\npublic class MinimumOccurrence {\npublic static void main(String[] args) {\nScanner scanner = new Scanner(System.in);\nSystem.out.print(\"Enter a string: \");",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 332,
          "text": "String string = scanner.nextLine();\nSystem.out.print(\"Enter a character: \");\nchar ch = scanner.nextLine().charAt(0);\nint minCount = Integer.MAX_VALUE;\nfor (int i = 0; i < string.length(); i++) {\nif (string.charAt(i) == ch) {\nint count = 0;\nfor (int j = i; j < string.length(); j++) {\nif (string.charAt(j) == ch) {\ncount++;\n}\n}\nif (count < minCount) {\nminCount = count;\n}\n}\n}\nif (minCount == Integer.MAX_VALUE) {\nSystem.out.println(\"The character \" + ch + \" is not present\nin the string\");\n} else {\nSystem.out.println(\"The minimum number of occurrences of\n\" + ch + \" in the string is \" + minCount);\n}\n}\n}\nHere's how the program works:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 333,
          "text": "First, we prompt the user to enter a string and a character using a\nScanner.\nWe initialize an integer variable minCount to the maximum possible\nvalue, Integer.MAX_VALUE, to ensure that any occurrence of the\ncharacter in the string will be smaller than this initial value.\nWe then loop through each character in the string, and if we\nencounter the specified character, we count the number of times it\noccurs in the string by looping through the string again starting from\nthe current index. If the count is less than the current minimum\ncount, we update minCount to the new count.\nFinally, we check if minCount has been updated from its initial value.\nIf it hasn't, we know that the specified character was not present in\nthe string.\nExample usage and output of the program:\nEnter a string: hello world\nEnter a character: l\nThe minimum number of occurrences of l in the string is 2\nEnter a string: java programming\nEnter a character: z\nThe character z is not present in the string\nWrite a program of an array, it must multiply the array,\nleaving itself aside, and that multiplication should be kept in\nthat array position in Java.\npublic class ArrayMultiplication {\npublic static void main(String[] args) {\nint[] arr = {2, 3, 4, 5, 6};\nint n = arr.length;\n// Initialize a new array to store the result\nint[] result = new int[n];",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 334,
          "text": "// Compute the product of elements to the left of each\nelement\nint left_product = 1;\nfor (int i = 0; i < n; i++) {\nresult[i] = left_product;\nleft_product *= arr[i];\n}\n// Compute the product of elements to the right of each\nelement\nint right_product = 1;\nfor (int i = n-1; i >= 0; i--) {\nresult[i] *= right_product;\nright_product *= arr[i];\n}\n// Print the result\nfor (int i = 0; i < n; i++) {\nSystem.out.print(result[i] + \" \");\n}\n}\n}\nHere's how the program works:\nWe start by initializing the input array and its length.\nWe then initialize a new array called result with the same length as\nthe input array. This array will store the final result.\nWe then compute the product of all elements to the left of each\nelement in the input array. We do this by maintaining a variable\ncalled left_product that keeps track of the product of all elements\nseen so far. We iterate through the input array from left to right,",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 335,
          "text": "storing the current value of left_product in the corresponding index\nof result, and updating left_product to include the current element.\nNext, we compute the product of all elements to the right of each\nelement in the input array. We do this in a similar way to the\nprevious step, but iterating through the input array from right to left.\nWe maintain a variable called right_product that keeps track of the\nproduct of all elements seen so far from the right side of the array.\nWe multiply each element in result by right_product and update\nright_product to include the current element.\nFinally, we print the result array.\nExample output for the input array {2, 3, 4, 5, 6}:\nOutput - 180 120 90 72 60\nThe result shows that the product of all elements in the array except\nthe first one is 3 x 4 x 5 x 6 = 360. Similarly, the product of all\nelements except the second one is 2 x 4 x 5 x 6 = 240, and so on.\nThe output matches these products with the corresponding element\nremoved.\nCan you write down a Spring boot rest API for addition of\ntwo integers?\n@RestController\npublic class AdditionController {\n@GetMapping(\"/addition/{a}/{b}\")\npublic int addition(@PathVariable int a, @PathVariable int b) {\nreturn a + b;\n}\n}\nThis REST API creates a simple Spring MVC @RestController that\nlistens for GET requests to the URL path /addition/{a}/{b} where\n{a} and {b} are placeholders for integer values. The @PathVariable\nannotation maps these values to the int parameters a and b, and the\naddition() method simply returns the sum of a and b. This API can",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 336,
          "text": "be easily extended to handle other HTTP methods or to perform\nmore complex operations.\nHow to count every character in string using java 8?\nTo count every character in a string using Java 8, you can use the\nchars() method of the String class to create an IntStream of Unicode\ncode points, and then use the boxed() method to convert it to a\nStream<Integer>. Finally, you can use the collect() method to group\nthe characters by their Unicode code points and count the\noccurrences of each character using the Collectors.groupingBy() and\nCollectors.counting() methods respectively. Here's an example code\nsnippet:\nString str = \"Hello, world!\";\nMap<Integer, Long> charCount = str.chars()\n.boxed()\n.collect(Collectors.groupingBy(Function.identity(),\nCollectors.counting()));\ncharCount.forEach((k, v) -> System.out.println(\"Character '\" +\n(char) k.intValue() + \"' occurs \" + v + \" times.\"));\noutput:\nCharacter ' ' occurs 1 times.\nCharacter ',' occurs 1 times.\nCharacter 'H' occurs 1 times.\nCharacter 'e' occurs 1 times.\nCharacter 'd' occurs 1 times.\nCharacter 'l' occurs 3 times.\nCharacter 'o' occurs 2 times.\nCharacter 'r' occurs 1 times.\nCharacter 'w' occurs 1 times.\nCharacter '!' occurs 1 times.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 337,
          "text": "In this example, the groupingBy() method groups the characters by\ntheir Unicode code points, and the counting() method counts the\nnumber of occurrences of each character. The resulting map\ncharCount contains the counts for each character, which we can print\nout using a forEach() loop.\nCheck the unique String program?\nI have a string “india” i have to check all the characters are unique\nor not, if they have unique characters print true if not then false\nusing java\npublic static boolean hasUniqueChars(String str) {\nif (str == null || str.length() > 128) {\nreturn false;\n}\nboolean[] charSet = new boolean[128];\nfor (int i = 0; i < str.length(); i++) {\nint val = str.charAt(i);\nif (charSet[val]) {\nreturn false;\n}\ncharSet[val] = true;\n}\nreturn true;\n}\nExplanation:\nWe first check if the input string is null or if its length is greater than\n128, which is the maximum number of unique ASCII characters. If\neither of these conditions is true, we return false.\nWe create a boolean array of size 128, which will be used to keep\ntrack of whether a character has been seen before or not.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 338,
          "text": "We iterate through each character of the input string and convert it\nto its ASCII value. We check if the corresponding index in the\nboolean array is already true. If it is, it means that the character has\nbeen seen before and we return false. Otherwise, we mark the\ncorresponding index in the boolean array as true.\nIf we have iterated through the entire string without finding any\nrepeated characters, we return true.\nHere's how you can call this function with the input string \"india\"\nand print the result:\nString input = \"india\";\nboolean hasUnique = hasUniqueChars(input);\nSystem.out.println(hasUnique); // This will print false, since 'i'\nappears twice in the input string\nWrite a program to Find spikes in a stock of integer array?\nimport java.util.ArrayList;\nimport java.util.List;\npublic class FindSpikes {\npublic static List<Integer> findSpikes(int[] stockPrices) {\nList<Integer> spikes = new ArrayList<>();\nfor (int i = 1; i < stockPrices.length; i++) {\nif (stockPrices[i] - stockPrices[i - 1] > 10) {\nspikes.add(i);\n}\n}\nreturn spikes;\n}\npublic static void main(String[] args) {\nint[] stockPrices = {100, 110, 120, 130, 140, 150, 160, 170, 180,\n190, 200};",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 339,
          "text": "List<Integer> spikes = findSpikes(stockPrices);\nSystem.out.println(spikes);\n}\n}\nFind the output of below program?\nimport java.util.HashMap;\nimport java.util.Map;\npublic class FindTheOutput {\npublic static void main(String[] args) {\nMap<String,String> map =new HashMap<>();\nString e1 = new String(\"AJAY\");\nString e2 = new String(\"AJAY\");\nString e3 = new String(\"AJAY\")\nmap.put(e1,\"I\");\nmap.put(e2,\"M2\");\nSystem.out.println(map.get(e1));\nSystem.out.println(map.get(e2));\n}\n}\nThe output of the program is:\nM2\nM2\nExplanation:\nIn Java, String literals are interned, meaning all String objects with\nthe same content share the same memory space.\nTherefore, e1, e2, and e3 refer to the same String object \"AJAY\" in\nthe memory.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 340,
          "text": "When adding entries to the map, the keys are compared based on\ntheir object identity, not just their content.\nSince e1 and e2 are the same object, they map to the same value\n(\"I\" and \"M2\" respectively).\nTherefore, the output is \"M2\" and \"M2\", even though they have the\nsame content \"AJAY\".",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 341,
          "text": "CHAPTER 14: SCENARIO-BASED\nThread-Pool Based Scenario:\nScenario, you must create a cached thread pool using the\nexecutor framework, but you don’t know the capacity or\nnumber of threads needed to achieve that task. how will you\ndetermine how many threads you will need based on your\nrequirement? is there any mechanism in the executor’s\nframework to know its capacity? (if you know the answers,\nplease comment below so we can discuss a lot)?\nDetermining the number of threads needed for a cached thread pool\ncan be a challenging task, as it depends on various factors such as\nthe nature of the tasks, the resources they require, and the overall\nsystem performance.\nHere are some general guidelines that can help you determine the\nnumber of threads needed for a cached thread pool:\nMonitor system performance: Observing the CPU and memory usage\nof your system while running the tasks can give you an idea of the\noptimal number of threads needed to achieve maximum\nperformance.\nAnalyse task requirements: If the tasks are CPU-bound, having a\nlarge number of threads can increase the CPU utilization, while if\nthey are I/O-bound, having fewer threads can result in better\nperformance.\nExperiment: You can experiment with different numbers of threads\nand observe the performance to determine the optimal number for\nyour system.\nStart with a small number of threads: You can start with a small\nnumber of threads and increase it gradually until you find the\noptimal number.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 342,
          "text": "Keep in mind that having too many threads can lead to thread\ncontext switching overhead and degrade performance, while having\ntoo few threads can limit the utilization of available resources.\nIn summary, finding the optimal number of threads for a cached\nthread pool is not a straightforward task and requires monitoring\nand experimentation to determine the best configuration for your\nsystem.\n \nRest-API & Database-based-scenario\nHow to build a restful web service that can fetch 1GB of\ndata from the database and send it back without using\nPagination, so the question is if you have a big size response\nhow would you send it back from a rest web service?\nSending a large amount of data, such as 1GB, in a single request\ncan have significant performance and scalability issues, such as\nincreased memory usage, longer response times, and increased\nnetwork bandwidth utilization.\nOne common solution to handle large data sets is to use pagination,\nwhere the data is split into smaller chunks and sent in multiple\nrequests. However, if you are not able to use pagination, there are a\nfew alternative solutions you can consider:\nCompression: You can compress the data before sending it back in\nthe response. This can reduce the amount of data sent over the\nnetwork and improve the response time. You can use algorithms\nsuch as GZIP to compress the data.\nStreaming: You can stream the data from the database directly to\nthe response without storing it in memory. This can reduce the\nmemory usage and allow you to handle large data sets more\nefficiently. You can use the Java API for Streaming XML (StAX) to\nstream the data.\nAsynchronous Processing: You can implement asynchronous\nprocessing to fetch and send the data in the background. This can\nfree up the main thread to handle other requests and improve the",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 343,
          "text": "overall performance and scalability of the system. You can use\nframeworks such as Spring's DeferredResult or Java's\nCompletableFuture to implement asynchronous processing.\nKeep in mind that these solutions may not be suitable for all use\ncases and that the best solution depends on your specific\nrequirements and constraints.\nDatabase-based-scenario:1\nHow would you design a binary tree kind of data structure in\ndatabase design? Basically, the interviewer wants to know\nhow you would design a database in a hierarchical way.\nA binary tree is a hierarchical data structure that can be easily\nmodelled in a relational database. To design a binary tree in a\ndatabase, you need to create a table to represent the nodes of the\ntree and a self-referencing foreign key to represent the parent-child\nrelationships.\nHere's an example of how you can design a binary tree in a\nrelational database:\nCREATE TABLE node (\nid INT PRIMARY KEY,\ndata VARCHAR(255),\nparent_id INT,\nFOREIGN KEY (parent_id) REFERENCES node (id)\n);\nIn this example, the node table has four columns: id, data,\nparent_id, and a self-referencing foreign key parent_id that refers to\nthe id of the parent node. The root node of the tree will have a NULL\nvalue in the parent_id column, and the other nodes will have a\nreference to their parent node.\nYou can use SQL queries to traverse the tree and perform various\noperations, such as inserting, updating, and deleting nodes. You can\nalso use recursion to traverse the tree and retrieve the data for all\nnodes in a specific order, such as pre-order, in-order, or post-order.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 344,
          "text": "Database-based-scenario:2\nHow would you store millions of records in a table? How\nmany tables does it require, any database pattern can you\nuse here?\nStoring millions of records in a single table can lead to performance\nand scalability issues, as the table size increases and the query\nresponse time becomes longer. To handle such a large number of\nrecords, you can use the following strategies:\nPartitioning: Partitioning the table into smaller, more manageable\nchunks, based on a specific criterion, can improve the performance\nand scalability of the system. For example, you can partition the\ndata by date, so that each partition contains data for a specific time\nrange. You can use either horizontal partitioning, where the data is\nsplit across multiple tables, or vertical partitioning, where the data is\nsplit across multiple columns in the same table.\nSharding: Sharding is a method of distributing the data across\nmultiple databases to increase the scalability and performance of the\nsystem. You can shard the data based on specific criteria, such as\ngeographic location or user ID, so that each shard contains a subset\nof the data.\nDenormalization: You can denormalize the data by duplicating data\nacross multiple tables to reduce the number of joins required to\nretrieve the data. This can improve the performance of the queries\nand reduce the response time.\nIndexing: Indexing the columns used in the queries can improve the\nquery performance and reduce the response time. You can use\neither clustered or non-clustered indexes, depending on the specific\nrequirements.\nIn addition, you can use database patterns, such as the Star\nSchema, to design the database and improve the performance and\nscalability of the system. The Star Schema is a data warehousing\npattern that uses a central fact table to store the data and dimension\ntables to store the metadata. This pattern can improve the query\nperformance and reduce the response time for large data sets.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 345,
          "text": "In summary, storing millions of records in a single table requires\ncareful planning and design, and you can use a combination of\npartitioning, sharding, denormalization, indexing, and database\npatterns to improve the performance and scalability of the system.\nIf one of the microservice is having high latency, how can you\nhandle that, and in which direction can you think of to resolve this\nproblem? \nHigh latency in a microservice can lead to poor application\nperformance and decreased user satisfaction. To handle high latency\nin a microservice, you can follow these steps:\nMonitor the Latency: You need to monitor the latency of the\nmicroservice to identify the root cause of the problem. You can use\ntools like Application Performance Management (APM) software or\nlog analysis tools to monitor the microservice.\nIdentify the Root Cause: You need to identify the root cause of the\nhigh latency. The root cause can be anything from slow database\nqueries to resource constraints on the server. Once you identify the\nroot cause, you can take the necessary steps to resolve it.\nOptimize the Code: You can optimize the code to reduce the latency.\nFor example, you can improve the algorithms used in the\nmicroservice, reduce the number of database queries, or improve\nthe caching mechanism.\nScale the Microservice: You can scale the microservice to handle the\nincreased load. You can scale the microservice horizontally, by\nadding more instances, or vertically, by increasing the resources of\nthe existing instances.\nUse Caching: You can use caching to reduce the latency. Caching\ncan help reduce the load on the database and improve the response\ntime of the microservice.\nLoad Balancing: You can use load balancing to distribute the load\nacross multiple instances of the microservice. Load balancing can\nhelp improve the performance and availability of the microservice.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 346,
          "text": "In conclusion, handling high latency in a microservice requires a\ncombination of monitoring, optimization, scaling, caching, and load\nbalancing. The specific solution depends on the root cause of the\nhigh latency, and you need to identify the root cause and implement\nthe appropriate solution to resolve the issue.\nMicroservice-based-scenario\nService A is calling Service B, C, D. I want to log or handle\nspecific conditions before calling B, C, and D but in a generic\nway. How can you handle this situation?\nOne way to handle this situation is to use the Aspect-Oriented\nProgramming (AOP) technique. In AOP, you can define \"aspects\"\nthat represent a set of cross-cutting concerns, such as logging or\nerror handling, that can be applied to multiple points in your code in\na modular and reusable way.\nIn your case, you can define an aspect to handle specific conditions\nbefore calling Service B, C, and D. The aspect can include code to\nlog the conditions or perform error handling, and you can apply the\naspect to the methods in Service A that call Service B, C, and D.\nTo implement this in Java, you can use a framework like Spring AOP.\nIn Spring AOP, you can define aspects using annotations and apply\nthem to your code using pointcuts. For example:\n@Aspect\n@Component\npublic class ServiceALogger {\n@Before(\"execution(* com.example.ServiceA.*(..))\")\npublic void logBefore(JoinPoint joinPoint) {\n// Log or handle specific conditions before calling B, C, and D\n}\n}\nIn this example, the @Before annotation is used to define an aspect\nthat will be executed before each method in the",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 347,
          "text": "com.example.ServiceA class. The logBefore method contains the\ncode to log or handle specific conditions before calling Service B, C,\nand D.\nBy using AOP, you can centralize the handling of specific conditions\nin a single aspect and apply it to multiple points in your code in a\ngeneric way. This helps to make your code more maintainable and\nscalable.\nInheritance Scenario-Based\nIf a child class overrides the parent where the singleton\npattern is implemented, then will it break the same? If\nYes/No, why?\nThe Singleton pattern is used to ensure that a class has only one\ninstance, and provides a global point of access to that instance. If a\nchild class overrides the parent where the Singleton pattern is\nimplemented, then it may break the Singleton pattern, depending on\nhow the overriding is done.\nIf the child class simply inherits the parent's Singleton instance, and\ndoes not override any Singleton-specific methods or properties, then\nthe Singleton pattern will still be maintained. The child class will\nhave access to the same instance as the parent, and any\nmodifications made to that instance in the parent or child class will\nbe visible to both classes.\nHowever, if the child class overrides the Singleton-specific methods\nor properties of the parent class, it may break the Singleton pattern.\nThis is because the child class may create its own instance of the\nSingleton, or modify the existing Singleton instance in ways that are\nnot compatible with the Singleton pattern. In this case, the child\nclass may have its own Singleton instance, which is different from\nthe Singleton instance used by the parent class and any other\nclasses.\nIn order to ensure that the Singleton pattern is maintained in the\nchild class, it is recommended to follow the same pattern as the\nparent class, and not override any Singleton-specific methods or",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 348,
          "text": "properties. If the child class needs to modify the Singleton instance,\nit should do so in a way that is compatible with the Singleton\npattern, such as through a static method or property in the parent or\nchild class.\nHow to create a custom HashMap of size 2GB?\nIt's not recommended to create a HashMap of size 2GB, as it would\nconsume a large amount of memory and may cause the program to\ncrash due to lack of memory. A HashMap is implemented using an\narray, and the size of the array is determined by the number of key-\nvalue pairs that need to be stored. When the number of key-value\npairs exceeds the capacity of the array, the array is resized to\nprevent collisions.\nIf you really need a HashMap with a large size, there are a few\nthings you can do to optimize the performance:\nIncrease the initial capacity of the HashMap: By setting the initial\ncapacity to a higher value, you can reduce the number of times the\narray needs to be resized. However, this will increase the memory\nconsumption.\nHashMap<String, String> map = new HashMap<>(2000000000);\nIncrease the load factor: The load factor is a metric that determines\nwhen the HashMap should resize the array. By increasing the load\nfactor, you can reduce the number of times the array needs to be\nresized. However, this will increase the risk of collisions.\nHashMap<String, String> map = new HashMap<>(2000000000, 2);\nUse a ConcurrentHashMap: A ConcurrentHashMap is a thread-safe\nalternative to HashMap that can handle a high number of concurrent\noperations.\nConcurrentHashMap<String, String> map = new\nConcurrentHashMap<>(2000000000);\nIt's important to note that even with these optimizations, creating a\nHashMap with a size of 2GB may still cause the program to crash",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 349,
          "text": "due to lack of memory, and it is not recommended. Instead, you\nshould consider using a more efficient data structure like a trie, a B-\ntree, or a Bloom filter, or using a database to store the data, they\nare more efficient and suitable to handle large data sets.\nDesign an application where you are getting millions of\nrequests how will you design it.\n(How will you design the application in which layer you will write\nwhat.)\nDesigning an application to handle millions of requests requires\ncareful consideration of various factors such as scalability,\nperformance, reliability, and security. Here are some steps to design\nsuch an application:\nUse a load balancer: A load balancer distributes incoming requests\nacross multiple servers to ensure that no single server gets\noverwhelmed. This distributes the load and provides redundancy and\nfault tolerance.\nChoose the right architecture: Microservice, serverless, or monolithic\narchitecture can all work depending on the specific use case.\nMicroservices allow for more flexibility and can handle scale better\nbut are more complex to manage. Serverless architecture can\nautomatically scale to handle load but may have limitations on\ncustomization.\nUse a distributed cache: A distributed cache can help reduce the\nload on the database by storing frequently accessed data in memory.\nThis can speed up the application's response time and reduce the\nnumber of database queries.\nOptimize database performance: Databases are often a bottleneck in\nhighly scalable applications. To optimize database performance, use\ntechniques like indexing, caching, and partitioning.\nImplement asynchronous processing: By using asynchronous\nprocessing, the application can handle multiple requests at the same\ntime, improving performance and scalability.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 350,
          "text": "Implement caching: Implementing caching can help reduce the load\non servers by serving frequently accessed content from a cache\ninstead of generating it dynamically each time.\nUse Content Delivery Network (CDN): CDN is a network of servers\nthat can distribute content globally, delivering it from the closest\nserver to the user, thus reducing the latency and improving the\napplication's performance.\nUse containers and orchestration tools: Containers like Docker can\nhelp to package applications and their dependencies, allowing them\nto be deployed and scaled quickly. Orchestration tools like\nKubernetes or Docker Swarm can automate the deployment and\nmanagement of containers.\nUse a distributed file system: A distributed file system can help with\nscalability and redundancy by distributing files across multiple\nservers.\nMonitor and optimize: Monitor the application's performance and\nusage patterns and optimize the infrastructure accordingly.\nImplementing logging, monitoring, and alerting can help detect\nissues and optimize performance in real-time.\nOverall, designing an application to handle millions of requests\nrequires a combination of techniques and tools to ensure scalability,\nperformance, reliability, and security.\nSuppose you have an application where the user wants the\norder history to be generated, and that history pdf\ngeneration take almost 15 minutes how will you optimise this\nsolution. How this can be reduced.\nGenerating a PDF of order history that takes 15 minutes can be a\nfrustrating experience for the user. Here are some ways to optimize\nthis process and reduce the time it takes to generate the PDF:\nOptimize the database queries: The slow generation of a PDF could\nbe due to slow database queries. You can optimize the database\nqueries by using indexing, caching, and partitioning. This will help",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 351,
          "text": "the queries execute faster, and the PDF generation time will be\nreduced.\nGenerate the PDF asynchronously: You can generate the PDF in the\nbackground while the user continues to use the application. This\nway, the user will not have to wait for the PDF to be generated. You\ncan also notify the user when the PDF is ready to be downloaded.\nUse a queueing system: Instead of generating the PDF immediately,\nyou can put the request in a queue and generate it later. This way,\nthe user will not have to wait, and the server can generate the PDF\nwhen it is free. You can use a queueing system like RabbitMQ or\nApache Kafka for this purpose.\nUse a caching system: You can cache the generated PDF and serve\nit to subsequent requests. This way, if the same user requests the\nsame PDF, you can serve it from the cache, and the user will not\nhave to wait for the PDF to be generated.\nOptimize the PDF generation code: You can optimize the PDF\ngeneration code to make it more efficient. This may involve changing\nthe libraries or tools you are using or optimizing the code itself.\nUse a distributed system: You can distribute the PDF generation task\nacross multiple servers to reduce the time it takes to generate the\nPDF. This is especially useful if you have a large number of users\nrequesting the PDF.\nOptimize the server: You can optimize the server to handle the load\nbetter. This may involve increasing the server's processing power,\nmemory, or storage.\nIn summary, to reduce the time it takes to generate a PDF of order\nhistory, you can optimize the database queries, generate the PDF\nasynchronously, use a queueing system, use a caching system,\noptimize the PDF generation code, use a distributed system, and\noptimize the server. By implementing one or more of these solutions,\nyou can significantly reduce the time it takes to generate the PDF\nand improve the user experience.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 352,
          "text": "CHAPTER 15: JAVA FEATURES FROM\nJAVA 8 TILL JAVA 21 WITH\nEXAMPLE\nIn this chapter, we're going to look at how Java has changed and\nimproved from Java 8 to the latest version, Java 21.\nWe'll cover what happened in Java since its update in 2014 to the\nmost recent developments. Instead of just sticking to Java 8 topics,\nwe'll explore the significant improvements and new tools introduced\nin the later versions.\nThis will help us answer interview questions more effectively. I've\nfocused on the important features that matter in interviews, so let's\njump in and see what's new in Java!\nJava 8 Features\nFeatures:\n1.Lambda Expressions:\nEnables functional programming by allowing the use of anonymous\nfunctions.\nConcise syntax for writing functional interfaces.\n2.Functional Interfaces:\nAn interface with a single abstract method, facilitating the use of\nlambda expressions.\n@FunctionalInterface annotation to mark such interfaces.\n3.Stream API:\nIntroduces a new abstraction called Stream for processing\nsequences of elements.\nSupports functional-style operations on streams like filter, map,\nreduce, etc.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 353,
          "text": "4.Default Methods:\nAllows interfaces to have method implementations.\nHelps in evolving interfaces without breaking existing\nimplementations.\n5.Method References:\nProvides a shorthand notation for lambda expressions.\nAllows referring to methods or constructors using the :: operator.\n6.Optional class:\nA container object that may or may not contain a non-null value.\nHelps to handle null checks more effectively and avoids\nNullPointerExceptions.\n7.New Date and Time API:\njava.time package introduced for a more comprehensive and flexible\nAPI to handle dates and times.\nSolves various issues with the old java.util.Date and\njava.util.Calendar classes.\n8.Default Methods:\nAllows interfaces to have method implementations.\nHelps in evolving interfaces without breaking existing\nimplementations.\n9.Nashorn JavaScript Engine:\nReplaces the old Rhino JavaScript engine.\nProvides better performance and improved compatibility with\nmodern JavaScript standards.\n10.Parallel Streams:\nAllows parallel processing of streams using the parallel() method.\nEnhances performance on multi-core systems for certain types of\noperations.\n11.Collectors:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 354,
          "text": "Introduces a set of utility methods in the Collectors class for\ncommon reduction operations, such as toList(), toSet(), joining(),\netc.\n12.Functional Interfaces in java.util.function package:\nNew functional interfaces like Predicate, Function, Consumer, and\nSupplier to support lambda expressions.\nJava 9 Features\n1.Improved Process API:\nJava 9 introduced enhancements to the Process API, providing better\ncontrol over native processes. The new ProcessHandle class allows\ndevelopers to interact with processes and obtain information about\nthem.\n// Using the ProcessHandle API to get information about the current\nprocess\npublic class ProcessHandleExample {\npublic static void main(String[] args) {\nProcessHandle currentProcess = ProcessHandle.current();\nSystem.out.println(\"Process ID: \" + currentProcess.pid());\nSystem.out.println(\"Is alive? \" + currentProcess.isAlive());\n}\n}\n2.Collection Factory Methods:\nJava 9 added new static factory methods to the collection interfaces\n(List, Set, Map, etc.), making it more convenient to create immutable\ninstances of these collections.\npublic class CollectionFactoryMethodsExample {\npublic static void main(String[] args) {\n// Creating an immutable list using List.of() factory method\nList<String> colors = List.of(\"Red\", \"Green\", \"Blue\");",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 355,
          "text": "System.out.println(colors);\n}\n}\n3.Improved Stream API:\nThe Stream API was enhanced with several new methods, such as\ntakeWhile, dropWhile, and ofNullable, which improve the flexibility\nand functionality of working with streams.\npublic class StreamAPIImprovementsExample {\npublic static void main(String[] args) {\n// Example 1: takeWhile\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9,\n10);\nList<Integer> lessThanFive = numbers.stream()\n.takeWhile(n -> n < 5)\n.collect(Collectors.toList());\nSystem.out.println(\"Numbers less than 5: \" + lessThanFive);\n// Example 2: dropWhile\nList<Integer> greaterThanThree = numbers.stream()\n.dropWhile(n -> n <= 3)\n.collect(Collectors.toList());\nSystem.out.println(\"Numbers greater than 3: \" +\ngreaterThanThree);\n// Example 3: ofNullable\nList<String> names = Arrays.asList(\"Alice\", \"Bob\", null,\n\"Charlie\", null, \"David\");\nList<String> nonNullNames = names.stream()\n.flatMap(name ->\nStreamAPIImprovementsExample.nullSafeStream(name))",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 356,
          "text": ".collect(Collectors.toList());\nSystem.out.println(\"Non-null names: \" + nonNullNames);\n}\n// Helper method to create a stream from a potentially null value\nprivate static <T> java.util.stream.Stream<T> nullSafeStream(T\nvalue) {\nreturn value == null ? java.util.stream.Stream.empty() :\njava.util.stream.Stream.of(value);\n}\n}\nIn this example:\ntakeWhile is used to take elements from the stream until a certain\ncondition is met (in this case, numbers less than 5).\ndropWhile is used to drop elements from the stream while a certain\ncondition is met (in this case, numbers less than or equal to 3).\nofNullable is used to create a stream from a potentially null value,\nfiltering out null values (in this case, filtering out null names from\nthe list).\n4.Private Methods in Interfaces:\nInterfaces in Java 9 can have private methods, allowing developers\nto encapsulate common functionality within an interface without\nexposing it to external classes.\n// Interface with private method\npublic interface PrivateMethodInterface {\n    default void publicMethod() {\n        // Public method can call private method\n        privateMethod();\n    }\n    private void privateMethod() {\n        System.out.println(\"Private method in interface\");",
          "tables": [
            [
              [
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "// Interface with private method",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                null,
                null,
                "",
                "",
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                "",
                ""
              ],
              [
                "public",
                null,
                null,
                "",
                "interface",
                null,
                null,
                null,
                "",
                "PrivateMethodInterface",
                null,
                null,
                null,
                "{"
              ],
              [
                "",
                "",
                null,
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                null,
                "",
                "",
                ""
              ],
              [
                "",
                "default",
                null,
                null,
                null,
                "",
                "void",
                "",
                "publicMethod",
                null,
                null,
                "() {",
                null,
                null
              ],
              [
                "",
                "",
                null,
                "",
                null,
                "",
                "",
                "",
                "",
                null,
                null,
                "",
                "",
                null
              ],
              [
                "",
                null,
                null,
                "// Public method can call private method",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null
              ],
              [
                "privateMethod();",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "}",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ]
            ],
            [
              [
                "",
                "private",
                "",
                "void",
                null,
                "",
                "privateMethod",
                null,
                null,
                "() {",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
              ],
              [
                "System.",
                null,
                null,
                null,
                "out",
                null,
                null,
                ".println(",
                "\"Private method in interface\"",
                null,
                null,
                ");"
              ]
            ]
          ],
          "code_blocks": [
            "default void publicMethod() {\n        // Public method can call private method\n        privateMethod();\n    }\n    private void privateMethod() {\n        System.out.println(\"Private method in interface\");"
          ],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 357,
          "text": "    }\n}\n5.HTTP/2 Client:\nJava 9 introduced a new lightweight HTTP client that supports\nHTTP/2 and WebSocket. This client is designed to be more efficient\nand flexible than the old HttpURLConnection API.\npublic class HttpClientExample {\npublic static void main(String[] args) throws Exception {\nHttpClient httpClient = HttpClient.newHttpClient();\nHttpRequest httpRequest = HttpRequest.newBuilder()\n.uri(new URI(\"https://www.example.com\"))\n.GET()\n.build();\nHttpResponse<String> response =\nhttpClient.send(httpRequest,\nHttpResponse.BodyHandlers.ofString());\nSystem.out.println(\"Response Code: \" +\nresponse.statusCode());\nSystem.out.println(\"Response Body: \" + response.body());\n}\n}\nJava 10 Features\n1.Local-Variable Type Inference (var):\nJava 10 introduced the ability to use the var keyword for local\nvariable type inference. This allows developers to declare local\nvariables without explicitly specifying the type, letting the compiler\ninfer it based on the assigned value.\npublic class LocalVarInference {",
          "tables": [
            [
              [
                "}",
                null
              ],
              [
                "",
                ""
              ],
              [
                "}",
                null
              ],
              [
                "",
                null
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 358,
          "text": "/**\n* Allowed: only as a local variable\n* Not allowed: anywhere else (class field, method param, etc.)\n* User var responsibly!\n*\n* Use:\n*  - when it's clear what the type is (string, int)\n*  - to shorten very long ugly types\n*\n*  Don't use:\n*      - returned value is unclear (var data = service.getData();)\n*/\npublic static void main(String[] args) {\n// allowed, but brings little benefit\nvar b = \"b\";\nvar c = 5; // int\nvar d = 5.0; // double\nvar httpClient = HttpClient.newHttpClient();\n// one hell of an inference :)\nvar list = List.of(1, 2.0, \"3\");\n// the benefit becomes more evident with types with long\nnames\nvar reader = new BufferedReader(null);\n// vs.\nBufferedReader reader2 = new BufferedReader(null);\n}\n}\nOptional API — new methods introduced",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 359,
          "text": "public class OptionalApi {\n/**\n* new .orElseThrow()\n*/\npublic static void main(String[] args) {\nOptional<Flight> earliestFlight = FlightSchedule.getFlights()\n.stream()\n.filter(f -> \"Boston\".equals(f.from()))\n.filter(f -> \"San Francisco\".equals(f.to()))\n.min(comparing(Flight::date));\nearliestFlight.orElseThrow(FlightNotFoundException::new);\n}\n}\nJava 11 Features\n1.HTTP client\nHere is the program to explain the HTTP client changes,\npublic class HttpClientBasicExample {\n/**\n* Create a client, send a GET Request, print Response info\n*/\npublic static void main(String... args) throws Exception {\nHttpClient client = HttpClient.newHttpClient();\nHttpRequest request =\nHttpRequest.newBuilder(URI.create(\"https://github.com/\n\"))\n.GET()  // default, may be omitted",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 360,
          "text": ".build();\nHttpResponse<String> response =\nclient.send(request,\nHttpResponse.BodyHandlers.ofString());\nprint(\"Status code was: \" + response.statusCode());\nprint(response.headers().map());\n}\n}\n2.New File Methods: Java 11 introduced several new methods in\nthe java.nio.file package, providing additional functionality for\nworking with files and directories. Some of the notable methods\ninclude:\nFiles.readString(Path path) and Files.writeString(Path path,\nCharSequence content, OpenOption... options):\nThese methods simplify reading and writing the contents of a file as\na string. The readString method reads the entire content of a file\ninto a string, and the writeString method writes a string to a file.\n2. Files.readAllLines(Path path) and Files.write(Path path, Iterable<?\nextends CharSequence> lines, OpenOption... options):\nThese methods simplify reading and writing the contents of a file as\na list of strings. The readAllLines method reads all lines from a file\ninto a list, and the write method writes a collection of strings to a\nfile.\n3. Files.newBufferedReader(Path path) and\nFiles.newBufferedWriter(Path path, OpenOption... options):\nThese methods create buffered readers and writers for efficient\nreading and writing of files. They simplify the process of working\nwith character streams.\n4.files.mismatch(Path path1, Path path2):",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 361,
          "text": "This method compares the content of two files and returns the\nposition of the first mismatched byte. If the files are identical, it\nreturns -1.\nHere is the example,\npublic class NewFilesMethods {\nstatic String filePath = System.getProperty(\"user.dir\") +\n\"/src/main/resources/\";\nstatic String file_1 = filePath + \"file_1.txt\";\n/**\n* Files.readString() and .writeString()\n*/\npublic static void main(String[] args) throws IOException {\n// reading files is much easier now\n// not to be used with huge files\nPath path = Paths.get(file_1);\nString content = Files.readString(path);\nprint(content);\nPath newFile = Paths.get(filePath + \"newFile.txt\");\nif(!Files.exists(newFile)) {\nFiles.writeString(newFile, \"some str\",\nStandardOpenOption.CREATE);\n} else {\nFiles.writeString(newFile, \"some str\",\nStandardOpenOption.TRUNCATE_EXISTING);\n}\n}\n}\nJava 12 Features\n1.Compact Number Formatting:",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 362,
          "text": "Java 12 introduced a new feature called “Compact Number\nFormatting” as part of JEP 357. This enhancement provides a more\nconcise way to format large numbers in a locale-specific manner.\nThe NumberFormat class in the java.text package was enhanced to\nsupport the new Style enum, including the Style.SHORT and\nStyle.LONG constants. These styles can be used to format large\nnumbers in a compact form based on the specified locale.\npublic class CompactNumberFormattingExample {\npublic static void main(String[] args) {\n// Creating a number formatter with compact style\nNumberFormat compactFormatter =\nNumberFormat.getCompactNumberInstance(Locale.US,\nNumberFormat.Style.SHORT);\n// Formatting large numbers\nSystem.out.println(\"Short Format: \" +\ncompactFormatter.format(1000));  // Output: 1K\nSystem.out.println(\"Short Format: \" +\ncompactFormatter.format(1000000));  // Output: 1M\n// Creating a number formatter with compact style (long)\nNumberFormat compactLongFormatter =\nNumberFormat.getCompactNumberInstance(Locale.US,\nNumberFormat.Style.LONG);\n// Formatting large numbers in long style\nSystem.out.println(\"Long Format: \" +\ncompactLongFormatter.format(10000000));  // Output: 10 million\nSystem.out.println(\"Long Format: \" +\ncompactLongFormatter.format(1000000000));  // Output: 1 billion\n}\n}\n2.String::indent (JEP 326):",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 363,
          "text": "The String class in Java 12 introduced a new method called\nindent(int n). This method is used to adjust the indentation of each\nline in a string by a specified number of spaces.\nString indentedString = \"Hello\\nWorld\".indent(3);\n// indentedString is now \"   Hello\\n   World\"\n3.New Methods in java.util.Arrays (JEP 326):\nJava 12 added several new methods to the java.util.Arrays class,\nincluding copyOfRange and equals variants that take a Comparator.\n4.Improvements in java.util.stream.Collectors (JEP 325):\nThe Collectors utility class in Java 12 introduced new collectors like\nteeing, which allows combining two collectors into a single collector.\n5.New File Methods:\npublic class NewFilesMethod {\nstatic String filePath = System.getProperty(\"user.dir\") +\n\"/src/main/resources/\";\nstatic String file_1 = filePath + \"file_1.txt\";\nstatic String file_2 = filePath + \"file_2.txt\";\npublic static void main(String[] args) throws IOException {\n// Finds and returns the position of the first mismatched byte\nin the content of two files,\n// or -1L if there is no mismatch\nlong result = Files.mismatch(Paths.get(file_1),\nPaths.get(file_2));\nprint(result);      // -1\n}\n}\nJava-13 Features\nNothing much interesting happend: — API update to ByteBuffer —\nUpdate to localization (support for new chars and emojis) — GC",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 364,
          "text": "updates\nJava-14 Features\n1.“Switch Expressions” (SE) instead of “Switch Statements”\n(SS):\nEnhanced Switch Expressions:\nSwitch expressions, introduced as a preview feature in Java 12 and\nfinalized in Java 13, allow developers to use switch statements as\nexpressions, providing a more concise and expressive syntax.\nint dayOfWeek = 2;\nString dayType = switch (dayOfWeek) {\ncase 1, 2, 3, 4, 5 -> \"Weekday\";\ncase 6, 7 -> \"Weekend\";\ndefault -> throw new IllegalArgumentException(\"Invalid day of\nthe week: \" + dayOfWeek);\n};\n“Yield” Statement:\nThe “yield” statement was introduced in Java 14 to complement\nswitch expressions. It allows you to specify a value to be returned\nfrom a switch arm, providing more flexibility in combining both\nimperative and functional styles.\nString dayType = switch (dayOfWeek) {\ncase 1, 2, 3, 4, 5 -> {\nSystem.out.println(\"Working day\");\nyield \"Weekday\";\n}\ncase 6, 7 -> {\nSystem.out.println(\"Weekend\");\nyield \"Weekend\";\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 365,
          "text": "default -> throw new IllegalArgumentException(\"Invalid day of\nthe week: \" + dayOfWeek);\n};\nOne More example,\n/**\n* \"Switch Expressions\" (SE) instead of \"Switch Statements\" (SS)\n* (Both can be used, but SE is better than SS)\n*/\npublic class SwitchExpressions {\npublic static void main(String[] args) {\noldStyleWithBreak(FruitType.APPLE);\nwithSwitchExpression(FruitType.PEAR);\nswitchExpressionWithReturn(FruitType.KIWI);\nswitchWithYield(FruitType.PINEAPPLE);\n}\n// Old style is more verbose and error-prone (forgotten \"break;\"\ncauses the switch to fall through)\nprivate static void oldStyleWithBreak(FruitType fruit) {\nprint(\"==== Old style with break ====\");\nswitch (fruit) {\ncase APPLE, PEAR:\nprint(\"Common fruit\");\nbreak;\ncase PINEAPPLE, KIWI:\nprint(\"Exotic fruit\");\nbreak;\ndefault:\nprint(\"Undefined fruit\");",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 366,
          "text": "}\n}\nprivate static void withSwitchExpression(FruitType fruit) {\nprint(\"==== With switch expression ====\");\nswitch (fruit) {\ncase APPLE, PEAR -> print(\"Common fruit\");\ncase PINEAPPLE -> print(\"Exotic fruit\");\ndefault -> print(\"Undefined fruit\");\n}\n}\nprivate static void switchExpressionWithReturn(FruitType fruit) {\nprint(\"==== With return value ====\");\n// or just \"return switch\" right away\nString text = switch (fruit) {\ncase APPLE, PEAR -> \"Common fruit\";\ncase PINEAPPLE -> \"Exotic fruit\";\ndefault -> \"Undefined fruit\";\n};\nprint(text);\n}\n/**\n* \"Yield\" is like \"return\" but with an important difference:\n* \"yield\" returns a value and exits the switch statement.\nExecution stays within the enclosing method\n* \"return\" exits the switch and the enclosing method\n*/\n// https://stackoverflow.com/questions/58049131/what-does-the-\nnew-keyword-yield-mean-in-java-13",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 367,
          "text": "private static void switchWithYield(FruitType fruit) {\nprint(\"==== With yield ====\");\nString text = switch (fruit) {\ncase APPLE, PEAR -> {\nprint(\"the given fruit was: \" + fruit);\nyield \"Common fruit\";\n}\ncase PINEAPPLE -> \"Exotic fruit\";\ndefault -> \"Undefined fruit\";\n};\nprint(text);\n}\npublic enum FruitType {APPLE, PEAR, PINEAPPLE, KIWI}\n}\nJava 15 Features:\n1.Text-block:\nText blocks are a new kind of string literals that span multiple lines.\nThey aim to simplify the task of writing and maintaining strings that\nspan several lines of source code while avoiding escape sequences.\nExample without text blocks:\nString html = \"<html>\\n\" +\n\"    <body>\\n\" +\n\"        <p>Hello, world</p>\\n\" +\n\"    </body>\\n\" +\n\"</html>\";\nExample with text blocks:\nString html = \"\"\"",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 368,
          "text": "<html>\n<body>\n<p>Hello, world</p>\n</body>\n</html>\n\"\"\";\nKey features of text blocks include:\nMultiline Strings: Text blocks allow you to represent multiline strings\nmore naturally, improving code readability.\nWhitespace Control: Leading and trailing whitespaces on each line\nare removed, providing better control over the indentation.\nEscape Sequences: Escape sequences are still valid within text\nblocks, allowing the inclusion of special characters.\nText blocks were designed to make it easier to express strings that\ninclude multiple lines of content, such as HTML, XML, JSON, or SQL\nqueries. If there have been any updates or new features related to\ntext blocks in Java 15 or subsequent releases, it’s advisable to check\nthe official documentation or release notes for the specific version.\n/**\n* Use cases for TextBlocks (What's New in Java 15 > Text Blocks in\nPractice)\n* - Blocks of text using markdown\n* - Testing, defining hard-coded JSON strings\n* - Simple templating\n*/\npublic class TextBlocks {\npublic static void main(String[] args) {\noldStyle();\nemptyBlock();",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 369,
          "text": "jsonBlock();\njsonMovedEndQuoteBlock();\njsonMovedBracketsBlock();\n}\nprivate static void oldStyle() {\nprint(\"******** Old style ********\");\nString text = \"{\\n\" +\n\"  \\\"name\\\": \\\"John Doe\\\",\\n\" +\n\"  \\\"age\\\": 45,\\n\" +\n\"  \\\"address\\\": \\\"Doe Street, 23, Java Town\\\"\\n\" +\n\"}\";\nprint(text);\n}\nprivate static void emptyBlock() {\nprint(\"******** Empty Block ********\");\nString text = \"\"\"\n\"\"\";\nprint(\"|\" + text + \"|\");\n}\nprivate static void jsonBlock() {\nprint(\"******** JSON Block ********\");\nString text = \"\"\"\n{\n\"name\": \"John Doe\",\n\"age\": 45,\n\"address\": \"Doe Street, 23, Java Town\"\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 370,
          "text": "\"\"\"; // <-- no indentation if char is aligned with first \"\nprint(text);\n}\nprivate static void jsonMovedEndQuoteBlock() {\nprint(\"******** Json Moved End Quote Block ********\");\nString text = \"\"\"\n{\n\"name\": \"John Doe\",\n\"age\": 45,\n\"address\": \"Doe Street, 23, Java Town\"\n}\n\"\"\";\nprint(text);\n}\nprivate static void jsonMovedBracketsBlock() {\nprint(\"******** Json Moved Brackets Block ********\");\nString text = \"\"\"\n{\n\"name\": \"John Doe\",\n\"age\": 45,\n\"address\": \"Doe Street, 23, Java Town\"\n}\n\"\"\"; // <-- indented by 2 spaces as it is aligned with\nthird \"\nprint(text);\n}\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 371,
          "text": "Java 16 Features\n1.Pattern matching for instanceof:\nJava 16’s pattern matching for instanceof is a nifty feature that\nimproves type checking and extraction. Here's a rundown of its key\naspects:\nWhat it does:\nIntroduces type patterns instead of just checking against a single\ntype.\nAllows declaring a variable within the instanceof check to hold the\nextracted object.\nCombines type checking and casting into a single, more concise and\nreadable expression.\nBenefits:\nReduced boilerplate: Eliminates the need for separate instanceof\nchecks, casts, and variable declarations.\nImproved readability: Makes code clearer and easier to understand,\nespecially for complex type hierarchies.\nReduced errors: Less chance of casting exceptions due to mistaken\ntypes.\nSyntax:\nif (obj instanceof String s) {\n// Use \"s\" directly as a String here\n} else if (obj instanceof List<Integer> list) {\n// Use \"list\" directly as a List<Integer> here\n} else {\n// Handle other cases\n}\nExample\npublic class PatternMatchingForInstanceof {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 372,
          "text": "public static void main(String[] args) {\nObject o = new Book(\"Harry Potter\", Set.of(\"Jon Doe\"));\n// old way\nif (o instanceof Book) {\nBook book = (Book) o;\nprint(\"The book's author(s) are \" + book.getAuthors());\n}\n// new way\nif (o instanceof Book book) {\nprint(\"The book's author(s) are \" + book.getAuthors());\n}\n}\n}\nRecord:\nRecords in Java are a special type of class specifically designed for\nholding immutable data. They help reduce boilerplate code and\nimprove readability and maintainability when dealing with simple\ndata structures.\nHere’s a breakdown of their key characteristics:\n1. Conciseness:\nUnlike traditional classes, records require minimal code to define.\nYou just specify the data fields (components) in the record\ndeclaration, and the compiler automatically generates essential\nmethods like:\nConstructor with parameters for each component.\nGetters for each component.\nequals and hashCode methods based on component values.\ntoString method representing the record's state.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 373,
          "text": "2. Immutability:\nRecord fields are declared as final, making the data stored within\nthem unmodifiable after the record is created. This ensures data\nconsistency and simplifies thread safety concerns.\n3. Readability:\nThe auto-generated methods and predictable behavior of records\nenhance code clarity and make it easier to understand what the\nrecord represents and how it interacts with other parts of your\nprogram.\n4. Reduced Errors:\nBy minimizing boilerplate, records reduce the risk of common\nmistakes like forgetting getters or implementing equals incorrectly.\nThis leads to more robust and reliable code.\nOverall, records are a valuable tool for Java developers to create\nconcise, immutable, and readable data structures, leading to cleaner,\nmore maintainable code.\n/**\n* Record are data-only immutable classes (thus have specific use\ncases)\n* They are a restricted (specialized) form of a class (like enums)\n* Not suitable for objects that are meant to change state, etc.\n* <p>\n* Records are NOT:\n* - Boilerplate reduction mechanism\n* <p>\n* Records generate constructors, getters, fields; equals, hashCode,\ntoString\n* <p>\n* Use cases:\n* - to model immutable data",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 374,
          "text": "* - to hold read-only data in memory\n* - DTOs - Data Transfer Objects\n*/\npublic class RecordsDemo {\npublic static void main(String[] args) {\nProduct p1 = new Product(\"milk\", 50);\nProduct p2 = new Product(\"milk\", 50);\nprint(p1.price()); // without \"get\" prefix\nprint(p1);         // auto-generated toString() -\nProduct[name=milk, price=50]\nprint(p1 == p2);       // false    - different objects\nprint(p1.equals(p2));  // true     - values of fields (milk, 50)\nare compared by the auto-generated equals()/hashCode()\n}\n}\n/**\n* params are called \"Components\"\n* want more fields - must add into the signature\n* Extending not allowed, implementing interfaces IS allowed\n*/\npublic record Product(String name, int price) {\n// static fields allowed, but not non-static\nstatic String country = \"US\";\n// constructor with all fields is generated\n// can add validation\npublic Product {\nif(price < 0) {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 375,
          "text": "throw new IllegalArgumentException();\n}\n}\n// possible to override auto-generated methods like toString()\n}\n2.Date Time Formatter API:\nGeneral usage and features of the DateTimeFormatter API in Java\n16: This includes understanding format patterns, creating custom\nformats, parsing dates and times, and available formatting options.\nNew features introduced in Java 16 for date formatting: Specifically,\nthe day period support using the \"B\" symbol and its various styles.\nComparison of DateTimeFormatter with older formatters like\nSimpleDateFormat: Exploring the advantages and disadvantages of\neach approach.\nExamples of using DateTimeFormatter for specific formatting tasks:\nLike formatting dates in different locales, handling time zones, or\ngenerating human-readable representations.\npublic class DateTimeFormatterApi {\nstatic Map<TextStyle, Locale> map = Map.of(\nTextStyle.FULL, Locale.US,\nTextStyle.SHORT, Locale.FRENCH,\nTextStyle.NARROW, Locale.GERMAN\n);\npublic static void main(String[] args) {\nfor (var entry : map.entrySet()) {\nLocalDateTime now = LocalDateTime.now();\nDateTimeFormatter formatter = new\nDateTimeFormatterBuilder()\n.appendPattern(\"yyyy-MM-dd hh:mm \")",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 376,
          "text": ".appendDayPeriodText(entry.getKey())    // at night,\ndu soir, abends, etc.\n.toFormatter(entry.getValue());\nString formattedDateTime = now.format(formatter);\nprint(formattedDateTime);\n}\n}\n}\n3.Changes in Stream API:\nJava 16 brought some exciting changes to the Stream API, making it\neven more powerful and convenient to use. Here are the key\nhighlights:\n1. Stream.toList() method: This new method provides a concise way\nto collect the elements of a stream into a List. Previously, you had to\nuse collect(Collectors.toList()), which is now slightly redundant.\n2. Stream.mapMulti() method: This method allows you to map each\nelement of a stream to zero or more elements, creating a new\nstream of the resulting elements. It's handy for splitting or flattening\ncomplex data structures.\n3. Enhanced line terminator handling: Java 16 clarifies the definition\nof line terminators in the java.io.LineNumberReader class. This\neliminates inconsistencies and ensures consistent behavior when\nreading line-based data.\n4. Other minor changes:\nString streams now support the limit and skip methods directly,\nremoving the need for intermediate operations.\nThe peek method can now be used with parallel streams, allowing\nside effects without impacting parallelism.\npublic class StreamApi {\npublic static void main(String[] args) {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 377,
          "text": "List<Integer> ints = Stream.of(1, 2, 3)\n.filter(n -> n < 3)\n.toList();  // new, instead of the verbose\n.collect(Collectors.toList())\nints.forEach(System.out::println);\n}\n}\nJava 17 Features\n1.Sealed classes(Subclassing):\nSealed classes are a brand-new feature introduced in Java 17 (JEP\n409) that gives you more control over inheritance hierarchies. They\nessentially let you restrict which classes can extend or implement\nyour class or interface. This can be incredibly useful for a variety of\nreasons, including:\n1. Enhanced Type Safety: By specifying allowed subclasses, you\nprevent unexpected or unwanted extensions that could break your\ncode or introduce security vulnerabilities.\n2. Improved Library Design: You can create closed ecosystems\nwithin your libraries, ensuring users only work with approved\nextensions and don’t create incompatible implementations.\n3. Easier Code Maintenance: Knowing the exact set of possible\nsubclasses simplifies reasoning about your code and makes it easier\nto understand and maintain.\nHow do sealed classes work?\nYou declare a class or interface as sealed using the sealed keyword.\nThen, you use the permits clause to specify a list of classes that are\nallowed to extend or implement it. Only these permitted classes can\ndirectly inherit, while all other classes are prohibited.\nsealed class Shape {\npermits Circle, Square, Triangle;",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 378,
          "text": "// ... implementation details\n}\nclass Circle extends Shape {\n// ...\n}\n// This will cause a compile-time error because Rectangle isn't\npermitted\nclass Rectangle extends Shape {\n// ...\n}\nA sealed class or interface can be extended or implemented only by\nthose classes and interfaces permitted to do so.\nBenefits:\n1) help enforce a well-defined and limited set of possible\nimplementations — communicates INTENTION\n2) Better security — help prevent unexpected or unauthorized\nsubclassing and behavior from third-party code\nRules:\n1. A sealed class uses “permits” to allow other classes to subclass it.\n2. A child class MUST either be final, sealed or non-sealed. (or code\nwon’t compile)\n3. A permitted child class MUST extend the parent sealed class.\nPermitting without using the permit is now allowed.\n4. The classes specified by permits must be located near the\nsuperclass:\neither in the same module (if the superclass is in a named module)\n(see Java 9 modularity)\nor in the same package (if the superclass is in the unnamed\nmodule).",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 379,
          "text": "More on point 4:\nThe motivation is that a sealed class and its (direct) subclasses are\ntightly coupled since they must be compiled and maintained\ntogether.\nIn a modular world, this means “same module”; in a non-modular\nworld, the best approximation for this is “same package”.\nIf you use modules, you get some additional flexibility, because of\nthe safety boundaries modules give you.\nJava 18 Features\n1.UTF-8 by Default:\nJava 18 makes UTF-8 the default character encoding for the\nplatform, aligning with modern standards and simplifying character\nhandling.\npublic class Utf8ByDefault {\n// https://openjdk.org/jeps/400 - Platform Default Encoding\npublic static void main(String[] args) throws IOException {\n// Problem:\n// 1) On Windows, use the below FileWriter to write characters\noutside the ASCII table, e.g. some exotic Unicode chars, without\nexplicitly specifying a char set\n// 2) Copy or transfer the file to a UNIX-based OS, like a Mac,\nand read the file using the default char encoding of the system\n// 3) Likely result - garbled output\n// Hence the problem - unpredictable behavior.\nFileWriter writer = new FileWriter(\"out.txt\");\n// Solution before Java 18: always specify the charset, (and\ngood luck not forgetting it!)\nFileWriter writer2 = new FileWriter(\"out.txt\",\nStandardCharsets.UTF_8);",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 380,
          "text": "// Solution since Java 18: UTF-8 is now default, so no need to\nspecify the Char set\n}\n}\n2.Simple Web Server:\nThis new API provides a basic web server for serving static files,\nideal for quick prototyping and embedded applications.\nEnsure you have Java 18 or later installed on your system.\nHave your static files (HTML, CSS, JavaScript, images, etc.) ready in\na specific directory.\npublic class SimpleWebServer {\npublic static void main(String[] args) throws Exception {\nString documentRoot = \"/path/to/your/static/files\";  // Replace\nwith your actual directory\nint port = 8080;  // You can change the port if needed\nHttpServer server = HttpServer.create(new\nInetSocketAddress(port), 0);\nSimpleFileServer fileServer = new\nSimpleFileServer(documentRoot);\nserver.setExecutor(null);  // Use single-threaded executor\nserver.createContext(\"/\", fileServer);\nserver.start();\nSystem.out.println(\"Server started on port \" + port);\n}\n}\n<!DOCTYPE html>\n<html>",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 381,
          "text": "<head>\n<title>Title of the document</title>\n</head>\n<body>\nThis page can be served with Java's Simple Web Server using the\n\"jwebserver\" command\n</body>\n</html>\n. Compile and run:\nCompile the Java file: javac SimpleWebServer.java\nRun the compiled class: java SimpleWebServer\n4. Access the page:\nOpen your web browser and navigate to http://localhost:8080 (or\nthe specified port).\nYou should see the default file (usually index.html) from your static\nfiles directory being served.\n5. Stopping the server:\nTo stop the server, press Ctrl+C in the terminal where it’s running.\nThe simplest way to get started:\n1) open the terminal in this package (java18)\n2) run “java -version” and make sure it is at least java 18\n3) run the “jwebserver” command\nIt should output:\nBinding to loopback by default. For all interfaces use “-b 0.0.0.0” or\n“-b ::”.\nServing path/to/your/subdirectory and subdirectories on 127.0.0.1\nport 8000\nURL http://127.0.0.1:8000/",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 382,
          "text": "The HTML page is now served at:\nhttp://127.0.0.1:8000/java18/doc.html\nIP address, port and other parameters may be changed\n3.HEAD() convenience method added:\npublic class HttpHeadDemo {\n/**\n* HEAD() convenience method added\n*/\npublic static void main(String[] args) throws IOException,\nInterruptedException {\nHttpRequest head =\nHttpRequest.newBuilder(URI.create(\"https://api.github.com/\"))\n.HEAD()\n.build();\nvar response = HttpClient.newHttpClient().send(head,\nHttpResponse.BodyHandlers.ofString());\nprint(response);\n}\n}\nReimplement Core Reflection with Method Handles: This\nreimplementation aims to improve performance and stability of\nreflection functionalities.\nDeprecate Finalization for Removal: Finalization, intended for\nresource cleanup, has inherent drawbacks. Its deprecation paves the\nway for safer and more reliable alternatives.\nJava 19 Features\nEither preview or incubator features:\nOracle Releases Java 19",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 383,
          "text": "New release delivers seven JDK Enhancement Proposals to increase\ndeveloper productivity, improve the Java language, and…\nwww.oracle.com\nJava 20 Features\nEither preview or incubator features:\nOracle Releases Java 20\nNew release delivers seven JDK Enhancement Proposals to increase\ndeveloper productivity, improve the Java language, and…\nwww.oracle.com\nJava 21 Features\n1.Virtual Threads:\nthis feature introduces lightweight threads that run on top of the\noperating system threads, aiming to simplify concurrent\nprogramming and improve performance for certain workloads.\nHere’s a simple demo showcasing virtual threads in Java 21:\nCreate Virtual Threads:\nThread vThread1 = Thread.ofVirtual().start(() -> {\nfor (int i = 0; i < 10; i++) {\nSystem.out.println(\"Virtual Thread 1: \" + i);\n}\n});\nThread vThread2 = Thread.ofVirtual().start(() -> {\nfor (int i = 0; i < 10; i++) {\nSystem.out.println(\"Virtual Thread 2: \" + i);\n}\n});\n2. Wait for Completion:\nvThread1.join();",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 384,
          "text": "vThread2.join();\nOutput:\nThis will interleave the outputs from both virtual threads,\ndemonstrating concurrent execution without the overhead of full OS\nthreads. You might see something like:\nVirtual Thread 1: 0\nVirtual Thread 2: 0\nVirtual Thread 1: 1\nVirtual Thread 2: 1\n...\nVirtual Thread 1: 9\nVirtual Thread 2: 9\nVirtual Thread Explanation:\nVirtual threads are lightweight units of execution that run on top of a\nsmaller pool of underlying OS threads. They offer several\nadvantages:\nLighter weight: Compared to OS threads, virtual threads have\nsignificantly lower creation and context switching costs.\nImproved concurrency: More virtual threads can be efficiently\nmanaged within a limited number of OS threads, allowing better\nutilization of resources for certain workloads.\nSimpler concurrency programming: Virtual threads eliminate the\nneed for complex thread management and synchronization, making\nconcurrent programming easier for developers.\nThe following is an example of virtual threads and a good contrast to\nOS/platform threads. The program uses the ExecutorService to\ncreate 10,000 tasks and waits for all of them to be completed.\nBehind the scenes, the JDK will run this on a limited number of\ncarrier and OS threads, providing you with the durability to write\nconcurrent code with ease.\ntry (var executor = Executors.newVirtualThreadPerTaskExecutor()) {",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 385,
          "text": "IntStream.range(0, 10_000).forEach(i -> {\nexecutor.submit(() -> {\nThread.sleep(Duration.ofSeconds(1));\nreturn i;\n});\n});\n}  // executor.close() is called implicitly, and waits\nRecord Patterns (Project Amber):\nRecords were introduced as a preview in Java 14, which also gave us\nJava enums. record is another special type in Java, and its purpose\nis to ease the process of developing classes that act as data carriers\nonly.\nIn JDK 21, record patterns and type patterns can be nested to\nenable a declarative and composable form of data navigation and\nprocessing.\n// To create a record:\nPublic record Todo(String title, boolean completed){}\n// To create an Object:\nTodo t = new Todo(“Learn Java 21”, false);\nBefore JDK 21, the entire record would need to be deconstructed to\nretrieve accessors.. However, now it is much more simplified to get\nthe values. For example:\nstatic void printTodo(Object obj) {\nif (obj instanceof Todo(String title, boolean completed)) {\nSystem.out.print(title);\nSystem.out.print(completed);\n}\n}",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 386,
          "text": "The other advantage of record patterns is also nested records and\naccessing them. An example from the JEP definition itself shows the\nability to get to the Point values, which are part of ColoredPoint,\nwhich is nested in a Rectangle. This makes it way more useful than\nbefore, when all the records needed to be deconstructed every time.\n// As of Java 21\nstatic void printColorOfUpperLeftPoint(Rectangle r) {\nif (r instanceof Rectangle(ColoredPoint(Point p, Color c),\nColoredPoint lr)) {\nSystem.out.println(c);\n}\n}\n2.Sequenced collections:\nIn JDK 21, a new set of collection interfaces are introduced to\nenhance the experience of using collections. For example, if one\nneeds to get a reverse order of elements from a collection,\ndepending on which collection is in use, it can be tedious. There can\nbe inconsistencies retrieving the encounter order depending on\nwhich collection is being used; for example, SortedSet implements\none, but HashSet doesn't, making it cumbersome to achieve this on\ndifferent data sets.\nTo fix this, the SequencedCollection interface aids the encounter\norder by adding a reverse method as well as the ability to get the\nfirst and the last elements. Furthermore, there are also\nSequencedMap and SequencedSet interfaces.\ninterface SequencedCollection<E> extends Collection<E> {\n// new method\nSequencedCollection<E> reversed();\n// methods promoted from Deque\nvoid addFirst(E);\nvoid addLast(E);",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 387,
          "text": "E getFirst();\nE getLast();\nE removeFirst();\nE removeLast();\n}\n3.String templates:\nString templates are a preview feature in JDK 21. However, it\nattempts to bring more reliability and better experience to String\nmanipulation to avoid common pitfalls that can sometimes lead to\nundesirable results, such as injections. Now you can write template\nexpressions and render them out in a String.\n// As of Java 21\nString name = \"Ajay\"\nString greeting = \"Hello \\{name}\";\nSystem.out.println(greeting);\nIn this case, the second line is the expression, and upon invoking, it\nshould render Hello Ajay. Furthermore, in cases where there is a\nchance of illegal Strings—for example, SQL statements or HTML that\ncan cause security issues—the template rules only allow escaped\nquotes and no illegal entities in HTML documents.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 388,
          "text": "CHAPTER 16: KAFKA\nExplain the producer & consumer-based architecture of\nKafka.\nKafka is a distributed streaming platform that is designed to handle\nhigh-throughput, real-time data feeds. The architecture of Kafka is\nbased on the producer and consumer model, which allows for\nefficient data ingestion and consumption.\nIn the producer and consumer model of Kafka, data is produced by\none or more producers and sent to Kafka, which acts as a\ncentralized data hub. The data is then consumed by one or more\nconsumers, which can be part of the same or different applications.\nHere's how the producer and consumer-based architecture of Kafka\nworks:\nProducers: Producers are applications or components that generate\ndata and send it to Kafka. Producers publish data to Kafka topics,\nwhich act as channels or streams that can be subscribed to by\nconsumers. Producers can send data in batches or one record at a\ntime, and can also control the partitioning and keying of the data.\nKafka Broker: Kafka brokers are the core components of the Kafka\nsystem. They store and manage the data that is produced by the\nproducers, and make it available for consumption by the consumers.\nKafka brokers are distributed and can be scaled horizontally to\nhandle large amounts of data.\nTopics: Topics are logical channels or streams of data in Kafka. Each\ntopic is partitioned into one or more partitions, and each partition is\nreplicated across multiple Kafka brokers for fault tolerance.\nProducers publish data to topics, and consumers subscribe to one or\nmore topics to receive the data.\nConsumers: Consumers are applications or components that read\nand process data from Kafka. Consumers can be part of the same or",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 389,
          "text": "different applications as the producers, and can consume data in\nreal-time or in batches. Consumers can also control the offset of the\ndata they consume, allowing them to start from a specific point in a\ntopic.\nConsumer Groups: Consumers can be organized into consumer\ngroups, which allows for parallel processing of data. Each consumer\ngroup has one or more consumers that consume data from one or\nmore partitions of a topic. The partitions are assigned to the\nconsumers in the group dynamically, based on the workload and\navailability of the consumers.\nOverall, the producer and consumer-based architecture of Kafka\nprovides a scalable and fault-tolerant way of processing large\namounts of data in real-time. It allows for decoupling of data\nproducers and consumers, and provides parallel processing and\nfault-tolerance through partitioning and replication.\nHow to persist data directly from Kafka topic.is it possible or\nnot?\nYes, it is possible to persist data directly from a Kafka topic. There\nare a few ways to do this, depending on your use case and\nrequirements.\nOne way to persist data from a Kafka topic is to use a Kafka\nconsumer to read data from the topic and write it to a database or\nfile system. This can be done using a Kafka consumer application\nthat reads data from the topic and writes it to a file or database.\nAnother way to persist data from a Kafka topic is to use Kafka\nConnect, which is a framework for streaming data between Kafka\nand other data systems. Kafka Connect can be used to move data\nfrom a Kafka topic to a database or other storage system, and can\nalso be used to move data from a database or other storage system\nto a Kafka topic.\nKafka Connect provides pre-built connectors for popular data storage\nsystems like HDFS, Amazon S3, and Elasticsearch, as well as\nconnectors for JDBC-compliant databases. Kafka Connect can be",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 390,
          "text": "configured to read data from a Kafka topic and write it to a database\nor other storage system in real-time, providing a way to persist data\nfrom Kafka directly to storage.\nAdditionally, some databases have their own Kafka connectors that\nallow you to persist data directly to the database from a Kafka topic.\nFor example, Confluent provides a Kafka connector for PostgreSQL\nthat can be used to write data from Kafka to a PostgreSQL database.\nIn summary, it is possible to persist data directly from a Kafka topic\nusing a Kafka consumer, Kafka Connect, or a database-specific Kafka\nconnector. The best approach depends on your specific use case and\nrequirements.\nWhat is offset in Kafka?\nIf any consumer fails or crashed and then comes alive after\nsome time, then can it continue consuming the messages?\nIn Kafka, an offset is a unique identifier that represents the position\nof a consumer within a partition of a topic. The offset is used to\ntrack the progress of a consumer, allowing it to continue reading\nmessages from where it left off, even if it fails or crashes.\nWhen a consumer reads messages from a Kafka topic, it keeps track\nof the last offset it has consumed for each partition it is subscribed\nto. This offset is periodically committed to a special topic called the\n\"consumer_offsets\" topic, which is used to persist the offset\ninformation for all consumer groups.\nIf a consumer fails or crashes, and then comes alive after some\ntime, it can continue consuming messages from the last committed\noffset for each partition it is subscribed to. When the consumer\nrestarts, it retrieves the last committed offset for each partition from\nthe \"__consumer_offsets\" topic and starts consuming messages\nfrom that point.\nKafka provides two types of offset management: automatic and\nmanual. With automatic offset management, the consumer's offset is\nautomatically committed to the \"__consumer_offsets\" topic at\nregular intervals, or when a batch of messages has been processed.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 391,
          "text": "With manual offset management, the consumer is responsible for\nexplicitly committing the offset after processing a batch of\nmessages.\nIn summary, offsets are used in Kafka to track the progress of a\nconsumer and allow it to continue reading messages from where it\nleft off, even if it fails or crashes. This provides fault tolerance and\nenables real-time data processing in distributed systems.\nWhat is consumer offset?\nIn Kafka, the \"consumer_offsets\" topic is a special internal topic that\nis used to store the committed offsets of a consumer group. The\nconsumer group is a group of one or more consumers that work\ntogether to consume messages from one or more partitions of a\ntopic.\nEach consumer in a consumer group keeps track of its own offset,\nwhich represents the position of the last message it has processed in\neach partition it is consuming. These offsets are periodically\ncommitted to the \"consumer_offsets\" topic, which serves as a\ncentralized store for the committed offsets of all consumers in the\ngroup.\nBy using the \"consumer_offsets\" topic, Kafka enables consumers to\nresume reading from their last known offset, even if they have been\nrestarted, moved to a different machine, or joined/removed from the\nconsumer group. This provides fault tolerance and scalability,\nallowing consumers to consume messages in parallel and distribute\nthe load across multiple machines.\nThe \"consumer_offsets\" topic is managed by the Kafka broker and is\nreplicated across all brokers in the cluster to ensure availability and\nreliability. It is also subject to retention policies and cleanup rules,\nwhich determine how long the offset information should be retained\nand when it should be deleted.\nIn summary, the \"consumer_offsets\" topic in Kafka is a special\ninternal topic that stores the committed offsets of a consumer group.\nIt enables consumers to resume reading from their last known",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 392,
          "text": "offset, provides fault tolerance and scalability, and is managed by\nthe Kafka broker.\nHow to configure the Kafka details?\nConfiguring Kafka involves setting up various components and\nparameters, such as broker settings, topic settings, producer\nsettings, and consumer settings. Here are some of the steps to\nconfigure Kafka:\nInstall Kafka: First, you need to download and install Kafka. You can\ndownload Kafka from the Apache Kafka website or from a cloud\nprovider like Confluent or Amazon Web Services (AWS).\nStart ZooKeeper: Kafka uses Apache ZooKeeper to manage the\nbrokers and the distributed state of the cluster. You need to start\nZooKeeper first before starting Kafka. You can start ZooKeeper using\nthe command bin/zookeeper-server-start.sh\nconfig/zookeeper.properties.\nConfigure Kafka broker settings: The broker is the main component\nof Kafka that stores and manages messages in the topics. You need\nto configure various settings for the broker, such as the broker ID,\nport, log directories, and replication factors. The broker settings are\ndefined in the config/server.properties file.\nCreate a Kafka topic: A Kafka topic is a category or feed name to\nwhich messages are published. You need to create a topic before\nproducing and consuming messages. You can create a topic using\nthe bin/kafka-topics.sh script.\nConfigure Kafka producer settings: The producer is the component\nthat produces messages to Kafka topics. You can configure various\nsettings for the producer, such as the topic name, compression type,\nand batch size. The producer settings are defined in the producer\ncode or in a configuration file.\nConfigure Kafka consumer settings: The consumer is the component\nthat consumes messages from Kafka topics. You can configure\nvarious settings for the consumer, such as the topic name, group ID,",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 393,
          "text": "auto commit interval, and offset reset policy. The consumer settings\nare defined in the consumer code or in a configuration file.\nStart Kafka: Once you have configured the necessary components\nand parameters, you can start Kafka using the command bin/kafka-\nserver-start.sh config/server.properties.\nThese are the basic steps to configure Kafka. Depending on your use\ncase and requirements, you may need to configure additional\nsettings or use additional components, such as Kafka Connect, Kafka\nStreams, or Kafka Schema Registry.\nHow to determine the replication factor?\nThe replication factor is an important configuration parameter in\nKafka that determines how many copies of each partition should be\nmaintained across the brokers in a Kafka cluster. Choosing the right\nreplication factor is critical for ensuring data availability and fault\ntolerance in the event of a broker failure or network outage.\nHere are some guidelines for determining the appropriate replication\nfactor for your Kafka deployment:\nConsider the number of available brokers: The replication factor\nshould not exceed the number of available brokers in your Kafka\ncluster. For example, if you have three brokers, you can set the\nreplication factor to 2 or 3, but not 4.\nConsider the desired level of fault tolerance: A higher replication\nfactor provides greater fault tolerance and availability, but also\nincreases the amount of storage and network traffic required to\nmaintain the replicas. You should balance the desired level of fault\ntolerance with the cost and complexity of maintaining additional\nreplicas.\nConsider the throughput and latency requirements: A higher\nreplication factor can also impact the throughput and latency of your\nKafka cluster. Additional replicas can increase the network traffic and\nintroduce additional processing overhead, which can affect the\nperformance of the cluster.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 394,
          "text": "Consider the retention period of data: If you need to retain data for\na long period of time, you may want to increase the replication\nfactor to ensure that the data is not lost in the event of a broker\nfailure or network outage.\nIn general, a replication factor of 2 or 3 is recommended for most\nKafka deployments. This provides a good balance between fault\ntolerance, storage requirements, and performance. However, you\nshould adjust the replication factor based on your specific\nrequirements and the characteristics of your Kafka cluster.\nWhich annotation is used to enable Kafka?\nIn Spring Boot, the @EnableKafka annotation is used to enable\nKafka support. This annotation is typically placed on a configuration\nclass and it will register a KafkaListenerContainerFactory and a\nKafkaTemplate bean.\nFor example, you can create a configuration class like this:\n@Configuration\n@EnableKafka\npublic class KafkaConfig {\n@Bean\npublic ProducerFactory<String, String> producerFactory() {\nMap<String, Object> config = new HashMap<>();\nconfig.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,\n\"localhost:9092\");\nconfig.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,\nStringSerializer.class);\nconfig.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFI\nG, StringSerializer.class);\nreturn new DefaultKafkaProducerFactory<>(config);\n}\n@Bean",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 395,
          "text": "public KafkaTemplate<String, String> kafkaTemplate() {\nreturn new KafkaTemplate<>(producerFactory());\n}\n}\nThis configuration class will enable the Kafka support in your Spring\nBoot application and it also creates a KafkaTemplate bean that you\ncan use to send messages to a Kafka topic.\nAlso, you should have kafka and zookeeper running on your local\nmachine or on the server.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 396,
          "text": "CHAPTER 17: MISCELLANEOUS\nKUBERNETS/DOCKER:\nWhat is the difference between a container and a virtual\nmachine?\nContainers and virtual machines (VMs) are both ways to run\napplications in isolated environments, but they differ in their\napproach, level of isolation, and resource usage.\nA container is a lightweight, portable environment that packages an\napplication and its dependencies into a single unit. Containers share\nthe same operating system kernel and are isolated from other\ncontainers and the host operating system. Containers provide a\nconsistent and reproducible way to deploy and run applications,\nwhile also allowing for efficient resource usage and fast start-up\ntimes.\nIn contrast, a virtual machine is a complete operating system and\nhardware abstraction that runs on top of a hypervisor. VMs have\ntheir own virtualized hardware, such as CPU, memory, storage, and\nnetwork interfaces, and they can run their own operating system\nand applications. VMs provide strong isolation and security, as each\nVM runs independently of the host operating system and other VMs.\nHowever, this also means that they require more resources and have\nslower startup times.\nHere are some key differences between containers and virtual\nmachines:\nOverhead: Containers have lower overhead, as they share the same\noperating system kernel and can be deployed more efficiently. VMs\nhave higher overhead, as they require a full operating system and\nvirtualized hardware.\nResource usage: Containers are more efficient in their use of\nresources; as multiple containers can run on the same operating",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 397,
          "text": "system kernel. VMs require more resources, as each VM has its own\nvirtualized hardware and operating system.\nPortability: Containers are more portable, as they can be moved\neasily between different environments that support the container\nruntime. VMs can be more challenging to move between different\nvirtualization platforms or between physical servers.\nIsolation: Containers provide weaker isolation, as they share the\nsame operating system kernel and resources. VMs provide stronger\nisolation, as each VM has its own operating system and virtualized\nhardware.\nStart-up time: Containers start up much faster than VMs, as they\ndon't need to boot up an entire operating system.\nIn summary, containers and virtual machines are both useful tools\nfor running applications in isolated environments, but they have\ndifferent strengths and weaknesses. Containers are more\nlightweight, efficient, and portable, while VMs provide stronger\nisolation and security but require more resources. The choice\nbetween the two will depend on the specific requirements of the\napplication and the environment in which it will be deployed.\nDifferences between Dockerization and Virtualisation?\nDockerization and virtualization are both ways to run software\napplications in isolated environments, but they differ in their\napproach and level of isolation.\nVirtualization involves running a complete operating system on top\nof a virtual machine (VM) hypervisor. This allows multiple VMs to run\non a single physical server, each with its own operating system and\nresources. Each VM can host its own applications and dependencies,\nand these are isolated from the host operating system and other\nVMs on the same physical server.\nDockerization, on the other hand, involves running applications in\ncontainers, which are lightweight and portable environments that\nshare the host operating system kernel. Containers allow developers\nto package an application and its dependencies into a single unit",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 398,
          "text": "that can run on any machine that has Docker installed. Each\ncontainer is isolated from other containers and from the host\noperating system, but they all share the same kernel.\nHere are some key differences between Dockerization and\nVirtualization:\nOverhead: Virtualization requires more overhead, as it runs a\ncomplete operating system on top of the hypervisor. Dockerization\nhas less overhead, as it only runs the application and its\ndependencies in the container.\nResource usage: Virtualization typically uses more resources, as each\nVM has its own operating system and resources. Dockerization is\nmore efficient in its use of resources, as multiple containers can run\non the same operating system kernel.\nPortability: Dockerization provides greater portability, as containers\ncan be moved easily between different environments that have\nDocker installed. Virtualization requires more effort to move VMs\nbetween different virtualization platforms or between physical\nservers.\nIsolation: Virtualization provides stronger isolation, as each VM has\nits own operating system and resources. Dockerization provides\nweaker isolation, as containers share the host operating system\nkernel and resources.\nStartup time: Docker containers start up much faster than virtual\nmachines, as they don't need to boot up an entire operating system.\nIn summary, Dockerization is a more lightweight and efficient way to\nrun applications in an isolated environment, whereas virtualization\nprovides stronger isolation but requires more overhead and\nresources. The choice between the two will depend on the specific\nrequirements of the application and the environment in which it will\nbe deployed.\nWhat is a pod in Kubernetes?\nIn Kubernetes, a pod is the smallest and simplest unit in the\nKubernetes object model. It represents a single instance of a",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 399,
          "text": "running process in a cluster. A pod can contain one or more\ncontainers that share the same network namespace and are\nscheduled together on the same node.\nA pod is a logical host for one or more containers, and it provides a\nshared environment for those containers to run in. Containers within\na pod can communicate with each other using local hostnames and\nports, and they can share the same storage volumes.\nPods are designed to be ephemeral, meaning that they can be\ncreated, scaled, and destroyed dynamically in response to changes\nin demand or failure conditions. When a pod is created, Kubernetes\nassigns it a unique IP address and hostname, and it schedules the\npod to run on a specific node in the cluster. The pod remains on that\nnode until it is deleted or rescheduled by Kubernetes.\nPods are usually not deployed directly in Kubernetes, but rather as\npart of a higher-level deployment or replica set. These higher-level\nobjects define the desired state of the pods and manage their\ncreation, scaling, and termination.\nPods are an important abstraction in Kubernetes, as they enable the\ndeployment and management of containerized applications in a\nconsistent and scalable way. They provide a unit of deployment and\nscaling that is easy to manage and automate, while also providing\nisolation and resource constraints for running containers.\nCan we write j-units for static methods?\nYes, it is possible to write JUnit tests for static methods.\nJUnit is a testing framework that is commonly used in Java\napplications to write and run automated tests. One of the features of\nJUnit is the ability to write tests for static methods.\nTo write a JUnit test for a static method, you can use the @Test\nannotation and call the static method directly from the test method\nJUNIT/ UNIT Testing",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 400,
          "text": "How to resolve this Mockito exception “Mockito cannot mock\nthis class”?\nThe \"Mockito cannot mock this class\" exception can occur when\ntrying to mock a class that Mockito cannot create a mock for.\nMockito can only mock classes that are non-final and have a visible\nconstructor.\nHere are a few reasons why you might be getting this exception:\nThe class is final: Mockito cannot create mocks of final classes. You\ncan either remove the \"final\" modifier from the class, or use a\ndifferent mocking library that supports mocking final classes, such as\nPowerMock or JMockit.\nThe class or constructor is private: Mockito needs to be able to\ncreate an instance of the class using a visible constructor. If the\nconstructor is private, you can use the PowerMockito library to mock\nthe constructor.\nThe class is a primitive or a final class from the java.lang package:\nMockito cannot mock primitives or final classes from the java.lang\npackage, such as String or Integer. You can use a real instance of\nthese classes or a test double like a spy instead of a mock.\nThe class is loaded by a different class loader: If the class is loaded\nby a different class loader than the test class, Mockito may not be\nable to create a mock of the class. You can try adding the class to\nthe test classpath or use a different mocking library that supports\nmocking classes loaded by different class loaders.\nThe class is an interface: If the class is an interface, you should use\nthe Mockito.mock() method instead of Mockito.mock(class).\nIn general, if you are getting the \"Mockito cannot mock this class\"\nexception, it is a sign that you may need to refactor your code or\nyour test in order to make it more testable. You may also want to\nconsider using a different mocking library that supports mocking the\nspecific class or scenario you are working with.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 401,
          "text": "What is binary search tree?\nA binary search tree is a type of binary tree in which each node has\nat most two child nodes, and each node's value is greater than or\nequal to all the values in its left subtree and less than or equal to all\nthe values in its right subtree.\nBinary search trees are useful data structures for storing and\nsearching large sets of data efficiently. They are often used in\ncomputer science applications such as database indexing, file system\norganization, and network routing algorithms.\nInserting a new value into a binary search tree involves traversing\nthe tree from the root node to a leaf node, comparing the value to\nbe inserted with the value of each node along the way, and choosing\nthe appropriate child node to continue the traversal. Searching for a\nvalue in a binary search tree follows a similar process, starting at the\nroot node and traversing the tree until the desired value is found or\nit is determined that the value is not in the tree.\nThe efficiency of binary search trees is determined by their height,\nor the number of levels in the tree. A well-balanced binary search\ntree has a height of log(n), where n is the number of nodes in the\ntree. This allows for efficient searching and insertion operations, as\nthe number of nodes that need to be visited is minimized. However,\nan unbalanced binary search tree can have a worst-case height of n,\nmaking operations much less efficient. Therefore, algorithms for\nbalancing binary search trees, such as AVL trees and Red-Black\ntrees, have been developed to ensure efficient performance.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        }
      ],
      "qa_pairs": [],
      "qa_count": 0,
      "code_blocks_total": 5,
      "tables_total": 14
    },
    {
      "name": "JPA Questions",
      "path": "2024_Top 30 JPA Interview Questions (2024) - javatpoint.pdf",
      "category": "interview",
      "type": "technical",
      "metadata": {
        "title": "Top 30 JPA Interview Questions (2024) - javatpoint",
        "author": "",
        "page_count": 28,
        "file_size_kb": 2958.58203125
      },
      "pages": [
        {
          "page_number": 1,
          "text": "Advertisement\nPAYONEER\nAll Interview\nGửi & nhận\nInterview Tips\nthanh toán\nJOB/HR Interview\nCompetency Interview\ntoàn cầu\nBusiness Analyst\nBehavioral Interview\nKhám phá giải pháp thanh\nInterview Questions and Answers\ntoán quốc tế hàng đầu\ncùng với Payoneer\nCompany Interview\nCompany Interview\nIBM Interview\nInfosys Interview\nCapgemini Interview\nCognizant Interview\nMở\nWipro Interview\nAccenture Interview\niGate Interview\nTCS Interview\nHCL Interview\nAdobe Interview\nMicrosoft Interview\nDXC Technology Interview\nEricsson Interview",
          "tables": [
            [
              [
                "",
                null
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 2,
          "text": "EXL Service Interview\nIndiaMART Interview\nIntuit Interview\nSpaceX Interview\nAdvertisement\nSapient Interview\nAdvertisement\nAd\nAdvertisement\nPayoneer\nMỞ\nThanh toán nhanh và bảo mật\nThanh toán nhanh và bảo mật\nPayoneer Mở\nJPA Interview Questions\nA  list  of  top  frequently  asked  JPA  interview  questions\nand answers are given below:\n1) What is the Java Persistence API?\nThe  Java  Persistence  API  (JPA)  is  the  speci\u0000cation  of\nJava  that  is  used  to  persist  data  between  Java  object\nand relational database. JPA acts as a bridge between\nobject-oriented domain models and relational database\nsystems. As JPA is just a speci\u0000cation, it doesn't perform\nany  operation  by  itself.  It  requires  an  implementation.\nTherefore, ORM tools like Hibernate, TopLink, and iBatis\nimplements JPA speci\u0000cations for data persistence. The\n\u0000rst  version  of  the  Java  Persistence  API,  JPA  1.0  was\nreleased in 2006 as a part of EJB 3.0 speci\u0000cation.",
          "tables": [
            [
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                "",
                "",
                "",
                null
              ],
              [
                null,
                null,
                "",
                "",
                "Ad",
                "",
                null
              ],
              [
                null,
                null,
                "",
                "",
                "",
                "",
                null
              ],
              [
                null,
                null,
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                "",
                null,
                ""
              ],
              [
                "",
                "Payoneer",
                "",
                "",
                "",
                null,
                ""
              ],
              [
                "",
                "Thanh toán nhanh và bảo mật",
                "",
                "",
                "MỞ",
                null,
                ""
              ],
              [
                "",
                "",
                "",
                "",
                "",
                null,
                ""
              ],
              [
                null,
                null,
                "",
                "",
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                "",
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                "",
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                "",
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 3,
          "text": "2) Does JPA performs the actual task\nlike access, persist and manage data?\nNo,  JPA  is  only  a  speci\u0000cation.  The  ORM  tools  like\nHibernate,  iBatis,  and  TopLink  implements  the  JPA\nspeci\u0000cation and perform these type of tasks.\nAdvertisement\n3) What is the object-relational\nmapping?\nThe object-relational mapping is a mechanism which is\nused to develop and maintain a relationship between an\nobject  and  the  relational  database  by  mapping  an\nobject  state  into  the  database  column.  It  converts\nattributes  of  programming  code  into  columns  of  the\ntable.  It  is  capable  of  handling  various  database\noperations  easily  such  as  insertion,  updation,  deletion,\netc.\nAdvertisement\n4) What are the advantages of JPA?\nThe advantages of JPA are given below.",
          "tables": [
            [
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 4,
          "text": "The  burden  of  interacting  with  the  database\nreduces signi\u0000cantly by using JPA.\nThe  user  programming  becomes  easy  by\nconcealing  the  O/R  mapping  and  database\naccess processing.\nAdvertisement\nThe  cost  of  creating  the  de\u0000nition  \u0000le  is\nreduced by using annotations.\nWe can merge the applications used with other\nJPA providers\nUsing  different  implementations  can  add  the\nfeatures to the standard Implementation which\ncan later be the part of JPA speci\u0000cation.\n5) What are the embeddable classes?\nEmbeddable classes represent the state of an entity but\ndo  not  have  a  persistent  identity  of  their  own.  The\nobjects  of  such  classes  share  the  identity  of  the  entity\nclasses that owns it. An Entity may have single-valued or\nmultivalued embeddable class attributes.\n6) List some ORM frameworks.\nFollowing are the various frameworks that function on\nORM mechanism: -\nHibernate\nTopLink\nORMLite\niBATIS\nJPOX\n7) What is the JPQL?\nJPQL is the Java Persistence query language de\u0000ned in\nJPA speci\u0000cation. It is used to construct the queries.",
          "tables": [
            [
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 5,
          "text": "8) What are the steps to persist an\nentity object?\nThe  following  steps  are  performed  to  persist  an  entity\nobject.\nCreate  an  entity  manager  factory  object.  The\nAdvertisement\nEntityManagerFactory  interface  present  in \njava.persistence package is used to provide an\nentity manager.\n\nHomeEntityMPaynthaognerFactoJrayv aemf=PJearvsaisStcernipcte.creatHeTML SQL PHP C# C++\nEntityManagerFactory(\"Student_details\");  \nObtain an entity manager from the factory.\nEntityManager em=emf.createEntityManager()\n;  \nInitialize an entity manager.\nem.getTransaction().begin();  \nPersist the data into the relational database.\nem.persist(s1);  \nClosing the transaction\nem.getTransaction().commit();  \nRelease the factory resources.\nemf.close();  ",
          "tables": [
            [
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                "factory object. The",
                null,
                null,
                null,
                null,
                "",
                "Advertisement",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                "",
                "",
                "",
                null,
                null,
                "",
                "",
                null,
                null,
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                "er",
                "fa",
                "ce present in",
                null,
                null,
                "",
                "",
                null,
                null,
                "",
                "",
                "",
                "",
                "",
                ""
              ],
              [
                null,
                null,
                null,
                null,
                "",
                "",
                "",
                null,
                null,
                "",
                "",
                null,
                null,
                "",
                "",
                "",
                "",
                "",
                ""
              ],
              [
                null,
                null,
                null,
                null,
                "",
                "",
                "",
                null,
                null,
                "",
                "",
                null,
                null,
                "",
                "",
                "",
                "",
                "",
                ""
              ],
              [
                null,
                null,
                null,
                null,
                "used to provide an",
                null,
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null,
                null,
                "",
                "",
                "",
                "",
                "",
                "",
                null,
                null,
                "",
                null,
                null,
                null
              ],
              [
                "meEn",
                "tityMPaynthaogner",
                "FactoJrayv ae",
                "mf=PJearvsaisStcernipcte.",
                null,
                null,
                null,
                "creatHeT",
                "M",
                "L",
                "",
                "SQL",
                "PHP",
                null,
                null,
                "C#",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null,
                null,
                "",
                "",
                "",
                "",
                "",
                "",
                null,
                null,
                "",
                null,
                null,
                null
              ],
              [
                "EntityManagerFactory(\"Student_details\");",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "EntityManager em=emf.createEntityManager()",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                ";",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "em.getTransaction().begin();",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "em.persist(s1);",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "em.getTransaction().commit();",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "emf.close();",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 6,
          "text": "    em.close();  \nAdvertisement\nAdvertisement\nGửi & nhận thanh toán toàn cầu\nNâng tầm doanh nghiệp với nền tảng thanh toán quốc tế toàn\ndiện. Trải nghiệm ngay.\nPayoneer Mở\n9) What are the steps to insert an\nentity?\nWe can easily insert the data into the database through\nthe entity. The EntityManager provides persist() method\nto add records. The following steps are used to insert the\nrecord into the database.\nAdvertisement\nAdvertisement\nAd\nThanh toán nhanh và bảo mật\nPayoneer Mở\nCreate  an  entity  class,  for  example,\nAdvertisement\nStudent.java with the attribute student_name.\npackage com.javatpoint.jpa.student;  \nimport javax.persistence.*;  ",
          "tables": [
            [
              [
                null,
                "em.close();",
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                "",
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                "",
                null,
                "",
                null,
                null,
                null,
                "",
                "Advertiseme",
                null,
                null,
                null
              ],
              [
                "",
                null,
                "",
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                null,
                "Gửi & nhận thanh toán to",
                null,
                null,
                null,
                "à",
                "n cầu",
                null,
                null,
                null
              ],
              [
                "",
                null,
                "",
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                null,
                "Nâng tầm doanh nghiệp với nền tảng thanh",
                null,
                null,
                null,
                "to",
                "án quốc tế toàn",
                null,
                null,
                null
              ],
              [
                "",
                null,
                "",
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                null,
                "diện. Trải nghiệm ngay.",
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                null,
                "",
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                null,
                "Payoneer",
                null,
                null,
                "",
                "",
                "Mở",
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                "",
                null,
                "",
                "",
                null,
                "",
                null
              ],
              [
                null,
                null,
                null,
                "",
                "",
                null,
                "",
                "",
                null,
                "",
                null
              ],
              [
                null,
                null,
                null,
                "Ad",
                "",
                null,
                "",
                "",
                "",
                "",
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null,
                "",
                "",
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "Thanh toán nhanh và bảo mật",
                null,
                null,
                "",
                "",
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null,
                "",
                "",
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "Payoneer",
                null,
                null,
                "",
                "",
                "Mở",
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                null,
                null,
                null,
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                "package com.javatpoint.jpa.student;",
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                "",
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null,
                null
              ],
              [
                null,
                "import javax.persistence.*;",
                null,
                null,
                null,
                "",
                "",
                null,
                null,
                null,
                null
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 7,
          "text": "Ad\n@Entity\n@Table(name=\"student\")  \npublic class Student {  \n@Id\nAdvertisement\nprivate String s_name;  \nThanh toán nhanh và bảo mật\npublic StudentEntity(String s_name) {  \nPayoneer Mở\nsuper();  \nthis.s_name = s_name;  \n    }  \npublic StudentEntity() {  \nsuper();  \n    }  \npublic String getS_name() {  \nreturn s_name;  \n    }  \npublic void setS_name(String s_name) {  \nthis.s_name = s_name;  \n    }  \n}  \nNow, map the entity class and other databases\ncon\u0000guration in Persistence.xml \u0000le.\n<persistence>  \n<persistence-unit name=\"Student_details\">  \n    <class>com.javatpoint.jpa.student.StudentE\nntity</class>  \n<properties>  \n<property name=\"javax.persistence.jdbc.driver\"\n value=\"com.mysql.jdbc.Driver\"/>  \n<property name=\"javax.persistence.jdbc.url\" va\nlue=\"jdbc:mysql://localhost:3306/studentdata\"/",
          "tables": [
            [
              [
                "",
                "",
                "",
                "",
                "Ad",
                ""
              ],
              [
                "",
                "",
                "",
                "",
                "",
                ""
              ],
              [
                "@Entity",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "@Table(name=\"student\")",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "public class Student {",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "@Id",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "private String s_name;",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "public StudentEntity(String s_name) {",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "super();",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "this.s_name = s_name;",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "}",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "public StudentEntity() {",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "super();",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "}",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "public String getS_name() {",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "return s_name;",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "}",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "public void setS_name(String s_name) {",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "this.s_name = s_name;",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "}",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "}",
                "",
                "",
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null
              ],
              [
                "<persistence>",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "<persistence-unit name=\"Student_details\">",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "<class>com.javatpoint.jpa.student.StudentE",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "ntity</class>",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "<properties>",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "<property name=\"javax.persistence.jdbc.driver\"",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "value=\"com.mysql.jdbc.Driver\"/>",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "<property name=\"javax.persistence.jdbc.url\" va",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "lue=\"jdbc:mysql://localhost:3306/studentdata\"/",
                "",
                "",
                null,
                null,
                null
              ]
            ]
          ],
          "code_blocks": [
            "}",
            "}",
            "}",
            "}",
            "<class>com.javatpoint.jpa.student.StudentE"
          ],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 8,
          "text": ">  \n<property  name=\"javax.persistence.jdbc.user\"\nvalue=\"root\"/>  \n<property name=\"javax.persistence.jdbc.passw\nord\" value=\"\"/>  \n<property  name=\"eclipselink.logging.level\"  val\nAdvertisement\nue=\"SEVERE\"/>  \n<property  name=\"eclipselink.ddl-\ngeneration\" value=\"create-or-extend-tables\"/>  \n</properties>  \n    </persistence-unit>  \n</persistence>  \nCreate  a  persistence  class  named  as\nPersistStudent.java  under\ncom.javatpoint.jpa.persist  package  to  persist\nthe entity object with data\npackage com.javatpoint.jpa.persist;  \nimport com.javatpoint.jpa.student.*;  \nimport javax.persistence.*;  \npublic class PersistStudent {  \npublic static void main(String args[])  \n    {  \n        EntityManagerFactory emf=Persistence.cr\neateEntityManagerFactory(\"Student_details\");  \n        EntityManager em=emf.createEntityMana\nger();  \nem.getTransaction().begin();  \n        StudentEntity s1=new StudentEntity();  \n        s1.setS_name(\"Gaurav\");  \n        em.persist(s1);  \n        em.getTransaction().commit();  \n        emf.close();  ",
          "tables": [
            [
              [
                ">",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"javax.persistence.jdbc.user\"",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "value=\"root\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"javax.persistence.jdbc.passw",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "ord\" value=\"\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"eclipselink.logging.level\" val",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "ue=\"SEVERE\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"eclipselink.ddl-",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "generation\" value=\"create-or-extend-tables\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "</properties>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "</persistence-unit>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "</persistence>",
                "",
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                "package com.javatpoint.jpa.persist;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "import com.javatpoint.jpa.student.*;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "import javax.persistence.*;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public class PersistStudent {",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public static void main(String args[])",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "{",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "EntityManagerFactory emf=Persistence.cr",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "eateEntityManagerFactory(\"Student_details\");",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "EntityManager em=emf.createEntityMana",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "ger();",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "em.getTransaction().begin();",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "StudentEntity s1=new StudentEntity();",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "s1.setS_name(\"Gaurav\");",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "em.persist(s1);",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "em.getTransaction().commit();",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "emf.close();",
                "",
                ""
              ]
            ]
          ],
          "code_blocks": [
            "</persistence-unit>",
            "{  \n        EntityManagerFactory emf=Persistence.cr",
            "EntityManager em=emf.createEntityMana",
            "StudentEntity s1=new StudentEntity();  \n        s1.setS_name(\"Gaurav\");  \n        em.persist(s1);  \n        em.getTransaction().commit();  \n        emf.close();"
          ],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 9,
          "text": "        em.close();  \n    }  \n}  \n10) What are the steps to \u0000nd an entity?\nAdvertisement\nTo \u0000nd an entity, EntityManger interface provides \u0000nd()\nmethod that searches an element by the primary key.\nThe  following  steps  are  used  to  \u0000nd  an  entity  in  the\nrecord.\nCreate  an  entity  class  named  as\nStudentEntity.java  under\ncom.javatpoint.jpa.student  package  that\ncontains attributes s_name.\npackage com.javatpoint.jpa.student;  \nimport javax.persistence.*;  \n@Entity\n@Table(name=\"student\")  \npublic class StudentEntity {  \n@Id\nprivate String s_name;  \nprivate int s_id;  \npublic StudentEntity(String s_name, int s_id\n) {  \nsuper();  \nthis.s_name = s_name;  \nthis.s_id = s_id;  \n    }  \npublic StudentEntity() {  \nsuper();  \n    }  \npublic String getS_id() {  \nreturn s_id;  ",
          "tables": [
            [
              [
                "em.close();",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                "package com.javatpoint.jpa.student;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "import javax.persistence.*;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "@Entity",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "@Table(name=\"student\")",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public class StudentEntity {",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "@Id",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "private String s_name;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "private int s_id;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public StudentEntity(String s_name, int s_id",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                ") {",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "super();",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "this.s_name = s_name;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "this.s_id = s_id;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public StudentEntity() {",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "super();",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public String getS_id() {",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "return s_id;",
                "",
                ""
              ]
            ]
          ],
          "code_blocks": [
            "}",
            "}",
            "}"
          ],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 10,
          "text": "    }  \npublic void setS_id(int s_id) {  \nthis.s_name = s_id;  \n    }  \npublic String getS_name() {  \nAdvertisement\nreturn s_name;  \n    }  \npublic void setS_name(String s_name) {  \nthis.s_name = s_name;  \n    }  \n}  \nNow, map the entity class and other databases\ncon\u0000guration in Persistence.xml \u0000le.\n<persistence>  \n<persistence-unit name=\"Student_details\">  \n    <class>com.javatpoint.jpa.student.StudentE\nntity</class>  \n<properties>  \n<property name=\"javax.persistence.jdbc.driver\"\n value=\"com.mysql.jdbc.Driver\"/>  \n<property name=\"javax.persistence.jdbc.url\" va\nlue=\"jdbc:mysql://localhost:3306/studentdata\"/\n>  \n<property  name=\"javax.persistence.jdbc.user\"\nvalue=\"root\"/>  \n<property name=\"javax.persistence.jdbc.passw\nord\" value=\"\"/>  \n<property  name=\"eclipselink.logging.level\"  val\nue=\"SEVERE\"/>  \n<property  name=\"eclipselink.ddl-\ngeneration\" value=\"create-or-extend-tables\"/>  \n</properties>  ",
          "tables": [
            [
              [
                "}",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public void setS_id(int s_id) {",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "this.s_name = s_id;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public String getS_name() {",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "return s_name;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public void setS_name(String s_name) {",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "this.s_name = s_name;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                "<persistence>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<persistence-unit name=\"Student_details\">",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<class>com.javatpoint.jpa.student.StudentE",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "ntity</class>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<properties>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"javax.persistence.jdbc.driver\"",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "value=\"com.mysql.jdbc.Driver\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"javax.persistence.jdbc.url\" va",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "lue=\"jdbc:mysql://localhost:3306/studentdata\"/",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                ">",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"javax.persistence.jdbc.user\"",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "value=\"root\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"javax.persistence.jdbc.passw",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "ord\" value=\"\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"eclipselink.logging.level\" val",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "ue=\"SEVERE\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"eclipselink.ddl-",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "generation\" value=\"create-or-extend-tables\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "</properties>",
                "",
                ""
              ]
            ]
          ],
          "code_blocks": [
            "}",
            "}",
            "}",
            "<class>com.javatpoint.jpa.student.StudentE"
          ],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 11,
          "text": "    </persistence-unit>   Advertisement\nAd\n</persistence>  \nCreate  a  persistence  class  named  as\nAdvertisement\nFindStudent.java  under  com.javatpoint.jpa.\nFind  the  package  to  persist  the  entity  object\nwith data. Thanh toán nhanh và bảo mật\nPayoneer Mở\npackage com.javatpoint.jpa.\u0000nd;  \nimport javax.persistence.*;  \nAdvertisement\nimport com.javatpoint.jpa.student.*;  \nAd\npublic class FindStudent {  \npublic static void main(String args[])  \n    {  \n        EntityManagerFactory emf=Persistence.cr\neateEntityManagerFactory(\"Student_details\");  \n        EntityManager em=emf.createEntityMana\nThanh toán nhanh và bảo mật\nger();  \nPayoneer Mở\n        StudentEntity s=em.\u0000nd(StudentEntity.cla\nss,101);  \n        System.out.println(\"Student id = \"+s.getS_i\nd());  \n        System.out.println(\"Student Name = \"+s.ge\ntS_name());  \n        System.out.println(\"Student Age = \"+s.getS\n_age());  \n    }  \n}  ",
          "tables": [
            [
              [
                "</persistence-unit>",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                "",
                ""
              ],
              [
                "</persistence>",
                "",
                "",
                "",
                "Ad",
                ""
              ],
              [
                "",
                "",
                "",
                "",
                "",
                ""
              ],
              [
                null,
                null,
                "",
                "",
                null,
                null
              ],
              [
                null,
                null,
                "",
                "",
                null,
                null
              ],
              [
                null,
                null,
                "",
                "",
                null,
                null
              ],
              [
                null,
                null,
                "",
                "",
                null,
                null
              ],
              [
                null,
                null,
                "",
                "",
                null,
                null
              ],
              [
                null,
                null,
                "",
                "",
                null,
                null
              ],
              [
                null,
                null,
                "",
                "",
                null,
                null
              ],
              [
                null,
                null,
                "",
                "",
                null,
                null
              ],
              [
                null,
                null,
                "",
                "",
                null,
                null
              ],
              [
                null,
                null,
                "",
                "",
                null,
                null
              ],
              [
                null,
                null,
                "",
                "",
                null,
                null
              ],
              [
                "package com.javatpoint.jpa.\u0000nd;",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "import javax.persistence.*;",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "import com.javatpoint.jpa.student.*;",
                "",
                "",
                "",
                "",
                ""
              ],
              [
                "",
                "",
                "",
                "",
                "Ad",
                ""
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "public class FindStudent {",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "public static void main(String args[])",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "{",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "EntityManagerFactory emf=Persistence.cr",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "eateEntityManagerFactory(\"Student_details\");",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "EntityManager em=emf.createEntityMana",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "ger();",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "StudentEntity s=em.\u0000nd(StudentEntity.cla",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "ss,101);",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "System.out.println(\"Student id = \"+s.getS_i",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "d());",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "System.out.println(\"Student Name = \"+s.ge",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "tS_name());",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "System.out.println(\"Student Age = \"+s.getS",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "_age());",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "}",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null
              ],
              [
                "}",
                "",
                "",
                null,
                null,
                null
              ]
            ]
          ],
          "code_blocks": [
            "{  \n        EntityManagerFactory emf=Persistence.cr",
            "EntityManager em=emf.createEntityMana",
            "StudentEntity s=em.\u0000nd(StudentEntity.cla",
            "System.out.println(\"Student id = \"+s.getS_i",
            "System.out.println(\"Student Name = \"+s.ge",
            "System.out.println(\"Student Age = \"+s.getS",
            "}"
          ],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 12,
          "text": "11) What are the steps to update an\nentity?\nJPA allows us to change the records in the database by\nupdating  an  entity.  The  following  steps  are  to  be\nperformed to update the entity.\nAdvertisement\nCreate  an  entity  class  named  as\nStudentEntity.java  under\ncom.javatpoint.jpa.student  package,  that\ncontains attribute s_id and s_name.\nStudentEntity.java\npackage com.javatpoint.jpa.student;  \nimport javax.persistence.*;  \n@Entity\n@Table(name=\"student\")  \npublic class StudentEntity {  \n@Id\nprivate String s_name;  \nprivate int s_id;  \npublic StudentEntity(String s_name, int s_id\n) {  \nsuper();  \nthis.s_name = s_name;  \nthis.s_id = s_id;  \n    }  \npublic StudentEntity() {  \nsuper();  \n    }  \npublic String getS_id() {  \nreturn s_id;  \n    }  \npublic void setS_id(int s_id) {  ",
          "tables": [
            [
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                "package com.javatpoint.jpa.student;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "import javax.persistence.*;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "@Entity",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "@Table(name=\"student\")",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public class StudentEntity {",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "@Id",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "private String s_name;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "private int s_id;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public StudentEntity(String s_name, int s_id",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                ") {",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "super();",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "this.s_name = s_name;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "this.s_id = s_id;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public StudentEntity() {",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "super();",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public String getS_id() {",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "return s_id;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public void setS_id(int s_id) {",
                "",
                ""
              ]
            ]
          ],
          "code_blocks": [
            "}",
            "}",
            "}"
          ],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 13,
          "text": "this.s_name = s_id;  \n    }  \npublic String getS_name() {  \nreturn s_name;  \n    }  \nAdvertisement\npublic void setS_name(String s_name) {  \nthis.s_name = s_name;  \n    }  \n}  \nNow, map the entity class and other databases\ncon\u0000guration in Persistence.xml \u0000le.\nPersistence.xml\n<persistence>  \n<persistence-unit name=\"Student_details\">  \n    <class>com.javatpoint.jpa.student.StudentE\nntity</class>  \n<properties>  \n<property name=\"javax.persistence.jdbc.driver\"\n value=\"com.mysql.jdbc.Driver\"/>  \n<property name=\"javax.persistence.jdbc.url\" va\nlue=\"jdbc:mysql://localhost:3306/studentdata\"/\n>  \n<property  name=\"javax.persistence.jdbc.user\"\nvalue=\"root\"/>  \n<property name=\"javax.persistence.jdbc.passw\nord\" value=\"\"/>  \n<property  name=\"eclipselink.logging.level\"  val\nue=\"SEVERE\"/>  \n<property  name=\"eclipselink.ddl-\ngeneration\" value=\"create-or-extend-tables\"/>  \n</properties>  \n    </persistence-unit>  ",
          "tables": [
            [
              [
                "this.s_name = s_id;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public String getS_name() {",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "return s_name;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public void setS_name(String s_name) {",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "this.s_name = s_name;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                "<persistence>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<persistence-unit name=\"Student_details\">",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<class>com.javatpoint.jpa.student.StudentE",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "ntity</class>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<properties>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"javax.persistence.jdbc.driver\"",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "value=\"com.mysql.jdbc.Driver\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"javax.persistence.jdbc.url\" va",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "lue=\"jdbc:mysql://localhost:3306/studentdata\"/",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                ">",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"javax.persistence.jdbc.user\"",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "value=\"root\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"javax.persistence.jdbc.passw",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "ord\" value=\"\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"eclipselink.logging.level\" val",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "ue=\"SEVERE\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"eclipselink.ddl-",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "generation\" value=\"create-or-extend-tables\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "</properties>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "</persistence-unit>",
                "",
                ""
              ]
            ]
          ],
          "code_blocks": [
            "}",
            "}",
            "}",
            "<class>com.javatpoint.jpa.student.StudentE",
            "</persistence-unit>"
          ],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 14,
          "text": "</persistence>  \nCreate  a  persistence  class  named  as\nUpdateStudent.java  under\ncom.javatpoint.jpa.update  package  to  persist\nAdvertisement\nthe entity object with data.\nUpdateStudent.java\npackage com.javatpoint.jpa.update;  \nimport javax.persistence.*;  \nimport com.javatpoint.jpa.student.*;  \npublic class UpdateStudent {  \npublic static void main(String args[])  \n    {  \n        EntityManagerFactory emf=Persistence.cr\neateEntityManagerFactory(\"Student_details\");  \n        EntityManager em=emf.createEntityMana\nger();  \n        StudentEntity s=em.\u0000nd(StudentEntity.cla\nss,102);  \n        System.out.println(\"Before Updation\");  \n        System.out.println(\"Student Name = \"+s.ge\ntS_name());  \n        s.setName(\"Ayush\");  \n        System.out.println(\"After Updation\");  \n        System.out.println(\"Student Name = \"+s.ge\ntS_name());  \n    }  \n}  \n12) What are the steps to delete an\nentity?\nTo  delete  a  record  from  the  database,  EntityManager\ninterface  provides  remove()  method.  The  remove()\nmethod  uses  the  primary  key  to  delete  the  particular",
          "tables": [
            [
              [
                "</persistence>",
                "",
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                "package com.javatpoint.jpa.update;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "import javax.persistence.*;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "import com.javatpoint.jpa.student.*;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public class UpdateStudent {",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public static void main(String args[])",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "{",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "EntityManagerFactory emf=Persistence.cr",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "eateEntityManagerFactory(\"Student_details\");",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "EntityManager em=emf.createEntityMana",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "ger();",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "StudentEntity s=em.\u0000nd(StudentEntity.cla",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "ss,102);",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "System.out.println(\"Before Updation\");",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "System.out.println(\"Student Name = \"+s.ge",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "tS_name());",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "s.setName(\"Ayush\");",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "System.out.println(\"After Updation\");",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "System.out.println(\"Student Name = \"+s.ge",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "tS_name());",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ]
            ]
          ],
          "code_blocks": [
            "{  \n        EntityManagerFactory emf=Persistence.cr",
            "EntityManager em=emf.createEntityMana",
            "StudentEntity s=em.\u0000nd(StudentEntity.cla",
            "System.out.println(\"Before Updation\");  \n        System.out.println(\"Student Name = \"+s.ge",
            "s.setName(\"Ayush\");  \n        System.out.println(\"After Updation\");  \n        System.out.println(\"Student Name = \"+s.ge",
            "}"
          ],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 15,
          "text": "record. The following examples are to be performed to\ndelete an entity.\nCreate  an  entity  class  named  as\nStudentEntity.java  under\ncom.javatpoint.jpa.student  package  that\nAdvertisement\ncontains attribute s_id and s_name.\npackage com.javatpoint.jpa.student;  \nimport javax.persistence.*;  \n@Entity\n@Table(name=\"student\")  \npublic class StudentEntity {  \n@Id\nprivate int s_id;  \nprivate String s_name;   Advertisement\npublic StudentEntity(int s_id, String s_name\n) {  \nsuper();  \nthis.s_id = s_id;  \nthis.s_name = s_name;  \n    }  \npublic StudentEntity() {  \nsuper();  \n    }  \nAdvertisement\npublic int getS_id() {  \nreturn s_id;  \n    }  \n7% OFF\npublic void setS_id(int s_id) {  \nthis.s_id = s_id;  \n    }  \nSmart Tivi Toshiba Full\npublic String getS_name() {   HD 43 inch 43E31MP\nreturn s_name;  \n6.490.000₫ Mua ngay",
          "tables": [
            [
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                null,
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "package com.javatpoint.jpa.student;",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "import javax.persistence.*;",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "@Entity",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "@Table(name=\"student\")",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "public class StudentEntity {",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "@Id",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "private int s_id;",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "private String s_name;",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "public StudentEntity(int s_id, String s_name",
                "",
                "",
                "",
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                ") {",
                "",
                "",
                "",
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "super();",
                "",
                "",
                "",
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "this.s_id = s_id;",
                "",
                "",
                "",
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                "",
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "this.s_name = s_name;",
                "",
                "",
                "",
                null,
                "",
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                "",
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                "}",
                "",
                "",
                "",
                null,
                "",
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                "",
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                "public StudentEntity() {",
                "",
                "",
                "",
                null,
                "",
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                null,
                "",
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                "super();",
                "",
                "",
                "",
                null,
                "",
                null,
                "",
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "}",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                "",
                ""
              ],
              [
                "public int getS_id() {",
                "",
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                "",
                ""
              ],
              [
                "",
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "return s_id;",
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "}",
                "",
                "",
                "",
                "",
                null,
                "",
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                "",
                null,
                "7% OFF",
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "public void setS_id(int s_id) {",
                "",
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "this.s_id = s_id;",
                "",
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "}",
                "",
                "",
                "",
                "",
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                "",
                null,
                "",
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                "",
                null,
                "Smart Tivi",
                null,
                null,
                null,
                null,
                null
              ],
              [
                "public String getS_name() {",
                "",
                "",
                "",
                "",
                null,
                "HD 43 in",
                null,
                null,
                null,
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                "",
                null,
                "",
                null,
                null,
                null,
                null,
                null
              ],
              [
                "return s_name;",
                "",
                "",
                "",
                "",
                null,
                "",
                null,
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                "",
                null,
                "",
                null,
                "",
                "",
                null,
                null
              ],
              [
                "",
                "",
                "",
                "",
                "",
                null,
                "6.490.00",
                null,
                "0₫",
                "Mua ngay",
                null,
                null
              ]
            ]
          ],
          "code_blocks": [
            "}",
            "}",
            "}",
            "}"
          ],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 16,
          "text": "    }  \npublic void setS_name(String s_name) {  \nthis.s_name = s_name;  \n    }     \n}  \nAdvertisement\nNow, map the entity class and other databases\ncon\u0000guration in Persistence.xml \u0000le.\nPersistence.xml\n<persistence>  \n<persistence-unit name=\"Student_details\">  \n    <class>com.javatpoint.jpa.student.StudentE\nntity</class>  \n<properties>  \n<property name=\"javax.persistence.jdbc.driver\"\n value=\"com.mysql.jdbc.Driver\"/>  \n<property name=\"javax.persistence.jdbc.url\" va\nlue=\"jdbc:mysql://localhost:3306/studentdata\"/\n>  \n<property  name=\"javax.persistence.jdbc.user\"\nvalue=\"root\"/>  \n<property name=\"javax.persistence.jdbc.passw\nord\" value=\"\"/>  \n<property  name=\"eclipselink.logging.level\"  val\nue=\"SEVERE\"/>  \n<property  name=\"eclipselink.ddl-\ngeneration\" value=\"create-or-extend-tables\"/>  \n</properties>  \n    </persistence-unit>  \n</persistence>  \nDeletion.java",
          "tables": [
            [
              [
                "}",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "public void setS_name(String s_name) {",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "this.s_name = s_name;",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                "<persistence>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<persistence-unit name=\"Student_details\">",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<class>com.javatpoint.jpa.student.StudentE",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "ntity</class>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<properties>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"javax.persistence.jdbc.driver\"",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "value=\"com.mysql.jdbc.Driver\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"javax.persistence.jdbc.url\" va",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "lue=\"jdbc:mysql://localhost:3306/studentdata\"/",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                ">",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"javax.persistence.jdbc.user\"",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "value=\"root\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"javax.persistence.jdbc.passw",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "ord\" value=\"\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"eclipselink.logging.level\" val",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "ue=\"SEVERE\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "<property name=\"eclipselink.ddl-",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "generation\" value=\"create-or-extend-tables\"/>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "</properties>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "</persistence-unit>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "</persistence>",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                null,
                null,
                ""
              ]
            ]
          ],
          "code_blocks": [
            "}",
            "<class>com.javatpoint.jpa.student.StudentE",
            "</persistence-unit>"
          ],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 17,
          "text": "package com.javatpoint.jpa.delete;  \nimport javax.persistence.*;  \nimport com.javatpoint.jpa.student.*;  \npublic class DeleteStudent {  \nAdvertisement\npublic static void main(String args[])  \n    {  \n    EntityManagerFactory emf=Persistence.crea\nteEntityManagerFactory(\"Student_details\");  \n    EntityManager em=emf.createEntityManage\nr();  \nem.getTransaction().begin();  \n    StudentEntity s=em.\u0000nd(StudentEntity.class\n,102);  \nem.remove(s);  \nem.getTransaction().commit();  \nemf.close();  \nem.close();  \n    }  \n}  \n13) Insert a record mechanism using\nJPA?\n@Override\n@Transactional\npublic void create(Category entity) throws Meetin\ngAppDAOException {  \ntry {  \nlogger.info(\"Enter - create()\");  \nsuper.create(entity);  \nlogger.info(\"Exit - create()\");  \n} catch (PersistenceException exception) {  \nlogger.error(\"create()::REASON OF EXCEPTION=\" + \nexception.getMessage(), e);  ",
          "tables": [
            [
              [
                null,
                "package com.javatpoint.jpa.delete;",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "import javax.persistence.*;",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "import com.javatpoint.jpa.student.*;",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "public class DeleteStudent {",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "public static void main(String args[])",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "{",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "EntityManagerFactory emf=Persistence.crea",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "teEntityManagerFactory(\"Student_details\");",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "EntityManager em=emf.createEntityManage",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "r();",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "em.getTransaction().begin();",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "StudentEntity s=em.\u0000nd(StudentEntity.class",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                ",102);",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "em.remove(s);",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "em.getTransaction().commit();",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "emf.close();",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "em.close();",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "}",
                "",
                ""
              ],
              [
                null,
                "",
                "",
                ""
              ],
              [
                null,
                "}",
                "",
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                "",
                null,
                "",
                ""
              ],
              [
                "@Override",
                null,
                "",
                ""
              ],
              [
                "",
                null,
                "",
                ""
              ],
              [
                "@Transactional",
                null,
                "",
                ""
              ],
              [
                "",
                null,
                "",
                ""
              ],
              [
                "public void create(Category entity) throws Meetin",
                null,
                "",
                ""
              ],
              [
                "",
                null,
                "",
                ""
              ],
              [
                "gAppDAOException {",
                null,
                "",
                ""
              ],
              [
                "",
                null,
                "",
                ""
              ],
              [
                "try {",
                null,
                "",
                ""
              ],
              [
                "",
                null,
                "",
                ""
              ],
              [
                "logger.info(\"Enter - create()\");",
                null,
                "",
                ""
              ],
              [
                "",
                null,
                "",
                ""
              ],
              [
                "super.create(entity);",
                null,
                "",
                ""
              ],
              [
                "",
                null,
                "",
                ""
              ],
              [
                "logger.info(\"Exit - create()\");",
                null,
                "",
                ""
              ],
              [
                "",
                null,
                "",
                ""
              ],
              [
                "} catch (PersistenceException exception) {",
                null,
                "",
                ""
              ],
              [
                "",
                null,
                "",
                ""
              ],
              [
                "logger.error(\"create()::REASON OF EXCEPTION=\" +",
                null,
                "",
                ""
              ],
              [
                "",
                null,
                "",
                ""
              ],
              [
                "exception.getMessage(), e);",
                null,
                "",
                ""
              ]
            ]
          ],
          "code_blocks": [
            "{  \n    EntityManagerFactory emf=Persistence.crea",
            "EntityManager em=emf.createEntityManage",
            "StudentEntity s=em.\u0000nd(StudentEntity.class",
            "}"
          ],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 18,
          "text": "}  \n}  \n14) What are the different directions of\nAdvertisement\nentity mapping?\nThe direction of a mapping can be either unidirectional\nor  bidirectional.  In  unidirectional  mapping,  only  one\nentity  can  be  mapped  to  another  entity,  whereas  in\nbidirectional  mapping  each  entity  can  be  mapped  or\nreferred to another entity.\n15) What are the different types of\nentity mapping?\nFollowing are the types of object-relational mapping: -\nOne-to-one  mapping:  The  one-to-one\nmapping represents a single-valued association\nwhere  an  instance  of  one  entity  is  associated\nwith an instance of another entity. In this type\nof association, one instance of source entity can\nbe  mapped  with  at  most  one  instance  of  the\ntarget entity.\nOne-To-Many  mapping:  The  One-To-Many\nmapping comes into the category of collection-\nvalued association where an entity is associated\nwith a collection of other entities. In this type of\nassociation,  the  instance  of  one  entity  can  be\nmapped  with  any  number  of  instances  of\nanother entity.\nMany-to-one  mapping  The  Many-To-One\nmapping represents a single-valued association\nwhere a collection of entities can be associated\nwith  the  similar  entity.  In  the  relational\ndatabase,  more  than  one  row  of  an  entity  can\nrefer to the same row of another entity.",
          "tables": [
            [
              [
                "}",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "}",
                "",
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ],
              [
                null,
                null,
                ""
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 19,
          "text": "Many-to-many  mapping  The  Many-To-Many\nmapping  represents  a  collection-valued\nassociation  where  any  number  of  entities  can\nbe associated with a collection of other entities.\nIn  the  relational  database,  more  than  one  row\nAdvertisement\nof one entity can refer to more than one row of\nanother entity.\n16) What is an orphan removal in\nmappings?\nIf a target entity in one-to-one or one-to-many mapping\nis removed from the mapping, then remove operation\ncan  be  cascaded  to  the  target  entity.  Such  target\nentities are known as orphans, and the orphanRemoval\nattribute can be used to specify that orphaned entities\nshould be removed.\n17) Explain persistence life cycle of an\nobject?\nIn persistence life cycle, the object lies in the following\nstates: -\nAdvertisement\nTransient  -  The  object  is  called  to  be  in  the\ntransient state when it is just declared by using\nthe  new  keyword.  When  an  object  remains  in",
          "tables": [
            [
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 20,
          "text": "the  transient  state,  it  doesn't  contain  any\nidenti\u0000er(primary key) in the database.\nPersistence  -  In  this  state,  an  object  is\nassociated with the session and either saved to\na  database  or  retrieved  from  the  database.\nAdvertisement\nWhen  an  object  remains  in  the  persistence Advertisement\nstate,  It  contains  a  row  of  the  database  and\nconsists of an identi\u0000er value. We can make an\nobject  persistent  by  associating  it  with  the\nhibernate session.\nDetached  -  The  object  enters  into  a  detached\nstate when the hibernate session is closed. The\nchanges made to the detached objects are not\nsaved to the database.\n18) What are the different types of\nidenti\u0000er generation?\nFollowing  are  the  types  of  id  generation  strategy\nrequired to specify with @GeneratedValue annotation: -\nAutomatic  Id  generation  -  In  this  case,  the\napplication  doesn't  care  about  the  kind  of  id\ngeneration  and  hand  over  this  task  to  the\nprovider.  If  any  value  is  not  speci\u0000ed  explicitly,\nthe generation type defaults to auto.\nId generation using a table - The identi\u0000ers can\nalso be generated using a database table.\nId  generation  using  a  database  sequence  -\nDatabases  support  an  internal  mechanism  for\nid  generation  called  sequences.  To  customize\nthe database sequence name, we can use the\nJPA @SequenceGenerator annotation.\nId generation using a database identity - In this\napproach,  whenever  a  row  is  inserted  into  the\ntable,  a  unique  identi\u0000er  is  assigned  to  the\nidentity  column  that  can  be  used  to  generate\nthe identi\u0000ers for the objects.",
          "tables": [
            [
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                ""
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ],
              [
                "",
                null
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 21,
          "text": "19) What is an entity?\nThe entity is a group of states associated together in a\nsingle unit. An entity behaves as an object and becomes\na major constituent of the object-oriented paradigm. In\nother words, we can say that an entity is an application-\nAdvertisement\nde\u0000ned  object  in  the  Java  Persistence  Library.  Each\nentity is associated with the metadata which represents\nits information in the form of XML or annotation.\n20) What are the properties of an\nentity?\nFollowing are the properties of an entity that an object\nmust have: -\nPersistability: An object is called persistent if it\nis stored in the database and can be accessed\nanytime.\nPersistent  Identity:  In  Java,  each  entity  is\nunique  and  represents  an  object  identity.\nSimilarly, when the object identity is stored in a\ndatabase, then it is represented as persistence\nidentity. This object identity is equivalent to the\nprimary key in the database.\nTransactionality: In Java, each entity is unique\nand  represents  an  object  identity.  Similarly,",
          "tables": [
            [
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 22,
          "text": "when the object identity is stored in a database,\nthen  it  is  represented  as  persistence  identity.\nThis object identity is equivalent to the primary\nkey in the database.\nGranularity:  Entities  should  not  be  primitives,\nAdvertisement\nprimitive  wrappers  or  built-in  objects  with\nsingle dimensional state.\nAdvertisement\nGửi & nhận thanh toán toàn cầu\nNâng tầm doanh nghiệp với nền tảng thanh toán quốc tế toàn\ndiện. Trải nghiệm ngay.\nPayoneer Mở\n21) What is the role of Entity Manager in\nJPA?\nAn  entity  manager  is  responsible  for  the  following\noperations.\nThe  entity  manager  implements  the  API  and\nencapsulates  all  of  them  within  a  single\ninterface.\nThe entity manager is used to read, delete and\nwrite an entity.\nAn  object  referenced  by  an  entity  is  managed\nby entity manager.\n22) What are the constraints on an\nentity class?\nAn entity class must ful\u0000ll the following requirements:",
          "tables": [
            [
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                "",
                null,
                null,
                "",
                null,
                null
              ],
              [
                "",
                "Gửi & nhận thanh toán to",
                null,
                "à",
                "n cầu",
                null
              ],
              [
                "",
                "",
                null,
                "",
                "",
                null
              ],
              [
                "",
                "Nâng tầm doanh nghiệp với nền tảng thanh",
                null,
                "to",
                "án quốc tế toàn",
                null
              ],
              [
                "",
                "",
                null,
                "",
                "",
                null
              ],
              [
                "",
                "diện. Trải nghiệm ngay.",
                null,
                "",
                "",
                null
              ],
              [
                "",
                "",
                null,
                "",
                "",
                null
              ],
              [
                "",
                "Payoneer",
                "",
                "",
                "Mở",
                ""
              ],
              [
                "",
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ],
              [
                null,
                null,
                null,
                "",
                null,
                null
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 23,
          "text": "The  class  must  have  a  no-argument\nconstructor.\nThe class can't be \u0000nal.\nThe  class  must  be  annotated  with  @Entity\nAdvertisement\nannotation.\nThe  class  must  implement  a  Serializable\ninterface if value passes an empty instance as a\ndetached object.\n23) What is the purpose of Java\ncollections in JPA?\nIn JPA, Java collections are used to persist the object of\nwrapper classes and String.\n24) What type of objects can be stored\nin the JPA collections mapping?\nFollowing  are  the  type  of  objects  that  JPA  allows  to\nstore: -\nBasic Types\nEntities\nEmbeddable",
          "tables": [
            [
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 24,
          "text": "25) What type of collections can be\nused in JPA?\nTo store multivalued entity associations and a collection\nof objects, following types of Java collections is used: -\nList\nAdvertisement\nSet\nMap\n26) What is the purpose of cascading\noperations in JPA?\nIf we apply any task to one entity then using cascading\noperations, we make it applicable to its related entities\nalso.\n27) What are the types of cascade\nsupported by JPA?\nFollowing is the list of cascade type: -\nPERSIST: In this cascade operation, if the parent\nentity is persisted then all its related entity will\nalso be persisted.\nMERGE: In this cascade operation, if the parent\nentity is merged, then all its related entity will\nalso be merged.\nDETACH: In this cascade operation, if the parent\nentity is detached, then all its related entity will\nalso be detached.\nREFRESH: In this cascade operation, if the\nparent entity is refreshed, then all its related\nentity will also be refreshed.\nREMOVE: In this cascade operation, if the parent\nentity is removed, then all its related entity will\nalso be removed.\nALL In this case, all the above cascade\noperations can be applied to the entities related\nto the parent entity.",
          "tables": [
            [
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 25,
          "text": "28) What is JPQL?\nThe Java Persistence Query language (JPQL) is a part of\nJPA  speci\u0000cation  that  de\u0000nes  searches  against\npersistence  entities.  It  is  an  object-oriented  query\nlanguage which is used to perform database operations\nAdvertisement\non  persistent  entities.  Instead  of  the  database  table,\nJPQL  uses  entity  object  model  to  operate  the  SQL\nqueries. Here, the role of JPA is to transform JPQL into\nSQL. Thus, it provides an easy platform for developers to\nhandle  SQL  tasks.  JPQL  is  an  extension  of  Entity\nJavaBeans Query Language (EJBQL).\n29) What are the features of JPQL?\nSome of the essential features of JPQL are: -\nIt is simple and robust.\nIt is a platform-independent query language.\nJPQL  queries  can  be  declared  statically  into\nmetadata  or  can  also  be  dynamically  built  in\ncode.\nIt  can  be  used  with  any  database  such  as\nMySQL, Oracle.\n30) What is the Criteria API?",
          "tables": [
            [
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 26,
          "text": "The Criteria API is a speci\u0000cation that provides type-safe\nand  portable  criteria  queries  written  using  Java\nprogramming  language  APIs.  It  is  one  of  the  most\ncommon ways of constructing queries for entities and\ntheir persistent state. It is just an alternative method for\nde\u0000ning  JPA  queries.  Criteria  API  de\u0000nes  a  platform-\nAdvertisement\nindependent  criteria  queries,  written  in  Java\nprogramming  language.  It  was  introduced  in  JPA  2.0.\nThe main purpose behind this is to provide a type-safe\nway to express a query.\nSEO Interview HTML Interview\nQuestions Questions\nPL/SQL Interview SQL Interview\nQuestions Questions\nOracle Interview Android Interview\nQuestions Questions\nSQL Server Interview MySQL Interview\nQuestions Questions\nJava Basics Interview Java OOPs Interview\nQuestions Questions\nSpring Interview Hibernate Interview\nQuestions Questions",
          "tables": [
            [
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                null,
                null,
                null,
                ""
              ],
              [
                "SEO Interview",
                "HTML Interview",
                "",
                ""
              ],
              [
                "",
                "",
                "",
                ""
              ],
              [
                "Questions",
                "Questions",
                "",
                ""
              ],
              [
                "",
                "",
                "",
                ""
              ],
              [
                "PL/SQL Interview",
                "SQL Interview",
                "",
                ""
              ],
              [
                "",
                "",
                "",
                ""
              ],
              [
                "Questions",
                "Questions",
                "",
                ""
              ],
              [
                "",
                "",
                "",
                ""
              ],
              [
                "Oracle Interview",
                "Android Interview",
                "",
                ""
              ],
              [
                "",
                "",
                "",
                ""
              ],
              [
                "Questions",
                "Questions",
                "",
                ""
              ],
              [
                "",
                "",
                "",
                ""
              ],
              [
                "SQL Server Interview",
                "MySQL Interview",
                "",
                ""
              ],
              [
                "",
                "",
                "",
                ""
              ],
              [
                "Questions",
                "Questions",
                "",
                ""
              ],
              [
                "",
                "",
                "",
                ""
              ],
              [
                "Java Basics Interview",
                "Java OOPs Interview",
                "",
                ""
              ],
              [
                "",
                "",
                "",
                ""
              ],
              [
                "Questions",
                "Questions",
                "",
                ""
              ],
              [
                "",
                "",
                "",
                ""
              ],
              [
                "Spring Interview",
                "Hibernate Interview",
                "",
                ""
              ],
              [
                "",
                "",
                "",
                ""
              ],
              [
                "Questions",
                "Questions",
                "",
                ""
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 27,
          "text": "Advertisement\nLatest Courses\n ",
          "tables": [
            [
              [
                "",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        },
        {
          "page_number": 28,
          "text": "Advertisement",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 612,
            "height": 792
          }
        }
      ],
      "qa_pairs": [],
      "qa_count": 0,
      "code_blocks_total": 48,
      "tables_total": 27
    },
    {
      "name": "Pivotal Quiz",
      "path": "GOOD_Quiz_2015_Iuliana Cosmina_Pivotal Certified Spring Web Application Developer Exam-Apress.pdf",
      "category": "quiz",
      "type": "assessment",
      "metadata": {
        "title": "",
        "author": "",
        "page_count": 433,
        "file_size_kb": 10907.4599609375
      },
      "pages": [
        {
          "page_number": 1,
          "text": "www.apress.com\nCosmina  \nPivotal Certifi ed Spring Web Application Developer Exam\nFOR PROFESSIONAL S BY PROFESSIONAL S® THE EXPERT’S VOICE® IN SPRING\nPivotal Certifi ed Spring Web Application Developer Exam Related Titles\nPivotal Certified \nThe  Pivotal  Certified  Spring  Web  Application  Developer  Exam:  A  Study  Guide  is  the  ideal \n preparation for the Pivotal Certifi ed Spring Web Application Developer Exam. It covers the \nfollowing:  Spring  MVC  DispatcherServlet  configuration,  Spring  MVC  programming  model \n essentials, Spring MVC views and form processing, Spring Web Flow essentials, and Spring \nWeb Flow actions and configuration.  \nSpring Web \nWhen you become a Pivotal Certified Spring Web Application Developer, you’ll receive one \nof  the  most  valuable  credentials  available  in  enterprise  Java.  Achieving  this  certification \n demonstrates your ability to apply Spring’s web projects to develop real-world Java web \n applications and validates your familiarity with Spring Web.\nApplication \nAfter reading and using this study guide, you‘ll be able to pass the certification exam and \nbecome a certified Spring Web Developer.\n•  How to use the Spring Framework to develop Web applications\n• How to use Spring Web Flow to implement stateful interactions\n•  How to secure Web applications with Spring Security Developer Exam\n•  How to test Web applications for correctness and performance\n•  How to create rich Web user interfaces with Ajax and JQuery\n•  How to use Spring Roo to create a Spring Web application in minutes\nA Study Guide\n—\nIuliana Cosmina\nISBN 978-1-4842-0809-0\nShelve in:\n54999\nProgramming Languages/Java\nUser level:\nIntermediate–Advanced\nSOURCE CODE ONLINE\n9 781484 208090",
          "tables": [
            [
              [
                "",
                "C",
                ""
              ],
              [
                "FOR PROFESSIONALS BY PROFESSIONALS®",
                "os",
                "THE EXPERT’S VOICE® IN SPRING"
              ]
            ],
            [
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ],
              [
                ""
              ]
            ],
            [
              [
                "",
                null,
                null
              ],
              [
                "ISBN 97",
                "8-1-4842-0809-0",
                null
              ],
              [
                "",
                "54",
                "999"
              ],
              [
                "",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "",
                "",
                ""
              ],
              [
                "9781484",
                "208090",
                ""
              ]
            ]
          ],
          "code_blocks": [],
          "dimensions": {
            "width": 504.05999999999995,
            "height": 720
          }
        },
        {
          "page_number": 2,
          "text": "Pivotal Certified Spring \nWeb Application \nDeveloper Exam\nA Study Guide\nIuliana Cosmina",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 3,
          "text": "Pivotal Certified Spring Web Application Developer Exam\nCopyright © 2015 by Iuliana Cosmina\nThis work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part of the \nmaterial is concerned, specifically the rights of translation, reprinting, reuse of illustrations, recitation, \nbroadcasting, reproduction on microfilms or in any other physical way, and transmission or information \nstorage and retrieval, electronic adaptation, computer software, or by similar or dissimilar methodology now \nknown or hereafter developed. Exempted from this legal reservation are brief excerpts in connection with \nreviews or scholarly analysis or material supplied specifically for the purpose of being entered and executed \non a computer system, for exclusive use by the purchaser of the work. Duplication of this publication or \nparts thereof is permitted only under the provisions of the Copyright Law of the Publisher’s location, in its \ncurrent version, and permission for use must always be obtained from Springer. Permissions for use may be \nobtained through RightsLink at the Copyright Clearance Center. Violations are liable to prosecution under \nthe respective Copyright Law.\nISBN-13 (pbk): 978-1-4842-0809-0\nISBN-13 (electronic): 978-1-4842-0808-3\nTrademarked names, logos, and images may appear in this book. Rather than use a trademark symbol with \nevery occurrence of a trademarked name, logo, or image we use the names, logos, and images only in an \neditorial fashion and to the benefit of the trademark owner, with no intention of infringement of the trademark.\nThe use in this publication of trade names, trademarks, service marks, and similar terms, even if they are \nnot identified as such, is not to be taken as an expression of opinion as to whether or not they are subject to \nproprietary rights.\nWhile the advice and information in this book are believed to be true and accurate at the date of publication, \nneither the authors nor the editors nor the publisher can accept any legal responsibility for any errors or \nomissions that may be made. The publisher makes no warranty, express or implied, with respect to the \nmaterial contained herein.\nManaging Director: Welmoed Spahr\nLead Editor: Steve Anglin\nTechnical Reviewer: Manuel Jordan Elera\nEditorial Board: Steve Anglin, Louise Corrigan, James T. DeWolf, Jonathan Gennick,  \nRobert Hutchinson, Michelle Lowman, James Markham, Susan McDermott, Matthew Moodie, \nJeffrey Pepper, Douglas Pundick, Ben Renow-Clarke, Gwenan Spearing\nCoordinating Editor: Mark Powers\nCopy Editor: Kimberly Burton\nCompositor: SPi Global\nIndexer: SPi Global\nArtist: SPi Global\nDistributed to the book trade worldwide by Springer Science+Business Media New York,  \n233 Spring Street, 6th Floor, New York, NY 10013. Phone 1-800-SPRINGER, fax (201) 348-4505, e-mail \norders-ny@springer-sbm.com, or visit www.springeronline.com. Apress Media, LLC is a California LLC \nand the sole member (owner) is Springer Science + Business Media Finance Inc (SSBM Finance Inc). SSBM \nFinance Inc is a Delaware corporation. \nFor information on translations, please e-mail rights@apress.com, or visit www.apress.com. \nApress and friends of ED books may be purchased in bulk for academic, corporate, or promotional use. \neBook versions and licenses are also available for most titles. For more information, reference our Special \nBulk Sales–eBook Licensing web page at www.apress.com/bulk-sales.\nAny source code or other supplementary material referenced by the author in this text is available to readers \nat www.apress.com/9781484208090. For detailed information about how to locate your book’s source \ncode, go to www.apress.com/source-code/. Readers can also access source code at SpringerLink in the \nSupplementary Material section for each chapter.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 4,
          "text": "To all passionate Java developers, never stop learning and never stop improving your skills. \nTo all my friends for supporting me to make this book happen;  \nyou have no idea how dear you are to me.",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 5,
          "text": "Contents at a Glance\nAbout the Author ��������������������������������������������������������������������������������������������������� xiii\nAbout the Technical Reviewer ���������������������������������������������������������������������������������xv\nAcknowledgments �������������������������������������������������������������������������������������������������xvii\nIntroduction ������������������������������������������������������������������������������������������������������������xix\n■ Chapter 1: Introduction ����������������������������������������������������������������������������������������� 1\n■ Chapter 2: Spring Fundamentals ������������������������������������������������������������������������� 17\n■ Chapter 3: Spring MVC ���������������������������������������������������������������������������������������� 53\n■ Chapter 4: Spring Portlets ��������������������������������������������������������������������������������� 151\n■ Chapter 5: Spring RESTful Services ������������������������������������������������������������������� 189\n■ Chapter 6: Spring Web with AJAX ��������������������������������������������������������������������� 229\n■ Chapter 7: Spring Web Flow ������������������������������������������������������������������������������ 257\n■ Chapter 8: Spring Boot and WebSocket ������������������������������������������������������������� 367\n■ Appendix: Resources and Quiz Answers ����������������������������������������������������������� 401\nIndex ��������������������������������������������������������������������������������������������������������������������� 417\nv",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 6,
          "text": "Contents\nAbout the Author ��������������������������������������������������������������������������������������������������� xiii\nAbout the Technical Reviewer ���������������������������������������������������������������������������������xv\nAcknowledgments �������������������������������������������������������������������������������������������������xvii\nIntroduction ������������������������������������������������������������������������������������������������������������xix\n■ Chapter 1: Introduction ����������������������������������������������������������������������������������������� 1\nSpring and What It Does ��������������������������������������������������������������������������������������������������� 1\nThe Focus of this Study Guide ������������������������������������������������������������������������������������������ 4\nWho Should Use this Study Guide ������������������������������������������������������������������������������������ 5\nAbout the Spring Web Certification Exam������������������������������������������������������������������������� 5\nHow to Use this Study Guide �������������������������������������������������������������������������������������������� 6\nHow this Book Is Structured �������������������������������������������������������������������������������������������������������������������7\nHow Each Chapter Is Structured �������������������������������������������������������������������������������������������������������������7\nConventions ��������������������������������������������������������������������������������������������������������������������������������������������8\nDownloading the Code ����������������������������������������������������������������������������������������������������������������������������8\nContacting the Author �����������������������������������������������������������������������������������������������������������������������������8\nRecommended Development Environment ���������������������������������������������������������������������� 8\nRecommended Build Tools ���������������������������������������������������������������������������������������������������������������������9\nRecommended IDE �������������������������������������������������������������������������������������������������������������������������������10\nThe Project Sample ������������������������������������������������������������������������������������������������������������������������������11\nvii",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 7,
          "text": "■ Contents\n■ Chapter 2: Spring Fundamentals ������������������������������������������������������������������������� 17\nThe Basics ���������������������������������������������������������������������������������������������������������������������� 17\nThe Spring Core Container ��������������������������������������������������������������������������������������������� 19\nSpring Configuration ������������������������������������������������������������������������������������������������������ 21\nXML �������������������������������������������������������������������������������������������������������������������������������������������������������21\nAnnotations �������������������������������������������������������������������������������������������������������������������������������������������25\nMixed Approach ������������������������������������������������������������������������������������������������������������������������������������26\nThe Beans ���������������������������������������������������������������������������������������������������������������������� 27\nLifecycle and Instantiation ��������������������������������������������������������������������������������������������������������������������27\nBean Scopes �����������������������������������������������������������������������������������������������������������������������������������������35\nAccessing Beans ����������������������������������������������������������������������������������������������������������������������������������38\nSpring AOP ��������������������������������������������������������������������������������������������������������������������� 41\nTesting Spring Applications �������������������������������������������������������������������������������������������� 44\nSummary ������������������������������������������������������������������������������������������������������������������������ 45\nQuick Quiz ���������������������������������������������������������������������������������������������������������������������� 46\nPractical Exercise ����������������������������������������������������������������������������������������������������������� 46\n■ Chapter 3: Spring MVC ���������������������������������������������������������������������������������������� 53\nMVC Basics ��������������������������������������������������������������������������������������������������������������������� 53\nConfiguring MVC ������������������������������������������������������������������������������������������������������������� 55\nXML Configuration ��������������������������������������������������������������������������������������������������������������������������������56\nConfiguration Using Annotations ����������������������������������������������������������������������������������������������������������61\nConfiguration Without Using web�xml ���������������������������������������������������������������������������������������������������64\nMVC Components ����������������������������������������������������������������������������������������������������������� 67\nInfrastructure Beans �����������������������������������������������������������������������������������������������������������������������������68\nUser-Provided Components ������������������������������������������������������������������������������������������������������������������94\nView Technologies �������������������������������������������������������������������������������������������������������� 109\nTiles Layouts ���������������������������������������������������������������������������������������������������������������������������������������110\nThymeleaf �������������������������������������������������������������������������������������������������������������������������������������������115\nviii",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 8,
          "text": "■ Contents\nForms ��������������������������������������������������������������������������������������������������������������������������� 119\nData Formatting ����������������������������������������������������������������������������������������������������������������������������������125\nData Binding ���������������������������������������������������������������������������������������������������������������������������������������129\nData Validation ������������������������������������������������������������������������������������������������������������������������������������132\nManaging the Form Object �����������������������������������������������������������������������������������������������������������������137\nSummary ���������������������������������������������������������������������������������������������������������������������� 138\nQuick Quiz �������������������������������������������������������������������������������������������������������������������� 139\nPractical Exercise ��������������������������������������������������������������������������������������������������������� 144\n■ Chapter 4: Spring Portlets ��������������������������������������������������������������������������������� 151\nPortlet Basics ��������������������������������������������������������������������������������������������������������������� 154\nConfiguration ���������������������������������������������������������������������������������������������������������������� 156\nThe XML Part of the Configuration ������������������������������������������������������������������������������� 157\nThe Annotation Part of the Configuration ��������������������������������������������������������������������� 164\nConfiguration Details and Recommendations �������������������������������������������������������������� 168\nThe Development and Deployment of a Portlet Application ����������������������������������������� 169\nDownload, Install, Start, and Configure Liferay �����������������������������������������������������������������������������������170\nSummary ���������������������������������������������������������������������������������������������������������������������� 188\n■ Chapter 5: Spring RESTful Services ������������������������������������������������������������������� 189\nCore REST Concepts ����������������������������������������������������������������������������������������������������� 189\nHATEOAS ���������������������������������������������������������������������������������������������������������������������� 195\nAdvantages of REST ����������������������������������������������������������������������������������������������������� 197\nRESTful Applications Using Spring MVC ����������������������������������������������������������������������� 199\nRESTful Clients with Spring ����������������������������������������������������������������������������������������������������������������199\nAsynchronous REST Calls �������������������������������������������������������������������������������������������������������������������203\nImplementing REST with Spring MVC �������������������������������������������������������������������������������������������������204\nAsynchronous REST Services Using @Async Annotated Methods �����������������������������������������������������213\nUsing Spring HATEOAS �����������������������������������������������������������������������������������������������������������������������216\nix",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 9,
          "text": "■ Contents\nSummary ���������������������������������������������������������������������������������������������������������������������� 220\nQuick Quiz �������������������������������������������������������������������������������������������������������������������� 221\nPractical Exercise ��������������������������������������������������������������������������������������������������������� 222\n■ Chapter 6: Spring Web with AJAX ��������������������������������������������������������������������� 229\nWhat Is AJAX? �������������������������������������������������������������������������������������������������������������� 229\nMaking AJAX Requests������������������������������������������������������������������������������������������������� 233\nIntroducing jQuery �������������������������������������������������������������������������������������������������������� 236\njQuery HTML DOM Manipulation ���������������������������������������������������������������������������������������������������������240\njQuery AJAX Calls �������������������������������������������������������������������������������������������������������������������������������243\nSpring MVC, AJAX, and jQuery �������������������������������������������������������������������������������������� 245\nUsing REST-Style Remoting with JSON ����������������������������������������������������������������������������������������������246\nCustom Tags ����������������������������������������������������������������������������������������������������������������� 250\nSummary ���������������������������������������������������������������������������������������������������������������������� 253\nQuick Quiz �������������������������������������������������������������������������������������������������������������������� 253\nPractical Exercise ��������������������������������������������������������������������������������������������������������� 254\n■ Chapter 7: Spring Web Flow ������������������������������������������������������������������������������ 257\nWhat Is a Flow? ������������������������������������������������������������������������������������������������������������ 257\nWeb Flow Architecture ������������������������������������������������������������������������������������������������� 259\nWeb Flow Internal Logic ����������������������������������������������������������������������������������������������� 261\nConfiguration and Infrastructure Beans ����������������������������������������������������������������������� 262\nConfiguration Using XML ��������������������������������������������������������������������������������������������������������������������263\nConfiguration Using Annotations ��������������������������������������������������������������������������������������������������������267\nCreate a Flow ��������������������������������������������������������������������������������������������������������������� 272\nFlow Definition ������������������������������������������������������������������������������������������������������������������������������������273\nAction States ��������������������������������������������������������������������������������������������������������������������������������������304\nDecision States ������������������������������������������������������������������������������������������������������������ 311\nException Handling ������������������������������������������������������������������������������������������������������� 312\nx",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 10,
          "text": "■ Contents\nSubflows ���������������������������������������������������������������������������������������������������������������������� 322\nFlow Definition Inheritance ������������������������������������������������������������������������������������������ 326\nSecuring Web Flows ����������������������������������������������������������������������������������������������������� 327\nIntroduction to Spring Security �����������������������������������������������������������������������������������������������������������327\nWhy Spring Security Is Awesome �������������������������������������������������������������������������������������������������������328\nSpring Security XML Configuration �����������������������������������������������������������������������������������������������������330\nSpring Security Java Configuration ����������������������������������������������������������������������������������������������������343\nSecuring Flow Definitions �������������������������������������������������������������������������������������������������������������������350\nSummary ���������������������������������������������������������������������������������������������������������������������� 357\nQuick Quiz �������������������������������������������������������������������������������������������������������������������� 358\nPractical Exercise ��������������������������������������������������������������������������������������������������������� 364\n■ Chapter 8: Spring Boot and WebSocket ������������������������������������������������������������� 367\nWhat Is Spring Boot? ���������������������������������������������������������������������������������������������������� 367\nUsage and Configuration ���������������������������������������������������������������������������������������������� 368\nCustomizing Spring Boot ��������������������������������������������������������������������������������������������������������������������373\nImporting Additional Configuration Elements �������������������������������������������������������������������������������������380\nRunning Spring Boot Applications ������������������������������������������������������������������������������������������������������381\nTesting Spring Boot Applications ��������������������������������������������������������������������������������������������������������383\nWebSocket Introduction ����������������������������������������������������������������������������������������������� 385\nSpring WebSocket Implementation ������������������������������������������������������������������������������ 386\nSpring WebSocket Configuration ���������������������������������������������������������������������������������� 390\nWebSocket Client Application ��������������������������������������������������������������������������������������� 392\nConfigure the Server Application to Send Scheduled Messages ��������������������������������������������������������397\nMonitoring and Debugging �����������������������������������������������������������������������������������������������������������������398\nxi",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 11,
          "text": "■ Contents\n■     A  ppendix: Resources and Quiz Answers ����������������������������������������������������������� 403\nStudy Guide Projects ���������������������������������������������������������������������������������������������������� 401\nGradle Configuration Explained ����������������������������������������������������������������������������������������������������������403\nBuilding and Troubleshooting �������������������������������������������������������������������������������������������������������������403\nDeploy on Apache Tomcat �������������������������������������������������������������������������������������������������������������������407\nQuiz Answers ���������������������������������������������������������������������������������������������������������������� 412\nQuiz Solution for Chapter 2 �����������������������������������������������������������������������������������������������������������������412\nQuiz Solution for Chapter 3 �����������������������������������������������������������������������������������������������������������������412\nQuiz Solution for Chapter 5 �����������������������������������������������������������������������������������������������������������������413\nQuiz Solution for Chapter 6 �����������������������������������������������������������������������������������������������������������������414\nQuiz Solution for Chapter 7 �����������������������������������������������������������������������������������������������������������������414\nIndex ��������������������������������������������������������������������������������������������������������������������� 417\nxii",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 12,
          "text": "About the Author\nIuliana Cosmina is a software engineer and professional developer. \nShe has been programming in Java for more than 10 years. She also \ntaught Java at the Gheorge Asachi Technical University in Iasi, Romania. \nShe has a Bachelor’s degree in computer science and a Master’s degree \nin distributed systems from the same university.\nShe discovered Spring in June 2012 and loved it so much she trained \nfor and passed the exam to become a Certified Spring Professional \nin November 2012. She trained for and passed the exam to become a \nCertified Web Application Developer in May 2014.\nHer plan is to become a Spring Enterprise Integration Specialist in the \nnear future.\nShe has contributed to the development of different types of \nenterprise applications such as search engines, ERPs, track and trace, and banking. During her career in \noutsourcing she has been a team leader, acting software architect and a DevOps professional. She likes \nto share her knowledge and expertise via tutoring, teaching, and mentoring, but in the summer of 2014 \neverything changed because of Steve Anglin, who approached her and gave her a chance to do it by writing \nthis guide. She lives in Sibiu, Romania and works as a software engineer for BearingPoint, a multinational \nmanagement and technology consulting company.\nWhen she is not programming, she spends her time reading, travelling, hiking, or biking.\n•\t You can find some of her personal work on her GitHub account:  \nhttps://github.com/iuliana.\n•\t You can find her complete CV on her LinkedIn account:  \nhttps://ro.linkedin.com/in/iulianacosmina.\n•\t You can contact her at: Iuliana.Cosmina@gmail.com.\nxiii",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 13,
          "text": "About the Technical Reviewer\nManuel Jordan Elera is an autodidactic developer and researcher who enjoys learning new technologies \nfor his own experiments and creating new integrations.\nManuel won the 2010 Springy Award – Community Champion and Spring Champion 2013. In his little \nfree time, he reads the Bible and composes music on his guitar. Manuel is known as dr_pompeii. He has tech \nreviewed numerous books for Apress, including Pro Spring, 4th Edition (2014), Practical Spring LDAP (2013), \nPro JPA 2, Second Edition (2013), and Pro Spring Security (2013).\nRead his thirteen detailed tutorials about many Spring technologies and contact him through his blog at \nhttp://www.manueljordanelera.blogspot.com and follow him on his Twitter account, @dr_pompeii.\nxv",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 14,
          "text": "Acknowledgments\nCreating this guide involved a lot of teamwork. It is the first time I’ve written a technical book and I  \nwouldn’t have made it without all the help and advice I received from Mark Powers, Matthew Moodie,  \nand Manuel Jordan. Mark has been very supportive and shared with me his experience on book writing in \norder to help me and kept encouraging me when I was ready to give up on writing because I thought my \nwork was not good enough.\nMatthew and Manuel have been great collaborators; I loved our exchanges of technical ideas and I am \nvery thankful because working with them has helped me grow professionally. Many thanks to Kimberly \nBurton for her help turning my technical literature into human readable literature.\nMost of all I want to thank Steve Anglin for finding me and for trusting me to get this done.\nApress has published many of the books I read and used to improve myself professionally during my \nstudies and even after that. It is a great honor for me to write a book and publish it with Apress. It is great to \ncontribute to the education of the next generation of developers. \nI am grateful to all my friends that had the patience to listen to me complain about sleep loss, having too \nmuch work to do, and writer’s block. Thank you all for being supportive and making sure I still had some fun \nwhile writing this book.\nAnd I would also like to add a very special thank you to Levi9 Romania, the company that introduced \nme to Spring and its country manager Nicu Lazar that supported me to become a Spring Professional.\nxvii",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 15,
          "text": "Introduction\nThree years have passed since I wrote my first Spring project and I regret that this framework grew for ten \nyears without me knowing about it. Four major versions of Spring have been released so far and except for \nthe official study guide required to pass the certification exam, until the conception of this book there was no \nadditional resource such as this.\nThis study guide provides a complete overview of all the technologies involved in creating a Spring web \napplication from scratch. It guides you step by step into the Spring web world covering Spring 3 and Spring 4.  \nIt also covers topics not required for the certification exam, such as Portlets and Thymeleaf, which most \ndevelopers encounter while in the field.\nThere are two multi-module projects associated with this book, covering every example presented  \nin the book. As the book was written, new versions of Spring were released, a new version of Intellij IDEA \nwas released, and new versions of Gradle were released. I upgraded to the new versions in order to  \nprovide the most recent information and keep this book synchronized with the official documentation. \nA group of reviewers has gone over the book, but if you notice any inconsistency, please send an email to \neditorial@apress.com and errata will be created. \nThe example source code for this book can be found on GitHub and will be maintained, synchronized \nwith new versions of the technologies, and enriched based on the recommendation of the developers using \nit to learn Spring.\nhttp://github.com/iuliana/personal-records\nhttps://github.com/iuliana/book-code\nI truly hope you will enjoy using this book to learn Spring as much as I enjoyed writing it.\nxix",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 16,
          "text": "Chapter 1\nIntroduction\nSo here you are: you want to learn how to develop web applications using Spring, and you chose this study \nguide to help you. This might be one of the best decisions that you could make, as this book was written not \nonly to help you to understand Spring Web, but to love it as well. This study guide may even help you pass \nthe certification exam—if you follow all the instructions properly and do all the exercises. This study guide \nexplores more Spring Web topics than those required by the exam; for example, it gives you a short overview \nof what Spring Web is all about, which you can skip reading, of course; but if you really want to learn Spring \nto develop web applications like a professional, then it would be wise not to skip this.\nSpring and What It Does\nWhen building a project using Java, a lot of functionality needs to be built from scratch. But a lot of \nuseful functionalities are already built and are free to use because of the open source world we live in. \nA long time ago, when the Java world was still quite small, you would say that you were using a library \nwhen you used open source code developed by somebody else, shipped as a *.jar file. But as time \npassed, the software development world evolved and the libraries grew too. They became frameworks. \nBecause they were no longer one *.jar file that you could import, they became a collection of  \nmore-or-less decoupled libraries with different responsibilities, and you had the option to import only \nwhat you needed.\nReleased in October 2002 as an open source framework and an inversion of control container \ndeveloped using Java, Spring was built for the Java platform. It was conceived with the dependency injection \nsoftware design pattern in mind, and its main purpose is to make dependency handling easier. A Java \napplication is basically a group of objects exchanging data and influencing each other’s behavior. The Spring \nFramework simplified the way in which objects talk to each other and the way they depend on each other.\nThis is why Spring evangelists claim that the reason Java was invented was so that Spring would come into \nexistence one day. The development of Java applications became easier when Spring emerged, providing \ncomprehensive infrastructure support. Spring makes it easier to compose disparate components into a fully \nworking application.\nSpring comes with a lot of default behaviors already implemented (components called infrastructure \nbeans are a default configuration; they can be used to create functional basic applications without extra \ncustomization), because the Spring Framework was also built with the convention over configuration \nparadigm as a principle, which seeks to decrease the number of decisions a developer has to make when \nwriting code, but also makes it easier for the developer to customize the behavior of objects, offering \nincreased flexibility.\n1",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 17,
          "text": "Chapter 1 ■ IntroduCtIon\nSpring is currently the VIP of Java frameworks and it has been growing exponentially, especially since \n2009, when VMware acquired SpringSource, the company behind Spring. The merger of VMware and the \nEMC Corporation in April 2013, now known as Pivotal, was also advantageous for Spring, as it became one \nof Pivotal’s central elements in its strategy to provide innovative and modern software-driven experiences to \nits customers. Spring is now a full-blown technology that can be used to build enterprise-ready applications \nin a very short time, and it comes in 25 flavors.1 Figure 1-1 shows a diagram of all Spring-released projects. \nThe following list describes these projects.\nFigure 1-1.  Official Spring projects. The projects drawn with dotted lines are only partially covered in this \nbook or are featured in the source code\n•\t Spring Framework provides core support for dependency injection, transaction \nmanagement, web applications, data access, messaging, and more.\n•\t Spring IO provides a cohesive, versioned platform for building modern applications. \nIt is a modular, enterprise-grade distribution that delivers a curated set of dependencies.\n•\t Spring Boot provides compact setups for different types of applications, helping you \nto focus on your code instead of infrastructure configuration.\n•\t Spring XD simplifies the development of Big Data applications.\n1You can read about these projects, as well as other projects that have not been released officially (Spring Session, for \nexample) in detail at http://spring.io/projects.\n2",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 18,
          "text": "Chapter 1 ■ IntroduCtIon\n•\t Spring Cloud provides a set of tools for distributed applications.\n•\t Spring Data provides a consistent approach to data access. (This study guide uses a \nsubproject called Spring Data JPA to help us manage data easily.)\n•\t Spring Integration supports the well-known Enterprise Integration Patterns via \nlightweight messaging and declarative adapters.\n•\t Spring Batch simplifies and optimizes the work of processing high-volume batch \noperations.\n•\t Spring Security provides tools for authentication and authorization. (Because web \nsecurity is one of the subjects of the certification exam, there is a section about web \nsecurity in this study guide that you will have to pay close attention to.)\n•\t Spring HATEOAS provides some APIs to help the development of REST \nrepresentations that follow the HATEOAS principle (Hypermedia as the Engine of \nApplication State, which means that a client interacts with a network application \nentirely through hypermedia provided dynamically by application servers).\n•\t Spring Social provides an API to connect Spring applications to the third-party APIs \nof social networks like Facebook and Twitter, as well as others.\n•\t Spring AMQP provides an API for AMQP-based messaging solutions.\n•\t Spring Mobile simplifies the development of mobile applications.\n•\t Spring for Android provides key spring components to use in the development of \nAndroid applications.\n•\t Spring Web Flow supports the building of web application with controlled \nnavigation (Spring Web Flow is another subject in the certification exam.)\n•\t Spring Web Services facilitates the development of SOAP-based applications.\n•\t Spring LDAP provides tools to develop LDAP applications.\n•\t Grails2 is a powerful open source web framework based on Groovy and inspired \nby Ruby on Rails. It is used to create web applications that run on the Java Virtual \nMachine(JVM).\n•\t Groovy3 started as a dynamic language for the Java platform. It brings high-productivity \ndevelopment features to the JVM, and resembles Python, Ruby, Perl, and Smalltalk \nin regards to syntax and features. SpringSource has taken over its development  \nand maintenance.\n•\t Spring Scala mixed up Spring with Scala language features.\n•\t Spring Roo helps define application templates that can be built into a full Java \napplication within minutes.\n•\t Spring BlazeDS Integration tools integrate Spring with Adobe BlazeDS.\n•\t Spring Loaded reloads classes as files change, boosting productivity  \n(similar project to JRebel).\n2Pivotal decided to stop funding this project in March 2015.\n3Funding for this project also ended in March 2015.\n3",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 19,
          "text": "Chapter 1 ■ IntroduCtIon\n•\t Spring Shell provides the capability to build command-line apps.\n•\t REST Shell makes the writing and testing of RESTful application easier  \nwith CLI-based resource discovery and interaction.\nThe Focus of this Study Guide\nAs this study guide is being written, the Spring Framework consists of features organized into about 20 \nmodules grouped into the following: Core Container, Data Access/Integration, Web, AOP (aspect-oriented \nprogramming), Instrumentation, Messaging, and Test.\nThe topics covered in this study guide are Spring Framework’s support components for the presentation \ntier (and specifically web-based presentation tiers). A bonus in this book is the Spring WebSocket chapter, \nwhich was added to the Spring Framework in version 4 and is also an optional part of the official Spring Web \ncourse not featured in the certification exam. In the Figure 1-2 you can see the Spring MVC stack, a tiered \nrepresentation of the modules commonly used to create Spring web applications.\nFigure 1-2.  The Spring Web Stack (those with dotted lines will not be covered in this study guide)\nThis study guide focuses on helping developers understand how Spring’s web infrastructure is \ndesigned, and how to write Spring web applications in a few easy steps by maximizing Spring’s potential. \nThe study guide’s objectives are as follows:\n•\t Use Spring to develop web applications\n•\t Use Spring Web Flow to implement stateful interactions\n•\t Use Spring Security to secure web applications\n•\t Use Spring Test and other test frameworks (JUnit, JMock) to test web applications\n•\t Create Spring web applications using Gradle4\n4Gradle is an automated build tool that is easy to configure and use on any type of application. Its build files are written \nusing JSON and Groovy. Gradle combines the power and flexibility of Ant with the dependency management and \nconventions of Maven into a more effective way to build. Read more about it at https://www.gradle.org.\n4",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 20,
          "text": "Chapter 1 ■ IntroduCtIon\nWho Should Use this Study Guide\nThis study guide is designed to help any Spring developer become familiar and comfortable with  \nSpring-associated technologies for web development. It can also be a big help to a developer who wants \nto become a Certified Spring Web Application Developer.5 That is why every topic in the official VMware \nSpring Web study guide is given the attention that it deserves.\nYou do not have to be a Certified Spring Professional to use this study guide; you just need \nminimal knowledge of Spring. Because this study guide has a full chapter dedicated to the Spring core \ncomponents, it might be possible for a non-Spring developer to use this study guide too, but the  \nSpring Framework Reference6 official documentation should be consulted to retrieve any missing pieces \nof information.\nIn a nutshell, this study guide was written to be used by the following audiences:\n•\t Spring Core developers who want a taste of Spring Web\n•\t Spring developers (Certified Spring Professionals or not) who are looking forward  \nto becoming Certified Spring Web Application Developers\n•\t Java developers who are curious about working with Spring technologies and  \nwant to start fast\nAbout the Spring Web Certification Exam\nIf you are interested in becoming a Certified Spring Web Application Developer, the first step is to go to \nthe VMware official learning site (http://pivotal.io/training) and search for the Spring Certification \nsection. There you will find all the details you need regarding the official trainings, including where and \nwhen they take place. The training is four days long. There is online training available as well. After creating \nan account on the VMware site, you can select your desired training. After you make the payment, if you \nchoose an online training, after about a month you will receive (through the mail) an official training kit that \nconsists of the following:\n•\t A pair of conference headphones (usually Logitech) to be used during training to \nhear your trainer talk and to ask questions.7\n•\t A professional webcam (usually Logitech) to be used during training so that your \ntrainer and colleagues can see you, thus simulating a classroom experience.8\n•\t A Spring study guide book containing the printed version of the slides your tutor  \nwill use during training.\n•\t A Spring study lab book containing explanations and instructions for the  \npractical exercises you will do during training.\n•\t A SpringSource official flash drive containing the following:\n•\t A JDK installer.\n5Keep in mind that attending a Spring Web training course by Pivotal or at a VMware Authorized Training Center  \nis a prerequisite to becoming a Certified Spring Web Application Developer, as stated on the official site at  \nhttp://mylearn.vmware.com/mgrReg/plan.cfm?plan=31111 ui=www_cert.\n6The Spring Framework Reference is at http://docs.spring.io/spring/docs/current/\nspring-framework-reference/htmlsingle/.\n7Depending on the area and the training center, this item is optional.\n8Depending on the area and the training center, this item is also optional.\n5",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 21,
          "text": "Chapter 1 ■ IntroduCtIon\n•\t Sources necessary for your training. Each study lab has a small Spring web \napplication with missing configuration and code; the student’s task is to \ncomplete it to become a working application. The same model is used in the \ncode associated with this book.\n•\t An installer for the most recent stable version of the Spring Tool Suite (STS). The \nversion on the flash drive is mandatory for the course because the installer sets \nup a local Maven repository with all the needed dependencies, and a full eclipse \nproject configuration with the lab sources. The STS also has an internal tc Server \nto run the lab applications.\n•\t An HTML or PDF version of the Spring Study Lab.\nIf you do not choose to do online training, you will not receive the headphones nor the webcam. The \ntraining kit and the rest of the materials are given to you when you arrive at the location where the training \nis taking place. After your training, you receive a free voucher that is required to schedule the certification \nexam at an approved exam center near you. Basically, this voucher or voucher code is proof that you have \nattended official Spring Web training.\n! The exam duration is 90 minutes and consists of 50 questions. There are both single-answer and \nmultiple-choice questions. The questions cover (roughly) the following topics:\n•\t Spring overview (Spring core notions)\n•\t MVC essentials (configurations, beans to use, conventions)\n•\t MVC forms and views\n•\t Webflow\n•\t Web security\n•\t REST\nThe passing score for the exam is 76%. This means that 38 correct answers are needed to pass. Most \nof the questions present you with a piece of Java code or configuration and then ask you what it does, so \nmake sure that you understand the code attached to this book and write your own beans and configurations \nin order to understand the framework better. The good news is that all the code in the exam can be found \nin the sources that you are given while attending the official training. Other questions present you with \naffirmations about Spring Web and require you to select the correct or the invalid ones.\nIf you read this book, understand all the examples, solve the practice exercises, and then attend the \nofficial training, the recommendation is to take the certification exam as soon as possible afterward. Do not \nallow too much time to pass between finishing the training and taking the exam, because we are all human \nafter all, and information can be forgotten. Also, the certification voucher is only valid for a year. You can \nretake the exam if you fail the first time, but it will cost you ~$150.\nHow to Use this Study Guide\nThis study guide follows the same path as the official Spring Web training, and focuses on the topics that are \nfound in the certification exam; but there are a few differences, which are mentioned from now on.\nThis Spring study guide covers the Spring MVC Portlets. This topic is not in the exam, but you never \nknow when you may need them in your development career, so it is better to have an overview.\nThe other differences are related to the tools used for the practical examples, which are mentioned in \nthe next section.\n6",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 22,
          "text": "Chapter 1 ■ IntroduCtIon\nHow this Book Is Structured\nThis study guide has eight chapters. You might think: How is this possible—the official Spring study guide \nhas sixteen chapters, right? It is better to wrap related things together, so in this study guide you have two big \nchapters that cover 60% of the exam topics: Chapter 3 covers Spring MVC and Chapter 7 covers Spring Web \nFlow. Also, some topics that have their own dedicated chapter in the official study guide have been included \nin other chapters, as relevant, in this book. (For example, how to test a web application. There’s no need of a \nseparate chapter just for this, as testing is a main portion in the development of an application.)\nA list of this study guide’s chapters, along with a short description, is presented in Table 1-1.\nTable 1-1.  Study Guide Chapters \nChapter Topic Details\n1 Introduction An introduction to Spring history, technologies, and the tools used \nfor practice in this study guide\n2 Spring Fundamentals Spring core concepts, components, and configurations\n3 Spring MVC Spring Web Framework core concepts, components, and \nconfigurations\n4 Spring Portlets What portlets are, how they can be used, and how can Spring make \nthis easier\n5 Spring RESTful Services Advanced Spring MVC for REST applications\n6 Spring Web with AJAX Advanced Spring MVC with AJAX web applications\n7 Spring Web Flow Basic and advanced topics on working with Spring Web Flow\n8 Spring Web Socket Basic configuration and usage of Spring Web Socket\nA Appendix Two mock exams, answers to review questions, and other comments\nHow Each Chapter Is Structured\nThe introductory chapter, the one you are reading now, covers the basics of Spring and Spring  \nrelated-notions that every developer using this study guide should know: what Spring is, how it has evolved, \nthe number of official Spring projects, the Spring Web technologies, the technologies used to build and run \nthe practical exercises, how to register for the exam to become a Certified Spring Developer, and so on. This \nchapter is the exception; it is structured differently than the others because it is designed to prepare you for \nwhat is coming next.\nAll the other chapters are designed to cover a Spring module and associated technologies, which will \nhelp you build a specific type of Spring web application. Each chapter is split into a few sections, but in a \nnutshell, a chapter could be split as follows:\n•\t Basics\n•\t Configuration\n•\t Components\n•\t Summary\n•\t Quick quiz\n•\t Practical exercise\n7",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 23,
          "text": "Chapter 1 ■ IntroduCtIon\nConventions\n! This symbol appears in front of paragraphs that you should pay particular \nattention to.\n** This symbol appears in front of a paragraph that is an observation or an \nexecution step that you can skip.\n? This symbol appears in front of a question for the user.\n... This symbol replaces missing code that is not relevant in the example.\nCC This symbol appears in front of a paragraph that describes a convention over \nconfiguration practice in Spring, a default behavior that helps a developer reduce \nhis or her work.\n[random text here] Text surrounded by square brackets means that the text within the brackets should \nbe replaced by a context-related notion.\nDownloading the Code\nThis study guide comes with code examples and practical exercises. There will be missing pieces of code \nthat you will have to fill in to make applications work and to test your understanding of Spring Web. It \nis recommended that you go over the code samples and do the exercises, as similar pieces of code and \nconfigurations will appear in the certification exam.\nThe following downloads are available:\n•\t Source code for the programming examples in the book chapters\n•\t Source code for the programming examples in the practice section\nYou can download these items from the Source Code area of the Apress web site (www.apress.com).\nContacting the Author\nMore information on Iuliana Cosmina can be found at http://ro.linkedin.com/in/iulianacosmina.  \nShe can be reached at iuliana.cosmina@gmail.com. Follow her personal coding activity at  \nhttps://github.com/iuliana.\nRecommended Development Environment\nIf you decide to attend the official course, you will notice that the development environment recommended \nin this book differs quite a lot from the one used for the course—a different editor is recommended, and a \ndifferent application server, and even a different build tool. The reason for this is to improve and expand \nyour experience as a developer and to offer a practical development infrastructure. Motivation for each \nchoice is mentioned in the corresponding sections.\n8",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 24,
          "text": "Chapter 1 ■ IntroduCtIon\nRecommended Build Tools\nThe recommended development environment should be composed of the following technologies:\nJava 8. Download and install the JDK matching your operating system from  \nhttp://www.oracle.com.\n! It is recommended to set the JAVA_HOME environment variable to point to the directory where Java 8 is \ninstalled (the directory in which the JDK was unpacked) and add $JAVA_HOME/bin to the general path of the \nsystem. The reason behind this is to ensure that any other development application written in Java will use \nthis version of Java, and prevent strange incompatibility errors during development.\n! Verify that the version of Java that your operating system sees is the one you just installed. Open a \nterminal (Command+Prompt in Windows, or any type of terminal you have installed on Mac OS or Linux) \nand type the following:\njava -version\nYou should see something similar to this:\njava version \"1.8.0_40\"\nJava(TM) SE Runtime Environment (build 1.8.0_40)\nJava HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)\nGrade 2.x \n** The sources attached to this book can be compiled and executed using the Gradle Wrapper, which \nis a batch script on Windows, or by using a shell script on other operating systems. When you start a Gradle \nbuild via the wrapper, Gradle is automatically downloaded and used to run the build, thus you do to need to \ninstall Gradle as stated previously. Instructions on how to do this can be found on the public documentation \nat www.gradle.org/docs/current/userguide/gradle_wrapper.html.\nIt is a good practice to keep code and build tools separate, but this study guide uses the Wrapper \nto easily set up the practice environment by skipping the Gradle installation step, and also because the \nrecommended source code editor uses the Wrapper internally.\nIf you decide to use Gradle outside the editor, you can download the binaries only (or, if you are more \ncurious, you can download the full package, which contains binaries, sources, and documentation) from \nthe official site (https://www.gradle.org), unpack it and copy the contents somewhere on the hard drive. \nCreate a GRADLE_HOME environment variable and point it to the location where you have unpacked Gradle. \nAlso add $GRADLE_HOME/bin to the general path of the system.\nGradle was chosen as a build tool for the sources of this book because of the easy setup, small \nconfiguration files, flexibility in defining execution tasks, and the fact that the SpringSource team currently \nuses it to build all Spring projects.\n9",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 25,
          "text": "Chapter 1 ■ IntroduCtIon\n! Verify that the version of Gradle that your operating system sees is the one that you just installed. Open \na terminal (Command+Prompt in Windows, any type of terminal you have installed on Mac OS or Linux) \nand type gradle –version. You should see something similar to this:\n------------------------------------------------------------\nGradle 2.3\n------------------------------------------------------------\nBuild time: 2014-11-24 09:45:35 UTC\nBuild number: none\nRevision: 6fcb59c06f43a4e6b1bcb401f7686a8601a1fb4a\nGroovy: 2.3.9\nAnt: Apache Ant(TM) version 1.9.3 compiled on December 23 2013\nJVM: 1.8.0_40 (Oracle Corporation 25.25-b02)\nOS: -- whatever operating system you have --\nThe preceding text shows a confirmation that any Gradle command can be executed in your terminal; \nGradle was installed successfully.\n Jetty 9 is an open source web server that is \nfree to use and easy to install; that’s why it was chosen to be used in this study guide instead of the \nSpringSource tc Server. No need to download and install this web server, though, because there is no need \nto. There is a Gradle plugin called Getty that will be used to download the Jetty web server and deploy your \n*.war artifact on it. If you want to read more about Jetty, you can do so at http://eclipse.org/jetty/.\nRecommended IDE\n The recommended IDE to use in this study guide is Intellij IDEA. The reason for this is \nthat it is the most intelligent Java IDE. IntelliJ IDEA offers outstanding framework-specific coding assistance \nand productivity-boosting features for Java EE. Spring also includes support for Maven and Gradle. It is the \nperfect choice to help you focus on learning Spring, rather than how to use an IDE. It can be downloaded \nfrom the JetBrains official site (https://www.jetbrains.com/idea/). It is also quite light on your operating \nsystem and quite easy to use.\n10",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 26,
          "text": "Chapter 1 ■ IntroduCtIon\nBecause the web applications developed as practice in this study guide are deployed on Jetty, the \ncommunity edition of Intellij IDEA can be used because we do not need the server plugin. The main \ndisadvantage of the community edition, though, is that it does not come with the Spring plugin, which is \nvery useful in creating Spring configuration files because it adds the bean namespace by default. But solving \nthe exercises in this book won’t require that, so you can still consider IDEA an option. If you are curious \nabout the full power of this IDE, you can download the Ultimate Edition, which has a trial period of 30 days. \nAnd you can even try to deploy the code samples on a Tomcat instance from within IDEA. You will find an \nexample of how to do this in the appendix.\nIf you are already familiar with a different Java editor, you can use it—as long as it supports Gradle.\nThe Project Sample\nMost of the code used in this study guide, except the book code modules, makes up a project named \nPersonal Records Manager. This is a proof of concept application that aspires to manage the personal \ninformation of a group of people. The application is multimodular and each module is duplicated. The \nprojects suffixed with practice are missing pieces of code and configuration, and are the ones that need to \nbe solved by you to test your understanding of Spring Web. The projects suffixed with solution are proposal \nresolutions for the tasks. You can see the project structure and the modules in Figure 1-3.\n11",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 27,
          "text": "Chapter 1 ■ IntroduCtIon\nFigure 1-3.  The Personal Records Manager Application diagram\n12",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 28,
          "text": "Chapter 1 ■ IntroduCtIon\nThe foundation module is the 00-pr-dao, which handles all database operations by using Hibernate \nand Spring Data JPA. All other modules are client web applications, which will help the end user introduce \nnew data, modify existing data, and perform searches. Each module is specific to a part of a chapter. Each \nmodule name is prefixed with a number, so no matter what IDE you use, you will always have the modules in \nthe exact order that they were intended to be used.\nThe general functionality of each web application is described in Figure 1-4.\nFigure 1-4.  The Personal Records Manager Application structure\nThe foundation of this application is its DAO (data access objects) module, which contains entities \nclasses that are mapped on database tables, and classes used to handle entities, called repositories. The web \nprojects use the DAO project to manipulate data according to user requests. The UML diagram in Figure 1-5 \ndescribes the general behavior of our application. In some chapters, however, diagrams that describe a more \ndetailed behavior are presented.\n13",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 29,
          "text": "Chapter 1 ■ IntroduCtIon\nFigure 1-5.  UML diagram describing the general behavior of the application\nThe entities have common fields used by Hibernate to uniquely identify each entity instance (id) and \nthe fields used to audit each entity instance (createdAt and modifiedAt) and keep track of how many times \nan entity was modified (version). These fields have been grouped in the AbstractEntity class to avoid \nhaving duplicated code. The class hierarchy can be analyzed in Figure 1-6.\n14",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 30,
          "text": "Chapter 1 ■ IntroduCtIon\nFigure 1-6.  This diagram shows the relationships between entity classes and the relationships between tables \nin the database. (The pnc is a personal numerical code that uniquely identifies a person and will be used to \ntest some Spring validations on it. The iban is an alphanumeric code that uniquely identifies a bank account.)\nThis chapter does not have any practice and sample code attached to it, so more information regarding \nthe setup of the project, and how it is built and executed, is provided in upcoming chapters. \n15",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 31,
          "text": "Chapter 2\nSpring Fundamentals\nThis chapter is necessary for building a Spring background, which will be very helpful in the upcoming \nchapters. This chapter will help you get familiar with the Spring container, context, beans, and most Spring \ncore modules and how they work together to allow developers to focus on solving problems instead of \nbuilding up support.\nThe Basics\nAny application system is made of components that work together to solve a problem. In object-\noriented design they are called classes. Figure 2-1 depicts the sequence of operations necessary to \ncreate a Person instance. Because this chapter is about Spring Core, a web application is not needed, \nso requests to manipulate Person instances will be directed to implementations of the PersonManager \ninterface. Implementations of this interface will provide access to the database using an implementation \nof PersonRepository interface. The operation is pretty simple and the setup to write and execute the \ncode should be too. This is where Spring comes in—providing a way to build an application using plain \nold Java objects (POJOs)1 and applying enterprise services (transaction execution, remote execution) \nnoninvasively.\n1A software term introduced by Martin Fowler, Rebecca Parsons, and Josh MacKenzie in September 2000 to refer to \nordinary Java objects not bound by any restriction.\n17",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 32,
          "text": "Chapter 2 ■ Spring FundamentalS\nFigure 2-1.  UML sequence of operations necessary to create a Person instance\nThe components making up an application interact and depend on one another. Defining how these \nobjects are composed is quite difficult using plain Java. Even with the help of all the design patterns defined \nby experts in the software industry, the work is still cumbersome, as the pattern components still have to \nbe implemented before being used. The Spring inversion of control (IoC) container was designed to help \ndevelopers compose objects into fully working applications, ready to use.2\nThe Spring container is responsible for the creation of components, resolving their dependencies \nand providing them to other components. It does this by reading the configuration of an application from \n*.xml files or annotated configuration classes, and internally constructs a graph of dependencies between \nthe objects. It then proceeds to traverse the graph, and creates and injects dependencies according to \nthe configuration. The result of this initialization is an ApplicationContext, which provides access to \napplication components, resource loading, internationalization support, and other features that won’t \nbe mentioned in this guide because it is out of scope.3 Figure 2-2 depicts the process of creating an \nApplicationContext using the Spring IoC container.\n2The process through which an object is provided its dependencies, whether it is using a constructor or properties which \nare set using setter methods, is called dependency injection. inversion of control is the concept through which an external \ncomponent has control over what is provided as a dependency to an object.\n3For more information, see the public reference documentation at http://docs.spring.io/spring/docs/current/\nspring-framework-reference.\n18",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 33,
          "text": "Chapter 2 ■ Spring FundamentalS\nFigure 2-2.  How Spring works\nThe Spring Core Container\nThe Spring core container is made of the following modules: \n•\t spring-beans\n•\t spring-core\n•\t spring-context and spring-context-support (provides support classes that  \nhelp integration of third-party libraries for caching, mailing, scheduling, and \ntemplate engines)\n•\t spring-expression\nThe spring-core and spring-beans modules provide the fundamental part of the framework: the \nIoC and dependency injection features, which the container needs to solve and inject dependencies as \nspecified in the configuration. The spring-context module extends the previous two modules, adding \nsupport for internationalization, resource loading, event propagation, and transparent creation of contexts. \nThe core component of this module is the ApplicationContext interface. The spring-expression module \nprovides a powerful Expression Language for querying and manipulating an object graph at runtime, and for \noperations like setting and getting property values, property assignment, and others.\n19",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 34,
          "text": "Chapter 2 ■ Spring FundamentalS\nConsidering the diagram in Figure 2-1, the classes needed to support implementing the operation to \nsave a Person instance look like this:\npublic class PlainPersonManagerImpl implements PersonManager {\n    PersonRepository repo;\n     \n    //injecting a dependency using the constructor\n    public PlainPersonManagerImpl(PersonRepository repo) {\n        this.repo = repo;\n    }\n...\n}\npublic class PlainPersonRepository implements PersonRepository {\n    private DataSource dataSource;\n    @Override\n    public int save(Person person) {\n        ..\n    }\n    //injecting a dependency using a setter method\n    public void setDataSource(DataSource dataSource) {\n        this.dataSource = dataSource;\n    }\n}\n■ !  the PlainPersonRepository class is a simple pOJO persistence handler. its sole responsibility is to ensure \nPerson instances are saved and retrieved from the database. its behavior is built on a javax.sql.DataSource \nimplementation. this is different from the Spring data Jpa repositories used in the personal records manager \nproject, which will be presented later. the approach specific to this chapter is Spring Core–based, which is more \n“old-style,” before Spring data Jpa existed; this is to best introduce the Spring core modules and possibilities.\nTo implement that functionality in plain Java language, you have to write something like this:\nPersonRepository repo = new PlainPersonRepository();\n \nDataSource dataSource = new com.oracle.jdbc.pool.OracleDataSource();\ndataSource.setUrl(\"jdbc:oracle:thin:@localhost:1521:orcl\");\n//set other dataSource properties\n       ...\nrepo.setDataSource(dataSource);\nPersonManager personManager = new PlainPersonManagerImpl(repo);\nPerson person = new Person(\"John\", \"Smith\",\"1980-04-13\");\n// Use the manager\npersonManager.save(person);\nAs you can easily see, except the last line, everything else is setup code—the preparation before the \nexecution of the method. It is a lot of code. What would happen if you decided to change method signatures \nor to use a different DataSource implementation? A big part of this code would have to be changed too.\nIn the next section, let’s see how Spring does the same thing.\n20",
          "tables": [],
          "code_blocks": [
            "PersonRepository repo;\n     \n    //injecting a dependency using the constructor\n    public PlainPersonManagerImpl(PersonRepository repo) {\n        this.repo = repo;\n    }",
            "private DataSource dataSource;\n    @Override\n    public int save(Person person) {\n        ..\n    }\n    //injecting a dependency using a setter method\n    public void setDataSource(DataSource dataSource) {\n        this.dataSource = dataSource;\n    }",
            "..."
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 35,
          "text": "Chapter 2 ■ Spring FundamentalS\nSpring Configuration\nThere are three ways to define the configuration of an application using Spring: \n•\t Special XML configuration files that allow usage of elements described in the \nassociated namespaces\n•\t Java-based configuration classes (classes annotated with @Configuration can be \nused by Spring IoC as a source for bean definitions)\n•\t Mixed configuration: XML and annotations\nAll three types of configurations are covered in the following sections. The code sources attached to this \nchapter will help you test your understanding of each.\nXML\nThe following code is the XML content of a file named app-simple-config.xml, which is the configuration \nfile for a simple Spring application:\n<beans>\n        <bean id=\"personManager\" class=\"com.book.plain.PlainPersonManagerImpl\">\n              <constructor-arg ref=\"personRepository\" />\n        </bean>\n        <bean id=\"personRepository\" class=\"com.book.plain.PlainPersonRepository\">\n              <property name=\"dataSource\" ref=\"dataSource\" />\n        </bean>\n        <bean id=\"dataSource\" class=\"com.oracle.jdbc.pool.OracleDataSource\">\n              <property name=\"URL\" value=\"jdbc:oracle:thin:@localhost:1521:orcl\" />\n              ...\n        </bean>\n</beans>\nAnd here is how the code to save a Person instance looks with Spring:\n// Create the application from the configuration\nApplicationContext context =\n              new ClassPathXmlApplicationContext(\"app-simple-config.xml\");\n// Look up the application manager interface\nPersonManager manager = (PersonManager) context.getBean(\"personManager\");\n// Use the manager\nmanager.save(new Person(\"John\", \"Smith\",\"1980-04-13\"));\nAs you can see, the code is a lot smaller, because all the preparation of the environment was \nmoved into the XML configuration file. And the configuration file can be manipulated more easily. If an \nexternal property file is used as entry for some of the values in it, in some simple cases, the application \ndoesn’t even have to be recompiled to change behavior. The DataSource configuration can be separated \nfrom the general configuration file, which can later allow you to easily switch between DataSource \nimplementations—depending on the context in which a code should run.\n21",
          "tables": [],
          "code_blocks": [
            "<bean id=\"personManager\" class=\"com.book.plain.PlainPersonManagerImpl\">\n              <constructor-arg ref=\"personRepository\" />\n        </bean>\n        <bean id=\"personRepository\" class=\"com.book.plain.PlainPersonRepository\">\n              <property name=\"dataSource\" ref=\"dataSource\" />\n        </bean>\n        <bean id=\"dataSource\" class=\"com.oracle.jdbc.pool.OracleDataSource\">\n              <property name=\"URL\" value=\"jdbc:oracle:thin:@localhost:1521:orcl\" />\n              ...\n        </bean>",
            "new ClassPathXmlApplicationContext(\"app-simple-config.xml\");"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 36,
          "text": "Chapter 2 ■ Spring FundamentalS\n<util:properties id=\"dbProp\" location=\"classpath:datasource/db.properties\"/>\n \n<bean id=\"dataSource\" class=\n           \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n    <property name=\"driverClassName\" value=\"#{dbProp.driverClassName}\"/>\n    <property name=\"url\" value=\"#{dbProp.url}\"/>\n    <property name=\"username\" value=\"#{dbProp.username}\"/>\n    <property name=\"password\" value=\"#{dbProp.password}\"/>\n</bean>\nIn the previous example, the property values that look like #{value} are loaded from the db.properties \nfile, which contains the following:\ndriverClassName=org.h2.Driver\nurl=jdbc:h2: ~/prod\nusername=prod\npassword=prod\nThe values for the properties are loaded into a java.util.Properties instance with an id of dbProp \nusing a functionality offered by the util namespace in the first line of the configuration, and then their \nvalues are accessed using the SpEL (Spring Expression Language) syntax and injected into the dataSource \nbean. (There is another way to do this using a component named PropertyPlaceholderConfigurer, which \nis covered in the “How Bean Factory Post Processors Work” section.) Spring knows how to do this because \nconfiguration files are constructed using XML namespaces.\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:util=\"http://www.springframework.org/schema/util\"\n       xsi:schemaLocation=\"\n       http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/util\n       http://www.springframework.org/schema/util/spring-util.xsd\">\n         ...\n</beans>\nThe underlined values in the previous example show how a prefix is assigned to a namespace and \nhow a namespace is associated with an XSD schema that contains the XML elements that can be used in \nthe configuration file. Usually, each namespace contains definitions for all XML tags for a specific spring \nmodule, or a group of tags with related responsibilities.\nAs everything in Spring is a bean, most commonly used configuration styles use the bean’s root \nelement, and the namespace for it is declared using the xmlns attribute. When additional namespaces are \nused, the elements defined by them need to be used inside the current element (beans). They need to have \na prefix associated so that the Spring IoC knows in which namespace to look for those element definitions; \nnotations such as xmlns:[prefix]=\"[namespace URL]\" are used.\n22",
          "tables": [],
          "code_blocks": [
            "\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n    <property name=\"driverClassName\" value=\"#{dbProp.driverClassName}\"/>\n    <property name=\"url\" value=\"#{dbProp.url}\"/>\n    <property name=\"username\" value=\"#{dbProp.username}\"/>\n    <property name=\"password\" value=\"#{dbProp.password}\"/>",
            "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:util=\"http://www.springframework.org/schema/util\"\n       xsi:schemaLocation=\"\n       http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/util\n       http://www.springframework.org/schema/util/spring-util.xsd\">\n         ..."
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 37,
          "text": "Chapter 2 ■ Spring FundamentalS\n■ !  the running code in this example can be found in 02-chapter-solution project. this is a module of the \nbook-code project, which was designed to gradually test your knowledge acquired while reading this book. the \nbook-code contains one or more modules for each chapter. Some module names are postfixed with -practice \nand contain a series of TODO tasks that the developer should be able to complete after reading a chapter.\nthe modules prefixed with -solution contain the completed tasks and are meant to be used for comparison \nwith the developer’s own solution. Sometimes a solution module might contain extra code that is meant simply \nto show the developer other situations that he might encounter in Spring projects.\nFor example, by splitting up the configuration file to isolate the DataSource configuration, you could \nhave the following configuration for a production environment:\nApplicationContext context =\n                new ClassPathXmlApplicationContext(\"application-config.xml\",\"db-config.xml\");\n                        \nAnd this configuration could be for a test environment:\nApplicationContext context =\n                new ClassPathXmlApplicationContext(\"application-config.xml\",\"test-db-config.xml\");\n                       \nThe two environments are completely decoupled, and the tests are very easy to write. Figure 2-3 \ndisplays a typical structure for a Spring Maven project with a split configuration for production and a test \nenvironment.\nFigure 2-3.  Typical Maven structure for a project\n23",
          "tables": [],
          "code_blocks": [
            "new ClassPathXmlApplicationContext(\"application-config.xml\",\"db-config.xml\");",
            "new ClassPathXmlApplicationContext(\"application-config.xml\",\"test-db-config.xml\");"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 38,
          "text": "Chapter 2 ■ Spring FundamentalS\n■ !  in this example, the configuration files were created under a directory named spring to emphasize that \nthese are Spring configuration files, because in a more complex project there could be Xml configuration files \nfor other purposes (for example, logging or caching stored outside of the spring directory). the code in this \nbook intentionally skips the spring directory from the path to reduce the size of the quotes and to make the list \nof configuration files more readable.\nIn the configuration files, and when instantiating contexts, resources are usually prefixed with a word \nthat tells the Spring container where they are located. These prefixes can be used for any type of resources \nneeded in an application. Consider a standard Maven setup for a project like the one in Figure 2-3; Table 2-1 \nshows the paths where a Spring container would look for resource files depending on the prefix.\nTable 2-1.  Prefixes and Corresponding Paths\nPrefix Location Comment\nno prefix In root directory where the class  In the main or test directory. The type of the resource \ncreating the context is executed. being loaded depends on the ApplicationContext \ninstance being used. (A detailed example is presented \nafter this table.)\nclasspath: The resource should be obtained  In the resources directory; the resource is of type \nfrom the classpath. ClassPathResource.\nfile: In the absolute location following  The resource is loaded as a URL from the filesystem \nthe prefix. and is of type UrlResource.\nhttp: In the web location following   The resource is loaded as a URL and is of type \nthe prefix. UrlResource.\nThe following is an example of resource loading without using a prefix:\nResource template = ctx.getResource(\"application-config.xml\");\nDepending on the context class used, the resource loaded can have one of the following types:\n•\t If ctx is a ClassPathXmlApplicationContext instance, the resource type is \nClassPathResource\n•\t If ctx is a FileSystemXmlApplicationContext instance, the resource type is \nFileSystemResource\n•\t If ctx is a WebApplicationContext instance, the resource type is \nServletContextResource\n24",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 39,
          "text": "Chapter 2 ■ Spring FundamentalS\nAnnotations\nSpring also supports configuration via annotations. The previous XML configuration can be replaced by a \nclass annotated with @Configuration, and looks like this: \n@Configuration\n@PropertySource(value = \"classpath:datasource/db.properties\")\npublic class AppConfig {\n \n    @Autowired\n    Environment env;\n \n    @Bean(name=\"personManager\")\n    public PersonManager getPersonManager(){\n        return new PlainPersonManagerImpl(getPersonRepository());\n    }\n \n    @Bean(name=\"personRepository\")\n    public PersonRepository getPersonRepository(){\n        PersonRepository repo = new PlainPersonRepository();\n        repo.setDataSource(getDataSource());\n        return repo;\n    }\n \n    @Bean(name=\"dataSource\")\n    public DataSource getDataSource(){\n        DriverManagerDataSource dataSource = new DriverManagerDataSource();\n        dataSource.setDriverClassName(env.getProperty(\"driverClassName\"));\n        dataSource.setUrl(env.getProperty(\"url\"));\n        dataSource.setUsername(env.getProperty(\"username\"));\n        dataSource.setPassword(env.getProperty(\"password\"));\n        return dataSource;\n    }\n}\nAll the code to save a Person instance looks like this:\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = {AppConfig.class})\npublic class SecondAnnotationPersonSaveTest {\n \n    @Autowired\n    PersonManager personManager;\n \n    @Test\n    public void savePerson() {\n        personManager.save(new Person(\"John\", \"Smith\", \"1980-04-13\"));\n    }\n}\n25",
          "tables": [],
          "code_blocks": [
            "@Autowired\n    Environment env;\n \n    @Bean(name=\"personManager\")\n    public PersonManager getPersonManager(){\n        return new PlainPersonManagerImpl(getPersonRepository());\n    }\n \n    @Bean(name=\"personRepository\")\n    public PersonRepository getPersonRepository(){\n        PersonRepository repo = new PlainPersonRepository();\n        repo.setDataSource(getDataSource());\n        return repo;\n    }\n \n    @Bean(name=\"dataSource\")\n    public DataSource getDataSource(){\n        DriverManagerDataSource dataSource = new DriverManagerDataSource();\n        dataSource.setDriverClassName(env.getProperty(\"driverClassName\"));\n        dataSource.setUrl(env.getProperty(\"url\"));\n        dataSource.setUsername(env.getProperty(\"username\"));\n        dataSource.setPassword(env.getProperty(\"password\"));\n        return dataSource;\n    }",
            "@Autowired\n    PersonManager personManager;\n \n    @Test\n    public void savePerson() {\n        personManager.save(new Person(\"John\", \"Smith\", \"1980-04-13\"));\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 40,
          "text": "Chapter 2 ■ Spring FundamentalS\nWhen annotations are used, XML configuration files are no longer needed, nor namespaces. Specific \nannotations are used to mark configuration classes (@Configuration) and to mark methods as bean \ndefinitions (@Bean); this is not covered because it is outside the scope of this book. What you need to \nremember is that the @Bean annotation makes sure that every time the annotated method is called the same \nbean is returned. Without it, the method will return a newly created instance each time.\n■ CC  in the previous code example, each @Bean annotation has the attribute name populated with a value \nto name the bean created by the method. this attribute is neither mandatory nor necessary. When it is not \nspecified, the Spring ioC determines a name for the bean based on the method name by removing the get and \nlowercasing the first letter of the remaining string.\nMixed Approach\nXML and annotations can be mixed. You could have the bean classes annotated with @Component (or any \nannotation extending @Repository for DAO repository classes, @Service for service classes, or @Controller \nfor MVC handler classes) and one or more XML files, which define just the DataSource configuration \nand specifies where the beans are located. In the following code sample, the DataSource configuration is \nseparated in another file (as shown in the “How Bean Factory Post Processors Work” section) to decouple \nconfigurations for production and test environments.\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"\n       http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\"\n \n       <context:component-scan base-package=\"com.book.beans\"/>\n       ...\n</beans>\nIn XML configuration files, bean definitions describe the way a dependency should be provided to \nthem: using either constructors or setters. This is called autowiring. When using annotations, the way a \ndependency should be provided is described using the @Autowire annotation on a constructor or setter.4 \nBut you need to tell the Spring IoC container to look for that type of annotation, and the declaration \n<context:component-scan ...> does exactly that.\nWhen using annotations, <bean> declarations are no longer needed because each bean type is \nannotated with @Component, or an extension of it, and the <context:component-scan..> declaration tell \nthe Spring IoC container to look for those types of annotations in the specific file. The process of identifying \nannotated bean types is called autodiscovery.\n4The @Autowiring annotation can also be used on the field directly, called field injection; but this approach is discouraged \nbecause it makes testing difficult. As the field is usually private, to test the containing bean, a full Spring context must be \nset up or reflection must be used to access the field.\n26",
          "tables": [],
          "code_blocks": [
            "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"\n       http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\"\n \n       <context:component-scan base-package=\"com.book.beans\"/>\n       ..."
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 41,
          "text": "Chapter 2 ■ Spring FundamentalS\nThus what the following configuration element does is enable bean autowiring and autodiscovery \nanywhere in the classpath in packages (and subpackages) named as the value of the attribute base-package.\n<context:component-scan base-package=\"com.book.beans\"/>\nThe <context: ..> declarations are Spring’s way of compacting the declaration of infrastructure beans \nnamed *PostProcessor, which take care of interpreting annotations into beans definitions.\n•\t <context:annotation-config/> registers the following:\n–  AutowiredAnnotationBeanPostProcessor (supports @Autowired, @Value,  \n@Inject)\n–  CommonAnnotationBeanPostProcessor (supports @Resource, @PostConstruct, \n@PreDestroy)\n–  PersistenceAnnotationBeanPostProcessor (supports @PersistenceUnit,  \n@PersistenceContext)\n–  RequiredAnnotationBeanPostProcessor (supports @Required)\n•\t <context:component-scan base-package=\"com.book.beans\"/> implicitly enables \nthe functionality of <context:annotation-config> and adds support for more \nannotations (@Repository, @Service, @Controller, which are specializations of  \n@Component, @Configuration, etc.)\nIf you want to extend your knowledge about this, you can always read the Spring Reference \nDocumentation.5 More detailed information is outside the scope of this book.\nThe Beans\nThe beans are the objects handled by the Spring IoC container. The following section will cover all you need \nto know about how beans are created, how the beans are categorized, how they are accessed, and how they \nare destroyed when they are no longer needed.\nLifecycle and Instantiation\nThe beans are created in order of dependency. If a bean of type B, needs a bean of type A for its creation, \nthe Spring container will know to first create bean A and then inject it into bean B. If an application has \nmultiple configuration files, the Spring container first reads all of them, internally creates a dependency tree \nof bean definitions, and then starts traversing the tree, starting with its lowest level where the simplest bean \ndefinitions are. In the cases mentioned in previous sections, the order for bean creation (instantiation) is \ndataSource, personRepository, and personManager. The steps are described in Figure 2-4. \n5The Spring Reference Documentation can be accessed at http://docs.spring.io/spring/docs/current/\nspring-framework-reference/htmlsingle/.\n27",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 42,
          "text": "Chapter 2 ■ Spring FundamentalS\nFigure 2-4.  Order of bean instantiation\nA bean cannot be created if its required dependencies do not exist; an exception is thrown in case of \nmissing dependencies. But how does the Spring container know which dependencies are required? There \nare a few ways. One is the type of injection. Spring supports two types of injection: via constructor and \nvia setter. The constructor injection is when the constructor of a bean is defined as having an argument \nof type another bean. In the previous example, the PersonManagerImpl constructor definition requires \na PersonRepository instance as an argument, and thus the PersonManagerImpl requires a bean of type \nPersonRepository to be created before its creation.\n<!– Constructor injection –>\n<bean id=\"personManager\" class=\"com.book.PersonManagerImpl\">\n        <constructor-arg ref=\"personRepository\" />\n    </bean>\n \n    <!– Setter injection–>\n    <bean id=\"personRepository\" class=\"com.book.JdbcPersonRepository\">\n        <property name=\"dataSource\" ref=\"dataSource\" />\n</bean>\n28",
          "tables": [],
          "code_blocks": [
            "<constructor-arg ref=\"personRepository\" />\n    </bean>\n \n    <!– Setter injection–>\n    <bean id=\"personRepository\" class=\"com.book.JdbcPersonRepository\">\n        <property name=\"dataSource\" ref=\"dataSource\" />"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 43,
          "text": "Chapter 2 ■ Spring FundamentalS\nAny object that has a constructor with arguments cannot be constructed without passing in arguments. \nThis restriction does not apply for the setter injection, but it can be enforced in two ways:\n•\t By annotating the setter method with @Required. If the property is not set, a \nBeanInitializationException is thrown.\n•\t By annotating the setter method with @Autowire the Spring IoC container \ntries to inject a bean with the specific type. If such a bean is not found, a \nBeanCreationException is thrown.\nOne of the advantages of using the setter injection is that you can create hierarchical beans, \nand setters will be inherited. In a setter injection, bean creation and dependency injection are two \nseparate steps; for constructor injection there is only one step. So basically, setter injection makes your \nconfiguration more flexible.\nFor a bean to “come to life” and become available to be used for a purpose, it has to go through the steps \nshown in Figure 2-5.\nFigure 2-5.  The steps for a bean creation\n29",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 44,
          "text": "Chapter 2 ■ Spring FundamentalS\nHow Bean Factory Post Processors Work\nA bean definition can be modified before instantiating the bean, and this is done by beans called bean \nfactory post processors. They are defined as classes implementing the BeanFactoryPostProcessor interface \nand are recognized by an application context and instantiated before any other beans in the container. \nThe most used and known in the Spring world is the PropertyPlaceholderConfigurer.\n<bean id=\"dataSource\" class=\n             \"o.s.jdbc.datasource.DriverManagerDataSource\">\n \n      <property name=\"driverClassName\" value=\"${driverClassName}\"/>\n      <property name=\"url\" value=\"${url}\"/>\n      <property name=\"username\" value=\"${username}\"/>\n      <property name=\"password\" value=\"${password}\"/>\n</bean>\n \n<context:property-placeholder location=\"classpath:datasource/db.properties\"/>\nThe last line in this example is a simplified version of defining a PropertyPlaceholderConfigurer using \nthe Spring context namespace; it is equivalent to the following:\n<bean class=\n  \"o.s.beans.factory.config.PropertyPlaceholderConfigurer\">\n       <property name=\"location\" value=\"classpath:datasource/db.properties\"/>\n</bean>\nThis bean reads those properties from the db.properties file and then populates the dataSource \nsource bean with their values. Of course, the easier way to do this is to use SpEL expressions and the util \nnamespace:\n<util:properties id=\"dbProp\" location=\"classpath:datasource/db.properties\"/>\n \n<bean id=\"dataSource\" class=\n      \"o.s.jdbc.datasource.DriverManagerDataSource\">\n   <property name=\"driverClassName\" value=\"#{dbProp.driverClassName}\"/>\n   <property name=\"url\" value=\"#{dbProp.url}\"/>\n   <property name=\"username\" value=\"#{dbProp.username}\"/>\n   <property name=\"password\" value=\"#{dbProp.password}\"/>\n</bean>\nBean Initialization and Destruction\nAn ApplicationContext instantiates all singleton (bean scopes are covered in detail in the “Bean Scopes” \nsection) beans by default and also destroys them at the end of their lives. After a bean has been created and \nits dependencies injected, it can be initialized automatically by telling the context to execute a specified \nmethod. Before a bean ends its life, a different method might be called to do some resource cleanup. The \ncontext can be told to automatically do that too. These methods must have a void no-argument signature. \nThere is no restriction on the accessor used for them. In the official documentation, the lifecycle methods \ngiven as example are all public. But there are opinions that state they should be protected or private \n(obviously, it does not apply to InitializingBean’s afterPropertiesSet and DisposableBean’s destroy) \nto prevent direct calls of these methods from the application code, as these methods should be called only \nonce and only by the Spring IoC container.\n30",
          "tables": [],
          "code_blocks": [
            "\"o.s.jdbc.datasource.DriverManagerDataSource\">\n \n      <property name=\"driverClassName\" value=\"${driverClassName}\"/>\n      <property name=\"url\" value=\"${url}\"/>\n      <property name=\"username\" value=\"${username}\"/>\n      <property name=\"password\" value=\"${password}\"/>",
            "<property name=\"location\" value=\"classpath:datasource/db.properties\"/>",
            "\"o.s.jdbc.datasource.DriverManagerDataSource\">\n   <property name=\"driverClassName\" value=\"#{dbProp.driverClassName}\"/>\n   <property name=\"url\" value=\"#{dbProp.url}\"/>\n   <property name=\"username\" value=\"#{dbProp.username}\"/>\n   <property name=\"password\" value=\"#{dbProp.password}\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 45,
          "text": "Chapter 2 ■ Spring FundamentalS\nThere are multiple options for bean initialization:\n•\t Using @PostConstruct from JSR 250\n•\t Using @Bean’s initMethod attribute\n•\t Implementing InitializingBean and providing implementation for the \nafterPropertiesSet method (not recommended because it couples the application \ncode with Spring infrastructure code)\n•\t Using the init-method attribute on a <bean/> XML definition\nWhen a bean ends its life, some cleanup operations might be necessary; to implement this kind of \nbehavior, there are also multiple options:\n•\t Using @PreDestroy from JSR 250\n•\t Using @Bean’s destroyMethod attribute\n•\t Implementing DisposableBean and providing implementation for the destroy \nmethod (not recommended, as it couples the application code with Spring \ninfrastructure code)\n•\t Using the destroy-method attribute on a <bean/> XML definition\nIn the code sample there is a bean in the com.book.spring.components package that was implemented \nin such a way to clarify the Spring bean lifecycle. The bean is called CompleteLivingBean and has  \n@PostConstruct and @PreDestroy annotated methods, implements InitializingBean and \nDisposableBean, and has methods in which names are used as values for attributes init-method and \ndestroy-method. This bean was implemented using a combined lifecycle strategy to clearly show when each \ninitializer/destruction method is called by the Spring IoC and to clearly display the bean creation steps in \nFigure 2-5.\nThis is the configuration:\n<context:component-scan base-package=\"com.book.beans\"/>\n \n<bean id=\"livingBean\" class=\"com.book.beans.CompleteLivingBean\"\n       init-method=\"initMethod\"\n       destroy-method=\"destroyMethod\">\n       <property name=\"internal\" value=\"testValue\"/>\n</bean>\nThis is the definition of the bean class:\npublic class CompleteLivingBean implements InitializingBean, DisposableBean {\n    public String internal;\n \n    public CompleteLivingBean() {\n        logger.info(\"1. Constructor.\");\n \n    }\n \n     public void setInternal(String internal) {\n        logger.info(\"2. Setter.\");\n        this.internal = internal;\n \n}\n \n31",
          "tables": [],
          "code_blocks": [
            "init-method=\"initMethod\"\n       destroy-method=\"destroyMethod\">\n       <property name=\"internal\" value=\"testValue\"/>",
            "public String internal;\n \n    public CompleteLivingBean() {\n        logger.info(\"1. Constructor.\");\n \n    }\n \n     public void setInternal(String internal) {\n        logger.info(\"2. Setter.\");\n        this.internal = internal;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 46,
          "text": "Chapter 2 ■ Spring FundamentalS\n    @PostConstruct\n    public void postConstruct(){\n        logger.info(\"3. @PostConstruct.\");\n    }\n \n    @Override\n     public void afterPropertiesSet() throws Exception {\n        logger.info(\"4. afterPropertiesSet.\");\n    }\n \n    public void initMethod(){\n        logger.info(\"5. init-method.\");\n \n    }\n \n    @PreDestroy\n    public void preDestroy(){\n        logger.info(\"6. PreDestroy.\");\n \n    }\n \n    @Override\n    public void destroy() throws Exception {\n        logger.info(\"7. destroy.\");\n \n}\n \n     public void destroyMethod() throws Exception {\n        logger.info(\"8. destroy-method.\");\n \n    }\n \n}\nAlso, there is no restriction on method names used as values for init-method and destroy-method \nattributes; initMethod and destroyMethod were used in this example to make their purpose really obvious.\n■ !  in the certification exam, you might be asked which method is executed first—the one annotated with  \n@PostConstruct or the one mentioned by the init-method; so the CompleteLivingBean helps clear up when \nmethods are executed and why.\nWhen executing the test for the com.book.beans.BeanLifecycleTest bean, you will see the  \nfollowing output:\nINFO c.b.b.CompleteLivingBean - 1. Constructor.\nINFO c.b.b.CompleteLivingBean - 2. Setter.\nINFO c.b.b.CompleteLivingBean - 3. @PostConstruct.\nINFO c.b.b.CompleteLivingBean - 4. afterPropertiesSet.\n \n32",
          "tables": [],
          "code_blocks": [
            "@PostConstruct\n    public void postConstruct(){\n        logger.info(\"3. @PostConstruct.\");\n    }\n \n    @Override\n     public void afterPropertiesSet() throws Exception {\n        logger.info(\"4. afterPropertiesSet.\");\n    }\n \n    public void initMethod(){\n        logger.info(\"5. init-method.\");\n \n    }\n \n    @PreDestroy\n    public void preDestroy(){\n        logger.info(\"6. PreDestroy.\");\n \n    }\n \n    @Override\n    public void destroy() throws Exception {\n        logger.info(\"7. destroy.\");",
            "public void destroyMethod() throws Exception {\n        logger.info(\"8. destroy-method.\");\n \n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 47,
          "text": "Chapter 2 ■ Spring FundamentalS\nINFO c.b.b.CompleteLivingBean - 5. init-method.\n...\nINFO c.b.b.CompleteLivingBean - 6. @PreDestroy.\nINFO c.b.b.CompleteLivingBean - 7. destroy.\nINFO c.b.b.CompleteLivingBean - 8. destroy-method.\nAs represented in Figure 2-5, when a bean is created, the following succession of actions happens:\n  1.  The constructor is called first to create the bean.\n  2.  The dependencies are injected (setters are called).\n  3.  The pre-initialization BeanPostProcessors are consulted to see if they want to \ncall anything from this bean. The @PostConstruct annotation is registered by \nthe CommonAnnotationBeanPostProcessor, so this bean will call this annotated \nmethod. This method is executed right after the bean has been constructed and \nbefore the class is put into service,6 before the actual initialization of the bean \n(before afterPropertiesSet and init-method).\n  4.  The InitializingBean’s afterPropertiesSet is executed right after the \ndependencies were injected.\n  5.  The init-method attribute value method is executed last, as this is the actual \ninitialization method of the bean.\nWhen a bean is destroyed:\n  1.  The @PreDestroy method is executed, as this has to be executed before a destroy \nmethod, if one exists. The PreDestroy annotation is used on methods as a \ncallback notification to signal that the instance is in the process of being removed \nby the container.7\n  2.  The DisposableBean’s destroy method is executed next, as the Spring standard \norder defines it so.\n  3.  The destroy-method attribute value method is executed last, as this is the actual \ndestroy method of the bean, and the Spring standard order defines it so.\nThis is the simplified and more natural explanation of the bean lifecycle; in most cases, this is all you \nwill need. If you want to view the full picture with full plumbing details and other things the context does, \nyou can read the official JEE and Spring documentation.8\n■ !  the main reason for init-method and destroy-method creation was to give the developer a little \ncontrol over beans definitions from third-party libraries, which have classes that cannot be modified or \nextended. this way, the developer can decide what gets executed after creation and what executes before \ndestruction by using Xml configuration.\n6A snippet from the JEE official Java doc at http://docs.oracle.com/javaee/7/api/javax/annotation/\nPostConstruct.html.\n7A snippet from the JEE official Java doc at http://docs.oracle.com/javaee/7/api/javax/annotation/\nPreDestroy.html.\n8http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/\nBeanFactory.html.\n33",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 48,
          "text": "Chapter 2 ■ Spring FundamentalS\nHow Bean Post Processors Work\nA BeanPostProcessor allows the developer to process a bean instance created by the IoC container after its \ninstantiation, and then again after the initialization lifecycle event has occurred on it. BeanPostProcessors \nare defined as classes implementing the BeanPostProcessor interface, and are recognized by an application \ncontext and instantiated before any other beans in the container, because after their instantiation, they are \nused to manipulate other beans instantiated by the IoC container. The @PostConstruct and @PreDestroy \nannotations are processed by a bean called CommonAnnotationBeanPostProcessor. This is not a default \ninfrastructure bean for the Spring IoC container, so to use it you have to specify it in the configuration of the \napplication. You would expect to need something like this in the mvc-config.xml file: \n<bean class=\"o.s.c.a.CommonAnnotationBeanPostProcessor\"/>\nAnd this could work, but there will be some issues because configuring the bean like that overrides the \nSpring defaults, which might lead to unexpected behavior. Fortunately, this bean configuration is one of \nthose included in the following line, a Spring shortcut based on the context namespace:\n<context:component-scan base-package=\"com.book.beans\"/>\nOr in this one:\n<context:annotation-config/>\nThe BeanPostProcessor beans wrap other beans into AOP proxies that add extra behavior (more details \non AOP in the “Spring AOP” section). The Spring Framework has different types of BeanPostProcessors \nthat can be used for caching, transactions, security, and so forth. The CommonAnnotationBeanPostProcessor \nscans for methods annotated with @PostConstruct and @PreDestroy, and calls those methods at the \nappropriate time.\nThe code samples use logback to display logs. By increasing the granularity of the log for \nthe Spring Framework to DEBUG, you can see what is happening “behind the scenes,” and what \nCommonAnnotationBeanPostProcessor is actually doing. In the following configuration snippet, you are \nshown how to modify the granularity of the log by editing the logger element for the Spring Framework in \nthe logback.xml file:\n<logger name=\"org.springframework\" level=\"DEBUG\" additivity=\"false\">\n    <appender-ref ref=\"STDOUT\" />\n</logger>\nAfter modifying the log file when running the BeanLifecycleTest, you can see the behavior of the \nCommonAnnotationBeanPostProcessor9:\nINFO CompleteLivingBean - 1. Constructor.\nDEBUG CABPP - Found init method on class\n     CompleteLivingBean: private void CompleteLivingBean.postConstruct()\nDEBUG CABPP Found destroy method on class\n     CompleteLivingBean: protected void CompleteLivingBean.preDestroy()\n9CABPP is the acronym for CommonAnnotationBeanPostProcessor. It is used to fit a log quote nicely on a page.\n34",
          "tables": [],
          "code_blocks": [
            "<appender-ref ref=\"STDOUT\" />",
            "CompleteLivingBean: private void CompleteLivingBean.postConstruct()",
            "CompleteLivingBean: protected void CompleteLivingBean.preDestroy()"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 49,
          "text": "Chapter 2 ■ Spring FundamentalS\nDEBUG CABPP Registered init method on class CompleteLivingBean:\n     InitDestroyAnnotationBeanPostProcessor$LifecycleElement@64e17f36\nDEBUG CABPP Registered destroy method on class CompleteLivingBean:\n     DestroyAnnotationBeanPostProcessor$LifecycleElement@a27dd7d7\nINFO c.b.b.CompleteLivingBean - 2. Setter.\nDEBUG CABPP - Invoking init method on bean ’livingBean’:\n     private void CompleteLivingBean.postConstruct()\nINFO c.b.b.CompleteLivingBean - 3. @PostConstruct.\nINFO c.b.b.CompleteLivingBean - 4. afterPropertiesSet.\n...\nDEBUG CABPP - Invoking destroy method on bean ’livingBean’:\nprotected void CompleteLivingBean.preDestroy()\nINFO c.b.b.CompleteLivingBean - 1. @PreDestroy.\nThe previous section mentioned that there are annotation attributes equivalents for the init-method and \ndestroy-method. If you were to define CompleteLivingBean using a class annotated with @Configuration, \nit would look like this:\n@Bean(initMethod = \"initMethod\", destroyMethod = \"destroyMethod\")\npublic CompleteLivingBean getCompleteLivingBean() {\n    return new CompleteLivingBean();\n}\nAnd would be equivalent to this XML definition:\n<bean id=\"livingBean\" class=\"com.book.beans.CompleteLivingBean\"\n             init-method=\"initMethod\" destroy-method=\"destroyMethod\"/>\nBean Scopes\nWhen the Spring IoC instantiates beans, it creates a single instance for each bean—unless a property is set \non the bean definition specifying otherwise. The property in question is called scope and the default scope \nfor a bean is singleton. The scopes are defined in Table 2-2.\nTable 2-2.  Bean Scopes\nScope Description\nsingleton The Spring IoC creates a single instance of this bean and any request for beans with \nan id or ids matching this bean definition results in this instance being returned.\nprototype Every time a request is made for this specific bean, the Spring IoC creates  \na new instance.\nrequest The Spring IoC creates a bean instance for each HTTP request. Only valid in the \ncontext of a web-aware Spring ApplicationContext.\nsession The Spring IoC creates a bean instance for each HTTP session. Only valid in the \ncontext of a web-aware Spring ApplicationContext.\nglobal-session The Spring IoC creates a bean instance for each global HTTP session. Only valid in \nthe context of a web-aware Spring ApplicationContext.\n35",
          "tables": [],
          "code_blocks": [
            "InitDestroyAnnotationBeanPostProcessor$LifecycleElement@64e17f36",
            "DestroyAnnotationBeanPostProcessor$LifecycleElement@a27dd7d7",
            "private void CompleteLivingBean.postConstruct()",
            "return new CompleteLivingBean();",
            "init-method=\"initMethod\" destroy-method=\"destroyMethod\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 50,
          "text": "Chapter 2 ■ Spring FundamentalS\nSo when a bean is created without a scope attribute, the scope of the bean is singleton:\n<bean id=\"personRepository\" class=\"com.book.JdbcPersonRepository\">\n      <property name=\"dataSource\" ref=\"dataSource\"/>\n</bean>\nOtherwise, the scope of the bean is the one specified by the value of the scope attribute:\n<bean id=\"personRepository\" class=\"com.book.JdbcPersonRepository\"\n            scope=\"prototype\">\n       <property name=\"dataSource\" ref=\"dataSource\"/>\n</bean>\nThere is an annotation equivalent to this that can be used on @Component (and other stereotype \nannotations) annotated beans:\n@Component\n@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)\npublic class PrototypeBean {\n \n    private Logger logger = LoggerFactory.getLogger(PrototypeBean.class);\n    private static int instanceCounter = 0;\n    public PrototypeBean() {\n        logger.info(\"-> Constructing instance no: \" + (++instanceCounter));\n    }\n}\n■ !  @Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE) is equivalent to  \n@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) and @Scope(\"prototype\") because constant  \nSCOPE_PROTOTYPE is of type string and has the \"prototype\" value. using Spring constants eliminates the \nrisk of misspelling the scope value.\nThe @Scope annotation can also be used on a bean definition annotated with @Bean to specify the scope \nof the resulting bean.\n@Bean(name=\"personManager\")\n@Scope(\"prototype\")\n//or @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\npublic PrototypeBean getPrototypeBean(){\n    return new PrototypeBean();\n}\n36",
          "tables": [],
          "code_blocks": [
            "<property name=\"dataSource\" ref=\"dataSource\"/>",
            "scope=\"prototype\">\n       <property name=\"dataSource\" ref=\"dataSource\"/>",
            "private Logger logger = LoggerFactory.getLogger(PrototypeBean.class);\n    private static int instanceCounter = 0;\n    public PrototypeBean() {\n        logger.info(\"-> Constructing instance no: \" + (++instanceCounter));\n    }",
            "return new PrototypeBean();"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 51,
          "text": "Chapter 2 ■ Spring FundamentalS\nIf you were to execute the following test, the test would pass:\n@Test\n   public void testPrototype() {\n       // Create the application from the configuration\n       ClassPathXmlApplicationContext context =\n         new ClassPathXmlApplicationContext(\"classpath:test-app-config.xml\");\n       PrototypeBean pb1 = (PrototypeBean)context.getBean(\"prototypeBean\");\n       assertNotNull(pb1);\n       //the bean is requested by type\n       PrototypeBean pb2 = context.getBean(PrototypeBean.class);\n       assertNotNull(pb2);\n       assertNotEquals(pb1,pb2);\n}\nAnd this is what would be seen in the log file:\nDEBUG - Creating instance of bean 'prototypeBean'\nINFO -> Constructing instance no: 1\nDEBUG - Finished creating instance of bean 'prototypeBean'\nDEBUG - Creating instance of bean 'prototypeBean'\nINFO -> Constructing instance no: 2\nDEBUG - Finished creating instance of bean 'prototypeBean'\nA special case of bean scope is the scope of an inner bean. An inner bean is defined within the scope \nof another bean. The reason for doing this is because the bean does not need to be shared with other \nbeans, but is needed only for the creation of the enclosing bean. The scope attribute has no meaning for an \ninner bean and is ignored; so are the attributes id and name, as the bean is anonymous. When using Java \nConfiguration, the inner bean is just a local variable in a method. The following code snipped declares the \nDataSource bean as an inner bean:\n<util:properties id=\"dbProp\" location=\"classpath:datasource/db.properties\"/>\n \n<bean id=\"personRepository\" class=\"com.book.JdbcPersonRepository\">\n      <property name=\"dataSource\">\n          <bean id=\"dataSource\" class=\n          \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n              <property name=\"driverClassName\" value=\"#{dbProp.driverClassName}\"/>\n              <property name=\"url\" value=\"#{dbProp.url}\"/>\n              <property name=\"username\" value=\"#{dbProp.username}\"/>\n              <property name=\"password\" value=\"#{dbProp.password}\"/>\n      </bean>\n    </property>\n</bean>\n37",
          "tables": [],
          "code_blocks": [
            "// Create the application from the configuration\n       ClassPathXmlApplicationContext context =\n         new ClassPathXmlApplicationContext(\"classpath:test-app-config.xml\");\n       PrototypeBean pb1 = (PrototypeBean)context.getBean(\"prototypeBean\");\n       assertNotNull(pb1);\n       //the bean is requested by type\n       PrototypeBean pb2 = context.getBean(PrototypeBean.class);\n       assertNotNull(pb2);\n       assertNotEquals(pb1,pb2);",
            "<property name=\"dataSource\">\n          <bean id=\"dataSource\" class=\n          \"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n              <property name=\"driverClassName\" value=\"#{dbProp.driverClassName}\"/>\n              <property name=\"url\" value=\"#{dbProp.url}\"/>\n              <property name=\"username\" value=\"#{dbProp.username}\"/>\n              <property name=\"password\" value=\"#{dbProp.password}\"/>\n      </bean>\n    </property>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 52,
          "text": "Chapter 2 ■ Spring FundamentalS\nAccessing Beans\nBeans can be identified in three ways: by type, by name, and by id. The following subsections explain \nthese in detail; examples are provided for each case. How to access beans configured with annotates is \ncovered too.\nBean Identification by Type\nA bean can be identified by its type if there is only one definition of a bean with that type in the Spring \nconfiguration file.\nThe BeanPostPrecessor classes registered by <context:annotation-config/> that scan for \nannotations are singleton infrastructure beans instantiated by the Spring IoC container, when that \nconfiguration line is present in a Spring configuration file. At any time during the life of an application only \none instance of each of those beans will exist. Basically, this configuration file:\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"\n       http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\">\n \n       <context:annotation-config/>\n \n</beans>\nIs equivalent to this:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n<!--the org.springframework. package was shortened to o.s.\n for this code to fit the page better -->\n<bean class=\"o.s.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor\"/>\n<bean class=\"o.s.context.annotation.CommonAnnotationBeanPostProcessor\"/>\n<bean class=\"o.s.orm.jpa.support.PersistenceAnnotationBeanPostProcessor\"/>\n<bean class=\"o.s.beans.factory.annotation.RequiredAnnotationBeanPostProcessor\"/>\n \n</beans>\nConsidering the following bean definition:\n<bean class=\"com.book.sandbox.SimpleBean\" />\n38",
          "tables": [],
          "code_blocks": [
            "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"\n       http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\">\n \n       <context:annotation-config/>",
            "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 53,
          "text": "Chapter 2 ■ Spring FundamentalS\nIf there is no other bean definition with the same class attribute value, the bean can be accessed  \nlike this:\nSimpleBean sb = context.getBean(SimpleBean.class);\nOr can even be injected as a dependency via autowiring:\n@Autowired\nSimpleBean simpleBean;\n■ !  in the book-code/02-chapter project, there is a class called BeanIdentificationTest that tests \nvarious scenarios of bean identification.\nBean Identification by Name\nThe <bean/> element has an attribute called name. The value assigned to this attribute in a bean definition \ncan be used to access this bean. A duplicate bean name will invalidate a configuration file. The name is \nflexible and can be used to define more than one name when the values are separated by a comma (\",\") \nor a semicolon (\";\"). The bean is defined as follows: \n<bean name=\"sbb0\" class=\"com.book.sandbox.SimpleBean\"/>\nCan be accessed as follows:\n// the old way\nSimpleBean sb0 = (SimpleBean)context.getBean(\"sb0\");\n  // or the Spring 3.0 way\nSimpleBean sb0 = context.getBean(\"sb0\", SimpleBean.class);\nAnd can also be injected as a dependency via autowiring using the @Qualifier annotation:\n@Autowired\n@Qualifier(value = \"sb0\")\nSimpleBean simpleBean;\nThe @Bean annotation has a name attribute too, so an equivalent annotation configuration  \ncan be created:\n@Bean(name=\"simpleBean\")\npublic SimpleBean getSimpleBean(){\n  return new SimpleBean();\n}\n39",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 54,
          "text": "Chapter 2 ■ Spring FundamentalS\nBean Identification by id\nThe <bean/> element has an attribute called id. The value assigned to this attribute in a bean definition can \nbe used to access the bean. This attribute uniquely identifies a bean, so a duplicate bean id will invalidate \na configuration file. This attribute can appear alongside the name attribute, and both can be used to \naccess the bean. The id and the name attributes serve the same purpose: they are both used to define bean \nidentifications. The difference between them is that the value of the id attribute must conform to XML \nstandard id, which means no weird characters like a comma (\",\") or semicolon (\";\") can be contained in it.\nBasically, the following bean definition is valid:\n<bean name=\"sb0\" id=\"id0\" class=\"com.book.sandbox.SimpleBean\"/>\nAnd the following test will pass, as both calls will return the same bean:\n@Test\npublic void testBeans() {\n    ...\n    SimpleBean sb01 = context.getBean(\"sb0\", SimpleBean.class);\n    SimpleBean sb02 = context.getBean(\"id0\", SimpleBean.class);\n    assertTrue(sb01 == sb02);\n}\nAccessing Annotated Beans\nThe beans defined using @Component and extensions of it can be autowired by name or by type without any \nextra configuration.\n■ CC  When using annotation configuration—beans annotated with @Component or extensions of it—the Spring \nioC container also creates a logical name for these beans by lowercasing the first letter of the class name.\n@Component\n@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)\npublic class PrototypeBean { ... }\n...\n\\\\ requesting bean by name\nPrototypeBean pb1 = (PrototypeBean)context.getBean(\"prototypeBean\");\nassertNotNull(pb1);\n\\\\Requesting bean by type\nPrototypeBean pb2 = context.getBean(PrototypeBean.class);\nassertNotNull(pb2);\nassertNotEquals(pb, pb2);\n40",
          "tables": [],
          "code_blocks": [
            "...\n    SimpleBean sb01 = context.getBean(\"sb0\", SimpleBean.class);\n    SimpleBean sb02 = context.getBean(\"id0\", SimpleBean.class);\n    assertTrue(sb01 == sb02);"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 55,
          "text": "Chapter 2 ■ Spring FundamentalS\nSpring AOP\nAOP is an acronym for aspect-oriented programming and represents a programming paradigm that \naims to simplify code by grouping repetitive operations in units called aspects. AOP helps managing \ncommon functionality that spans across the application, like logging, security, and transactionality. AOP \ncomplements OOP (object-oriented programming) by providing a more advanced way of decoupling the \ncode and modularizing an application.\nThe AOP framework complements the Spring IoC container. The container can be used without it \nin small applications that do not require the use of security or transactions, because these are the key \ncrosscutting concerns for enterprise applications.\nIn Spring, an aspect is class annotated with @Aspect. It contains methods called advices that are \nannotated with aspect-specific annotations that intercept the execution of other beans’ methods and \nperforms specific operations before and/or after their execution, and can prevent the execution of an \nintercepted method if necessary.\nThe AOP framework makes this possible by scanning all aspects when the application context is started, \nand creates AOP proxy objects that wrap around existing beans to implement aspect contracts. When the \ntarget beans are requested for usage or injection, the proxy object is injected or returned instead. From a \ndeveloper’s point of view, it looks like the intended object is used, but the Spring IoC container works with \nthe proxy object that is wrapped around it.\nLet’s see how AOP can make things easier when you want to save a Person instance to the database \nusing the PersonManagerImpl mentioned at the beginning of the chapter.\nThe following is what the code looks like in Spring without AOP. Figure 2-6 shows the UML diagram.\n<!--  configuration  will  contain  this  element  -->\n<bean  id=\"txManager\"  class=\n       \"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n    <property  name=\"dataSource\"  ref=\"dataSource\"/>\n</bean>\n \n //  PersonManagerImpl.java\n...\n@Autowired\n@Qualifier(\"txManager\")\nPlatformTransactionManager  transactionManager;\n@Autowired\n@Qualifier(\"personRepository\")\nPersonRepository repo;\n \npublic int save(Person person) {\n       TransactionDefinition def = new DefaultTransactionDefinition();\n       TransactionStatus status = transactionManager.getTransaction(def);\n       int result = repo.save(person);\n \n       transactionManager.commit(status);\n       return result;\n}\n41",
          "tables": [],
          "code_blocks": [
            "\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n    <property  name=\"dataSource\"  ref=\"dataSource\"/>",
            "TransactionDefinition def = new DefaultTransactionDefinition();\n       TransactionStatus status = transactionManager.getTransaction(def);\n       int result = repo.save(person);\n \n       transactionManager.commit(status);\n       return result;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 56,
          "text": "Chapter 2 ■ Spring FundamentalS\nFigure 2-6.  Diagram in non-AOP mode\nAnd here is how it looks using AOP (the UML diagram is presented in Figure 2-7):\n<!-- configuration will contain this element needed to switch on\nthe transactional behaviour -->\n<tx:annotation-driven transaction-manager=\"txManager\"/>\n// PersonManagerImpl.java\n@Component(\"personManager\")\n@Transactional\npublic class PersonManagerImpl implements PersonManager {\n    @Autowired\n    @Qualifier(\"personRepository\")\n    PersonRepository repo;\n \n    public int save(Person person) {\n        return repo.save(person);\n}\n}\n42",
          "tables": [],
          "code_blocks": [
            "@Autowired\n    @Qualifier(\"personRepository\")\n    PersonRepository repo;\n \n    public int save(Person person) {\n        return repo.save(person);"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 57,
          "text": "Chapter 2 ■ Spring FundamentalS\nFigure 2-7.  Diagram in AOP mode\nThe <tx:annotation-driven/> configuration element is defined in the Spring tx namespace, which \nhas to be added to the configuration file:\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xsi:schemaLocation=\"\n       http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/tx\n       http://www.springframework.org/schema/tx/spring-tx.xsd\">\n       ...\n</beans>\nAnd in order to run the methods of a bean in a transactional environment, you also have to specify the \nTransactionManager instance used to handle the transactions. In a test environment, the annotation  \n@TransactionConfiguration is used:\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations = {\"classpath:app-aop-cfg.xml\",\n        \"classpath:spring/test-db-config.xml\"})\n@TransactionConfiguration(transactionManager = \"txManager\")\npublic class PersonSaveTest {\n...\n}\n43",
          "tables": [],
          "code_blocks": [
            "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xsi:schemaLocation=\"\n       http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/tx\n       http://www.springframework.org/schema/tx/spring-tx.xsd\">\n       ...",
            "\"classpath:spring/test-db-config.xml\"})"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 58,
          "text": "Chapter 2 ■ Spring FundamentalS\nTo verify that the test method is running in a transaction environment, you can switch the Spring \nFramework log to DEBUG, as explained in the “Lifecycle and Instantiation” section, and run the test. In the \nconsole, the following logs will prove this:\nDEBUG o.s.j.d.DataSourceTransactionManager - Acquired Connection\n     conn1: url=jdbc:h2:mem:dataSource user=SA for JDBC transaction\nDEBUG o.s.j.d.DataSourceTransactionManager - Switching JDBC Connection\n     conn1: url=jdbc:h2:mem:dataSource user=SA to manual commit\nINFO c.b.a.PersonManagerImpl - -> Calling repo.save(person)\nDEBUG o.s.j.c.JdbcTemplate - Executing prepared SQL update\nDEBUG o.s.j.c.JdbcTemplate - Executing prepared SQL statement\n     insert into person (firstname, lastname, date_of_birth) values (?,?,?)\nDEBUG o.s.j.c.JdbcTemplate - SQL update affected 1 rows\nINFO c.b.a.PersonManagerImpl - -> repo.save execution completed.\nDEBUG o.s.j.d.DataSourceTransactionManager - Initiating transaction commit\nDEBUG o.s.j.d.DataSourceTransactionManager - Committing JDBC transaction on Connection\n     conn1: url=jdbc:h2:mem:dataSource user=SA\nDEBUG o.s.j.d.DataSourceTransactionManager - Releasing JDBC Connection\n     conn1: url=jdbc:h2:mem:dataSource user=SA after transaction\n■ CC  if the bean of type TransactionManager is named transactionManager when in a transactional \nenvironment, the Spring ioC container will detect it automatically and there is no need to specify it as an \nargument for the @TransactionConfiguration annotation. even more, @TransactionConfiguration can be \nreplaced with @Transactional, and the test methods will still be executed in a transactional environment.\nthe transaction-manager attribute from the <tx:annotation-driven/> can be omitted too. \nalso, @Qualifier(\"transactionManager\") is not needed when the transactionManager is autowired and \nthe bean of type TransactionManager has the default name.\nin the code samples presented here, a bean of type TransactionManager with a different name was used to \nshow the developer the configurations needed to work in cases other than the default one, because in bigger \napplications, multiple beans of type TransactionManager might be needed.\nTesting Spring Applications\nWhen it comes to writing code, there are two types of testing that matter: unit testing and integration testing.\n•\t Unit testing is used to test small units of code, thus its naming. Unit testing is easy to \ndo—not much setup is necessary, and since JUnit10 has introduced @Test annotation \nwriting, unit tests have become a breeze.\n10The most commonly used Java testing framework (see http://junit.org).\n44",
          "tables": [],
          "code_blocks": [
            "conn1: url=jdbc:h2:mem:dataSource user=SA for JDBC transaction",
            "conn1: url=jdbc:h2:mem:dataSource user=SA to manual commit",
            "insert into person (firstname, lastname, date_of_birth) values (?,?,?)",
            "conn1: url=jdbc:h2:mem:dataSource user=SA",
            "conn1: url=jdbc:h2:mem:dataSource user=SA after transaction"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 59,
          "text": "Chapter 2 ■ Spring FundamentalS\n•\t Integration testing is used to test bigger chunks of code made up of objects \ninteracting together in a given context, and the focus is set on business logic and \nobject integration with each other. The context is usually made up of mocks or stubs \nthat replace the objects, which are not the focus of the tests. You can imagine that \ncreating a testing context is not a simple job.\nThe Spring Framework includes a testing module called spring-test that makes integration testing \nreally practical to implement. The tests that have been used throughout this chapter use the spring-test \nmodule.\n•\t The SpringJUnit4ClassRunner, as the names says, is a Spring class used to tell JUnit \nthat the tests in this class are executed in a Spring test context.\n•\t The @ContextConfiguration receives one or more configuration files as parameters \nthat are used to initialize the test context.\n•\t The @TransactionConfiguration is the annotation that injects the \ntransactionManager instance used to run tests in a transactional environment. As \nmentioned earlier, this can be skipped, and @Transactional can be used when the \nTransactionManager bean has the default name.\n■ CC  When using @ContextConfiguration to annotate a test class, the configuration file path can be \nskipped, and then Spring ioC container will look for a file named [TestClassName]-context.xml in the same \nlocation where the test class is defined. When the project has a maven structure, the configuration is placed in \nthe resources directory, and the directories matching the package name for the test class are created so the \nfile will have the same relative path as the test class.\nSo if you have test class com.book.simple.SimpleTest annotated with @ContextConfiguration, then \nresources will have com/books/simple/SimpleTest-context.xml to provide the test context configuration, \nwhich is automatically discovered and used by the Spring ioC container.\nSummary\nAfter reading this chapter, you should have a basic knowledge of how Spring does its magic and understand \nthe following:\n•\t Two flavors of configuration can be mixed: XML-based (decoupled from classes \ncode) and Java annotation–based (bean definitions are mixed in the class code)\n•\t The lifecycle of a bean\n•\t How to access a bean\n•\t What AOP is and how and where Spring can apply it\n•\t How to test Spring applications\n45",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 60,
          "text": "Chapter 2 ■ Spring FundamentalS\nQuick Quiz\nQuestion 1: What is a bean?\n  A.  a plain old Java object\n  B.  an instance of a class\n  C.  an object that is instantiated, assembled, and managed by a Spring IoC container\nQuestion 2: What is the default scope of a bean?\n  A.  default\n  B.  singleton\n  C.  protected\n  D.  prototype\nQuestion 3: What types of dependency injection are supported by Spring IoC container?\n  A.  setter injection\n  B.  constructor injection\n  C.  interface-based injection\n  D.  field-based injection\nQuestion 4: What is true about @PostConstruct and @PreDestroy ?\n  A.  they are JSR-250 annotations\n  B.  they are supported by AutowiredAnnotationBeanPostProcessor\n  C.  they are registered by the <context:component-scan/> element\nDetailed answers are in the Appendix.\nPractical Exercise\nThe practice module for this chapter is in the book-code project; it is named 02-chapter-practice. The \nsolution is in the 02-chapter-solution module. You are given the code for a few related beans. Your task is \nto complete the existing configuration files, to create test contexts, and to make sure that the tests pass.\nThe book-code project is a gradle multimodule project. It can be built from the command line by \nrunning gradle build under the book-code directory. This will build all modules of the project. The build \nwill fail when run for the first time because of the unresolved tasks in the -practice projects. If you do it this \nway, you will have something similar to the following output in your console:\n$ gradle build\n..\n:02-chapter-practice:compileJava UP-TO-DATE\n:02-chapter-practice:processResources UP-TO-DATE\n:02-chapter-practice:classes UP-TO-DATE\n:02-chapter-practice:jar UP-TO-DATE\n:02-chapter-practice:assemble UP-TO-DATE\n:02-chapter-practice:compileTestJava UP-TO-DATE\n:02-chapter-practice:processTestResources UP-TO-DATE\n46",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 61,
          "text": "Chapter 2 ■ Spring FundamentalS\n:02-chapter-practice:testClasses UP-TO-DATE\n:02-chapter-practice:test\n \ncom.book.plain.PlainPersonSaveTest > savePerson FAILED\njava.lang.AssertionError at PlainPersonSaveTest.java:31\n \n..\nBUILD FAILED\nTotal time: 4.096 secs\nIf you decided to use the Intellij IDEA editor on the Gradle tab, you already have available all the \npredefined Gradle tasks and you can just double-click the one you are interested in. In the following image, \nthe selected task is the build task for the project book-code; but if you scroll down in that view, you will \nsee the modules in the project and you can choose to build a specific module. So double-click under the \n:02-chapter-practice on the build task and execute it. The build will fail, but this is expected. This task will \nsucceed because it does not execute the tests. In Figure 2-8 you can see how your IDE should look.\nFigure 2-8.  Intellij IDEA Gradle run\n■ !  to compile projects without failing (due to tests in practice projects that are not fixed yet), you can use the \nallCompile task, which was created this purpose.\n47",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 62,
          "text": "Chapter 2 ■ Spring FundamentalS\nOn the left in the Project view, you can see the book-code project and the component modules. Each \nmodule has the typical Maven structure mentioned earlier in the chapter (see Figure 2-3). Expand the \n02-chapter-practice and look in the com.book.base package. In it you will notice the implementation of \nthe Person class. The instances of this class are used in the test examples and are handled by instances of \nclasses that implement PersonManager.\nThe PersonManager interface defines the int save(Person person) method, which should return the \nnumber of records that were affected. In this case, it can be only 1 (one Person instance was saved) or 0 (no \nPerson instance was saved).\nThe PersonRepository interface will be implemented by the repository classes used in this example. \nSome repositories will actually save Person instances into a test database, but most of them will just print \na log message to tell the developer that the method was executed correctly. The code for this chapter was \ncreated to show how a Spring application is configured, so more complex functionality is not covered. \nClasses and methods are commented properly, so using them is very straightforward.\nEvery time a project or module is built with gradle, a directory named build is created containing the \ndetailed results of the build for that project or module. This can be seen in Figure 2-9.\nFigure 2-9.  Intellij IDEA Project view\n48",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 63,
          "text": "Chapter 2 ■ Spring FundamentalS\nWhat is relevant when working with these sources is the reports\\tests\\index.html file. When opened \nin a browser, it displays all the failing tests in that module. This page can be refreshed during development \nto track, step by step, the number of tests that have to be fixed. When accessed after the first gradle build, it \nshould display what is depicted in Figure 2-10.\nFigure 2-10.  Gradle-generated index.html\nThere are eight tests failing, and they do so because the implementation for them is incomplete. \nCompleting them has been left as practice for you, the developer reading this book. Click the TODO label in \nthe bottom-left corner. A view will open that should look like what is shown in Figure 2-11. Click and expand \neverything. Every TODO task has a number attached. Start resolving the tasks in ascending order.\n49",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 64,
          "text": "Chapter 2 ■ Spring FundamentalS\nFigure 2-11.  Intellij IDEA TODO tab\nThe root package is called com.book. Under this package all packages will group classes with a common \npurpose. For example, the plain package contains classes that implement the functionality for saving a \nPerson instance by using plain Java—no Spring beans or configuration files, as was shown in the beginning \nof the “The Spring Core Container” section. As Maven convention requires, the test classes are placed in the \nsame package as the classes being tested, but under the test directory. The first exercise is to complete the \nplain Java implementation to save a Person instance and make the com.book.plain.PlainPersonSaveTest. \nAfter you have written the code, run the test.\nJust right-click anywhere in the file and choose Run and the class name in the menu, similar to what you \nsee in Figure 2-12.\nFigure 2-12.  Intellij IDEA— running a Gradle test\n50",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 65,
          "text": "Chapter 2 ■ Spring FundamentalS\nIf the test does not pass, go back and re-read the beginning of this chapter to refresh your memory on \nhow dependency injection is handled in plain Java. After you are done and you have a successful build for \n02-chapter-practice, you can compare your solution to the one in 02-chapter-solution.\nAlso, you should take a look at the sources, test sources, and resources under packages aop, noaop, \nand sandbox.\nThe book.code.spring.noaop package contains classes that implement a transactional bean used to \nsave a Person instance, but opening and committing a transaction are done manually.\nThe book.code.spring.aop package contains classes that implement a transactional bean used to \nsave a Person instance using Spring AOP.\nBoth implementations are tested in a test context that uses a H2 in-memory database to perform \nthe actual save of a Person instance. The configuration of the test database is in the test-db-config.xml \nfile, and you will notice that the Spring jdbc namespace is used. As JPA is not used, you need some *.sql \ninitialization files, which can be found under the test/resources/datasource directory.\n<jdbc:embedded-database id=\"dataSource\" type=\"H2\">\n    <jdbc:script location=\"classpath:datasource/db-schema.sql\"/>\n    <jdbc:script location=\"classpath:datasource/db-test-data.sql\"/>\n</jdbc:embedded-database>\nThe com.book.spring.sandbox contains classes and tests designed to help you understand how bean \nidentification works.\nWhen you have passed all the tests and you feel confident that you have a solid grasp of the Spring \nfundamentals, you can continue to the next chapter.\n51",
          "tables": [],
          "code_blocks": [
            "<jdbc:script location=\"classpath:datasource/db-schema.sql\"/>\n    <jdbc:script location=\"classpath:datasource/db-test-data.sql\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 66,
          "text": "Chapter 3\nSpring MVC\nThis chapter was written with the intention of teaching a developer how to create a simple Spring web \napplication and understand how the background plumbing can be modified according to the desired \napproach. Think of Spring infrastructure components as LEGO pieces. You can connect them in different \nways to get the final result: a working web application. After going through this chapter, you should be able \nidentify and use the main components of Spring MVC to create a web application in a few easy steps.\nAside from describing and giving examples on how Spring Web MVC works, this chapter also teaches \nyou how to integrate it with different view technologies, like JSP, Apache Tiles, and Thymeleaf.1\nMVC Basics\nSpring Web MVC is a popular request-driven framework based on the model-view-controller software \narchitectural pattern, which was designed to decouple components that by working together make a fully \nfunctional user interface.\nThe typical model-view-controller behavior is displayed in Figure 3-1.\nFigure 3-1.  Typical MVC behavior\n1Thymeleaf is the new sheriff in Web town. It is an XML/XHTML /HTML5 template engine that works both in web and \nnon-web environments. It is really easy to integrate it with Spring. If you want to read more about it before using it in the \npractice code for this chapter, go to the official site at http://www.thymeleaf.org/.\n53",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 67,
          "text": "Chapter 3 ■ Spring MVC\nThe Spring Web MVC provides preconfigured beans for the implementation of this behavior.  \nThese beans are contained in two main libraries:\n•\t spring-web.jar\n•\t spring-webmvc.jar\nThese libraries are the core of all Spring-related modules. At the center of the Spring Web MVC \nframework sits the DispatcherServlet class, which is the entry point for any Spring web application. Before \nany HTTP request reaches the specific controller, it has to go through DispatcherServlet for that controller \nto be identified.2 In a nutshell, the DispatcherServlet coordinates all request-handling operations using \nother infrastructure components defined in Spring and user-defined components. And it acts as a front \ncontroller, an entry point for the web application. The Spring components mentioned earlier can be \ncategorized as follows:\n•\t Spring MVC infrastructure components\n•\t handler mappings\n•\t handler adapters\n•\t view resolvers\n•\t personalization beans\n•\t exception resolvers\n•\t User-provided web components\n•\t handler interceptors\n•\t controllers\nThus, the Spring MVC functional flow can be sketched somewhat like in Figure 3-2.\n2If it looks as if Spring MVC resembles Struts, you are definitely not imagining things. The Spring Web MVC was inspired \nby Struts, which was one of the first MVC-based frameworks. The DispatcherServlet in Spring has the same responsi-\nbilities as the ActionServlet in Struts, as both are implementations of the Front Controller Pattern. You can read more \nabout this software design pattern at http://www.martinfowler.com/eaaCatalog/frontController.html.\n54",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 68,
          "text": "Chapter 3 ■ Spring MVC\nFigure 3-2.  Spring MVC functional flow\nBriefly put, to configure a Spring web application, you need to do the following:\n•\t Define the DispatcherServlet as the main servlet handling all requests \nto the application in web.xml and link it to the Spring configuration, or \nconfigure this servlet programmatically by using a class implementing \nWebApplicationInitializer (only possible in a Servlet 3.0+ environment)\n•\t Define the application configuration (usually in a Spring configuration file named \nmvc-config.xml or a Java configuration class), which should do the following:\n•\t Define the MVC context used (handler adapter, handler mapping, and other \ninfrastructure beans)\n•\t Define a view resolver (or more)\nConfiguring MVC\nSpring Web MVC can be configured just like any other Spring application, via XML (using mostly the <mvc/> \nnamespace), Java configuration annotations, or by mixing these. A Spring web application can be configured \nin two ways:\n•\t All-in-one configuration: web.xml (part of JEE specification) or a \nWebApplicationInitializer implementation and Spring application configuration \nfiles. Back-end and front-end configurations are coupled and the DispatcherServlet \nis the only entry point to the application.\n•\t Separate configuration: Used for more complex applications when the \nDispatcherServlet is not the only entry point (usually applications that require the \nback end to be accessed via REST or SOAP requests/web services, and in this case, \nthe back end needs a separate listener).\n55",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 69,
          "text": "Chapter 3 ■ Spring MVC\nTypical Java web applications that can be built with Gradle have the internal structure consecrated by \nMaven. The folder containing web-specific files, configuration files, and static resources is named webapp. \nThe projects used in this chapter all have this structure (in Intellij IDEA), as shown in Figure 3-3.\nFigure 3-3.  Typical Java web application structure with web.xml configuration file\nXML Configuration\nSpring XML configuration for core applications was covered in the previous chapter. But XML namespaces \ncan be used for declaring web-specific infrastructure beans too. There are multiple ways to configure a web \napplication; multiple files can be used for web-specific beans to be grouped together based on their purpose. \nIn this chapter, multiple ways to create a configuration are presented, and after getting familiar with all of them, \nyou will be able to “mix and match” to create configurations for the types of applications that you will develop.\nAll-in-One Configuration\nThis is the simplest way to configure a web application. The Spring configuration files are all referred to in \nthe web.xml file as a value for the contextConfigLocation parameter.\n<servlet>\n    <servlet-name>admin</servlet-name>\n    <servlet-class>\n    org.springframework.web.servlet.DispatcherServlet\n    </servlet-class>\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>\n        /WEB-INF/spring/mvc-config.xml\n        /WEB-INF/spring/app-config.xml\n        </param-value>\n    </init-param>\n \n</servlet>\n     \n56",
          "tables": [],
          "code_blocks": [
            "<servlet-name>admin</servlet-name>\n    <servlet-class>\n    org.springframework.web.servlet.DispatcherServlet\n    </servlet-class>\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>\n        /WEB-INF/spring/mvc-config.xml\n        /WEB-INF/spring/app-config.xml\n        </param-value>\n    </init-param>",
            "56"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 70,
          "text": "Chapter 3 ■ Spring MVC\n<servlet-mapping>\n    <servlet-name>admin</servlet-name>\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\nIn the preceding case, the mvc-config.xml contains the Spring configuration for the front-end \n(controllers and MVC infrastructure beans) of the application, and the app-config.xml contains the \nback-end configuration (service beans). In this case, all Spring configuration files are loaded by the \nDispatcherServlet and a web context is created.\nSeparate Configuration\nThe proper way to configure a more complex web application to make it more extensible and flexible is to \ndecouple the front-end configuration the back-end configuration. Such an implementation provides web \nservices access to the back end. This can be done by having a separate listener for the back-end configuration. \nThis complicates the content of web.xml a bit, and the configuration looks similar to the next one:\n<context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>/WEB-INF/spring/app-config.xml</param-value>\n</context-param>\n \n<listener>\n    <listener-class>\n        org.springframework.web.context.ContextLoaderListener\n    </listener-class>\n</listener>\n \n<servlet>\n    <servlet-name>admin</servlet-name>\n    <servlet-class>\n        org.springframework.web.servlet.DispatcherServlet\n   </servlet-class>\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/spring/mvc-config.xml</param-value>\n    </init-param>\n</servlet>\n<servlet-mapping>...</servlet-mapping>\n■ CC  When the back-end Spring configuration file is named applicationContext.xml, there is no need to \nspecify the <context-param> element in your configuration. the Spring ioC container accepts the previously \nmentioned file name as a default name for the backed configuration file and it will load it automatically.\n57",
          "tables": [],
          "code_blocks": [
            "<servlet-name>admin</servlet-name>\n    <url-pattern>/</url-pattern>",
            "<param-name>contextConfigLocation</param-name>\n    <param-value>/WEB-INF/spring/app-config.xml</param-value>",
            "<listener-class>\n        org.springframework.web.context.ContextLoaderListener\n    </listener-class>",
            "<servlet-name>admin</servlet-name>\n    <servlet-class>\n        org.springframework.web.servlet.DispatcherServlet\n   </servlet-class>\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/spring/mvc-config.xml</param-value>\n    </init-param>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 71,
          "text": "Chapter 3 ■ Spring MVC\nThe web.xml file is transformed to this:\n    <listener>\n        <listener-class>\n            org.springframework.web.context.ContextLoaderListener\n        </listener-class>\n    </listener>\n <!-- The backend configuration file is named applicationContext.xml -->\n <!-- The <context-param> is no longer needed.-->\n \n<listener>\n    <listener-class>\n        org.springframework.web.context.ContextLoaderListener\n    </listener-class>\n</listener>\n \n<servlet>\n    <servlet-name>mvc-dispatcher</servlet-name>\n    <servlet-class>\n         o.s.web.servlet.DispatcherServlet\n   </servlet-class>\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/spring/mvc-config.xml</param-value>\n    </init-param>\n</servlet>\n<servlet-mapping>...</servlet-mapping>\n■ !  throughout this book, package names may not be presented fully: or.springframework. usually \nbecomes o.s. the reason for this is to fit the configuration and code samples better in the page to make  \nthem more readable.\n■ CC  if the Spring MVC configuration file is named [servletName]-servlet.xml, there is no need to \nspecify the <init-param> element either. the Spring ioC container accepts the previously mentioned file \nname template (replace servletName with the name given to the servlet) as a default name for the front-end \nconfiguration file and it will load it automatically.\nThe separate configuration can be simplified like this:\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/app-config.xml</param-value>\n    </context-param>\n58",
          "tables": [],
          "code_blocks": [
            "<listener>\n        <listener-class>\n            org.springframework.web.context.ContextLoaderListener\n        </listener-class>\n    </listener>\n <!-- The backend configuration file is named applicationContext.xml -->\n <!-- The <context-param> is no longer needed.-->",
            "<listener-class>\n        org.springframework.web.context.ContextLoaderListener\n    </listener-class>",
            "<servlet-name>mvc-dispatcher</servlet-name>\n    <servlet-class>\n         o.s.web.servlet.DispatcherServlet\n   </servlet-class>\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/spring/mvc-config.xml</param-value>\n    </init-param>",
            "<context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/app-config.xml</param-value>\n    </context-param>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 72,
          "text": "Chapter 3 ■ Spring MVC\n    <listener>\n        <listener-class>\n            org.springframework.web.context.ContextLoaderListener\n        </listener-class>\n    </listener>\n     \n    <servlet>\n        <servlet-name>mvc-dispatcher</servlet-name>\n<!-- The frontend configuration file is named mvc-dispatcher-servlet.xml -->\n <!-- The <init-param> is no longer needed.-->\n       <servlet-class>\n           o.s.web.servlet.DispatcherServlet\n       </servlet-class>\n       <load-on-startup>1</load-on-startup>\n   </servlet>\n   <servlet-mapping>\n       <servlet-name>mvc-dispatcher</servlet-name>\n       <url-pattern>/</url-pattern>\n   </servlet-mapping>\nCustomizing the configuration is easy. All rules from Spring core configuration apply. Wildcards are \nsupported. Different resource prefixes can be used. The DispatcherServlet can even be configured to  \na different url-pattern. In this case, the requests to the application must contain the value of the  \nurl-pattern value, otherwise they won’t be handled by the DispatcherServlet. This approach is suited \nwhen the application uses multiple DispatcherServlet instances.\n<init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>\n             /WEB-INF/spring/*-beans.xml\n            classpath:com/book/app-config.xml\n        </param-value>\n    </init-param>\n...\n<servlet-mapping>\n    <servlet-name>admin</servlet-name>\n    <url-pattern>/admin/*</url-pattern>\n</servlet-mapping>\nIn the previous example, the DispatcherServlet handles the request with the URL matching \n[server:port]\\[application-name]\\admin\\*.\n■ !  throughout this book and in all code examples, the Spring MVC configuration file is named mvc-config.xml \nto emphasize that only Spring MVC components are defined in it; otherwise, this configuration file can be named \nin any other way. the contents of this file are used for view, locale, and time zone resolution and for customizing \nhandler mappings and other Spring MVC infrastructure beans.\n59",
          "tables": [],
          "code_blocks": [
            "<listener>\n        <listener-class>\n            org.springframework.web.context.ContextLoaderListener\n        </listener-class>\n    </listener>\n     \n    <servlet>\n        <servlet-name>mvc-dispatcher</servlet-name>",
            "<servlet-class>\n           o.s.web.servlet.DispatcherServlet\n       </servlet-class>\n       <load-on-startup>1</load-on-startup>\n   </servlet>\n   <servlet-mapping>\n       <servlet-name>mvc-dispatcher</servlet-name>\n       <url-pattern>/</url-pattern>\n   </servlet-mapping>",
            "<param-name>contextConfigLocation</param-name>\n        <param-value>\n             /WEB-INF/spring/*-beans.xml\n            classpath:com/book/app-config.xml\n        </param-value>\n    </init-param>",
            "<servlet-name>admin</servlet-name>\n    <url-pattern>/admin/*</url-pattern>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 73,
          "text": "Chapter 3 ■ Spring MVC\nThe controllers can be defined in the mvc-config.xml configuration file using the bean tag element,  \njust like any other bean, but starting with Spring 3.0, the preferred way to define controllers is using the  \n@Controller annotation, which is why the Spring MVC is often referred to as @MVC.\nThe main component of an MVC XML configuration is the <mvc:annotation-driven/> element \nthat registers all necessary default infrastructure beans for a web application to work: handler mapping, \nvalidation conversion beans, and many others.\nAnother component that is important is the <mvc:default-servlet-handler/>. Usually in Spring \nweb applications the default servlet mapping “/” is mapped to the DispatcherServlet. This means that \nstatic resources have to be served by it too, which might introduce a certain lag in providing a response as \nthe DispatcherServlet has to find the resources that the request URL is mapped to. The <mvc:default-\nservlet-handler/> configures a DefaultServletHttpRequestHandler with a URL mapping of “/*” and the \nlowest priority relative to other URL mappings. Its sole responsibility is to serve static resources.\nYou can see some user-defined beans needed for configuring a Spring MVC application in the following \nexample. Configurations might differ, depending on the types of resources used.\n<!-- Defines basic MVC defaults (handler mapping, date formatting, etc) -->\n<mvc:annotation-driven/>\n \n<!-- Configures a handler for serving static resources by forwarding to the\n   Servlet container's default Servlet.-->\n<mvc:default-servlet-handler/>\n \n<!-- ResourceBundle bean used for internationalization -->\n<bean name=\"messageSource\"\n      class=\"o.s.context.support.ReloadableResourceBundleMessageSource\"\n      p:basename=\"classpath:messages/global\"/>\n \n<!-- View resolver bean used to render a *.jsp page -->\n<bean id=\"jspViewResolver\"\n   class=\"o.s.web.servlet.view.InternalResourceViewResolver\">\n   <property name=\"prefix\" value=\"/WEB-INF/\"/>\n   <property name=\"suffix\" value=\".jsp\"/>\n</bean>\n■ !  Before continuing to the next section, take a look at the module project 03-chapter-01-practice under \nthe book-code project. this is a simple project focusing on the XML-based configuration; it can be used to test \nyour understanding of this section. it uses the minimum number of Spring infrastructure beans required to start \na web application and display a simple JSp page.\nto run a project that is a web application from the command line, execute the gradle appRun task.\nto run a project in intellij iDea, use the appStart task to start the application and appStop to stop the \napplication.\nMake sure to execute the tasks from under the specific module in the gradle task tree. Figure 3-4 can help you \nidentify the task you need to run the application within intellij iDea.\n60",
          "tables": [],
          "code_blocks": [
            "class=\"o.s.context.support.ReloadableResourceBundleMessageSource\"\n      p:basename=\"classpath:messages/global\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 74,
          "text": "Chapter 3 ■ Spring MVC\nFigure 3-4.  Gretty plugin special tasks to start and stop web applications\n2015-03-01 15:48:36.834 WARN  -  03-chapter-01-practice runs at:\n2015-03-01 15:48:36.834 WARN  -  http://localhost:8080/03-chapter-01-practice\nOpen that location in your browser. if you see the page shown in Figure 3-5, the project is working properly.  \nrun gradle appStop to stop the server.\nFigure 3-5.  Practice Spring MVC application welcome page\nConfiguration Using Annotations\nAn equivalent configuration using Java configuration can be created, but there are a few additional details \nneeded for the configuration class to work properly. The configuration class has to also be annotated \nwith the @EnableWebMvc annotation and has to either implement WebMvcConfigurer or extend an \nimplementation of this interface, for example: WebMvcConfigurerAdapter, which gives the developer the \noption to override only the methods he or she is interested in.\n61",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 75,
          "text": "Chapter 3 ■ Spring MVC\nAnnotating a configuration class with @EnableWebMvc has the result of importing the Spring MVC \nconfiguration implemented in the WebMvcConfigurationSupport class; it is equivalent to <mvc:annotation-\ndriven/>. This class registers a lot of Spring infrastructure components that are necessary for a web \napplication (covered later in this chapter).3\nTo tell the DispatcherServlet that the configuration will be provided by a configuration class instead of \na file, the following changes have to be made in web.xml:\n•\t Define an initialization parameter named contextClass with the full name of the \nSpring class used to create an annotation-based context as the value.\n•\t The initialization parameter named contextConfigLocation should have the full \nname of the configuration class written by the developer as the value.\n<servlet>\n        <servlet-name>admin</servlet-name>\n        <servlet-class>\n                        org.springframework.web.servlet.DispatcherServlet\n        </servlet-class>\n        <init-param>\n            <param-name>contextClass</param-name>\n            <param-value>\n            o.s.web.context.support.AnnotationConfigWebApplicationContext\n            </param-value>\n        </init-param>\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>\n                com.book.config.WebConfig\n        </param-value>\n        </init-param>\n</servlet>\nThe configuration class for what was configured with XML in the previous chapter looks like this:\n@Configuration\n@EnableWebMvc   // equivalent with <mvc:annotation-driven/>\n@ComponentScan(basePackages = {\"com.book.controllers\"})\n// equivalent with <context:component-scan base-package=\"com.book.controllers\"/>\n//used to scan only web components\npublic class WebConfig extends WebMvcConfigurerAdapter {\n    ...\n \n    @Bean(name = \"messageSource\")\n    MessageSource getMessageSource() {\n        ReloadableResourceBundleMessageSource\n                      messageSource = new ReloadableResourceBundleMessageSource();\n        ...\n        return messageSource;\n    }\n3If you want, you can look in the API documentation for detail information about this class, which is available at \nhttp://docs.spring.io/spring/docs/current/javadoc- api/.\n62",
          "tables": [],
          "code_blocks": [
            "<servlet-name>admin</servlet-name>\n        <servlet-class>\n                        org.springframework.web.servlet.DispatcherServlet\n        </servlet-class>\n        <init-param>\n            <param-name>contextClass</param-name>\n            <param-value>\n            o.s.web.context.support.AnnotationConfigWebApplicationContext\n            </param-value>\n        </init-param>\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>\n                com.book.config.WebConfig\n        </param-value>\n        </init-param>",
            "...\n \n    @Bean(name = \"messageSource\")\n    MessageSource getMessageSource() {\n        ReloadableResourceBundleMessageSource\n                      messageSource = new ReloadableResourceBundleMessageSource();\n        ...\n        return messageSource;\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 76,
          "text": "Chapter 3 ■ Spring MVC\n     // <=> <mvc:default-servlet-handler/>\n    @Override\n    public void configureDefaultServletHandling(\n           DefaultServletHandlerConfigurer configurer) {\n        configurer.enable();\n    }\n \n    @Bean\n     InternalResourceViewResolver getViewResolver(){\n        InternalResourceViewResolver resolver = new InternalResourceViewResolver();\n        resolver.setPrefix(\"/WEB-INF/\");\n        resolver.setSuffix(\".jsp\" );\n        return resolver;\n    }\n}\nThe @ComponentScan annotation is the equivalent of <context:component-scan />. It is used to find all \nthe classes annotated with @Controller in the package com.book.controllers.\n■ !  Before continuing to the next section, take a look at the module project 03-chapter-02-practice under \nbook-code. this is a simple project focusing on the Java configuration–based configuration and can be used to \ntest your understanding of this section. it uses the minimum number of Spring infrastructure beans required to \nstart a web application and display a simple JSp page.\nthe gradle running instructions are the same as the instructions for the previous section.\nMixed Configuration\n■ !  there are Spring-specific annotations like @Controller, @Service, @Component, and @Repository, \nwhich can be used to configure a Spring application without the need to use a Java configuration class; \ninstead, an XML file is used, containing context or MVC namespace element definitions. this is called a mixed \nconfiguration, because it uses annotations to define the beans, and XML to define the context.\nIn practice, most common and frequently used Spring configurations imply a combination of XML \nand annotations. The primary reason for this is legacy code, as XML configuration was the first and only \nway to configure a Spring application prior to Spring 2.5. Migration to a more recent version of Spring is \nusually a slow process, and projects remain stuck between worlds for some periods of time. And there are \nalso developers that still prefer XML because it seems easier to separate configurations for the back end, \nfront end, security, web services, and so on, in separate files (although this can just as easily be done with \nJava configuration classes). It is also intuitive and very readable when it comes to dependency injection. \nIt is more practical to have the definition of the relationship between the beans decoupled from the bean \nimplementation. Because it is more practical to implement transaction management using annotations, it is \nvery visible which method is executed in a transaction.\n63",
          "tables": [],
          "code_blocks": [
            "// <=> <mvc:default-servlet-handler/>\n    @Override\n    public void configureDefaultServletHandling(\n           DefaultServletHandlerConfigurer configurer) {\n        configurer.enable();\n    }\n \n    @Bean\n     InternalResourceViewResolver getViewResolver(){\n        InternalResourceViewResolver resolver = new InternalResourceViewResolver();\n        resolver.setPrefix(\"/WEB-INF/\");\n        resolver.setSuffix(\".jsp\" );\n        return resolver;\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 77,
          "text": "Chapter 3 ■ Spring MVC\nAnnotations should be applied when they provide functionality and/or visibly mark the annotated \nclasses or methods for a specific purpose. Annotations should not tie the code down to some specific \nprocess, so the code should function normally without them. The most obvious case here is the @Controller \nannotated classes for the web side of an application. In the back end, @Repository and @Service \nannotations are used for the same purpose. When looking at the code of a controller class, you see the \nannotation and you can easily infer what the purpose of that class is. All annotation mentioned earlier are \nSpring stereotype annotations, which are used to denote the roles of types in the overall architecture.\nA typical Spring web application configuration uses an mvc-config.xml file to declare the infrastructure \nbeans and @Controller annotated classes.\nConfiguration Without Using web.xml\nStarting with Servlet 3.0+, the web.xml file is no longer needed to configure a web application. It \ncan be replaced with a class implementing the WebApplicationInitializer (or a class extending \nany of the Spring classes that extend this interface). This class is detected automatically by \nSpringServletContainerInitializer (an internal Spring supported class, which is not meant to be used \ndirectly or extended). The SpringServletContainerInitializer class is bootstrapped automatically by any \nServlet 3.0+ container.\nThe SpringServletContainerInitializer4 extends javax.servlet.ServletContainerInitializer \nand provides a Spring-specific implementation for the onStartup method. This class is loaded and \ninstantiated, and the onStartup is invoked by any Servlet 3.0–compliant container during container startup, \nassuming that the Spring-web module JAR is present on the classpath.\nConsidering you have a web.xml file that looks like this:\n<servlet>\n     <servlet-name>admin</servlet-name>\n     <servlet-class>o.s.w.s.DispatcherServlet</servlet-class>\n     <init-param>\n         <param-name>contextConfigLocation</param-name>\n         <param-value>\n             /WEB-INF/spring/mvc-config.xml\n         </param-value>\n     </init-param>\n     <load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n     <servlet-name>admin</servlet-name>\n     <url-pattern>/</url-pattern>\n</servlet-mapping>\n4The code for this class is at https://github.com/spring-projects/spring-framework/blob/master/spring-\nweb/src/main/java/org/springframework/web/ SpringServletContainerInitializer.java.\n64",
          "tables": [],
          "code_blocks": [
            "<servlet-name>admin</servlet-name>\n     <servlet-class>o.s.w.s.DispatcherServlet</servlet-class>\n     <init-param>\n         <param-name>contextConfigLocation</param-name>\n         <param-value>\n             /WEB-INF/spring/mvc-config.xml\n         </param-value>\n     </init-param>\n     <load-on-startup>1</load-on-startup>",
            "<servlet-name>admin</servlet-name>\n     <url-pattern>/</url-pattern>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 78,
          "text": "Chapter 3 ■ Spring MVC\nThe most obvious way to implement WebApplicationInitializer is this:\npublic class WebInitializer implements WebApplicationInitializer {\n    @Override\n    public void onStartup(ServletContext servletContext) throws ServletException {\n        ServletRegistration.Dynamic registration =\n                  servletContext.addServlet(\"dispatcher\", new DispatcherServlet());\n        registration.setLoadOnStartup(1);\n        registration.addMapping(\"/\");\n        registration.setInitParameter(\"contextConfigLocation\",\n                       \"/WEB-INF/spring/mvc-config.xml\");\n        }\n}\nThe class does not need to be annotated or linked to any other configuration file existing in the \napplication. You can easily notice which lines from XML turned into which lines in the code, right?\nBut there is another way, which involves constructing the application context first and then injecting  \nit into the DispatcherServlet:\nXmlWebApplicationContext appContext = new XmlWebApplicationContext();\nappContext.setConfigLocation(\"/WEB-INF/spring/mvc-config.xml\");\nServletRegistration.Dynamic registration =\n   servletContext.addServlet(\"dispatcher\", new DispatcherServlet(appContext));\nregistration.setLoadOnStartup(1);\nregistration.addMapping(\"/\");\nAnd there is an even simpler way—by extending AbstractDispatcherServletInitializer, an abstract \nimplementation of the WebApplicationInitializer:\npublic class WebInitializer extends AbstractDispatcherServletInitializer {\n \n    @Override\n    protected WebApplicationContext createRootApplicationContext() {\n//there is no root application context for the web application context to inherit\n    return null;\n}\n \n    @Override\n    protected WebApplicationContext createServletApplicationContext() {\n        XmlWebApplicationContext cxt = new XmlWebApplicationContext();\n        cxt.setConfigLocation(\"/WEB-INF/spring/mvc-config.xml\");\n        return cxt;\n    }\n \n    @Override\n    protected String getServletMappings() {\n        return new String { \"/\" };\n    }\n}\n65",
          "tables": [],
          "code_blocks": [
            "@Override\n    public void onStartup(ServletContext servletContext) throws ServletException {\n        ServletRegistration.Dynamic registration =\n                  servletContext.addServlet(\"dispatcher\", new DispatcherServlet());\n        registration.setLoadOnStartup(1);\n        registration.addMapping(\"/\");\n        registration.setInitParameter(\"contextConfigLocation\",\n                       \"/WEB-INF/spring/mvc-config.xml\");\n        }",
            "@Override\n    protected WebApplicationContext createRootApplicationContext() {",
            "return null;",
            "@Override\n    protected WebApplicationContext createServletApplicationContext() {\n        XmlWebApplicationContext cxt = new XmlWebApplicationContext();\n        cxt.setConfigLocation(\"/WEB-INF/spring/mvc-config.xml\");\n        return cxt;\n    }\n \n    @Override\n    protected String getServletMappings() {\n        return new String { \"/\" };\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 79,
          "text": "Chapter 3 ■ Spring MVC\nJava-based annotation configurations are supported too—in multiple ways. Consider that you have a \nWebConfig class and a web.xml that looks like this:\n<servlet>\n    <servlet-name>admin</servlet-name>\n    <servlet-class>\n       o.s.web.servlet.DispatcherServlet\n       </servlet-class>\n    <init-param>\n       <param-name>contextClass</param-name>\n       <param-value>\n           o.s.web.context.AnnotationConfigWebApplicationContext\n       </param-value>\n    </init-param>\n    <init-param>\n       <param-name>contextConfigLocation</param-name>\n       <param-value>\n           com.book.config.WebConfig\n       </param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n  \n<servlet-mapping>\n    <servlet-name>admin</servlet-name>\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\nThis is the most obvious way to implement WebApplicationInitializer’s onStartup() method:\nServletRegistration.Dynamic registration =\n    servletContext.addServlet(\"dispatcher\", new DispatcherServlet());\nregistration.setLoadOnStartup(1);\nregistration.addMapping(\"/\");\nregistration.setInitParameter(\"contextConfigLocation\", \"com.book.config.WebConfig\");\nregistration.setInitParameter(\"contextClass\",\n    \"o.s.w.c.s.AnnotationConfigWebApplicationContext\");\nBut wait, there’s more! You can create the application context and inject it into the DispatcherServlet \nas you did before:\nAnnotationConfigWebApplicationContext context =\n    new AnnotationConfigWebApplicationContext();\ncontext.register(WebConfig.class);\n \nServletRegistration.Dynamic registration =\n    servletContext.addServlet(\"dispatcher\", new DispatcherServlet(context));\nregistration.setLoadOnStartup(1);\nregistration.addMapping(\"/\");\n66",
          "tables": [],
          "code_blocks": [
            "<servlet-name>admin</servlet-name>\n    <servlet-class>\n       o.s.web.servlet.DispatcherServlet\n       </servlet-class>\n    <init-param>\n       <param-name>contextClass</param-name>\n       <param-value>\n           o.s.web.context.AnnotationConfigWebApplicationContext\n       </param-value>\n    </init-param>\n    <init-param>\n       <param-name>contextConfigLocation</param-name>\n       <param-value>\n           com.book.config.WebConfig\n       </param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>",
            "<servlet-name>admin</servlet-name>\n    <url-pattern>/</url-pattern>",
            "servletContext.addServlet(\"dispatcher\", new DispatcherServlet());",
            "\"o.s.w.c.s.AnnotationConfigWebApplicationContext\");",
            "new AnnotationConfigWebApplicationContext();",
            "servletContext.addServlet(\"dispatcher\", new DispatcherServlet(context));"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 80,
          "text": "Chapter 3 ■ Spring MVC\nAnd the easiest way to do it is with AbstractAnnotationConfigDispatcherServletInitializer, \nwhich extends AbstractDispatcherServletInitializer, an abstract implementation of the \nWebApplicationInitializer. Spring provides them to help you eliminate some of the code writing. \nBy extending the AbstractAnnotationConfigDispatcherServletInitializer template and using \ncustomization methods offered by the AbstractDispatcherServletInitializer, the developer \nis only required to provide concrete implementations for three methods: getRootConfigClasses, \ngetServletConfigClasses, and getServletMappings.\npublic class WebInitializer extends\n          AbstractAnnotationConfigDispatcherServletInitializer {\n    @Override\n    protected Class<?> getRootConfigClasses() {\n    //there is no root application context for the web application context to inherit\n         return null;\n     }\n \n     @Override\n     protected Class<?> getServletConfigClasses() {\n         return new Class { WebConfig.class };\n     }\n \n     @Override\n     protected String getServletMappings() {\n         return new String { \"/\" };\n     }\n}\n■ !  Before continuing with this chapter, take a look at the 03-chapter-03-practice and 03-chapter-04-\npractice and try to make the projects run. the first requires you to configure a Spring web application using \na Spring XML–based configuration and without a web.xml file. the second requires you to configure a Spring \nweb application using a Java-based configuration and without a web.xml file. Be creative, read the Spring api if \nnecessary, and then you can even compare your solution to the ones provided in the solution projects.\nthe gradle running instructions are the same as in the previous section.\nMVC Components\nThe configuration of a Spring web application integrates quite a few infrastructure beans.\nThe DispatcherServlet looks for implementations of type: HandlerMapping, HandlerAdapter, \nViewResolver, and HandlerExceptionResolver. Out-of-the-box implementations for the previously mentioned \ninterfaces are provided by Spring. The default configuration can be found in the DispatcherServlet.properties, \nwhich is in the spring-webmvc.jar in package org.springframework.web.servlet.5\n5The contents can be accessed directly on GitHub at https://github.com/spring-projects/ spring-framework/\nblob/master/spring-webmvc/src/main/resources/org/springframework/web/ servlet/DispatcherServlet.\nproperties.\n67",
          "tables": [],
          "code_blocks": [
            "AbstractAnnotationConfigDispatcherServletInitializer {\n    @Override\n    protected Class<?> getRootConfigClasses() {\n    //there is no root application context for the web application context to inherit\n         return null;\n     }\n \n     @Override\n     protected Class<?> getServletConfigClasses() {\n         return new Class { WebConfig.class };\n     }\n \n     @Override\n     protected String getServletMappings() {\n         return new String { \"/\" };\n     }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 81,
          "text": "Chapter 3 ■ Spring MVC\n■ !  You can find the jar in your local maven repository. it is recommended to open the file and study it, \nbecause in the exam you might be asked about the default components configured in Spring for some MVC \nbean types. Some of them are deprecated in the current api—DefaultAnnotationHandlerMapping, for \nexample—and the file will suffer some changes in future versions.\nThe infrastructure beans mentioned earlier can be configured manually, but this is rarely done and is \nrecommended to be avoided, as the explicit configuration cancels the default configuration for that bean \ntype. In Spring 4.0, <mvc:annotation-driven/> and the equivalent @EnableWebMvc do just that—override \nthe default configuration to provide the new features, so you don’t have to struggle with the configuration \nyourself.\nA Spring web application can use more than one infrastructure bean of a specific type. In this case, the \nbeans can be chained and have an associated priority value specified using the order property. For example, \nyou can have multiple HandlerMapping implementations:\n<bean\n    class=\"o.s.web.servlet.handler.SimpleUrlHandlerMapping\">\n    <property name=\"order\" value=\"0\"/>\n</bean>\n \n<bean\n    class= \"o.s.web.servlet.mvc.support.ControllerClassNameHandlerMapping\">\n    <property name=\"order\" value=\"1\"/>\n</bean>\nWhen <mvc:annotation-driven/> or @EnableWebMVC is used in the application configuration, \nthe RequestMappingHandlerMapping implementation is registered internally with Spring MVC. This \nclass was added in Spring 3.1; it allows RequestMappings for the same URL to be in different controller \nclasses. It is meant to replace the DefaultAnnotationHandlerMapping implementation. It was introduced \nto make the annotation controller support class more customizable and open for extension. When \nusing the RequestMappingHandlerMapping, the actual handler is an instance of HandlerMethod, which \nidentifies the specific controller method that will be invoked. Starting with Spring version 4.0, the \nDefaultAnnotationHandlerMapping was marked as deprecated.\nThe following sections cover each of the infrastructure bean types in detail.\nInfrastructure Beans\nSpring MVC offers developers a lot of support when it comes to building the plumbing of a web application, \nso developers can focus on implementing the actual service a web application is expected to provide. The \nbeans provided by Spring MVC are often called infrastructure beans, which have default configurations that \nwork out of the box. Each of these infrastructure beans are presented in detail in the following sections.\nHandlerMapping\nThis HandlerMapping Spring interface is implemented by classes that map parts of URL for the incoming \nrequests to the appropriate handlers and a list of pre- and post-processor interceptors (AOP is used for this). \nPrior to Spring 3.1, it was necessary to specify one or more HandlerMapping beans in the application \ncontext, but after the introduction of annotated controllers, there is no need to do so. All HandlerMapping \nimplementations are used by the DispatcherServlet to identify the handler (controller class) of a request.\n68",
          "tables": [],
          "code_blocks": [
            "class=\"o.s.web.servlet.handler.SimpleUrlHandlerMapping\">\n    <property name=\"order\" value=\"0\"/>",
            "class= \"o.s.web.servlet.mvc.support.ControllerClassNameHandlerMapping\">\n    <property name=\"order\" value=\"1\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 82,
          "text": "Chapter 3 ■ Spring MVC\nIn the DispatcherServlet.properties, you find the following default HandlerMapping \nimplementations configured:\norg.springframework.web.servlet.HandlerMapping=\norg.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\\\norg.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping\nThe BeanNameUrlHandlerMapping class maps URLs to beans with names that start with “/”. So a request \nincoming with URL http://localhost:8080/persons maps to bean:\n@Controller(\"/persons\")\npublic class PersonsController {\n    ...\n}\n■ !  the DefaultAnnotationHandlerMapping is deprecated in Spring 4.0 as it was replaced by \nRequestMappingHandlerMapping.\nThe RequestMappingHandlerMapping class maps URLs to classes annotated with @RequestMapping. So a \nrequest coming from URL http://localhost:8080/persons/list is handled by the following controller:\n@RequestMapping(\"/persons\")\n@Controller\npublic class PersonsController {\n \n    @RequestMapping(value=\"/list\")\n    public void list(Model model){\n       ...\n    }\n}\nIn the preceding example, the @RequestMapping at method level is used to narrow the mapping expressed \nat class level, if one is present. The annotation is not really necessary at method level when it is present at class \nlevel, because narrowing can be done using other criteria too; for example, the request method type.\n@RequestMapping(\"/persons\")\n@Controller\npublic class PersonsController {\n    //End user requests to see data for a certain person.\n    @RequestMapping(method = RequestMethod.GET)\n    public void getPerson(Model model){\n       ...\n    }\n \n    //End user sends data to save for a certain person.\n    @RequestMapping(method = RequestMethod.POST)\n    public void savePerson(Person person, Model model){\n        ...\n    }\n}\n69",
          "tables": [],
          "code_blocks": [
            "...",
            "@RequestMapping(value=\"/list\")\n    public void list(Model model){\n       ...\n    }",
            "//End user requests to see data for a certain person.\n    @RequestMapping(method = RequestMethod.GET)\n    public void getPerson(Model model){\n       ...\n    }\n \n    //End user sends data to save for a certain person.\n    @RequestMapping(method = RequestMethod.POST)\n    public void savePerson(Person person, Model model){\n        ...\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 83,
          "text": "Chapter 3 ■ Spring MVC\nIt is mandatory for any HTTP request path to be uniquely mapped onto a specific handler. It is \nrecommended to keep all related handler methods in the same bean, and not span them across multiple \nhandler beans in order to improve code readability.\nAnother implementation worth mentioning is ControllerClassNameHandlerMapping, which was \nintroduced in the spirit of convention over configuration. This implementation offers the possibility to \ngenerate URL path mappings from the class names and method names of registered or annotated controller \nbeans. The convention is to take the short name of the class, remove the Controller suffix, lower case the \nfirst letter of the remaining text, prefix it with “/”, and then add the method name used to handle the request. \nUsing this implementation, the PersonsController mentioned earlier is mapped to \"/persons*\" and the  \n@RequestMapping(\"/persons\") annotation is no longer needed.\nIn the book-code project, there is a sample module named 03-chapter-05-solution, which contains a \nsimple controller with the following implementation.\n@Controller\npublic class WelcomeController {\n \n    @RequestMapping\n    //maps to /welcome/sayhi\n    public String sayhi(Model model){\n        model.addAttribute(\"salute\", \"Hi!\");\n        return \"welcome\";\n    }\n \n    @RequestMapping\n    //maps to /welcome/sayhello\n    public String sayhello(Model model){\n        model.addAttribute(\"salute\", \"Hello!\");\n        return \"welcome\";\n    }\n}\nIn order for a request to be solved correctly using the ControllerClassNameHandlerMapping, a \nHandlerAdapter implementation needs to be configured. AnnotationMethodHandlerAdapter will do, even if \nit is deprecated in Spring 4.0.\n...\n    <context:component-scan base-package=\"com.book\"/>\n    <bean\n        class=\"o.s.web.servlet.mvc.support.ControllerClassNameHandlerMapping\"\n        p:caseSensitive=\"true\"/>\n \n    <bean id=\"annotationMethodHandlerAdapter\"\n        class=\"o.s.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\" />\n...\n70",
          "tables": [],
          "code_blocks": [
            "@RequestMapping\n    //maps to /welcome/sayhi\n    public String sayhi(Model model){\n        model.addAttribute(\"salute\", \"Hi!\");\n        return \"welcome\";\n    }\n \n    @RequestMapping\n    //maps to /welcome/sayhello\n    public String sayhello(Model model){\n        model.addAttribute(\"salute\", \"Hello!\");\n        return \"welcome\";\n    }",
            "<context:component-scan base-package=\"com.book\"/>\n    <bean\n        class=\"o.s.web.servlet.mvc.support.ControllerClassNameHandlerMapping\"\n        p:caseSensitive=\"true\"/>\n \n    <bean id=\"annotationMethodHandlerAdapter\"\n        class=\"o.s.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\" />"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 84,
          "text": "Chapter 3 ■ Spring MVC\n■ !  an example of how to configure the ControllerClassNameHandlerMapping bean and how it works is \nimplemented in the 03-chapter-05-solution module in the book-code project. this project does not have a \npractice project associated with it because there is no need for one.\nthe gretty plugin is quite flexible and can be configured to start a web application on a different context or port. \nWhen working locally, the UrL of the application looks like this: http://localhost:8080/03-chapter-05-\nsolution. the context is the string after the port, and gretty automatically takes the name of the project and \nuses it as context for the web application, if not configured to do otherwise. also, the default port is 8080, which \nis the default port used by most of application servers for web applications.6\nAs the name of the modules in book-code are quite long, Gretty was configured to use a different \ncontext, which can also emphasize the purpose of the application.\ngretty {\n    port = 8080\n    contextPath = '/mvc-handling'\n}\nHandlerAdapter\nThe HandlerAdapter interface is internal and is not intended for application developers. It must be \nimplemented by each handler to be able to handle a request. The DispatcherServlet uses this interface \nto invoke handler methods because the interface is taking care of solving various annotations inside a \ncontroller class and identifies which method should be called.\nIn the DispatcherServlet.properties you find the following default HandlerAdapter \nimplementations:\norg.springframework.web.servlet.HandlerAdapter=\norg.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\\\norg.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\\\norg.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\nThese are the out-of-the-box defaults if <mvc:annotation-driven/> is not specified.\nWhen <mvc:annotation-driven/> or @EnableWebMVC is used in the application configuration, \nRequestMappingHandlerAdapter is used. Introduced in Spring 3.1, the scope of this class is to work with \nRequestMappingHandlerMapping to make this class the only place where a decision is made about which \nmethod should handle a request. This actually means that every handler method is a unique endpoint that \ncan be identified from class and method-level RequestMapping information. Prior to Spring 3.1, identifying \nand calling a handler method involved two steps: identifying a controller (handler) using a HandlerMapping \nimplementation and identifying the method (handler method) using a HandlerAdapter implementation. \nStarting with Spring 3.1, everything is done in one step, with the two classes working together.\nSo Figure 3-2 is not an accurate representation for Spring >=3.1; when using <mvc:annotation-driven/> \nor @EnableWebMVC, Figure 3-6 is more accurate.\n6The full list of configuration options for Gretty can be found at http://akhikhl.github.io/gretty-doc/Gretty-\nconfiguration.html.\n71",
          "tables": [],
          "code_blocks": [
            "port = 8080\n    contextPath = '/mvc-handling'"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 85,
          "text": "Chapter 3 ■ Spring MVC\nFigure 3-6.  @MVC Spring >= 3.1\nThe old implementations were kept in the Spring MVC library, but it is recommended to use the ones \nintroduced in Spring 3.1 and enabled by the MVC namespace or @EnableWebMVC because these ensure \na simpler configuration and faster identification of a handler method, and take advantage of other new \nfeatures introduced in Spring 3.1. Here is a list of some of the changes introduced by this approach:\n•\t It is no longer possible to use SimpleUrlHandlerMapping or \nBeanNameUrlHandlerMapping to identify a controller and then identify the handler \nmethod by narrowing the method choice with @RequestMapping.\n•\t It is no longer possible to have a single method without explicit mapping to solve all \nrequests mapped to a controller. The new support classes will throw a Not Found  \n404 error.\n•\t HandlerInterceptor and HandlerExceptionResolver (covered later in the chapter) \ncan now expect the object-based handler to be a HandlerMethod. They can examine \nits parameters and annotations.\n•\t Custom argument and return types are supported for handler methods.\n•\t @PathVariable annotated parameters (covered later in the chapter) are \nautomatically added to the model, so it’s not necessary to manually add them if you \nare providing them as part of forwarding or redirecting.\n72",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 86,
          "text": "Chapter 3 ■ Spring MVC\n•\t Supports parameterized URI template on redirect strings.\n•\t RequestMappings now support consumes/produces, so it’s not necessary to specify h\neaders=\"ContentType=application/json\". This is a little closer to the JAX-RS style \nof specifying @Consumes/@Produces annotations. This helps in producing the correct \nerror code if unsupported media types are referenced on REST requests.\nThe preceding list is not complete. If you want a full read of all the advantages of using the new handler \nsupport classes, you can find it in the official documentation.7 Some are also mentioned in the following \nsections; those are the ones you should focus on for the exam.\nWhen the web application starts, if the logger of the application is configured properly, you should \nbe able to see all the beans used in the application, including the infrastructure beans. The following is \na snippet from a debug log printed when 02-pr-mvc-basic-solution starts. Run the project yourself to \nanalyze the console output in more detail.\nINFO Initializing Spring FrameworkServlet 'mvc-dispatcher'\n...\nDEBUG o.s.b.f.s.DefaultListableBeanFactory - Pre-instantiating singletons ...,\naccountRepo,hospitalRepo,personManager,identityCardRepo,transactionManager,\nentityManagerFactory, ..., o.s.w.s.m.m.a.RequestMappingHandlerMapping#0,\n... ,o.s.w.s.m.m.a.RequestMappingHandlerAdapter#0,\no.s.w.s.m.m.a.ExceptionHandlerExceptionResolver#0,...,\norg.springframework.web.servlet.view.InternalResourceViewResolver,\n,messageSource,localeResolver,themeResolver,\n...\nViewResolver\nThe HTTP response returned to the client after the execution of a handler method is constructed using \na model and a view. The model contains the data that is used to populate a view. Spring provides view \nresolvers to avoid ties to a specific view technology. Out of the box, Spring supports JSP, Velocity templates, \nand XSLT views. The interfaces needed to make this possible are ViewResolver and View. The first provides \na mapping between view names and actual views. The second takes care of preparing the request and \nforwards it to a view technology.8\n7http://docs.spring.io/spring/docs/current/spring- framework-reference/htmlsingle/#mvc-ann-\nrequestmapping-31-vs-30, http://docs.spring.io/spring/docs/current/spring- framework-reference/\nhtmlsingle/#mvc-config-enable.\n8http://docs.spring.io/spring/docs/4.1.x/spring- framework-reference/htmlsingle/#mvc-viewresolver.\n73",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 87,
          "text": "Chapter 3 ■ Spring MVC\nAll handler methods must resolve to a logical view name that corresponds to a file, either explicitly by \nreturning a String, View, or ModelAndView instance or implicitly based on internal conventions. The core \nview resolver provided by Spring is the InternalResourceViewResolver, which is the default view resolver, \nas you can see in the DispatcherServlet.properties file:\norg.springframework.web.servlet.ViewResolver=\n         org.springframework.web.servlet.view.InternalResourceViewResolver\nView Resolver Chaining\nA web application can have more than one ViewResolver configured and the DispatcherServlet \ndiscovers them by type. In this case, the default view resolver configuration is overridden, meaning the \nInternalResourceViewResolver is not the default resolver anymore, so if this bean is needed, it has to be \nconfigured explicitly. In this case, the available view resolvers can and should be chained to have a fixed \nsequence of resolvers trying to obtain a view. The next example shows how two view resolvers can be \nchained together to resolve JSP and Excel views:\n<!-- in mvc-config.xml -->\n \n<bean name=\"persons/list.xls\" class=\"com.book.persons.PersonsExcelView\"/>\n \n<bean\n  id=\"xlsViewResolver\"\n class=\"...web.servlet.view.BeanNameViewResolver\"\n    p:order=\"0\"/>\n \n<bean\n    class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"\n    p:order=\"1\" />\n■ !  Defining bean properties using the p: ... syntax is possible by using the p namespace that offers a way \nto contract bean definitions in XML configuration files to reduce their size and make them more readable.9\nChaining view resolvers is also possible using a Java configuration class:\n\\\\ in @Configuration annotated class\n@Bean(name=\"persons/list.xls\")\npublic View excelView(){\n        return new PersonsExcelView();\n}\n \n@Bean(name=\"xlsViewResolver\")\npublic ViewResolver xlsViewResolver(){\n     BeanNameViewResolver resolver = new BeanNameViewResolver();\n9You can read more about it in the official documentation at http://docs.spring.io/spring/docs/current/\nspring-framework-reference/html/beans.html#beans- p-namespace.\n74",
          "tables": [],
          "code_blocks": [
            "org.springframework.web.servlet.view.InternalResourceViewResolver",
            "p:order=\"0\"/>",
            "class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"\n    p:order=\"1\" />",
            "return new PersonsExcelView();",
            "BeanNameViewResolver resolver = new BeanNameViewResolver();"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 88,
          "text": "Chapter 3 ■ Spring MVC\n    resolver.setOrder(0);\n    return resolver;\n}\n \n@Bean\n  public ViewResolver jspViewResolver() {\n    InternalResourceViewResolver resolver = new InternalResourceViewResolver();\n...\n    resolver.setOrder(1);\n    return resolver;\n}\nWhen a view resolver does not result in a view (usually null is returned, but there are view resolvers that \nthrow exceptions), Spring examines the application context for other view resolver beans and inspects each \nof them until a view is obtained. If this is not possible, a ServletException is returned. When resolver beans \nare chained, the inspection is done based on the value of their order property; the lower the value of the \nproperty, the higher the priority when resolving view names.\n■ !  the InternalResourceViewResolver resolves the view no matter what view name is returned. it throws \nan exception if it cannot resolve a view name, so this bean always has to be placed last in the chain; otherwise, \nSpring skips looking for other view resolver beans in the context. XSLt and JSOn are also resolvers that must \nbe last in the chain. tiles, Velocity, and FreeMarker can appear anywhere in the chain.\nIn the case just presented, if the BeanNameViewResolver does not return a view (a request method has \nreturned a logical view name different than \"persons/list.xls\"), the next resolver is called to do that.\nThe InternalResourceViewResolver is the most important implementation provided by Spring. It is \na specialization of UrlBasedViewResolver (so they cannot be used together in a configuration, chained or \nnot) and inherits the behavior of interpreting view names as a URL, supports the \"redirect:\" prefix and the \n\"forward:\" prefix. And supports InternalResourceView(Servlets and JSPs) and JstlView.\n■ !  the \"redirect:\" and \"forward:\" prefixes are appended to the logical view name to tell the servlet \ncontainer what to do.\nWith \"forward:\", the servlet container just forwards the same request to the target UrL, and the browser is not \ninvolved and does not know the UrL has changed. a forward should be used for safe operations when reloading \nthe page won’t result in corrupt data (usually for requesting data to display in the page).\nWith \"redirect:\", the response status is set to 302 and the UrL to redirect to is set in a Location header, \nthen the response is sent to the browser. the browser then makes another request to the new UrL. redirect is \na two-step operation; it is recommended to be used when the first request is a data manipulation request, and \nthe browser must then be redirected to a confirmation page to prevent data duplication.\nThe “redirect:” prefix can be returned together with a view name to delegate the creation of the \nresponse to another handler. The most suitable for such behavior is when a POST request was received and \nthe possibility to resubmit the same form data has to be eliminated. The browser sends an initial POST, \nreceives a response to redirect to a different URL, and then performs a GET request for the URL received as a \n75",
          "tables": [],
          "code_blocks": [
            "resolver.setOrder(0);\n    return resolver;",
            "InternalResourceViewResolver resolver = new InternalResourceViewResolver();",
            "resolver.setOrder(1);\n    return resolver;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 89,
          "text": "Chapter 3 ■ Spring MVC\nresponse. This sequence of actions matches a web development design pattern named Post-Redirect-Get \nthat prevents duplicate form submissions. In Figure 3-7, the Post- Redirect-Get process is displayed using \nthe PersonsController.\nFigure 3-7.  Post-Redirect-Get in Spring using the \"redirect:\" prefix compared to \"forward:\"\n\"redirect:\" and \"forward:\" are recognized by the UrlBasedViewResolver and all its subclasses. They \ntreat them accordingly and consider the view name after the prefix as the redirect/forward URL.\n■ !  You will have the occasion to work with \"redirect:\" and \"forward:\" in the 05-pr-mvc-form-practice \nproject.\nAll view file templates are stored under /WEB-INF for security reasons. They cannot be accessed directly \nvia a manually introduced URL and they require a model in order to be rendered. The previously mentioned \nview implementations supported by InternalResourceViewResolver have the following characteristics:\n•\t InternalResourceView exposes the model attributes as request attributes and \nforwards the request to the specified resource URL using a RequestDispatcher.\n•\t JstlView is a specialization of InternalResourceView that exposes request \nattributes specifying the locale and the resource bundle for JSTL’s formatting and \nmessage tags, using Spring’s locale and MessageSource ( the JSTL library is required \nin the classpath for this View technology to be available).\n76",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 90,
          "text": "Chapter 3 ■ Spring MVC\nMore about this topic is covered later in this chapter.\nThis is an example of how a view is resolved using the chained resolvers configured earlier:\n/* 1 */\n@RequestMapping(\"/persons.htm\")\npublic String listHtml(HttpServletRequest rq, Model model) {\n   model.addAttribute(personManager.getAllPersons());\n   return \"accounts/list\";\n}\n \n/* 2. */\n@RequestMapping(\"/persons.xls\")\npublic String listExcel(HttpServletRequest rq, Model model) {\n   model.addAttribute(personManager.getAllPersons());\n   return \"persons/list.xls\";\n}\nThe first method has InternalResourceViewResolver resolve the view, and the second is taken care of \nby BeanNameViewResolver and a PersonsExcelView is rendered.\nAs you can see, the implementation for the two methods is almost identical. The URL and the logical \nview name returned are different, however. And there’s a programming principle called Don’t Repeat \nYourself! that those two methods do not respect. Let’s try and respect that principle by merging the two \nmethods into one:\n/* 1 */\n@RequestMapping(\"/persons\")\npublic String list(HttpServletRequest rq, Model model) {\n   model.addAttribute(personManager.getAllPersons());\n   if (rq.getRequestURL().toString().endsWith(\"xls\")) {\n       return \"persons/list.xls\";\n   } else {\n       return \"persons/list\";\n   }\n}\nBut this is not an acceptable solution either. What if the application is requested to support PDF views \ntoo? That means more if-else instructions have to be added. Right now you are probably telling yourself: \n“There’s gotta be a better way of doing this!” And there is. Worry not, this shall be covered in the next section.\n■ !  take a look at the 03-chapter-06-solution project. it has been set up to work with the chained resolver \nconfiguration mentioned in this chapter. the data can be viewed in a web page, an excel document or a pDF. \nrun it and take a look at the implementation before moving on to the next section.\n77",
          "tables": [],
          "code_blocks": [
            "return \"persons/list.xls\";\n   } else {\n       return \"persons/list\";\n   }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 91,
          "text": "Chapter 3 ■ Spring MVC\nContent Type Negotiation\nAnother way of organizing the view resolver beans and making sure that the view name is always \nresolved correctly is to use content-type negotiation. The previous approach, resolver chaining, works \nonly when each resource is associated with one view type. But clients might request different content-\ntypes for the same resource via extension, request header, request parameter, and so forth. In this case, \nchaining won’t work, as the type of view returned depends on some parameters that have to be taken into \nconsideration and then a matching view resolver must be selected to do the job. The bean that does that \nis the ContentNegotiatingViewResolver, which was introduced in Spring 3.0. This bean does not resolve \nviews but delegates the job to the view resolver implementations defined in the application configuration, \nselecting the view matching the content-type in the client request.\nThere are two strategies for a client to request a view from the server:\n•\t Use a distinct URL for each resource by using a different extension in the URL \n(example: http://localhost:8080/persons/list.xls requests an Excel view \ncontaining a list of persons, while http://localhost:8080/persons/list.pdf \nrequests a PDF view containing a list of persons)\n•\t Use the same URL but set the Accept HTTP request header to the desired resource \ntype (example: a request coming from http://localhost:8080/persons/list \nhaving the Accept header set to application/pdf requests a PDF view containing a \nlist of persons)\n■ !  the problem with the Accept header is that it cannot be used when the client is a browser, as most \nbrowsers force its value to text/html. Because of this, web applications are always built to use the first \napproach and each view type is mapped to its own UrL (taking the extension into consideration; for example: \n/persons/list.html, /persons/list.xls). the Accept header approach is most useful for reSt web services and \nsimilar automation scenarios.\nThe ContentNegotiatingViewResolver implements the Ordered interface, so it can be used alongside \nother resolvers, it can be part of a view resolver chain, and it has to have the highest priority in the chain. \nThis is due to its behavior; if theContentNegotiatingViewResolver cannot select a View, it returns null, \nand Spring examines the application context for other view resolver beans and inspects each of them until \na view is obtained. Usually the ContentNegotiatingViewResolver is configured to pick up view resolvers \nautomatically from the application context, so it should always resolve to a View. The next resolvers in the \nchain can be considered a fallback solution, to make sure that a View is provided.\nThe ContentNegotiatingViewResolver can be configured in a similar way, as shown in the following \nexample:\n<bean class=\"o.s.web.servlet.view.ContentNegotiatingViewResolver\"\n  p:order=\"-1\">\n     <property name=\"mediaTypes\">\n         <map>\n             <entry key=\"html\" value=\"text/html\"/>\n             <entry key=\"xls\" value=\"application/vnd.ms-excel\"/>\n             <entry key=\"pdf\" value=\"application/pdf\"/>\n             <entry key=\"json\" value=\"application/json\"/>\n         </map>\n     </property>\n78",
          "tables": [],
          "code_blocks": [
            "<property name=\"mediaTypes\">\n         <map>\n             <entry key=\"html\" value=\"text/html\"/>\n             <entry key=\"xls\" value=\"application/vnd.ms-excel\"/>\n             <entry key=\"pdf\" value=\"application/pdf\"/>\n             <entry key=\"json\" value=\"application/json\"/>\n         </map>\n     </property>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 92,
          "text": "Chapter 3 ■ Spring MVC\n    <property name=\"viewResolvers\">\n        <list>\n            <bean class=\"o.s.web.servlet.view.BeanNameViewResolver\"/>\n            <bean class=\"o.sweb.servlet.view.tiles3.TilesViewResolver\" />\n            <bean class=\"com.book.resolver.JsonViewResolver\"/>\n        </list>\n    </property>\n    <property name=\"defaultViews\">\n        <list>\n            <bean class=\"o.s.web.servlet.view.json.MappingJackson2JsonView\" />\n        </list>\n    </property>\n    <property name=\"defaultContentType\" value=\"text/html\"/>\n     <property name=\"ignoreAcceptHeader\" value=\"true\"/>\n      <property name=\"favorParameter\" value=\"false\"/>\n    <property name=\"favorPathExtension\" value=\"true\"/>\n</bean>\n \n<!-- Fallback Resolver: If no extension matched, use JSP view -->\n<!-- Resolves view names to protected .jsp resources within the\n        /WEB-INF directory -->\n<bean class=\"o.s.web.servlet.view.InternalResourceViewResolver\"\n      p:prefix=\"/WEB-INF/\"\n      p:suffix=\".jsp\"\n      p:order=\"0\"/>\nHere is the meaning of each property used in the previous configuration:\n•\t mediaTypes: Map containing extension to content-type correspondences. This \nproperty is not mandatory and it does not have to be set in the application when the \nJavaBeans Activation Framework is used, in which case the types are determined \nautomatically.10\n•\t viewResolvers: The list of view resolvers to delegate to. This property is not \nmandatory and when it is not set, all view resolver beans in the context are detected \nand used, but they have to be ordered.\n•\t defaultViews: The default view to use when a more specific view could not be \nobtained.\nThe property is not mandatory.\n•\t defaultContentType: The type to render in case a match was not found. The \nproperty is not mandatory.\n•\t ignoreAcceptHeader: Indicates that the HTTP Accept header should be ignored if \ntrue, and taken into consideration if false. The property is not mandatory, and  \nif not set, it defaults to false.\n10By default, strategies for checking the extension of the request path and the Accept header are registered. The path \nextension check performs lookups through the ServletContext and the JavaBeans Activation Framework (if present) \nunless media types are configured. In order to use the JavaBeans Activation Framework, the activation.jar has to be \nin the classpath of the application.\n79",
          "tables": [],
          "code_blocks": [
            "<property name=\"viewResolvers\">\n        <list>\n            <bean class=\"o.s.web.servlet.view.BeanNameViewResolver\"/>\n            <bean class=\"o.sweb.servlet.view.tiles3.TilesViewResolver\" />\n            <bean class=\"com.book.resolver.JsonViewResolver\"/>\n        </list>\n    </property>\n    <property name=\"defaultViews\">\n        <list>\n            <bean class=\"o.s.web.servlet.view.json.MappingJackson2JsonView\" />\n        </list>\n    </property>\n    <property name=\"defaultContentType\" value=\"text/html\"/>\n     <property name=\"ignoreAcceptHeader\" value=\"true\"/>\n      <property name=\"favorParameter\" value=\"false\"/>\n    <property name=\"favorPathExtension\" value=\"true\"/>",
            "/WEB-INF directory -->",
            "p:prefix=\"/WEB-INF/\"\n      p:suffix=\".jsp\"\n      p:order=\"0\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 93,
          "text": "Chapter 3 ■ Spring MVC\n•\t favorParameter: Indicates if a request parameter named format should be used to \ndetermine the requested content-type. The property is not mandatory, and if not set, \nit defaults to false.\n•\t favorPathExtension: Indicates if the extension of the request URL should be used to \ndetermine the requested content-type. The property is not mandatory, and if not set, \nit defaults to true.\nStarting with Spring 3.2, ContentNegotiationManagerFactoryBean and ContentNegotiationManager \nwere introduced in order to encapsulate all content-type related configurations for the \nContentNegotiatingViewResolver.\nContentNegotiationManagerFactoryBean provides access to a ContentNegotiationManager \nconfigured with one or more ContentNegotiationStrategy. An equivalent configuration to the preceding, \nafter Spring 3.2, looks like this:\n<bean class=\"o.s.web.servlet.view.ContentNegotiatingViewResolver\">\n      <property name=\"viewResolvers\">\n            <list>\n                <bean class=\"o.s.web.servlet.view.BeanNameViewResolver\"/>\n                <bean class=\"o.sweb.servlet.view.tiles3.TilesViewResolver\"/>\n                <bean class=\"com.book.resolver.JsonViewResolver\"/>\n            </list>\n        </property>\n        <property name=\"defaultViews\">\n            <list>\n                <bean class=\"o.s.web.servlet.view.json.MappingJackson2JsonView\" />\n            </list>\n        </property>\n<!-- All content-type related configuration is now done by this bean\n         since Spring 3.2 -->\n        <property name=\"contentNegotiationManager\">\n            <bean class=\"o.s.web.accept.ContentNegotiationManagerFactoryBean>\n                <property name=\"mediaTypes\">\n                    <map>\n                        <entry key=\"html\" value=\"text/html\"/>\n                        <entry key=\"json\" value=\"application/json\"/>\n                         <entry key=\"pdf\" value=\"application/pdf\"/>\n                        <entry key=\"xls\" value=\"application/vnd.ms-excel\"/>\n                    </map>\n                </property>\n                <property name=\"defaultContentType\" value=\"text/html\"/>\n                <property name=\"ignoreAcceptHeader\" value=\"true\"/>\n                <property name=\"favorParameter\" value=\"false\"/>\n                <property name=\"favorPathExtension\" value=\"true\"/>\n            </bean>\n</property>\n80",
          "tables": [],
          "code_blocks": [
            "<property name=\"viewResolvers\">\n            <list>\n                <bean class=\"o.s.web.servlet.view.BeanNameViewResolver\"/>\n                <bean class=\"o.sweb.servlet.view.tiles3.TilesViewResolver\"/>\n                <bean class=\"com.book.resolver.JsonViewResolver\"/>\n            </list>\n        </property>\n        <property name=\"defaultViews\">\n            <list>\n                <bean class=\"o.s.web.servlet.view.json.MappingJackson2JsonView\" />\n            </list>\n        </property>",
            "since Spring 3.2 -->\n        <property name=\"contentNegotiationManager\">\n            <bean class=\"o.s.web.accept.ContentNegotiationManagerFactoryBean>\n                <property name=\"mediaTypes\">\n                    <map>\n                        <entry key=\"html\" value=\"text/html\"/>\n                        <entry key=\"json\" value=\"application/json\"/>\n                         <entry key=\"pdf\" value=\"application/pdf\"/>\n                        <entry key=\"xls\" value=\"application/vnd.ms-excel\"/>\n                    </map>\n                </property>\n                <property name=\"defaultContentType\" value=\"text/html\"/>\n                <property name=\"ignoreAcceptHeader\" value=\"true\"/>\n                <property name=\"favorParameter\" value=\"false\"/>\n                <property name=\"favorPathExtension\" value=\"true\"/>\n            </bean>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 94,
          "text": "Chapter 3 ■ Spring MVC\n■ !  the problem with using JavaBeans activation Framework is that if the extension is not recognized, it sets \nthe content-type to application/octet-stream by default. this means that the Views configured with the \ndefaultViews property are not taken into consideration and the ContentNegotiatingViewResolver will return \nnull. that’s why in Spring 3.2, the useJaf property was introduced; it can be set to false to disable the JavaBeans \nactivation Framework. this property has been added to ContentNegotiationManagerFactoryBean too.\nConsidering the previous configuration, the following code displays how a view is resolved using \ncontent negotiation type:\n// In PersonsController.java\n@RequestMapping(\"/persons\")\npublic String list(Model model) {\n       model.addAttribute(personManager.getAllPersons());\n       return \"persons/list\";\n}\n<!-- In mvc-config-->\n<bean class=\"com.book.persons.PersonsExcelView\"/>\nAs you can see, there is no need for the bean name to be persons/list.xls, because the \nContentNegotiatingViewResolver does the match without it.\n■ !  in the following XML configuration, the util namespace is introduced to simplify the configuration. the \nutil namespaces allows you to define and use collections in the same way that beans are defined and used in \na configuration file.\nThis configuration can be simplified by using the p and util namespaces, which allow the \nContentNegotiatingViewResolver XML bean definition to be simplified, as follows:\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:p=\"http://www.springframework.org/schema/p\"\n       xmlns:util=\"http://www.springframework.org/schema/util\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/mvc\n         http://www.springframework.org/schema/mvc/spring-mvc.xsd\n         http://www.springframework.org/schema/beans\n         http://www.springframework.org/schema/beans/spring-beans.xsd\n         http://www.springframework.org/schema/context\n         http://www.springframework.org/schema/context/spring-context.xsd\n         http://www.springframework.org/schema/util\n         http://www.springframework.org/schema/util/spring-util.xsd\">\n...\n81",
          "tables": [],
          "code_blocks": [
            "model.addAttribute(personManager.getAllPersons());\n       return \"persons/list\";",
            "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:p=\"http://www.springframework.org/schema/p\"\n       xmlns:util=\"http://www.springframework.org/schema/util\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/mvc\n         http://www.springframework.org/schema/mvc/spring-mvc.xsd\n         http://www.springframework.org/schema/beans\n         http://www.springframework.org/schema/beans/spring-beans.xsd\n         http://www.springframework.org/schema/context\n         http://www.springframework.org/schema/context/spring-context.xsd\n         http://www.springframework.org/schema/util\n         http://www.springframework.org/schema/util/spring-util.xsd\">"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 95,
          "text": "Chapter 3 ■ Spring MVC\n<!-- sample usage of the util namespace to declare a map -->\n    <util:map id=\"mediaTypesMap\">\n        <entry key=\"html\" value=\"text/html\"/>\n        <entry key=\"xls\" value=\"application/vnd.ms-excel\"/>\n        <entry key=\"pdf\" value=\"application/pdf\"/>\n        <entry key=\"json\" value=\"application/json\"/>\n    </util:map>\n \n <!-- sample usage of the util namespace to declare a list -->\n    <util:list id=\"defaultViewsList\">\n        <!-- Excel view-->\n        <bean class=\"com.pr.views.PersonsExcelView\"/>\n        <!-- JSON View -->\n        <bean class=\"o.s.web.servlet.view.json.MappingJackson2JsonView\"/>\n    </util:list>\n \n    <util:list id=\"resolverList\">\n         <bean class=\"com.pr.resolver.JsonViewResolver\"/>\n         <bean class=\"o.s.web.servlet.view.BeanNameViewResolver\"/>\n         <!-- Resolves logical view names to Tiles 3 definitions -->\n         <bean id=\"tilesViewResolver\"\n               class=\"o.s.web.servlet.view.tiles3.TilesViewResolver\"\n               p:requestContextAttribute=\"requestContext\"/>\n    </util:list>\n    <bean class=\"o.s.web.servlet.view.ContentNegotiatingViewResolver\"\n          p:order=\"-1\"\n          p:defaultViews-ref=\"defaultViewsList\"\n          p:viewResolvers-ref=\"resolverList\">\n \n        <property name=\"contentNegotiationManager\">\n            <bean class=\"o.s.web.accept.ContentNegotiationManagerFactoryBean\"\n                  p:defaultContentType=\"text/html\"\n                  p:ignoreAcceptHeader=\"true\"\n                  p:favorParameter=\"false\"\n                  p:favorPathExtension=\"true\"\n                  p:mediaTypes-ref=\"mediaTypesMap\"/>\n        </property>\n    </bean>\n \n<beans>\nOf course, this means taking out the defaultViewsList and the mediaTypesMap outside the declaration \nof the ContentNegotiatingViewResolver, which is the only place that they are needed. In this configuration, \nthey can be used by other beans, although this is rarely needed. The choice belongs to the developer, \ndepending on what configuration approach he is most comfortable with.\n■ !  When the p namespace is used, the p:[property-name]-ref means this property is a reference to an \nexisting bean in the context, with the id specified as the value.\n82",
          "tables": [],
          "code_blocks": [
            "<util:map id=\"mediaTypesMap\">\n        <entry key=\"html\" value=\"text/html\"/>\n        <entry key=\"xls\" value=\"application/vnd.ms-excel\"/>\n        <entry key=\"pdf\" value=\"application/pdf\"/>\n        <entry key=\"json\" value=\"application/json\"/>\n    </util:map>\n \n <!-- sample usage of the util namespace to declare a list -->\n    <util:list id=\"defaultViewsList\">\n        <!-- Excel view-->\n        <bean class=\"com.pr.views.PersonsExcelView\"/>\n        <!-- JSON View -->\n        <bean class=\"o.s.web.servlet.view.json.MappingJackson2JsonView\"/>\n    </util:list>\n \n    <util:list id=\"resolverList\">\n         <bean class=\"com.pr.resolver.JsonViewResolver\"/>\n         <bean class=\"o.s.web.servlet.view.BeanNameViewResolver\"/>\n         <!-- Resolves logical view names to Tiles 3 definitions -->\n         <bean id=\"tilesViewResolver\"\n               class=\"o.s.web.servlet.view.tiles3.TilesViewResolver\"\n               p:requestContextAttribute=\"requestContext\"/>\n    </util:list>\n    <bean class=\"o.s.web.servlet.view.ContentNegotiatingViewResolver\"\n          p:order=\"-1\"\n          p:defaultViews-ref=\"defaultViewsList\"\n          p:viewResolvers-ref=\"resolverList\">\n \n        <property name=\"contentNegotiationManager\">\n            <bean class=\"o.s.web.accept.ContentNegotiationManagerFactoryBean\"\n                  p:defaultContentType=\"text/html\"\n                  p:ignoreAcceptHeader=\"true\"\n                  p:favorParameter=\"false\"\n                  p:favorPathExtension=\"true\"\n                  p:mediaTypes-ref=\"mediaTypesMap\"/>\n        </property>\n    </bean>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 96,
          "text": "Chapter 3 ■ Spring MVC\nThat’s mostly it when it comes to content-type negotiation. What is left to add is some sample code for \nthe Java configuration:\n@Configuration\n@EnableWebMvc\npublic class WebConfig extends WebMvcConfigurerAdapter {\n// Configures the contentNegotiationManager bean\n@Override\npublic void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\n            configurer\n                .ignoreAcceptHeader(true)\n                .defaultContentType(MediaType.TEXT_HTML)\n                .favorParameter(false)\n                .favorPathExtension(true);\n}\n \n//Configure ContentNegotiatingViewResolver\n@Bean\npublic ViewResolver contentNegotiatingViewResolver\n                (ContentNegotiationManager manager) {\n  ContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\n  resolver.setContentNegotiationManager(manager);\n \n  // Define all possible view resolvers\n  List<ViewResolver> resolvers = new ArrayList<>();\n        resolvers.add(beanNameViewResolver());\n        resolvers.add(tilesViewResolver());\n        resolvers.add(jsonViewResolver());\n        resolver.setViewResolvers(resolvers);\n \n        List<View> defaultViewList = new ArrayList<>();\n        defaultViewList.add(jsonView);\n        resolver.setDefaultViews(defaultViewList);\n \n        resolver.setOrder(0);\n        return resolver;\n}\n@Bean\npublic ViewResolver jsonViewResolver() {\n     return new JsonViewResolver();\n}\n \n@Bean\npublic MappingJackson2JsonView jsonView(){\n    return new MappingJackson2JsonView();\n}\n \n83",
          "tables": [],
          "code_blocks": [
            "configurer\n                .ignoreAcceptHeader(true)\n                .defaultContentType(MediaType.TEXT_HTML)\n                .favorParameter(false)\n                .favorPathExtension(true);",
            "(ContentNegotiationManager manager) {\n  ContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\n  resolver.setContentNegotiationManager(manager);\n \n  // Define all possible view resolvers\n  List<ViewResolver> resolvers = new ArrayList<>();\n        resolvers.add(beanNameViewResolver());\n        resolvers.add(tilesViewResolver());\n        resolvers.add(jsonViewResolver());\n        resolver.setViewResolvers(resolvers);\n \n        List<View> defaultViewList = new ArrayList<>();\n        defaultViewList.add(jsonView);\n        resolver.setDefaultViews(defaultViewList);\n \n        resolver.setOrder(0);\n        return resolver;",
            "return new JsonViewResolver();",
            "return new MappingJackson2JsonView();"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 97,
          "text": "Chapter 3 ■ Spring MVC\n@Bean\nInternalResourceViewResolver getViewResolver(){\n    InternalResourceViewResolver resolver = new InternalResourceViewResolver();\n    resolver.setPrefix(\"/WEB-INF/\");\n    resolver.setSuffix(\".jsp\" );\n    resolver.setOrder(1);\n    return resolver;\n}\n \n // other bean definitions ...\n}\nIn the Java-annotated configuration there is no need to create a ContentNegotiationManager using the \nContentNegotiationManagerFactoryBean. Spring does it automatically if you provide a configuration for it \nby overriding the implementation for the configureContentNegotiation method.\nJSON View Resolver\nIn this section, in the code samples, the MappingJackson2JsonView is an example of a default View. \nThis is a Spring MVC View implementation that renders JSON content by serializing the model for the \ncurrent request using the Jackson 2.x ObjectMapper. By default, everything serializable (classes that \nimplement the Serializable interface) in a model map is being serialized, except for framework-specific \nclasses and classes or fields annotated with @JsonIgnore. The configuration for the view is provided by \nJackson2ObjectMapperBuilder.\nThe only tiny issue is that there is no view resolver provided by Spring, which could resolve this type of \nview. So a developer has to create one; but worry not— it’s quite easy:\n@Component\npublic class JsonViewResolver implements ViewResolver {\n \n    @Override\n    public View resolveViewName(String viewName, Locale locale) throws Exception {\n        MappingJackson2JsonView view = new MappingJackson2JsonView();\n        //make JSON output readable using proper indentation\n        view.setPrettyPrint(true);\n        return view;\n    }\n}\nWhen using Java configuration classes, all that is needed is a @Bean annotated method:\n@Bean\npublic ViewResolver jsonViewResolver() {\n        MappingJackson2JsonView view = new MappingJackson2JsonView();\n        view.setPrettyPrint(true);\n        return view;\n}\nThe Jackson library provides a set of annotations designed to be used when implementing classes \nsubjected to JSON serialization to customize what is serialized and in which format. This way of working is \nsimilar to JPA and JAXB.\n84",
          "tables": [],
          "code_blocks": [
            "InternalResourceViewResolver resolver = new InternalResourceViewResolver();\n    resolver.setPrefix(\"/WEB-INF/\");\n    resolver.setSuffix(\".jsp\" );\n    resolver.setOrder(1);\n    return resolver;",
            "@Override\n    public View resolveViewName(String viewName, Locale locale) throws Exception {\n        MappingJackson2JsonView view = new MappingJackson2JsonView();\n        //make JSON output readable using proper indentation\n        view.setPrettyPrint(true);\n        return view;\n    }",
            "MappingJackson2JsonView view = new MappingJackson2JsonView();\n        view.setPrettyPrint(true);\n        return view;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 98,
          "text": "Chapter 3 ■ Spring MVC\n■ !  the project 03-chapter-07-solution has a view resolver configuration that uses a \nContentNegotiatingViewResolver. the data can be viewed in a web page, excel document, pDF document, \nor JSOn. run it and take a look at the implementation before moving on to the next section.\nPersonalization Beans\nMost web applications are created to provide a certain service to users from different places in the \nworld, so the application needs to adapt to the language used by those customers (a process called \ninternationalization). Some web applications offer their users the ability to customize the application’s \ninterface based on a number of available themes. Spring offers the ability to easily customize the locale and \nlook-and-feel of a web application via a couple of infrastructure beans.\nMessageSource\nTo support internationalization, a Spring application must have in its context a bean named messageSource. \nThe class of this bean must implement the MessageSource interface and provides access to localized \nmessages. This class provides concrete implementations for localization methods named getMessage(...). \nWhen an ApplicationContext is loaded, it automatically searches for this bean in the context and all calls to \ngetMessage(...) methods are delegated to this bean.\nSpring provides two out-of-the-box implementations for the MessageSource interface: \nResourceBundleMessageSource and StaticMessageSource. The second one allows messages to be \nregistered programmatically and it is intended to be used in testing. The first implementation relies on \nJDK’s ResourceBundle implementation. Reloading a resource bundle during execution is not possible, \nas ResourceBundle caches loaded bundles files forever, so the implementation usually used in a web \napplication is ReloadableResourceBundleMessageSource, which is a Spring-specific implementation that \naccesses bundles using specified base names, participating in the Spring ApplicationContext’s resource \nloading. This class supports reloading properties files containing the internationalization information; it is \nusually slightly faster than ResourceBundleMessageSource. Another advantage is that it can read properties \nfiles with a specific character encoding.\nIn the following, you can see a simple XML configuration of this bean:\n<bean id=\"messageSource\"\n    class=\"o.s.context.support.ReloadableResourceBundleMessageSource\">\n    <property name=\"basenames\">\n        <list>\n          <value>/WEB-INF/messages/global<value/>\n        </list>\n    </property>\n    <property name=\"cacheSeconds\">1</property>\n</bean>\nWhen only one resource bundle and the p-namespace are used, the previous definition becomes this:\n<bean id=\"messageSource\"\n    class=\"o.s.context.support.ReloadableResourceBundleMessageSource\"\n    p:basename=\"/WEB-INF/messages/global\"\n    p:cacheSeconds=\"1\"/>\n85",
          "tables": [],
          "code_blocks": [
            "class=\"o.s.context.support.ReloadableResourceBundleMessageSource\">\n    <property name=\"basenames\">\n        <list>\n          <value>/WEB-INF/messages/global<value/>\n        </list>\n    </property>\n    <property name=\"cacheSeconds\">1</property>",
            "class=\"o.s.context.support.ReloadableResourceBundleMessageSource\"\n    p:basename=\"/WEB-INF/messages/global\"\n    p:cacheSeconds=\"1\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 99,
          "text": "Chapter 3 ■ Spring MVC\nWhen Java-based configuration is used, the bean definition looks like this:\n@Bean\npublic MessageSource getMessageSource(){\n     ReloadableResourceBundleMessageSource messageSource =\n          new ReloadableResourceBundleMessageSource();\n     messageSource.setBasename(\"/WEB-INF/messages/global\");\n     messageSource.setCacheSeconds(1);\n     return messageSource;\n}\nThe cacheSeconds property is used to set the number of seconds to cache the loaded property files. \nInternationalization messages are loaded from properties files under /WEB-INF/messages/; they are named \nglobal_[locale].properties.\nTo use the messageSource bean to retrieve internationalized resources inside handler methods, simply \ninject the bean in the controller and call the desired getMessage(...) method. The Spring type library is \nused for this purpose too. The fmt tag library, which is a component of JSTL, can be used too. The syntax is a \nlittle different, as you can see in the following example:\n<!-- JSTL fmt way -->\n<fmt:message key=\"menu.home\"/>\n <!-- Spring way -->\n<spring:message code=\"menu.home\"/>\nWhen using the spring:message tag, the MessageSource classes can be integrated with the \nSpring context. The spring:message- tag works with the locale support that comes with Spring. If the \n“code” attribute isn’t set or cannot be resolved, the “text” attribute is used as the default message. And \nspring:message supports dynamic names for internationalization codes, so a message code can be an \nexpression:\n<spring:message code=\"myPrefix.${account.state}\"/>\nReloadableResourceBundleMessageSource is able to load messages from properties files with a specific \nencoding. In order for those messages to be successfully incorporated in a view, Spring provides a class \ncalled CharacterEncodingFilter, which is used to apply character encoding to requests. It can work in two \nmodes to do the following:\n•\t Enforce the encoding\n•\t Apply the encoding if one is not already defined\nThis bean is added to the web.xml file like this:\n<filter>\n      <filter-name>characterEncodingFilter</filter-name>\n      <filter-class>o.s.web.filter.CharacterEncodingFilter</filter-class>\n      <init-param>\n           <param-name>encoding</param-name>\n           <param-value>UTF-8</param-value>\n      </init-param>\n86",
          "tables": [],
          "code_blocks": [
            "ReloadableResourceBundleMessageSource messageSource =\n          new ReloadableResourceBundleMessageSource();\n     messageSource.setBasename(\"/WEB-INF/messages/global\");\n     messageSource.setCacheSeconds(1);\n     return messageSource;",
            "<filter-name>characterEncodingFilter</filter-name>\n      <filter-class>o.s.web.filter.CharacterEncodingFilter</filter-class>\n      <init-param>\n           <param-name>encoding</param-name>\n           <param-value>UTF-8</param-value>\n      </init-param>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 100,
          "text": "Chapter 3 ■ Spring MVC\n      <init-param>\n           <param-name>forceEncoding</param-name>\n           <param-value>true</param-value>\n      </init-param>\n </filter>\n<filter-mapping>\n     <filter-name>characterEncodingFilter</filter-name>\n     <url-pattern>/*</url-pattern>\n</filter-mapping>\nEquivalent Java-based configuration looks like in the following code snippet:\n\\\\in class implementing WebApplicationInitializer\n @Override\nprotected Filter getServletFilters() {\n     CharacterEncodingFilter characterEncodingFilter = new CharacterEncodingFilter();\n     characterEncodingFilter.setEncoding(\"UTF-8\");\n     characterEncodingFilter.setForceEncoding(true);\n     return new Filter { characterEncodingFilter};\n}\nLocaleResolver\nIn order for the messageBean to solve the messages, a locale must be defined for a web application. The value \nfor the locale is taken from the browser. The bean resolving the locale must be named localeResolver and \nit must implement the LocaleResolver interface, because the DispatcherServlet looks for such a bean to \nuse. A LocaleResolver can also store a different locale defined by the user. In Spring, there are three types of \nlocale resolvers defined:\n•\t AcceptHeaderLocaleResolver: Reads the locale from the request\n•\t CookieLocaleResolver: Reads/writes the locale from/to a cookie named org.\nspringframework.web.servlet.i18n.CookieLocaleResolver.LOCALE (unless \nnamed otherwise in the bean definition using property cookieName)\n•\t SessionLocaleResolver: Reads/writes the locale from/to an HTTP session\n■ !  the default name of the cookie can be confusing because it looks like a full name for a static variable, but \nno such variable exists. the same applies to the theme cookie mentioned in the next section.\nWhen a specific LocaleResolver is not defined, AcceptHeaderLocaleResolver is used as \ndefault. When users select language, CookieLocaleResolver or SessionLocaleResolver can be used. \nCookieLocaleResolver is most often used in stateless applications without user sessions; this bean is \ndefined in the mvc-config.xml file. The following definition is quite common:\n<bean id=\"localeResolver\" class=\"o.s.w.s.i18n.CookieLocaleResolver\"\n          p:defaultLocale=\"en\"\n          p:cookieMaxAge=\"3600\"/>\n87",
          "tables": [],
          "code_blocks": [
            "<init-param>\n           <param-name>forceEncoding</param-name>\n           <param-value>true</param-value>\n      </init-param>\n </filter>",
            "<filter-name>characterEncodingFilter</filter-name>\n     <url-pattern>/*</url-pattern>",
            "CharacterEncodingFilter characterEncodingFilter = new CharacterEncodingFilter();\n     characterEncodingFilter.setEncoding(\"UTF-8\");\n     characterEncodingFilter.setForceEncoding(true);\n     return new Filter { characterEncodingFilter};",
            "p:defaultLocale=\"en\"\n          p:cookieMaxAge=\"3600\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 101,
          "text": "Chapter 3 ■ Spring MVC\nThe cookieMaxAge sets the maximum age in seconds for the cookie. If set to –1, the cookie is deleted \nonly when the client shuts down.\nIn order for Spring to be notified of the changes in the locale, a bean of type LocaleChangeInterceptor \nneeds to be configured. This ensures that the locale interceptor will be applied to all handler mappings.\n<mvc:interceptors>\n    <bean class=\"org.springframework.web.servlet.i18n.LocaleChangeInterceptor\" />\n    </mvc:interceptors>\nAn equivalent Java configuration for this bean can be used by providing an implementation for the \naddInterceptors method when implementing WebMvcConfigurer or overriding the same method when \nextending WebMvcConfigurerAdapter:\n\\\\in the @Configuration and @EnableWebMvc annotated class\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(localeChangeInterceptor());\n        \\\\other interceptors can be added here\n    }\n \n  @Bean\npublic LocaleChangeInterceptor localeChangeInterceptor(){\n    return new LocaleChangeInterceptor();\n}\nThis interceptor detects requests to change the locale by looking for a request parameter named locale \nby default. The LocaleResolver bean is used to store the value of this parameter. A different name can be set \nby using a different value for the parameterName property. Request URLs to change the locale are expected to \ncontain the parameter name and a value in the URL: http://myapp.com/?[parameterName]=[locale_name] \n(under /WEB-INF/messages/ a [filename]_[locale_name].properties files is defined).\nThemeResolver\nIf the web application has a customizable look and feel, the different themes can be managed using a bean \nnamed themeResolver. The bean resolving the theme has to implement the ThemeResolver interface, \nbecause the DispatcherServlet looks for such a bean to identify the resources needed for creating a \nresponse.\nTo use a ThemeResolver, you have to do the following:\n  1.  Create a [theme].properties file on the classpath (under /WEB-INF/classes/). \nThe “theme” term can be replaced with any word describing that theme. In it, \nadd the properties specific to that theme. In the code samples attached to this \nchapter, you have a file named blue.properties that contains the following \ntheme properties:\nstyle.css=/styles/decorator-blue.css\nbanner.image=/images/banner-blue.png\n88",
          "tables": [],
          "code_blocks": [
            "<bean class=\"org.springframework.web.servlet.i18n.LocaleChangeInterceptor\" />\n    </mvc:interceptors>",
            "@Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(localeChangeInterceptor());\n        \\\\other interceptors can be added here\n    }\n \n  @Bean",
            "return new LocaleChangeInterceptor();"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 102,
          "text": "Chapter 3 ■ Spring MVC\n  2.  Use the Spring theme tag to resolve theme properties.\n<%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\" %>\n...\n<spring:theme var=\"styleCss\" code=\"style.css\"/>\n<c:url var=\"styleCssUrl\" value=\"${styleCss}\"/>\n<link type=\"text/css\" type=\"stylesheet\" href=\"${styleCssUrl}\" />\nTo access the current theme in a view, you can use the RequestContext; but first you need to expose a \nrequestContext attribute:\n<bean class=\"org.s.web.servlet.view.InternalResourceViewResolver\">\n    <property name=\"requestContextAttribute\" value=\"requestContext\"/>\n</bean>\n \n <c:if test=\"${requestContext.theme.name eq 'blue'}\">\n...\nIn Spring there are three types of theme resolvers defined:\n•\t FixedThemeResolver: The default implementation uses a configured default theme\n•\t CookieThemeResolver: Reads/writes the theme attribute from/to a cookie named \norg.springframework.web.servlet.theme.cookieThemeResolver.THEME  \n(unless named otherwise in the bean definition using property cookieName)\n•\t SessionThemeResolver: Reads/writes the theme attribute from/to a HTTP session\nFigure 3-8.  List of cookies for the Personal Records Manager application\n89",
          "tables": [],
          "code_blocks": [
            "<property name=\"requestContextAttribute\" value=\"requestContext\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 103,
          "text": "Chapter 3 ■ Spring MVC\nYou can view the two cookies using the Firebug extension for Firefox by opening the console and \nlooking in the Cookies tab. You should see a cookie listing similar to the one shown in Figure 3-8.\nFor Spring to be notified of the changes in the theme, a bean of type ThemeChangeInterceptor needs to \nbe configured. This ensures that the theme interceptor is applied to all handler mappings:\n<mvc:interceptors>\n    <bean class=\"org.springframework.web.servlet.theme.ThemeChangeInterceptor\" />\n</mvc:interceptors>\nAn equivalent Java configuration for this bean can be used by providing an implementation for the \naddInterceptors method when implementing WebMvcConfigurer or overriding the same method when \nextending WebMvcConfigurerAdapter:\n\\\\in the @Configuration and @EnableWebMvc annotated class\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(themeChangeInterceptor());\n        \\\\other interceptors can be added here\n    }\n \n    @Bean\npublic ThemeChangeInterceptor themeChangeInterceptor(){\n    return new ThemeChangeInterceptor();\n}\nThis interceptor detects requests to change the theme by looking for a request parameter named  \ntheme by default. The ThemeResolver bean is used to store the value of this parameter. A different  \nname for it can be set by using a different value for the parameterName property. Request URLs to change  \nthe theme are expected to contain the parameter name and a value defined in the application:  \nhttp://[parameterName]?theme=[theme_name] (under /WEB-INF/classes/ a [theme_name].properties \nfiles is defined).\nHandlerExceptionResolver\nExceptions can be thrown during handler mapping or execution. Spring MVC catches and handles the \nexceptions using implementations of HandlerExceptionResolver. The developer writing the application \ncan customize the beans provided by Spring or provide his own implementation. The typical way to treat an \nMVC exception is to prepare a model and select an error view. Multiple exception resolvers can be used to \ntreat different types of exceptions in different ways. They can also be chained using the order property like \nany other infrastructure bean. Spring MVC supports the following default resolvers:\norg.springframework.web.servlet.HandlerExceptionResolver=\no.s.w.s.m.a.AnnotationMethodHandlerExceptionResolver,\\\no.s.w.s.m.a.ResponseStatusExceptionResolver,\\\no.s.w.s.m.s.DefaultHandlerExceptionResolver\n90",
          "tables": [],
          "code_blocks": [
            "<bean class=\"org.springframework.web.servlet.theme.ThemeChangeInterceptor\" />",
            "@Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(themeChangeInterceptor());\n        \\\\other interceptors can be added here\n    }\n \n    @Bean",
            "return new ThemeChangeInterceptor();"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 104,
          "text": "Chapter 3 ■ Spring MVC\nAn exception resolver provides information related to the context in which the exception was thrown, \nwhich handler method was executing, and which arguments it was called with.\nSpring MVC also provides some implementation of its own, which you can configure and use \ninstead of writing a full implementation. The preferred ways to handle exceptions are by using \nthe SimpleMappingExceptionResolver bean and annotating methods with @ExceptionHandler. \nSimpleMappingExceptionResolver can be used to map exception classes to different views. The \nSimpleMappingExceptionResolver provides the following options:\n•\t Maps exception classes to view names\n•\t Specifies a default error page for any exception that is not handled\n•\t Logs a message if configured to do so by setting a logger name for the \nwarnLogCategory property\n•\t Sets the name of the exception attribute to add to the model so it can be used inside \na view\nThe following is an example on how to configure a SimpleMappingExceptionResolver bean to map \nexception types to error views, depending on the class name:\n<bean class=\"o.s.web.servlet.handler.SimpleMappingExceptionResolver\">\n   <property name=\"exceptionMappings\">\n      <map>\n         <!-- No need for package name, any package name will match. If you have\n         two exceptions with the same name in different packages, you need to use\n         the full class name to implement the proper behaviour -->\n         <entry key=\"DataAccessException\" value=\"databaseError\"/>\n         <entry key=\"InvalidPncException\" value=\"pncError\"/>\n         <!-- The databaseError and pncError are logical view names -->\n      </map>\n   </property>\n   <property name=\"defaultStatusCode\" value=\"500\"/>\n   <property name=\"defaultErrorView\" value=\"error\"/>\n</bean>\nAn equivalent Java configuration can be obtained by defining the bean programmatically:\n\\\\in the @Configuration and @EnableWebMvc annotated class\n@Bean(name=\"simpleMappingExceptionResolver\")\n    public SimpleMappingExceptionResolver createSimpleMappingExceptionResolver() {\n        SimpleMappingExceptionResolver resolver =\n                new SimpleMappingExceptionResolver();\n \n        Properties mappings = new Properties();\n        mappings.setProperty(\"DatabaseException\", \"databaseError\");\n        mappings.setProperty(\"InvalidPncException\", \"pncError\");\n \n        resolver.setExceptionMappings(mappings); // None by default\n        resolver.setDefaultStatusCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n        resolver.setDefaultErrorView(\"error\");\n        return resolver;\n    }\n91",
          "tables": [],
          "code_blocks": [
            "<map>\n         <!-- No need for package name, any package name will match. If you have\n         two exceptions with the same name in different packages, you need to use\n         the full class name to implement the proper behaviour -->\n         <entry key=\"DataAccessException\" value=\"databaseError\"/>\n         <entry key=\"InvalidPncException\" value=\"pncError\"/>\n         <!-- The databaseError and pncError are logical view names -->\n      </map>\n   </property>\n   <property name=\"defaultStatusCode\" value=\"500\"/>\n   <property name=\"defaultErrorView\" value=\"error\"/>",
            "public SimpleMappingExceptionResolver createSimpleMappingExceptionResolver() {\n        SimpleMappingExceptionResolver resolver =\n                new SimpleMappingExceptionResolver();\n \n        Properties mappings = new Properties();\n        mappings.setProperty(\"DatabaseException\", \"databaseError\");\n        mappings.setProperty(\"InvalidPncException\", \"pncError\");\n \n        resolver.setExceptionMappings(mappings); // None by default\n        resolver.setDefaultStatusCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n        resolver.setDefaultErrorView(\"error\");\n        return resolver;\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 105,
          "text": "Chapter 3 ■ Spring MVC\n■ !  Views returned from @ExceptionHandler methods do not have access to the exception, \nbut views defined to SimpleMappingExceptionResolver do. this means that when using \nSimpleMappingExceptionResolver, the @ExceptionHandler methods must construct and return a \nModelAndView instance. (See example in the 02-pr-mvc-basic-solution module.) in order to return a logical \nview name from a method annotated with @ExceptionHandler, ExceptionHandlerExceptionResolver must \nbe extended.\nTo provide a custom implementation, the SimpleMappingExceptionResolver can be extended; its \nmethods can be overridden to provide the desired functionality.\nMethods annotated with @ExceptionHandler can be used to handle exceptions inside a single \ncontroller or they may apply to many when defined inside a class annotated with @ControllerAdvice.\nAnnotated exception handler methods are automatically called when controller methods throw an \nexception, and the method does not treat it itself. Method signatures are as flexible for an exception handler \nmethod as the controller handler methods (this is discussed in the “Controllers” section). Next you see an \nexception handler method used to handle database exceptions for the PersonsController class:\n@Controller\npublic class PersonsController {\n...\n    @ExceptionHandler\n    public String handleException(DataAccessException ex) {\n        return \"databaseError\";\n    }\n}\nThe @ExceptionHandler can be set to treat a specific type of exception, using the annotation parameter, \nthus rendering the exception argument of the method unnecessary.\n@Controller\npublic class PersonsController {\n...\n    @ExceptionHandler(DataAccessException.class)\n    public String handleException() {\n        return \"databaseError\";\n    }\n}\nBut using a parameter gives access to the exception, which can be treated or logged. Of course, the two \napproaches can be mixed.\nThe @ExceptionHandler can be set to treat an array of exceptions. If an exception is thrown that \nmatches one of the types in the list, then the method annotated with the matching @ExceptionHandler is \ninvoked. The same can be done by setting the array as an argument for the annotated method. By using \ndifferent @ExceptionHandler annotated methods for each type of exception, the code can become crowded. \nSo exceptions can be grouped by different criteria; for example, an @ExceptionHandler method can handle a \ngroup of database access exceptions, another can treat security exceptions, and so on. The chosen approach \ndepends on the exception handling specifications of a project and developer preference.\n92",
          "tables": [],
          "code_blocks": [
            "@ExceptionHandler\n    public String handleException(DataAccessException ex) {\n        return \"databaseError\";\n    }",
            "@ExceptionHandler(DataAccessException.class)\n    public String handleException() {\n        return \"databaseError\";\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 106,
          "text": "Chapter 3 ■ Spring MVC\nSpring MVC internal exceptions raised while processing a request are translated by a class named \nDefaultHandlerExceptionResolver to specific error codes: a client error (4xx) or a server error (5xx), which \nis set on the response. This class is registered by default with the MVC namespace and @EnableWebMVC.\nBut when writing your own exceptions, you can set the status code on the exception class, like this:\n@ResponseStatus(value= HttpStatus.NOT_FOUND, reason=\"Requested item not found\")\npublic class NotFoundException extends Exception {\n...\n}\nA class annotated with @ControllerAdvice allows you to use the same exception handling techniques \nacross the whole application, not just a single controller. Three types of methods are supported inside a class \nannotated with @ControllerAdvice:\n•\t Methods annotated with @ExceptionHandler that are used to handle exceptions\n•\t Methods annotated with @ModelAttribute that are used to add data to the model\n•\t Methods annotated with @InitBinder that are used for configuring form-handling\nA controller advice class used only for exception handling could look like in the following example, \nwhich depicts a global default exception handler:\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n \n    @ExceptionHandler(value = Exception.class)\n    public ModelAndView defaultErrorHandler(HttpServletRequest req, Exception e)\n                                       throws Exception {\n        if (AnnotationUtils.findAnnotation(e.getClass(),\n                                        ResponseStatus.class) != null){\n            // we test to see if the exception is annotated with @ResponseStatus\n            // if it is, we will re-throw it and let Spring handle it.\n            throw e;\n        }\n \n        ModelAndView mav = new ModelAndView();\n        //set exception details to be displayed in the page\n        mav.addObject(\"exception\", e);\n        //set request URL to be displayed in the page, so the request causing\n        //the problem can be identified\n        mav.addObject(\"url\", req.getRequestURL());\n        mav.setViewName(\"error\");\n        return mav;\n    }\n}\n93",
          "tables": [],
          "code_blocks": [
            "@ExceptionHandler(value = Exception.class)\n    public ModelAndView defaultErrorHandler(HttpServletRequest req, Exception e)\n                                       throws Exception {\n        if (AnnotationUtils.findAnnotation(e.getClass(),\n                                        ResponseStatus.class) != null){\n            // we test to see if the exception is annotated with @ResponseStatus\n            // if it is, we will re-throw it and let Spring handle it.\n            throw e;\n        }\n \n        ModelAndView mav = new ModelAndView();\n        //set exception details to be displayed in the page\n        mav.addObject(\"exception\", e);\n        //set request URL to be displayed in the page, so the request causing\n        //the problem can be identified\n        mav.addObject(\"url\", req.getRequestURL());\n        mav.setViewName(\"error\");\n        return mav;\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 107,
          "text": "Chapter 3 ■ Spring MVC\n■ !  notice in the previous example that the exception handler method returns a ModelAndView instance that \nis created inside the method body. the reason for this is that the methods in classes annotated with  \n@ControllerAdvice are methods that apply to a group of controllers in the application. this can be customized \nvia annotations(), basePackageClasses(), and basePackages() methods. But the methods are not part \nof the controller, so a model cannot be automatically injected by Spring. also, a global exception handler like \nthis one uses the same view to display all exception-specific messages in the application, so the view must be \nlinked to the model, which in this case can only be done by creating a ModelAndView instance that is handled \nappropriately by the DispatcherServlet.\nIf you want to analyze the full capabilities of treating exceptions with Spring MVC, you can take a look at \ntutorials posted on their official site.11 For passing the certification exam, all that was presented here should \nsuffice.\nUser-Provided Components\nAlthough Spring MVC offers a lot of ready-to-use components for creating web applications (all that is \nrequired are small customizations), there are components that need to be implemented by the developer. \nSuch components are controllers and interceptors. Controllers include and are the focus object of everything \nthat has been presented so far. Controllers are the handlers identified by handler mappings; their methods \nhandle application requests and return views. They can use message source to populate models with \ninternationalized data and can contain methods for exception handling. If until now it was hard to connect \nall the infrastructure beans and picture what exactly they did, this mystery will be solved in the “Controllers” \nsection, which puts every LEGO piece in its proper place. The handler interceptors are not really a big thing \ncompared to it, but they are useful too.\nControllers\nControllers are POJOs—simple beans annotated with the @Controller annotation—that are used to handle \nrequests. Each controller class contains methods that are mapped to a request URL via the @RequestMapping \nannotation. These methods are used to handle different requests. Each method executes three steps:\n  1.  Invoke services.\n  2.  Populate a model.\n  3.  Select a view.\n11A detailed explanation of exception handling using Spring MVC is at https://spring.io/blog/2013/11/01/ \nexception-handling-in-spring-mvc.\n94",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 108,
          "text": "Chapter 3 ■ Spring MVC\nHere is a simple controller example. Notice the syntax for @RequestMapping annotation.\n@Controller\n@RequestMapping(\"/persons\")\npublic class PersonsController {\n \n    private PersonManager personManager;\n \n    @Autowired\n    public PersonsController(PersonManager personManager) {\n        this.personManager = personManager;\n    }\n \n    // Handles requests to list all persons.\n    @RequestMapping(value=\"/\", method = RequestMethod.GET)\n    public String list(Model model) {\n        model.addAttribute(\"persons\", personManager.findAll());\n        return \"persons/list\";\n    }\n \n     //Handles requests to shows detail about one person.\n    @RequestMapping(value=\"/{id}\", method = RequestMethod.GET)\n    public String show(@PathVariable Long id, Model model) {\n        model.addAttribute(\"person\", personManager.findOne(id));\n        return \"persons/show\";\n    }\n}\nWhen @RequestMapping is used to annotate a controller class, the path that the controller is mapped to \nis a part of the request’s URL. The previous methods handle requests looking like this:\n# handled by the list menthod\nhttp://localhost:8080/persons/\n \n# handled by the show menthod\nhttp://localhost:8080/persons/144\nAll handling methods are relative to the path set by the @RequestMapping at class level. This means that \nthe class mapping is solved first, and then the request mapping.\n■ !  a controller can have methods that are not annotated with @RequestMapping. these methods are not \nused to solve requests. they are practically ignored, processing a user request.\n95",
          "tables": [],
          "code_blocks": [
            "private PersonManager personManager;\n \n    @Autowired\n    public PersonsController(PersonManager personManager) {\n        this.personManager = personManager;\n    }\n \n    // Handles requests to list all persons.\n    @RequestMapping(value=\"/\", method = RequestMethod.GET)\n    public String list(Model model) {\n        model.addAttribute(\"persons\", personManager.findAll());\n        return \"persons/list\";\n    }\n \n     //Handles requests to shows detail about one person.\n    @RequestMapping(value=\"/{id}\", method = RequestMethod.GET)\n    public String show(@PathVariable Long id, Model model) {\n        model.addAttribute(\"person\", personManager.findOne(id));\n        return \"persons/show\";\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 109,
          "text": "Chapter 3 ■ Spring MVC\nThe methods of a controller can be mapped using @RequestMapping with the following URI templates:\n•\t By URL only:\n@RequestMapping(\"persons/list\")\npublic String list(Model model) {\n...\n}\n•\t By URL and request method:\n@RequestMapping(\"persons/list\", method = RequestMethod.GET)\npublic String list(Model model) {\n...\n}\n•\t By URL with request parameters:\n@RequestMapping(value=\"/persons/show\", params={\"id\"})\npublic String show(@RequestParam(\"id\") Long id, Model model) {\n...\n}\n•\t By URL with a parameter and a specific value for it:\n@RequestMapping(value=\"/persons/show\", params={\"id=1123\"})\npublic String show(@RequestParam(\"id\") Long id, Model model) {\n...\n}\n•\t By URL with a path variable:\n@RequestMapping(value=\"/persons/{id}\")\npublic String show(@PathVariable(\"id\") Long id, Model model) {\n...\n}\n•\t By URL with a path variable and a regular expression that the value must match:\n@RequestMapping(value = \"/{id:[\\\\d]*}\")\n//the regular expression [\\\\d]* insures the id to be numeric,\n//made of one or more digits.\npublic String show(@PathVariable(\"id\") Long id, Model model) {\n...\n}\n96",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 110,
          "text": "Chapter 3 ■ Spring MVC\nThe preceding are simple examples of URIs onto which controllers methods are mapped. The options \ndo not stop here and any of these can be mixed, depending on the developer’s needs. For example, you can \ndo something like this in web applications:\n@RequestMapping(value=\"/persons/{id}/?dateOfBirth=1983-08-18\")\npublic String show(@RequestParam(\"dateOfBirth\") Date date,\n     @PathVariable Long id, Model model) {\n...\n}\nThe controller methods can have very flexible signatures. The following can be used as arguments in \nany combination or order:\n•\t Model\n•\t HttpServletRequest\n•\t HttpServletResponse\n•\t HttpSession\n•\t Locale\n•\t Principal\nIn the body of a controller method, path variables and request parameters must be accessed to process \nthe request. If the URI template is a RESTful URI,12 then the variable is part of the URI, called a path variable, \nand can be accessed using @PathVariable:\n@RequestMapping(value=\"/persons/{id}\")\npublic String show(@PathVariable(\"id\") Long identifier, Model model) {\n...\n}\n■ CC  When the method argument has the same name with the path variable, the value for the @\nPathVariable annotation is no longer required.\nSo the preceding method becomes:\n@RequestMapping(value=\"/persons/{id}\")\npublic String show(@PathVariable Long id, Model model) {\n...\n}\n12A RESTful URI identifies a domain resource (like a book, or a person, in this case) rather than an application resource \nlike a web page or a form. URI is the acronym for Uniform Resource Identifier. URL is the acronym for Uniform \nResource Locator. REST services work only with URIs and @PathVariable.\n97",
          "tables": [],
          "code_blocks": [
            "@PathVariable Long id, Model model) {"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 111,
          "text": "Chapter 3 ■ Spring MVC\nAnd handles requests similar to: http://localhost:8080/persons/144.\nThere is a special case when the @PathVariable is not even needed and the default is the argument \nname; this happens when the application is compiled with debug symbols enabled. It is rarely used because \nthe result is an unoptimized/debuggable byte code. This is mentioned here because the official course \nmentions it too, and it might be useful to know that this possibility exists in case you ever need it.\nWhen the URI is non-RESTful, the variable is provided as a parameter in the request URL. The request \nparameter can be accessed using the @RequestParam annotation.\n@RequestMapping(value=\"/persons/show\", params={\"id\"})\npublic String show(@RequestParam(\"id\") Long identifier, Model model) {\n...\n}\nType conversion is applied, and if the parameter value is missing or has the wrong type, an exception is \nthrown.\n■ CC  When the method argument has the same name with the request parameter, the value for  \nthe @RequestParam annotation is no longer required. the params property is no longer needed for the  \n@RequestMapping either.\nSo the preceding method becomes this:\n@RequestMapping(value=\"/persons/show\")\npublic String show(@RequestParam Long id, Model model) {\n...\n}\nThe request parameter can be set as optional if it is not a primitive type; in this case, it defaults to null \nand must be handled in the method body.\n@RequestMapping(value=\"/persons/show\", params={\"id\"})\npublic String show(@RequestParam(value=\"id\", required=false) Long identifier,\nModel model) {\nif(identifier == null) {\n//return a specific view\n}\n...\n}\nThe request parameter can also be set as optional when the request parameter is a primitive type and a \nfallback default value is provided.\n@RequestMapping(value=\"/persons/show\", params={\"id\"})\npublic String show(@RequestParam(value=\"id\", required=false,\n                  defaultValue = \"2\") long identifier, Model model) {\n    if(identifier == null) {\n        //return a specific view\n    }\n \n    ...\n}\n98",
          "tables": [],
          "code_blocks": [
            "defaultValue = \"2\") long identifier, Model model) {\n    if(identifier == null) {\n        //return a specific view\n    }\n \n    ..."
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 112,
          "text": "Chapter 3 ■ Spring MVC\nRequest parameters can have any type, including Date and Number, and these types can be formatted by \nusing the following annotations:\n//matches http://localhost:8080/persons/1983-08-18\n@RequestMapping(value=\"/persons/{birthDate}\")\npublic String list(@PathVariable\n        @DateTimeFormat(pattern = \"yyyy-MM-dd\") Date birthDate,\n           Model model) {\n \n...\n}\n \n//matches http://localhost:8080/accounts/?minAmount=$5000.50\n@RequestMapping(value=\"/accounts\" params={\"minAmount\"})\npublic String list(@RequestParam\n         @NumberFormat(style = NumberFormat.Style.CURRENCY) Double minAmount,\n           Model model) {\n \n...\n}\nTo generate a Spring-parametrized URI in a JSP file, a combination of <spring:url> tag and \n<spring:param/> is used:\n<%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\" %>\n...\n <spring:url var=\"showUrl\" value=\"{id}\">\n      <spring:param name=\"id\" value=\"${person.id}\"/>\n</spring:url>\n <a href=\"${showUrl}\">${person.id}</a>\nThe first three lines of the preceding example generate a URI similar to http://localhost:8080/\nperson/123 by using the current context of the application and the person attribute in the model. The \ngenerated URI is stored as a value for the showUrl attribute in the model. In the next line, that attribute is \nused to populate the HTML link element.\nAfter the execution of the code in a mapping method, the controller selects a view for the resulting data \nto be rendered in. The controller’s responsibility includes populating a model map with the data to display \nin the view. There are multiple ways of specifying the resulting view too, but the default is for the mapping \nmethod to return a string, which is the logical view name. (By default, a path to a JSP file is expected, unless \nsome view resolver is used, such as TilesResolver, for example). Also, the controller can directly write to \nthe response stream and complete the request (when handling AJAX calls or REST services, cases that are \npresented in detail in the following chapters). The process to identify which view is being used is called view \nresolution, which is performed by one view resolver class or a chain of view resolver classes.\n99",
          "tables": [],
          "code_blocks": [
            "@DateTimeFormat(pattern = \"yyyy-MM-dd\") Date birthDate,\n           Model model) {",
            "@NumberFormat(style = NumberFormat.Style.CURRENCY) Double minAmount,\n           Model model) {",
            "<spring:param name=\"id\" value=\"${person.id}\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 113,
          "text": "Chapter 3 ■ Spring MVC\nAccessing Model Data\nAccessing Model data instances is simple, especially when the model is used as an argument of the request \nmethod, and Spring takes care of injecting it:\n@RequestMapping(\"/persons\")\npublic String list(Model model) {\n    model.addAttribute(\"persons\", personManager.findAll());\n     return \"persons/list\";\n}\nAll model attributes are available in the JSP for rendering.\nAttributes can be added to the model without specifying a name. There are convention-over-\nconfiguration rules applied by Spring to infer the name of an attribute based on the type of the attribute \nvalue set. For example:\n•\t Person person = personManager.getById(id);\nmodel.addAttribute(person);\n//added as \"person\" as the reference type is Person\n•\t List<Person> persons = personManager.findAll();\nmodel.addAttribute(persons);\n// added as \"personList\" as reference type is List<Person>\n■ CC  When objects are added to a model without specifying an attribute name, this is inferred by lowercasing \nthe first letter of the reference type. if the attribute is a collection of objects, the attribute name is composed \nfrom the reference type with first letter lowercased and suffixed with the specific collection suffix (a simple \nname of the Collection interface implemented): “Set” for Set<?>, “List” for List<?>, etc.\nWhen only one object needs to be added to the model, the object can simply be returned by the method \nand it is automatically added to the model. This obviously does not work with objects of type String, \nbecause Spring assumes the returned String value is a logical view name. When the following approach \nis used, the returned object is added to the model as an attribute and the name is inferred based on the \nconventions mentioned earlier.\n@RequestMapping(\"/persons/list\")\npublic List<Person> list() {\n      return personManager.findAll();\n      //model name attribute convention will be used\n}\nBut the attribute name can be specified by annotating the method with @ModelAttribute and \nspecifying a different attribute name.\n@RequestMapping(\"/persons/list\")\n@ModelAttribute(\"persons\")\npublic List<Person> list() {\n    return personManager.findAll();\n}\n100",
          "tables": [],
          "code_blocks": [
            "model.addAttribute(\"persons\", personManager.findAll());\n     return \"persons/list\";",
            "return personManager.findAll();\n      //model name attribute convention will be used",
            "return personManager.findAll();"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 114,
          "text": "Chapter 3 ■ Spring MVC\n■ CC  When the handler method returns an object, the DispatcherServlet has to infer the view to render the \nmodel. the logical view name is extracted from the mapping UrL by stripping the first \"/\" and the extension if \npresent. in the preceding examples, the logical view name used is \"persons/list\".\nSelecting a View\nA controller method selects a view by returning its name, and DispatcherServlet takes care of the rest using \nthe ViewResolvers in the context. But there are conventions over configurations in place that allow a controller \nmethod to return null and a view is still selected, like the convention mentioned right before this section.\nThe logical view name can be extracted from the request URI by removing the leading slash and \nextension. This is done by the RequestToViewNameTranslator.\n@RequestMapping(\"/persons/list.html\")\npublic String list(Model model) {...}\n// logical view name is: \"persons/list\"\n■ CC  the same view name “persons/list” is inferred if you have a @RequestMapping (\"/persons\") on the \ncontroller class and @RequestMapping (\"/list.html\") on the method.\nWhen <mvc:annotation-driven/> or @EnableWebMVC is used in the application configuration for \nsimple views that do not require a model being populated with data can be defined without controllers. The \nfollowing sample code shows how to configure such views using XML and Java configuration.\n<!-- in mvc-config.xml -->\n<mvc:view-controller path=\"/\" view-name=\"welcome\"/>\n \n//in class annotated with @Configuration and @EnableWebMvc\n// and implementing WebMvcConfigurer\n@Override\npublic void addViewControllers(ViewControllerRegistry registry) {\n     registry.addViewController(\"/\").setViewName(\"welcome\");\n}\nRedirecting\nController methods can also make redirect requests instead of selecting a view. This is done by returning a \nstring representing a view name prefixed with \"redirect:\". Redirecting implies a new HTTP request being \ncreated and usually some request attributes need to be passed from one request to the other. Until Spring 3.1, \nthis was done using @ModelAttribute on a controller method, or @SessionAtributes on the controller class.\nThe @ModelAttribute makes sure that the annotated method is always invoked before a request \nhandling method, thus adding the person instance to the model as an attribute with the name \"person\":\n@ModelAttribute\npublic Person getPerson(@PathVariable Long id) {\n    return personManager.getPerson(id);\n}\n101",
          "tables": [],
          "code_blocks": [
            "registry.addViewController(\"/\").setViewName(\"welcome\");",
            "return personManager.getPerson(id);"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 115,
          "text": "Chapter 3 ■ Spring MVC\nThe object is not added to the HttpServletRequest to fulfill this purpose, but to the model; the reason \nfor this is that Spring MVC wants to keep the view usage as generic as possible, which means not forcing the \napplication to use only view technologies based on HttpServletRequest.\nThe @SessionAttributes is used on a controller class to designate which model attributes should be \nstored in the session.\n@SessionAttributes(\"person\")\n@Controller\n@RequestMapping(\"/persons\")\npublic class PersonsController {\n \n    @RequestMapping(\"/{id}\", method = RequestMethod.GET)\n    public Person show(@PathVariable Long id, Model model) {\n       model.add(\"person\", personManager.getPerson(id));\n       return \"persons/show\";\n    }\n}\nStarting with Spring 3.1, there is another way: using flash attributes, which are saved in an object \nmodel implementing the RedirectAttributes interface. Flash attributes provide a way for one request to \nstore attributes intended for use in another. Flash attributes are supported by default; no extra configuration \nis needed. They are automatically added to the model after the redirect, but they must be added to the \nredirectAttributes object before the redirect call.\n@Controller\n@RequestMapping(\"/persons\")\npublic class PersonsController {\n \n    @RequestMapping(method = RequestMethod.POST)\n     public String edit(@Valid Person person,\n     final RedirectAttributes redirectAttributes,\n     BindingResult result, Model model) {\n         if (result.hasErrors()) {\n              return \"persons/edit\";\n          }\n          personManager.update(person);\n          redirectAttributes.addFlashAttribute(\"person\", person);\n          return \"redirect:/persons/show\";\n          }\n    }\n \n    @RequestMapping(\"/show\", method = RequestMethod.GET)\n     public String show(@ModelAttribute(\"person\") Person person) {\n        // because the attribute is already in the model,\n        //the only thing left to do is return the view name\n           return \"persons/show\";\n    }\n \n}\n102",
          "tables": [],
          "code_blocks": [
            "@RequestMapping(\"/{id}\", method = RequestMethod.GET)\n    public Person show(@PathVariable Long id, Model model) {\n       model.add(\"person\", personManager.getPerson(id));\n       return \"persons/show\";\n    }",
            "@RequestMapping(method = RequestMethod.POST)\n     public String edit(@Valid Person person,\n     final RedirectAttributes redirectAttributes,\n     BindingResult result, Model model) {\n         if (result.hasErrors()) {\n              return \"persons/edit\";\n          }\n          personManager.update(person);\n          redirectAttributes.addFlashAttribute(\"person\", person);\n          return \"redirect:/persons/show\";\n          }\n    }\n \n    @RequestMapping(\"/show\", method = RequestMethod.GET)\n     public String show(@ModelAttribute(\"person\") Person person) {\n        // because the attribute is already in the model,\n        //the only thing left to do is return the view name\n           return \"persons/show\";\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 116,
          "text": "Chapter 3 ■ Spring MVC\nThe object added to the redirectAttributes model is added to the model at redirect time with the \nsame attribute name. So if the parameter name is different in the method being called at redirect time, a \nvalue representing the attribute name for the @ModelAttribute has to be set. In the previous example, this \nwas done anyway just to make it obvious, but because of the Spring convention over configuration is in \nplace, the value for the verb|@ModelAttribute| can be skipped, as the name of the argument is considered.\n■ !  a sample of what controller methods look like and a sample of “redirect:” usage are found in the  \n03-pr-mvc-layout-solution module. the equivalent practice module is covered at the end of this chapter.\nTesting Controllers\nWhen testing controllers, the focus is to check that handler methods return the expected logical view name \nand that the expected data has been placed in the model as an attribute. When doing unit testing, the \nmanager does not need to be involved, as saving data to the database defeats the purpose of testing a small \nunit. So managers used in the controllers can be replaced with skeleton objects with simulated functionality. \nThis can be done by creating skeleton objects, called stubs, or mocking libraries can be used, to pass to them \nthe responsibility of implementing the objects according to the desired functionality. The library used to \nmock the managers used in the code samples for this book is called Mockito.13 The tests have to be run with \nMockitoJUnitRunner for the mock objects to be treated accordingly.\nAssuming you have a controller that looks like this...\npublic class PersonsController {\n \n    private PersonManager personManager;\n \n     @Autowired\n    public PersonsController(PersonManager personManager) {\n        this.personManager = personManager;\n    }\n \n     @RequestMapping(value=\"/list\", method = RequestMethod.GET)\n    public String list(Model model) {\n        model.addAttribute(\"persons\", personManager.findAll());\n        return \"persons/list\";\n}\nA test method for the list handler method will look like this:\n@RunWith(MockitoJUnitRunner.class)\npublic class PersonsControllerTest {\n    private PersonsController personsController;\n \n    @Mock\n    private PersonManager managerMock;\n \n13More information about it is at http://mockito.org.\n103",
          "tables": [],
          "code_blocks": [
            "private PersonManager personManager;\n \n     @Autowired\n    public PersonsController(PersonManager personManager) {\n        this.personManager = personManager;\n    }\n \n     @RequestMapping(value=\"/list\", method = RequestMethod.GET)\n    public String list(Model model) {\n        model.addAttribute(\"persons\", personManager.findAll());\n        return \"persons/list\";",
            "private PersonsController personsController;\n \n    @Mock\n    private PersonManager managerMock;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 117,
          "text": "Chapter 3 ■ Spring MVC\n    @Before\n    public void setUp(){\n        personsController = new PersonsController(managerMock);\n    }\n \n    @Test\n    public void list() {\n    // setting up a mock manager that returns an empty list when\n    // findAll() is called\n        when(managerMock.findAll()).thenReturn(new ArrayList<>());\n \n    //a model object is \"manually\" constructed to pass as argument\n    // to the controller method\n        Model model = new BindingAwareModelMap();\n        String view = personsController.list(model);\n        assertEquals(\"persons/list\", view);\n \n        //this tests if the handler method has added\n        //the \"persons\" attribute to the provided model.\n        assertNotNull(model.asMap().get(\"persons\"));\n    }\n}\nThe @Mock annotation makes sure that the object is treated as a mock object by the library and a \nskeleton implementation is provided transparently. Statements beginning with calls to the when method \ndefine the behavior of the respective object when its mock methods are called. The syntax is quite intuitive \nand really easy to use. The statement underlined in the preceding code sample can be translated as: “When \nthe findAll() method is called on the mock object, return an empty list of persons.”\nIntegration testing of the controllers can be done by creating a test context for their execution, and it has \nthe advantage of testing the integration of application layers with each other. The test class looks like this:\n@RunWith(SpringJUnit4ClassRunner.class)\n@WebAppConfiguration\n@ContextConfiguration({\n        \"file:src/main/webapp/WEB-INF/spring/mvc-config.xml\",\n        \"classpath:spring/app-dao-config.xml\",\n        \"classpath:spring/test-db-config.xml\"\n     })\npublic class AllControllerTest {\n \n     @Autowired\n     private PersonsController personsController;\n \n     @Before\n     public void setUp(){\n         //we are making sure the controller was initialized correctly\n         assertNotNull(personsController);\n     }\n \n104",
          "tables": [],
          "code_blocks": [
            "@Before\n    public void setUp(){\n        personsController = new PersonsController(managerMock);\n    }\n \n    @Test\n    public void list() {\n    // setting up a mock manager that returns an empty list when\n    // findAll() is called\n        when(managerMock.findAll()).thenReturn(new ArrayList<>());\n \n    //a model object is \"manually\" constructed to pass as argument\n    // to the controller method\n        Model model = new BindingAwareModelMap();\n        String view = personsController.list(model);\n        assertEquals(\"persons/list\", view);\n \n        //this tests if the handler method has added\n        //the \"persons\" attribute to the provided model.\n        assertNotNull(model.asMap().get(\"persons\"));\n    }",
            "\"file:src/main/webapp/WEB-INF/spring/mvc-config.xml\",\n        \"classpath:spring/app-dao-config.xml\",\n        \"classpath:spring/test-db-config.xml\"\n     })",
            "@Autowired\n     private PersonsController personsController;\n \n     @Before\n     public void setUp(){\n         //we are making sure the controller was initialized correctly\n         assertNotNull(personsController);\n     }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 118,
          "text": "Chapter 3 ■ Spring MVC\n     @Test\n     public void list() {\n         Model model = new BindingAwareModelMap();\n         String view = personsController.list(model);\n         assertEquals(\"persons/list\", view);\n         assertNotNull(model.asMap().get(\"persons\"));\n \n         // test to see id the manager returned the expected result\n         assertTrue(((List<Person>) model.asMap().get(\"persons\")).size() == 16);\n    }\n}\nThe WebAppConfiguration annotation makes sure that the context in which the test methods in this \nclass are run is WebApplicationContext. The root path of the web application is set using this annotation, \nand the default value for it is the one consecrated by Maven \"src/main/webapp\". There are other ways of \ninitializing a test web context or even for mocking one using MockMvc, which is the main entry point for \nserver-side Spring MVC test support. Other test libraries can be used to fully test a controller and all objects \ninvolved in handling a request. For example, Hamcrest, a testing library that offers a lot of useful methods \nnamed matchers test the type of expected params, attribute values, results, and so forth.14\n@RunWith(SpringJUnit4ClassRunner.class)\n@WebAppConfiguration\n@ContextConfiguration({\"file:src/main/webapp/WEB-INF/spring/mvc-config.xml\",\n        \"classpath:spring/app-dao-config.xml\", \"classpath:spring/test-db-config.xml\"})\npublic class HospitalsControllerTest {\n \n    @Autowired\n    private WebApplicationContext wac;\n \n    private MockMvc mockMvc;\n \n    @Before\n    public void setUp() {\n        assertNotNull(wac);\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\n    }\n \n    @Test\n    // test all aspects handling a request to \"/hospitals/\n    public void list() throws Exception {\n        mockMvc.perform(get(\"/hospitals/\"))\n                // test if response status is 200\n                .andExpect(status().isOk())\n \n                // test if the attribute \"hospital\" was added to the model\n                .andExpect(model().attributeExists(\"hospitals\"))\n \n14Read more about it on the official site at http://hamcrest.org/.\n105",
          "tables": [],
          "code_blocks": [
            "@Test\n     public void list() {\n         Model model = new BindingAwareModelMap();\n         String view = personsController.list(model);\n         assertEquals(\"persons/list\", view);\n         assertNotNull(model.asMap().get(\"persons\"));\n \n         // test to see id the manager returned the expected result\n         assertTrue(((List<Person>) model.asMap().get(\"persons\")).size() == 16);\n    }",
            "\"classpath:spring/app-dao-config.xml\", \"classpath:spring/test-db-config.xml\"})",
            "@Autowired\n    private WebApplicationContext wac;\n \n    private MockMvc mockMvc;\n \n    @Before\n    public void setUp() {\n        assertNotNull(wac);\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\n    }\n \n    @Test\n    // test all aspects handling a request to \"/hospitals/\n    public void list() throws Exception {\n        mockMvc.perform(get(\"/hospitals/\"))\n                // test if response status is 200\n                .andExpect(status().isOk())\n \n                // test if the attribute \"hospital\" was added to the model\n                .andExpect(model().attributeExists(\"hospitals\"))"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 119,
          "text": "Chapter 3 ■ Spring MVC\n                //when using Tiles, we can test the forward of the request to\n                //the template for the page\n                .andExpect(forwardedUrl(\"/WEB-INF/templates/layout.jsp\"));\n   }\n    @Test\n    //test a method returning \"redirect:/persons/list\"\n    // (all persons born at the hospital with code =134181)\n   public void listp() throws Exception {\n       mockMvc.perform(get(\"/hospitals/134181\"))\n        // test if response status is 302\n        .andExpect(status().isFound())\n \n        //test if the \"persons\" attribute was added to the redirectAttributes model\n        .andExpect(flash().attributeExists(\"persons\"))\n \n        // test if the redirect request is sent to the expected URL\n        .andExpect(redirectedUrl(\"/persons/list\"));\n    }\n}\nThese are the Spring MVC flavors presented in the book; choose whichever you feel most comfortable with.\nHandler Interceptors\nHandler interceptors are very useful for adding common functionality for all controllers inside an \napplication. For example, a handler interceptor in an application could be used to audit requests, or to \nmonitor the execution time of handler methods, or to generate performance reports. The most obvious \nexamples for the use of an interceptor are internationalization, validation of data in the request, and request \ndata convertors. Security checks could also be executed by a handler interceptor to give or restrict access to a \nhandler method.\nWhen using REST, a special interceptor of type JsonViewResponseBodyAdvice can be used to customize \nthe response before the JSON serialization with MappingJackson2HttpMessageConverter.\nThe handler interceptors are beans in the application context. A handler interceptor class must \nimplement the HandlerInterceptor interface and provide concrete implementation for any of the methods \nthat the user is interested in:\n•\t preHandle: Called after the HandlerAdapter has identified the handler method and \nbefore its invocation. This method controls the execution of other interceptors in the \nchain and the handler method by returning a Boolean value.\n•\t postHandle: Called after the HandlerAdapter invokes the handler method and \nbefore the DispatcherServlet renders the view (can add extra objects to the model).\n•\t afterCompletion: Called after the request has processed and the view has rendered.\nThis method is called regardless of the outcome of the handler method call; it can be used for resources \ncleanup (behavior similar to a finalize method).\nThe interceptors that modify the response before serialization must implement \nResponseBodyInterceptor and provide an implementation for the beforeBodyWrite method.  \n(This is covered in more detail in Chapter 5.\n106",
          "tables": [],
          "code_blocks": [
            "//when using Tiles, we can test the forward of the request to\n                //the template for the page\n                .andExpect(forwardedUrl(\"/WEB-INF/templates/layout.jsp\"));\n   }\n    @Test\n    //test a method returning \"redirect:/persons/list\"\n    // (all persons born at the hospital with code =134181)\n   public void listp() throws Exception {\n       mockMvc.perform(get(\"/hospitals/134181\"))\n        // test if response status is 302\n        .andExpect(status().isFound())\n \n        //test if the \"persons\" attribute was added to the redirectAttributes model\n        .andExpect(flash().attributeExists(\"persons\"))\n \n        // test if the redirect request is sent to the expected URL\n        .andExpect(redirectedUrl(\"/persons/list\"));\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 120,
          "text": "Chapter 3 ■ Spring MVC\nWhen personalizing the application with locale and theme, the LocaleChangeInterceptor and \nThemeChangeInterceptor are configured like this:\n<!-- XML -->\n <mvc:interceptors>\n        <bean class=\"o.s.web.servlet.i18n.LocaleChangeInterceptor\"/>\n        <bean class=\"o.s.web.servlet.theme.ThemeChangeInterceptor\"/>\n </mvc:interceptors>\n \n//Java Configuration\n//in the @Configuration and @EnableWebMvc annotated class\n@Override\npublic void addInterceptors(InterceptorRegistry registry) {\n    registry.addInterceptor(localeChangeInterceptor());\n    registry.addInterceptor(themeChangeInterceptor());\n}\n \n@Bean\npublic LocaleChangeInterceptor localeChangeInterceptor(){\n    return new LocaleChangeInterceptor();\n}\n \n@Bean\npublic ThemeChangeInterceptor themeChangeInterceptor(){\n    return new ThemeChangeInterceptor();\n}\nBoth interceptors use their preHandle method to set locale and theme values on the appropriate \nresolvers.15\nUsers can also create their own interceptors; in 02-pr-mvc-basic-solution the AuditInterceptor is \ngiven as an example.\n@Component\npublic class AuditInterceptor extends HandlerInterceptorAdapter {\n@Override\npublic boolean preHandle(HttpServletRequest request,\n     HttpServletResponse response, Object handler)\nthrows Exception {\n     // custom implementation here\n      return true;\n}\n \n15You can take a look at these interceptors’ code on GitHub at https://github. com/spring-projects/spring-\nframework/blob/master/spring- webmvc/src/main/java/org/ springframework/web/servlet/theme/\nThemeChangeInterceptor.java and https://github.com/spring-projects/spring-framework/blob/master/\nspring-webmvc/src/main/java/org/springframework/web/servlet/i18n/LocaleChangeInterceptor.java.\n107",
          "tables": [],
          "code_blocks": [
            "<bean class=\"o.s.web.servlet.i18n.LocaleChangeInterceptor\"/>\n        <bean class=\"o.s.web.servlet.theme.ThemeChangeInterceptor\"/>\n </mvc:interceptors>",
            "registry.addInterceptor(localeChangeInterceptor());\n    registry.addInterceptor(themeChangeInterceptor());",
            "return new LocaleChangeInterceptor();",
            "return new ThemeChangeInterceptor();",
            "HttpServletResponse response, Object handler)",
            "// custom implementation here\n      return true;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 121,
          "text": "Chapter 3 ■ Spring MVC\n@Override\npublic void postHandle(HttpServletRequest request,\n     HttpServletResponse response, Object handler, ModelAndView modelAndView)\n         throws Exception {\n      // custom implementation here\n}\n \n@Override\npublic void afterCompletion(HttpServletRequest request,\n      HttpServletResponse response, Object handler, Exception ex)\n        throws Exception {\n      // custom implementation here\n}\n}\nTo enable this interceptor, you have to configure it in the context. The following snippets show how this \ncan be done in XML and using Java configuration:\n<!-- XML -->\n<mvc:interceptors>\n   <bean class=\"com.pr.interceptor.AuditInterceptor\"/>\n</mvc:interceptors>\n \n//Java Configuration\n//in the @Configuration and @EnableWebMvc annotated class\n@Override\npublic void addInterceptors(InterceptorRegistry registry) {\n    registry.addInterceptor(auditInterceptor());\n}\n \n@Bean\npublic AuditInterceptor auditInterceptor(){\n    return new AuditInterceptor();\n}\nThe schema in Figure 3-9 displays what happens “behind the scenes” when a handler interceptor is \nused in a Spring MVC application.\n108",
          "tables": [],
          "code_blocks": [
            "HttpServletResponse response, Object handler, ModelAndView modelAndView)\n         throws Exception {\n      // custom implementation here",
            "HttpServletResponse response, Object handler, Exception ex)\n        throws Exception {\n      // custom implementation here",
            "registry.addInterceptor(auditInterceptor());",
            "return new AuditInterceptor();"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 122,
          "text": "Chapter 3 ■ Spring MVC\nFigure 3-9.  Handler Interceptor methods and places where invoked\nView Technologies\nAgain, Spring MVC was designed to be as view agnostic as possible. Most web applications generate HTML \ncontent. The “ViewResolver” section mentions how a Spring web application can generate other types \nof content, such as PDF, Excel, or JSON. The complete list of view technologies that Spring supports is far \nlonger than this. To put it in perspective, anything that provides a ViewResolver and a View implementation \nis compatible with Spring.\nBased on the type of content being generated, the views can be categorized as follows:\n•\t Display views: The response is an HTML page generated using a template: JSP, Tiles, \nThymeleaf, FreeMarker, or Velocity.\n•\t File-generating views: The response is an output file when rendered and it is \nautomatically downloaded by the browser: Apache POI, JExcelApi (Excel), IText \n(PDF), JasperReports, or XSLT transformation.\n•\t Data-delivery views: The response is actually just data and it is meant to be used \nwith AJAX and web services: JSON, Java-XML Marshalling, Atom, and RSS.\nThis book covers Tiles and Thymeleaf. Tiles is in the official certification course. Thymeleaf is a bonus \nsection that was added because it is the newest template engine in the web development world (its “birth” \nyear was 2014) and it is quite a promising technology. Its goal is to provide templates that are easy to use and \nextend. It works in web and non-web environments.\n109",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 123,
          "text": "Chapter 3 ■ Spring MVC\n■ !  the book-code module 03-chapter-07-solution covers all three categories of the views mentioned. \ntake a look at it before advancing to the next section.\nTiles Layouts\nA web application of composed of more html pages which have a common structure, typically a header/\nfooter, a menu for navigation, and a section with the actual content of the page. The header, footer, and \nnavigation menu are usually the same on every page and they can separate from the contents of a page in \ntheir own files to be reused every time a new page is created. If you were working with JSP, the files header.\njsp, footer.jsp, and menu.jsp would be included in every page by using <jsp:include page=...\"/>.  \nThis means three repetitive include statements in every page.\nA more practical approach is to create a page template that contains common page elements and \nplaceholders for dynamic content, similar to what is depicted in Figure 3-10. The placeholders are replaced \nat rendering time with whatever is needed (usually subviews).16\nFigure 3-10.  Reusable page template\n16This approach is described by the Composite View pattern that introduces the notions of composite and atomic views.  \nA composite view is a tree structure of atomic views. An atomic view can be included dynamically and it changes based \non the context.\n110",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 124,
          "text": "Chapter 3 ■ Spring MVC\nDoing this with only plain JSP is not an option. There are currently multiple ways available to do it. But \nthe one that was interesting for the Spring creators is Apache Tiles.\nApache Tiles is an open source template engine framework that was a part of the currently deceased \nApache Struts 1. It is based on the Composite View pattern and was built to simplify the development of user \ninterfaces. To use tiles in a Spring web application, you have to do the following:\n  1.  Define template layout for the pages.\n  2.  Configure tiles definitions in tiles.xml file(s).\n  3.  Configure the tiles resolver bean.\nApache Tiles 3.0.5, which is the version used for the code samples, is the most recent stable release at \nthe time this book was written.\nDefine Page Templates\nA simple template layout, matching the page representation in Figure 3-10, is as simple as this:\n...\n<%@ taglib prefix=\"tiles\" uri=\"http://tiles.apache.org/tags-tiles\" %>\n...\n<!-- /WEB-INF/templates/layout.jsp -->\n<head>\n        <tiles:insertAttribute name=\"pageTitle\"/>\n</head>\n<body>\n        <div class=\"header\">...</div>\n        <div class=\"menu\">...</div>\n        <div class=\"content\">\n              <tiles:insertAttribute name=\"content\"/>\n        </div>\n        <div class=\"footer\">...</div>\n</body>\nConfigure Tiles Definitions\nThe tiles.xml files are Tiles configuration files, which define the structure of a page using XML. One or \nmore tiles definitions can be in the same file; it is recommended to store the configuration file and the pages \nconfigured in the same directory, as shown in Figure 3-11.\n111",
          "tables": [],
          "code_blocks": [
            "<tiles:insertAttribute name=\"pageTitle\"/>",
            "<div class=\"header\">...</div>\n        <div class=\"menu\">...</div>\n        <div class=\"content\">\n              <tiles:insertAttribute name=\"content\"/>\n        </div>\n        <div class=\"footer\">...</div>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 125,
          "text": "Chapter 3 ■ Spring MVC\nFigure 3-11.  Tiles configuration files and templates positioning in the application structure\nTiles definitions are reusable fragments consisting of a template and attributes. Inheritance is possible \nusing the extends attribute. A tile definition element looks like this:\n<!DOCTYPE tiles-definitions PUBLIC\n        \"-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN\"\n        \"http://tiles.apache.org/dtds/tiles-config_3_0.dtd\">\n \n<tiles-definitions>\n    <definition name=\"layout\" template=\"/WEB-INF/templates/layout.jsp\"/>\n</tiles-definitions>\nThis example is called a base tile because every other definition extends it. Without this tile definition, \nevery other tile definition in your project has to be configured with the template attribute, underlined in the \npreceding example.\nThe extended version of the layout.jsp is quite big, and some parts are replaced by “...” . To view its real \nand full content, please see the 03-pr-mvc-layout-practice project.\n...\n<%@ taglib prefix=\"tiles\" uri=\"http://tiles.apache.org/tags-tiles\" %>\n...\n<!-- /WEB-INF/templates/layout.jsp -->\n<head>\n...\n112",
          "tables": [],
          "code_blocks": [
            "\"-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN\"\n        \"http://tiles.apache.org/dtds/tiles-config_3_0.dtd\">",
            "<definition name=\"layout\" template=\"/WEB-INF/templates/layout.jsp\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 126,
          "text": "Chapter 3 ■ Spring MVC\n   <title>\n        <spring:message>\n            <tiles:insertAttribute name=\"pageTitle\"/>\n        </spring:message>\n   </title>\n</head>\n...\n<div class=\"page\">\n \n    <!-- The header is actually a png image banner,\n        that will be loaded depending on the chosen theme-->\n    <div class=\"banner\"></div>\n \n    <!-- section to select Locale and Theme -->\n    <div class=\"themeLocal\"> ...</div>\n \n    <!-- section with the navigation menu, dynamic data\n    The menu item is modified to display the current page\n    based on the value for the menuTab attribute -->\n    <div class=\"menu\">\n     <ul>\n            <li><c:if test=\"${menuTab eq 'home'}\">\n                <strong>\n                  <a href=\"<c:url value=\"/\"/>\"><spring:message code=\"menu.home\"/></a>\n                </strong>\n             </c:if>\n                 <c:if test=\"${menuTab != 'home'}\">\n                     <a href=\"<c:url value=\"/\"/>\"><spring:message code=\"menu.home\"/></a>\n                 </c:if>\n            </li>\n            ...\n     </ul>\n   </div>\n \n    <!-- Dynamic data - body of the page -->\n   <div class=\"content\">\n       <tiles:insertAttribute name=\"content\"/>\n   </div>\n \n   <div class=\"footer\">\n       <p><spring:message code=\"footer.text\"/></p>\n   </div>\nThis is what a simple tile definition that extends the base tile looks like:\n<definition name=\"home\" extends=\"layout\">\n    <put-attribute name=\"pageTitle\" value=\"home.title\"/>\n    <put-attribute name=\"content\" value=\"/WEB-INF/home.jsp\"/>\n    <put-attribute name=\"menuTab\" value=\"home\" />\n</definition>\n113",
          "tables": [],
          "code_blocks": [
            "<spring:message>\n            <tiles:insertAttribute name=\"pageTitle\"/>\n        </spring:message>\n   </title>",
            "<!-- The header is actually a png image banner,\n        that will be loaded depending on the chosen theme-->\n    <div class=\"banner\"></div>\n \n    <!-- section to select Locale and Theme -->\n    <div class=\"themeLocal\"> ...</div>\n \n    <!-- section with the navigation menu, dynamic data\n    The menu item is modified to display the current page\n    based on the value for the menuTab attribute -->\n    <div class=\"menu\">\n     <ul>\n            <li><c:if test=\"${menuTab eq 'home'}\">\n                <strong>\n                  <a href=\"<c:url value=\"/\"/>\"><spring:message code=\"menu.home\"/></a>\n                </strong>\n             </c:if>\n                 <c:if test=\"${menuTab != 'home'}\">\n                     <a href=\"<c:url value=\"/\"/>\"><spring:message code=\"menu.home\"/></a>\n                 </c:if>\n            </li>\n            ...\n     </ul>\n   </div>\n \n    <!-- Dynamic data - body of the page -->\n   <div class=\"content\">\n       <tiles:insertAttribute name=\"content\"/>\n   </div>\n \n   <div class=\"footer\">\n       <p><spring:message code=\"footer.text\"/></p>\n   </div>",
            "<put-attribute name=\"pageTitle\" value=\"home.title\"/>\n    <put-attribute name=\"content\" value=\"/WEB-INF/home.jsp\"/>\n    <put-attribute name=\"menuTab\" value=\"home\" />"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 127,
          "text": "Chapter 3 ■ Spring MVC\nThe tiles attributes are the placeholders for dynamic data; the gaps in the template need to be filled.  \nThe following can be an attribute:\n•\t A string that will be rendered or used as it is.\n•\t A template with or without attributes that need to be filled to render the page.\n•\t A tile definition with all (some) attributes filled.\n■ ?  in the code sample, can you identify which of these types of tiles attributes were used?\nAccessing tiles attributes in JSP is done using the tag provided by tiles:\n•\t <tiles:insertAttribute/>: The standard approach to insert the value of an \nattribute into a page17\n•\t <tiles:importAttribute/>: This is used to add attributes to model (it works only \nwith Spring)18\nIn the following example, the menuTab attribute is used for navigation in the application. Each tile \ndefinition sets a different value for that attribute. The value is tested and the menu navigation option \nmatching the current page is displayed in bold text.\n...\n<tiles:importAttribute name=\"menuTab\" />\n<c:if test=\"${menuTab eq 'home'}\">\n   <!-- show the home menu option with bold text -->\n</c:if>\nConfigure the Tiles Resolver Bean\nSpring MVC provides out-of-the-box support for Apache Tiles. There is a TilesView to interpret logical \nview names as tiles definitions. There is a TilesViewResolver bean to resolve views and a class named \nTilesConfigurer to bootstrap Tiles with a set of configuration files.\n<!-- Resolves view names to Tiles 3 definitions -->\n<bean id=\"tilesViewResolver\"\n      class=\"org.springframework.web.servlet.view.tiles3.TilesViewResolver\"/>\n \n<!-- Configures Tiles 3 -->\n<bean id=\"tilesConfigurer\"\n     class=\"org.springframework.web.servlet.view.tiles3.TilesConfigurer\">\n         <property name=\"definitions\">\n17Detailed API information on tiles:insertAttribute is at https://tiles.apache.org/framework/ \ntiles-jsp/tlddoc/tiles/insertAttribute.html.\n18Detailed API information on tiles:importAttribute is at https://tiles.apache.org/framework/ \ntiles-jsp/tlddoc/tiles/insertAttribute.html.\n114",
          "tables": [],
          "code_blocks": [
            "class=\"org.springframework.web.servlet.view.tiles3.TilesViewResolver\"/>",
            "class=\"org.springframework.web.servlet.view.tiles3.TilesConfigurer\">\n         <property name=\"definitions\">"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 128,
          "text": "Chapter 3 ■ Spring MVC\n             <list>\n                  <value>/WEB-INF/tiles.xml</value>\n                  <!-- add more tiles definition files if present -->\n             </list>\n         </property>\n</bean>\nThe equivalent Java configuration looks like this:\n// In the @Configuration and @EnableMvc annotated class\n@Bean\n    TilesViewResolver tilesViewResolver(){\n        return new TilesViewResolver();\n    }\n \n    @Bean\n    TilesConfigurer tilesConfigurer(){\n        TilesConfigurer tilesConfigurer = new TilesConfigurer();\n        tilesConfigurer.setDefinitions(\"/WEB-INF/tiles.xml\");\n        // add more tiles definition files if present\n        return tilesConfigurer;\n}\nThis code sample replaces the InternalResourceViewResolver with TilesViewResolver. The \nInternalResourceViewResolver can be configured for plain *.jsp files too, but do not forget to set the \norder property and/or configure a content negotiating resolver.\n■ !  the module 03-pr-mvc-layout-practice of the personal records Manager project covers tiles \ndefinitions and their usage with Spring MVC. Further details are presented in the practice section of this chapter, \nbut you can take a look at the 03-pr-mvc-layout-solution if you cannot wait to see the tiles in action.\nThymeleaf\nWhen asked why he decided to create another template engine, because there were already quite a few \navailable, co-creator Daniel Fernandez said this on the Thymeleaf official forum:19\nIn my humble opinion, Spring MVC 3 is a fantastic web framework tied to a horrible, \nextremely old and spaghetti-code-loving template engine: JSP. That’s why I wanted the \ncombination of Spring MVC with Thymeleaf to really shine. In some ways I suppose  \nI wanted to give Spring MVC the template engine it deserved. Not from the performance \npoint of view (matching the speed of JSPs, which run in specialized containers, would be \nvery difficult), but more from the points of view of code elegance, readability, and design/\ncoding separation of concerns. Also, I wanted to provide first-class support for the emerging \nHTML5 standard.\n19A full discussion is at http://forum.thymeleaf.org/why-Thymeleaf-td3412902.html.\n115",
          "tables": [],
          "code_blocks": [
            "<list>\n                  <value>/WEB-INF/tiles.xml</value>\n                  <!-- add more tiles definition files if present -->\n             </list>\n         </property>",
            "TilesViewResolver tilesViewResolver(){\n        return new TilesViewResolver();\n    }\n \n    @Bean\n    TilesConfigurer tilesConfigurer(){\n        TilesConfigurer tilesConfigurer = new TilesConfigurer();\n        tilesConfigurer.setDefinitions(\"/WEB-INF/tiles.xml\");\n        // add more tiles definition files if present\n        return tilesConfigurer;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 129,
          "text": "Chapter 3 ■ Spring MVC\nThe underlined text in Fernandez’s reply should interest any developer. Thymeleaf is not a \ncertification exam subject, so it can be skipped. But Thymeleaf is nevertheless a practical alternative to JSP, \nand the SpringSource team fancies it quite a bit, so knowing how to configure it and use it could be useful in \nthe future.\nBoth Spring and Tiles come with an attribute set that you can use to write your page templates. \nThymeleaf is more flexible because it allows you to define a set of template attributes or even tags with the \nnames that you want and with the logic that you want. So it is not just a template engine, it is a framework. \nSomething called standard dialects are offered: Standard and SpringStandard, which contain all you might \nneed to create a page template. You can recognize them in a page because they are prefixed with \"th:\". The \ntwo dialects are almost identical, but the one created for Spring has additional capabilities for integrating \ninto Spring MVC applications (it supports SpEl , the Spring expression language).\nMost Thymeleaf attributes allow their values to be set as or containing expressions called Standard \nExpressions, which can be of the following types:\n•\t Variable expressions\n<td th:text=\"${person.firstName}\"></td>\n<!-- or -->\n<tr th:each=\"person : ${personList}\">\n•\t Selection or asterisk expressions: These are executed on a previously selected \nobject instead of the entire context variables map.\n<div th:object=\"${person}\">\n                <p th:value=\"*{firstName} *{lastName}\"></p>\n</div>\n•\t Text externalized expressions (internationalization expressions) used to retrieve \nlocale specific messages from external sources (*.properties files). They even \naccept parameters.\n<tr>\n    <td th:text=\"#{person.label.firstname} & #{person.label.lastname}</td>\n    <!-- or -->\n    <td th:text=\"#{person.created(${id})}\"</td>\n</tr>\n•\t URL expressions used to generate session- and context-specific URIs (equivalent to \n<spring:url/> and <c:url/>).\n<img alt=\"Simple tymeleaf application\" title=\"logo\"\n                        th:src=\"@{/images/banner.png}\"/>\n<form th:action=\"@{/createPerson}\">\n<a href=\"show.html\" th:href=\"@{/persons(id=${person.id})}\">\nThymeleaf allows HTML attributes so that templates can link to each other nicely when opened directly \nin a browser, outside the context of the application, in the same way that Thymeleaf attributes link to each \nother when executed in the context of a web application. In the previous example, if you want to view \nyour template before deploying the application, you can open the file in a browser and the th:href will be \nreplaced by the values of the static href.\n116",
          "tables": [],
          "code_blocks": [
            "<p th:value=\"*{firstName} *{lastName}\"></p>",
            "<td th:text=\"#{person.label.firstname} & #{person.label.lastname}</td>\n    <!-- or -->\n    <td th:text=\"#{person.created(${id})}\"</td>",
            "th:src=\"@{/images/banner.png}\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 130,
          "text": "Chapter 3 ■ Spring MVC\nConsidering the following Thymeleaf template:\n...\n<h4>\n    Welcome to the sample page with Spring MVC and Thymeleaf!\n    <br/>\n    Here is a list of random persons:\n</h4>\n \n<div class=\"content\" th:if=\"${not #lists.isEmpty(personList)}\">\n    <table>\n        <thead>\n        <tr>\n            <td>Cnt.</td>\n            <td>First Name</td>\n            <td>Last Name</td>\n        </tr>\n        </thead>\n        <tbody>\n        <tr th:each=\"person,iterationStatus : ${personList}\">\n            <td><a th:text=\"${iterationStatus.count}\" href=\"show.html\"\n                      th:href=\"@{/persons(id=${person.id})}\">1</a></td>\n            <td th:text=\"${person.firstName}\">John</td>\n            <td th:text=\"${person.lastName}\">Smith</td>\n        </tr>\n        </tbody>\n    </table>\n</div>\n...\nIn Figure 3-12 you can see what the page looks like when opened in the browser outside the application \ncontext.\nFigure 3-12.  Thymeleaf template page opened in the browser outside the application context\n117",
          "tables": [],
          "code_blocks": [
            "Welcome to the sample page with Spring MVC and Thymeleaf!\n    <br/>\n    Here is a list of random persons:",
            "<table>\n        <thead>\n        <tr>\n            <td>Cnt.</td>\n            <td>First Name</td>\n            <td>Last Name</td>\n        </tr>\n        </thead>\n        <tbody>\n        <tr th:each=\"person,iterationStatus : ${personList}\">\n            <td><a th:text=\"${iterationStatus.count}\" href=\"show.html\"\n                      th:href=\"@{/persons(id=${person.id})}\">1</a></td>\n            <td th:text=\"${person.firstName}\">John</td>\n            <td th:text=\"${person.lastName}\">Smith</td>\n        </tr>\n        </tbody>\n    </table>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 131,
          "text": "Chapter 3 ■ Spring MVC\nIn the application context, all the Thymeleaf expressions are resolved and the resulting page looks like \nthe one shown in Figure 3-13.\nFigure 3-13.  Thymeleaf template page opened in the browser in the application context\nThe URL expression th:href=\"@{/persons(id=${person.id})} turns into a URL with a request \nparameter; for example, .../persons?id=4. To generate a URI, .../persons/4 the expression has to be \nmodified to this:\nth:href=\"@{/persons/ ${person.id}__}\".\nThe notions presented here are the minimum necessary to create a Thymeleaf simple template. The \n03-chapter-08-solution module in the book-code project is a perfect example of how simple it is to create \na Thymeleaf template to display a list of persons. All that is left now is to explain how Thymeleaf can be \nintegrated with Spring.\nThymeleaf integrates with both Spring 3.x and Spring 4.x and uses two separate libraries, which are \npackaged in separate *.jar files: thymeleaf-spring3-{version}.jar and thymeleaf-spring4-{version}.\njar. As this book is being written, the most current version of Thymeleaf is 2.1.4.RELEASE. The library \ncorresponding to the Spring version used needs to be added to the classpath together with the thymeleaf.\njar. Thymeleaf offers a set of Spring integrations equivalent to the ones in JSP:\n•\t Spring SpEl can be used in Thymeleaf templates\n•\t It creates forms in templates that are completely integrated with form-backing beans \nand result hidings\n•\t It displays internationalization messages from message files managed by Spring via \nMessageSource\nTo integrate Thymeleaf with Spring, you need to define the following:\n•\t The view resolver bean of type ThymeleafViewResolver\n•\t The Thymeleaf engine bean of type SpringTemplateEngine used to handle the \nThymeleaf expressions\n•\t The template resolver bean of type ServletContextTemplateResolver used to \nconfigure the location and type of templates that the other beans are expected to \nwork with\n118",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 132,
          "text": "Chapter 3 ■ Spring MVC\n<bean id=\"templateResolver\"\n          class=\"org.thymeleaf.templateresolver.ServletContextTemplateResolver\">\n      <property name=\"prefix\" value=\"/WEB-INF/persons/\" />\n      <property name=\"suffix\" value=\".html\" />\n      <property name=\"templateMode\" value=\"HTML5\" />\n      <!-- Template cache is true by default. Set to false if you want -->\n      <!-- templates to be automatically updated when modified. -->\n      <property name=\"cacheable\" value=\"true\" />\n</bean>\n <bean class=\"org.thymeleaf.spring4.view.ThymeleafViewResolver\">\n      <property name=\"templateEngine\" ref=\"templateEngine\" />\n      <property name=\"order\" value=\"1\"/>\n</bean>\n \n<bean id=\"templateEngine\" class=\"org.thymeleaf.spring4.SpringTemplateEngine\">\n      <property name=\"templateResolver\" ref=\"templateResolver\" />\n</bean>\nAnd this is all. If you would like to use Thymeleaf in your future projects, you can find all the \ninformation you need on their official site at http://www.thymeleaf.org. Also, before continuing to the next \nsection, you might want to run and take a look at the 03-chapter-08-solution module.\nForms\nStarting with version 2.0, Spring provides a set of specialized tags for handling form elements when using \nJSP and the Spring Web MVC. Each tag provides support for a set of attributes matching the ones in the \ncorresponding HTML element, which makes Spring quite easy for the user. The Spring tag library is \nintegrated into Spring MVC, which allows the tags to have access to the command object and model.\nThe Spring tag library is inside the spring-webmvc.jar. To use the tags in a JSP page, the following \ndirective must be added on top of the JSP page:\n<%@ taglib prefix=\"sf\" uri=\"http://www.springframework.org/tags/form\" %>\nThe \"sf\" prefix is short for spring form. Any prefix can be used, but in this book, \"sf\" was chosen \nbecause it is short and its meaning is quite obvious. The \"spring\" prefix will be used for Spring-specific tags \nthat are not related to forms (internationalization and URL generation).\nIn the examples attached to this chapter, you create forms to edit and to search for a person. A form for \nediting a person is depicted in Figure 3-14.\n119",
          "tables": [],
          "code_blocks": [
            "class=\"org.thymeleaf.templateresolver.ServletContextTemplateResolver\">\n      <property name=\"prefix\" value=\"/WEB-INF/persons/\" />\n      <property name=\"suffix\" value=\".html\" />\n      <property name=\"templateMode\" value=\"HTML5\" />\n      <!-- Template cache is true by default. Set to false if you want -->\n      <!-- templates to be automatically updated when modified. -->\n      <property name=\"cacheable\" value=\"true\" />",
            "<property name=\"templateEngine\" ref=\"templateEngine\" />\n      <property name=\"order\" value=\"1\"/>",
            "<property name=\"templateResolver\" ref=\"templateResolver\" />"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 133,
          "text": "Chapter 3 ■ Spring MVC\nFigure 3-14.  Form used to edit a Person\nThe Spring form tag library provides equivalent elements for the HTML elements needed to design a \nform,  annotations for data binding and data validation, and tools for error processing. The code that creates \nform follows Figure 3-14.\n...\n<%@ taglib prefix=\"sf\" uri=\"http://www.springframework.org/tags/form\" %>\n<%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\" %>\n...\n<div class=\"person\">\n    <spring:url value=\"/persons/{id}\" var=\"editUrl\">\n        <spring:param name=\"id\" value=\"${person.id}\"/>\n    </spring:url>\n    <sf:form modelAttribute=\"person\" action=\"${editUrl}\" method=\"POST\">\n        <table>\n            <tr>\n                <th>\n                    <label for=\"firstName\">\n                        <span class=\"man\">*</span>\n                        <spring:message code=\"label.Person.firstname\"/> :\n                    </label>\n                </th>\n                <td><sf:input path=\"firstName\"/>\n                <sf:errors cssClass=\"error\" path=\"firstName\"/></td>\n            </tr>\n            ...\n            <tr>\n                <th>\n                    <label for=\"dateOfBirth\">\n                        <span class=\"man\">*</span>\n                        <spring:message code=\"label.Person.dob\"/> :\n                    </label>\n                </th>\n120",
          "tables": [],
          "code_blocks": [
            "<spring:url value=\"/persons/{id}\" var=\"editUrl\">\n        <spring:param name=\"id\" value=\"${person.id}\"/>\n    </spring:url>\n    <sf:form modelAttribute=\"person\" action=\"${editUrl}\" method=\"POST\">\n        <table>\n            <tr>\n                <th>\n                    <label for=\"firstName\">\n                        <span class=\"man\">*</span>\n                        <spring:message code=\"label.Person.firstname\"/> :\n                    </label>\n                </th>\n                <td><sf:input path=\"firstName\"/>\n                <sf:errors cssClass=\"error\" path=\"firstName\"/></td>\n            </tr>\n            ...\n            <tr>\n                <th>\n                    <label for=\"dateOfBirth\">\n                        <span class=\"man\">*</span>\n                        <spring:message code=\"label.Person.dob\"/> :\n                    </label>\n                </th>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 134,
          "text": "Chapter 3 ■ Spring MVC\n                <td><sf:input path=\"dateOfBirth\"/>\n                <sf:errors cssClass=\"error\" path=\"dateOfBirth\"/></td>\n            </tr>\n \n            <tr>\n                <th>\n                    <label for=\"gender\">\n                        <spring:message code=\"label.Person.gender\"/> :\n                    </label>\n                </th>\n                <td>\n                    <sf:radiobutton path=\"gender\" value=\"MALE\"/>\n                     <spring:message code=\"label.Person.male\"/>\n                    <sf:radiobutton path=\"gender\" value=\"FEMALE\"/>\n                    <spring:message code=\"label.Person.female\"/>\n                </td>\n            </tr>\n            <tr>\n                <th>\n                    <label for=\"hospital\">\n                        <span class=\"man\">*</span>\n                        <spring:message code=\"label.Hospital\"/> :\n                    </label>\n                    </th>\n                    <td>\n                        <sf:select path=\"hospital\">\n                            <c:choose>\n                                <c:when test=\"${person == null}\">\n                                    <sf:option value=\"\">\n                                    <spring:message code=\"label.choose\"/></sf:option>\n                                </c:when>\n                                <c:otherwise>\n                                    <sf:option value=\"${person.hospital.id}\">\n                                                 ${person.hospital.name}\n                                   </sf:option>\n                                </c:otherwise>\n                            </c:choose>\n \n                            <sf:options items=\"${hospitalList}\"\n                                 itemValue=\"id\" itemLabel=\"name\"/>\n                        </sf:select>\n \n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <button id=\"saveButton\" type=\"submit\">\n                            <spring:message code=\"command.save\"/>\n                        </button>\n                    </td>\n121",
          "tables": [],
          "code_blocks": [
            "<td><sf:input path=\"dateOfBirth\"/>\n                <sf:errors cssClass=\"error\" path=\"dateOfBirth\"/></td>\n            </tr>\n \n            <tr>\n                <th>\n                    <label for=\"gender\">\n                        <spring:message code=\"label.Person.gender\"/> :\n                    </label>\n                </th>\n                <td>\n                    <sf:radiobutton path=\"gender\" value=\"MALE\"/>\n                     <spring:message code=\"label.Person.male\"/>\n                    <sf:radiobutton path=\"gender\" value=\"FEMALE\"/>\n                    <spring:message code=\"label.Person.female\"/>\n                </td>\n            </tr>\n            <tr>\n                <th>\n                    <label for=\"hospital\">\n                        <span class=\"man\">*</span>\n                        <spring:message code=\"label.Hospital\"/> :\n                    </label>\n                    </th>\n                    <td>\n                        <sf:select path=\"hospital\">\n                            <c:choose>\n                                <c:when test=\"${person == null}\">\n                                    <sf:option value=\"\">\n                                    <spring:message code=\"label.choose\"/></sf:option>\n                                </c:when>\n                                <c:otherwise>\n                                    <sf:option value=\"${person.hospital.id}\">\n                                                 ${person.hospital.name}\n                                   </sf:option>\n                                </c:otherwise>\n                            </c:choose>\n \n                            <sf:options items=\"${hospitalList}\"\n                                 itemValue=\"id\" itemLabel=\"name\"/>\n                        </sf:select>\n \n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <button id=\"saveButton\" type=\"submit\">\n                            <spring:message code=\"command.save\"/>\n                        </button>\n                    </td>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 135,
          "text": "Chapter 3 ■ Spring MVC\n                    <td>\n                        <a href=\"${editUrl}\">\n                            <spring:message code=\"command.cancel\"/>\n                        </a>\n                    </td>\n                </tr>\n            </table>\n        </sf:form>\n</div>\nIn the previous code there are a few elements that are underlined. They are Spring form tags equivalent \nto HTML form tags. The only difference is that they are fully integrated with Spring MVC and their content  \nis populated from the modelAttribute and other Spring form–specific objects, which are covered a little  \nbit later.\nThe behavior of a Spring form can be described using this succession of steps:\n  1.  An initial GET request causes the form object to be created and presented  \nto the user.\n  2.  The user inserts data in the form and sends a POST request to submit the form. \nIn this step, the data inserted is evaluated, validated, and stored in the form \nobject.\n  3.  POST-Redirect-GET if the operation is successful (if the objective of the POST \nrequest has succeeded, a GET request is created to present a confirmation \nmessage to the user).\nWithout the POST-Redirect-GET behavior, an application will behave incorrectly, because subsequent \nPOST requests could lead to duplicate data and/or data corruption. The forms used for search operations  \ndo not need a POST request, because submitting a search query has no side effects and it redirects to the \nresults page.\nWhen working with forms, all the fields in a form should map to the fields of an object called a data \ntransfer object (DTO). In the example, this is done for the Search Person form, which is covered later. When \nediting a person, it is more suitable to use a Person object as a data transfer object. The Person object \nis an instance of an @Entity class, and maps to a row in the person table in the database. These types of \nobjects are called domain objects. This requires that the object used for this purpose should have a default \nconstructor, getters, and setters for all the fields used in the form. Although using a domain object as a form \nobject welcomes the undesired possibility that some web logic–specific operations might creep in, it is \npractical to use when the objects handled are simple20 and entity fields are annotated with specific validation \nannotations (example: @NotEmpty, NotNull, etc.), because implementing a validator class at the web layer \nmay no longer be necessary.\nForm-specific data transfer objects are also required when the information from a form is aggregated \nfrom multiple domain objects. This allows the form object to encapsulate only what is needed to be \ndisplayed on the screen: web layer logic, validation logic, logic for information transfer between the form \nobject, and domain object.\nFigure 3-15 shows the correspondence between the form tags and the fields in the CriteriaDto object.\n20Adam Bien, one of the most respected Java developers in the world, has named DTOs objects “anemic in general and \ndo not contain any business logic” on his blog at http://www.adam-bien.com/roller/ abien/entry/ \nvalue_object_vs_data_transfer.\n122",
          "tables": [],
          "code_blocks": [
            "<td>\n                        <a href=\"${editUrl}\">\n                            <spring:message code=\"command.cancel\"/>\n                        </a>\n                    </td>\n                </tr>\n            </table>\n        </sf:form>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 136,
          "text": "Chapter 3 ■ Spring MVC\nFigure 3-15.  Form to search a Person\nThe following can be said when using Spring forms:\n•\t The CriteriaDto object is linked to the form via modelAttribute=\"criteriaDto\" \nand it corresponds to the @ModelAttribute annotated object in the controller class.\n•\t The Spring form has a method attribute the same as an HTML form, and the value of \nthis attribute is the type of request being sent to the server.\n<sf:form action=\"${personsUrl}\" modelAttribute=\"criteriaDto\" method=\"get\">\n    ....\n</sf:form>\n•\t The Spring form has an action attribute the same as an HTML form, and the value of \nthis attribute is the URL of the request.\n<spring:url value=\"/persons/go\" var=\"personsUrl\"/>\n <sf:form action=\"${personsUrl}\" modelAttribute=\"criteriaDto\" method=\"get\">\n ....\n</sf:form>\n•\t <sf:input path=\"fieldName\"/> is rendered into an HTML input field that is \npopulated with the value of the field named fieldName in the criteriaDto object. \nEach of the fields defined in a Spring form specifies a path attribute that corresponds \nto a getter/setter method of the model attribute (in this case the CriteriaDto \nobject). When the page is loaded, Spring calls the getter of each field to populate \nthe form view. When the form is submitted, the setters are called to save the values \nsubmitted by the user using the form to the model attribute fields.\n•\t <sf:select/> elements are rendered into HTML select elements and can be \nconstructed using domain object lists:\n<sf:select path=\"hospital\" itemValue=\"id\" itemLabel=\"name\"\n           items=\"${hospitalList}\"/>\n123",
          "tables": [],
          "code_blocks": [
            "....",
            "items=\"${hospitalList}\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 137,
          "text": "Chapter 3 ■ Spring MVC\nThe hospitalList has to be added to the model by the controller as an attribute:\nmodel.addAttribute(\"hospitalList\", hospitalRepo.findAll());\n•\t <sf:select/> elements can have customized behavior by using the <sf:option/> \nand <sf:options/> tag.\nFor example, if the same form is used for editing and creating a person instance, when a new person is \ncreated, you might want to display a default option in the hospital drop-down list, making it obvious for the \nuser that a value has to be selected. That default option is not part of the hospital list model attribute. When \na person is edited, you want to select the hospital where that person was born.\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n....\n<sf:select path=\"hospital\">\n    <c:choose>\n        <!-- no person attribute, form is used to create a person -->\n        <c:when test=\"${person == null}\">\n            <sf:option value=\"\">\n                 <!-- default option not in the hospital list model attribute -->\n                <spring:message code='label.choose'/>\n            </sf:option>\n        </c:when>\n         <!-- form is used to edit a person, person model attribute is set -->\n        <c:otherwise>\n           <sf:option value=\"${person.hospital.id}\">\n                ${person.hospital.name}\n            </sf:option>\n        </c:otherwise>\n        </c:choose>\n        <!-- Dynamic list of options -->\n        <sf:options items=\"${hospitalList}\" itemValue=\"id\" itemLabel=\"name\"/>\n</sf:select>\nThe preceding example is rendered as an HTML select element containing all hospitals in the \nhospitalList model attribute and an extra static Choose hospital option when the form is used to create a \nperson. The names of the hospitals are used as labels for the available options in the select element. The JSP \nc taglib is used for conditional operations.\n•\t The Spring JSP tag library integrates nicely with other JSP libraries, like  \nTiles and JSTL.\n•\t The <sf:errors/> is a Spring special tag for displaying errors. The error messages \ncan be internationalized; this is covered in the “Data Validation” section.\nWhen it comes to using Spring forms, three key subjects must be well understood to use them like \nan expert: formatting, data binding, and validation; each of these is given the proper coverage in its own \nsection.\n124",
          "tables": [],
          "code_blocks": [
            "<c:choose>\n        <!-- no person attribute, form is used to create a person -->\n        <c:when test=\"${person == null}\">\n            <sf:option value=\"\">\n                 <!-- default option not in the hospital list model attribute -->\n                <spring:message code='label.choose'/>\n            </sf:option>\n        </c:when>\n         <!-- form is used to edit a person, person model attribute is set -->\n        <c:otherwise>\n           <sf:option value=\"${person.hospital.id}\">\n                ${person.hospital.name}\n            </sf:option>\n        </c:otherwise>\n        </c:choose>\n        <!-- Dynamic list of options -->\n        <sf:options items=\"${hospitalList}\" itemValue=\"id\" itemLabel=\"name\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 138,
          "text": "Chapter 3 ■ Spring MVC\nData Formatting\nIn the Person edit form, you need to display and eventually edit a java.util.Date instance and a Hospital \ninstance. These are complex types and the Spring tag library does not know how to handle them on its \nown. The developer must provide implementations for the org.springframework.format.Formatter<T> \ninterface for the specific type of object handled in the form. Formatter classes parse text data, turn them into \nobjects, and transform beans into text data ready for rendering. In the 05-pr-mvc-form-solution module, \nwhich is the project specific to this section, two formatters are used in the Edit person form; where they are \nused is shown in Figure 3-16.\nFigure 3-16.  Formatters used in the form to edit a person\nFormatters can be used in four places in the application:\n•\t On the field using annotations (all JSPs pages displaying this annotation use this \nformatter)\n@DateTimeFormat(pattern = \"yyyy-MM-dd\")\nprivate Date dateOfBirth;\n•\t In the JSP tags (used when multiple JSP pages need to display data differently)\n<fmt:formatDate value=\"${person.dateOfBirth}\" pattern=\"yyyy-MM-dd\" />\n•\t Registered in the application using the FormattingConversionServiceFactoryBean bean\n<mvc:annotation-driven conversion-service=\"typeConversionService\" \"/>\n \n<!-- Define a custom ConversionService -->\n<bean id=\"typeConversionService\"\n       class=\"o.s.format.support.FormattingConversionServiceFactoryBean\">\n    <property name=\"formatters\">\n        <set>\n            <bean class=\"com.pr.util.DateFormatter\"/>\n            <bean class=\"com.pr.util.HospitalFormatter\"/>\n        </set>\n    </property>\n</bean>\n125",
          "tables": [],
          "code_blocks": [
            "class=\"o.s.format.support.FormattingConversionServiceFactoryBean\">\n    <property name=\"formatters\">\n        <set>\n            <bean class=\"com.pr.util.DateFormatter\"/>\n            <bean class=\"com.pr.util.HospitalFormatter\"/>\n        </set>\n    </property>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 139,
          "text": "Chapter 3 ■ Spring MVC\nThe DateFormatter implementation used in the personal-records project looks like this:\npublic class DateFormatter implements Formatter<Date>{\n    public static final SimpleDateFormat formatter =\n                           new SimpleDateFormat(\"yyyy-MM-dd\");\n \n    @Override\n    public Date parse(String s, Locale locale) throws ParseException {\n        return formatter.parse(s);\n    }\n \n    @Override\n    public String print(Date date, Locale locale) {\n        return formatter.format(date);\n    }\n}\n•\t On the controller or service method arguments by using implementation of the org.\nspringframework.validation.Validator interface and the @Validated annotation. \nIn the following example, the URI path variable used to request data about a person \nis of type String and it has to be checked for whether it represents a valid id.\n@Component\npublic class IdValidator implements Validator {\n \n    @Override\n    public boolean supports(Class<?> clazz) {\n        return String.class.equals(clazz);\n    }\n \n    @Override\n    public void validate(Object target, Errors errors) {\n        String id = (String) target;\n        if(!id.matches(\"/{id:\\\\d*}\")) {\n            errors.reject(\"id.malformed\");\n        }\n    }\n}\nThe controller method to retrieve a person’s data and using that validator looks like this:\n@RequestMapping(value = \"/{id}\", method = RequestMethod.GET)\npublic String show(@Validated(IdValidator.class)@PathVariable String id,\n  Model model) throws NotFoundException {\n    Long theId = Long.parseLong(id);\n    Person person = personManager.findById(theId);\n    if(person == null) {\n        throw new NotFoundException(Person.class, theId);\n    }\n    model.addAttribute(\"person\", person);\n    return \"persons/show\";\n}\n126",
          "tables": [],
          "code_blocks": [
            "public static final SimpleDateFormat formatter =\n                           new SimpleDateFormat(\"yyyy-MM-dd\");\n \n    @Override\n    public Date parse(String s, Locale locale) throws ParseException {\n        return formatter.parse(s);\n    }\n \n    @Override\n    public String print(Date date, Locale locale) {\n        return formatter.format(date);\n    }",
            "@Override\n    public boolean supports(Class<?> clazz) {\n        return String.class.equals(clazz);\n    }\n \n    @Override\n    public void validate(Object target, Errors errors) {\n        String id = (String) target;\n        if(!id.matches(\"/{id:\\\\d*}\")) {\n            errors.reject(\"id.malformed\");\n        }\n    }",
            "Long theId = Long.parseLong(id);\n    Person person = personManager.findById(theId);\n    if(person == null) {\n        throw new NotFoundException(Person.class, theId);\n    }\n    model.addAttribute(\"person\", person);\n    return \"persons/show\";"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 140,
          "text": "Chapter 3 ■ Spring MVC\nIn the examples in this book, only Date and Hospital formatters are covered because they are the only \nones needed in the associated projects, but any complex field type can have a formatter. For example:\n•\t formatting numbers:\n@NumberFormat(style=Style.NUMBER, pattern=\"#,###.###\")\nprivate final BigDecimal amount;\n•\t formatting currencies:\n@NumberFormat(style=Style.CURRENCY)\nprivate final BigDecimal amount;\nWhen field values are formatted inside a JSP page, formatting annotations are no longer needed. When \nformatters are registered using the FormattingConversionServiceFactoryBean bean, the specific types are \nautomatically converted without another annotation or tag.\nThe <mvc:annotation-driven/> and @EnableWebMVC registers default formatters for Numbers and \nDates by offering support for specific annotations: @NumberFormat and @DateTimeFormat. If Joda Time is in \nthe classpath, support for it is also enabled.\nJava configuration to register custom formatters can be done in two ways: by defining a @Bean of type \nConversionService, or by implementing the addFormatters method defined in WebMvcConfigurer  \n(or by overriding it when implementations of this interface are used).\nThe second way is easier:\n\\\\in the @Configuration & @EnableWebMvc annotated class\n@Override\n    public void addFormatters(FormatterRegistry formatterRegistry)\n    {\n        formatterRegistry.addFormatter(getDateFormatter());\n        formatterRegistry.addFormatter(getHospitalFormatter());\n    }\n \n    @Bean\n    public DateFormatter getDateFormatter(){\n        return new DateFormatter();\n    }\n \n    @Bean\n    public HospitalFormatter getHospitalFormatter(){\n      return new HospitalFormatter();\n}\nThe first way is more complicated. The following is an example of an annotated ConversionService \nbean definition:\n\\\\ in the @Configuration annotated class\n    public ConversionService conversionService() {\n        FormattingConversionServiceFactoryBean bean =\n                 new FormattingConversionServiceFactoryBean();\n        bean.setFormatters(getFormatters());\n        bean.afterPropertiesSet();\n        ConversionService object = bean.getObject();\n        return object;\n    }\n \n127",
          "tables": [],
          "code_blocks": [
            "public void addFormatters(FormatterRegistry formatterRegistry)\n    {\n        formatterRegistry.addFormatter(getDateFormatter());\n        formatterRegistry.addFormatter(getHospitalFormatter());\n    }\n \n    @Bean\n    public DateFormatter getDateFormatter(){\n        return new DateFormatter();\n    }\n \n    @Bean\n    public HospitalFormatter getHospitalFormatter(){\n      return new HospitalFormatter();",
            "public ConversionService conversionService() {\n        FormattingConversionServiceFactoryBean bean =\n                 new FormattingConversionServiceFactoryBean();\n        bean.setFormatters(getFormatters());\n        bean.afterPropertiesSet();\n        ConversionService object = bean.getObject();\n        return object;\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 141,
          "text": "Chapter 3 ■ Spring MVC\n    private Set<Formatter> getFormatters() {\n      Set<Formatter> formatters = new HashSet<>();\n       formatters.add(dateFormatter);\n      formatters.add(dateFormatter);\n      return formatters;\n    }\n \n// definition for formatter beans as in the previous example\nNow you have the conversionService bean. Let’s look at the equivalent for <mvc:annotation-driven \nconversion-service=\"conversionService\" />:\n@FeatureConfiguration\nclass MvcFeatures {\n \n \n        @Feature\n        public MvcAnnotationDriven annotationDriven(\n                        ConversionService conversionService) {\n               return new MvcAnnotationDriven().conversionService(conversionService)\n        }\n        ...\n}\nMvcAnnotationDriven provides the same options as the XML elements using a conveniently chained \nmethod API. But who needs a complicated way to do this when there is an easier way, right?\nHospitalFormatter is a custom formatter specifically created to be used in projects attached to this \nbook. It basically transforms a Hospital instance into its name so that it can be rendered in a view. And it \ntakes a hospital id and retrieves the Hospital instance from the database to be returned to the controller, \nwhere it is used further. As the HospitalFormatter is a bean like any other, the HospitalManager bean can \nbe injected into it to make this happen. So the custom implementation looks like this:\npublic class HospitalFormatter implements Formatter<Hospital> {\n \n    @Autowired\n    HospitalManager hospitalManager;\n \n    @Override\n    public Hospital parse(String text, Locale locale)\n                           throws ParseException {\n        Long id = Long.parseLong(text);\n        return hospitalManager.findOne(id);\n    }\n \n    @Override\n    public String print(Hospital hospital, Locale locale) {\n        return hospital.getName();\n    }\n}\n128",
          "tables": [],
          "code_blocks": [
            "private Set<Formatter> getFormatters() {\n      Set<Formatter> formatters = new HashSet<>();\n       formatters.add(dateFormatter);\n      formatters.add(dateFormatter);\n      return formatters;\n    }",
            "@Feature\n        public MvcAnnotationDriven annotationDriven(\n                        ConversionService conversionService) {\n               return new MvcAnnotationDriven().conversionService(conversionService)\n        }\n        ...",
            "@Autowired\n    HospitalManager hospitalManager;\n \n    @Override\n    public Hospital parse(String text, Locale locale)\n                           throws ParseException {\n        Long id = Long.parseLong(text);\n        return hospitalManager.findOne(id);\n    }\n \n    @Override\n    public String print(Hospital hospital, Locale locale) {\n        return hospital.getName();\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 142,
          "text": "Chapter 3 ■ Spring MVC\nData Binding\nForm objects, data transfer objects, and domain objects have been mentioned so far. But how are they \nlinked together? How does the information from a form object get transferred to a data transfer object or \nto a domain object? How does Spring MVC know how to do this? The answer to these three questions is a \nprocess named data binding.\nSpring MVC binds the request to the form object. When a form is submitted, string data is transformed \ninto objects that are injected into the form object using getters and setters. A POST request or form \nsubmission means setters for the form model attribute are called. A GET or page/form load means getters \nare called upon the form model attribute to populate the view. Each object is identified using the path \nattribute value in the corresponding Spring element tag. The form object it tightly bound to the JSP page, \nand if the form object cannot be created, the JSP page won’t be rendered correctly. The form object is linked \nto the JSP page using the modelAttribute attribute in the <sf:form/> tag:\n<sf:form modelAttribute=\"person\" action=\"${editUrl}\" method=\"POST\">\n...\n</sf:form>\nIn the controller, the form object can be accessed in multiple ways. It can be received as an argument to \nthe method mapped to the ${editUrl}.\n@Controller\npublic class PersonsController {\n \n    @RequestMapping(method=RequestMethod.POST)\n    public String update(Person person) {\n    ...\n}\nIn this case, data is copied automatically into the object, and the object is re-created on every request. \nYou can annotate the form object with the @ModelAttribute annotation.\n@Controller\npublic class PersonsController {\n \n   @RequestMapping(method=RequestMethod.POST)\n   public String edit(@ModelAttribute(\"person\") Person person) {\n   ...\n}\n■ CC  When the name of the modelAttribute is the same as the name of the argument in a handler method, \nthe value for @ModelAttribute can be skipped. So in the previous case, public String update \n(@ModelAttribute(\"person\") Person person) is equivalent to public String update(@ModelAttribute \nPerson person).\nThis annotation was mentioned in the “Redirecting” section; it can be used the same way for forms too, \nbecause in this case, you have a controller that handles the edit and show requests for a person instance.  \n@ModelAttribute annotated methods are executed before the chosen @RequestMapping annotated handler \nmethod. They effectively pre-populate the implicit model with specific attributes, in this case, the person \ninstance to be displayed or edited.\n129",
          "tables": [],
          "code_blocks": [
            "@RequestMapping(method=RequestMethod.POST)\n    public String update(Person person) {\n    ...",
            "@RequestMapping(method=RequestMethod.POST)\n   public String edit(@ModelAttribute(\"person\") Person person) {\n   ..."
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 143,
          "text": "Chapter 3 ■ Spring MVC\nSo you can simplify the controller like this:\n@Controller\n@RequestMapping(\"/persons/{id}\")\npublic class PersonsController {\n \n    @ModelAttribute\n    public Person findPerson(@PathVariable Long id) {\n        return personManager.findOne(id);\n    }\n \n    @RequestMapping(method = RequestMethod.GET)\n    public String show() {\n        return \"persons/show\";\n    }\n \n    @RequestMapping(value=\"/edit\", method = RequestMethod.GET)\n    public String edit(Model model) {\n        //we add the hospitalList to show in the Hospital drop-down list\n        model.addAttribute(hospitalRepo.findAll());\n        return \"persons/edit\";\n    }\n@RequestMapping(method = RequestMethod.POST)\npublic String save(Person person, BindingResult result, Model model) {\n    if (result.hasErrors()) {\n        // we need to add this here as the dropdown list\n        // has to be populated correctly\n        // and \"hospitalList\" is not a model attribute\n        model.addAttribute(hospitalRepo.findAll());\n        return \"persons/edit\";\n    }\n    personManager.save(person);\n    return \"redirect:/persons/\".concat(person.getId());\n  }\n \n}\nIn this implementation, you do not have to concern yourself with the existence of the form object \nbecause the methods of this controller are only accessible when the URL is constructed with a valid \nperson id.\nBy default, all fields in a form are binded to the form object, but Spring MVC offers the possibility to \nmodify the default behavior by customizing a WebDataBinder object. Some fields can be blacklisted or \nwhitelisted for the binding process:\n@InitBinder\npublic void initBinder(WebDataBinder binder) {\n     //allowed fields\n     binder.setAllowedFields(\"firstName\", \"lastName\");\n     //disallowed fields\n     binder.setDisallowedFields(\"pk\", \"*Pk\");\n}\n130",
          "tables": [],
          "code_blocks": [
            "@ModelAttribute\n    public Person findPerson(@PathVariable Long id) {\n        return personManager.findOne(id);\n    }\n \n    @RequestMapping(method = RequestMethod.GET)\n    public String show() {\n        return \"persons/show\";\n    }\n \n    @RequestMapping(value=\"/edit\", method = RequestMethod.GET)\n    public String edit(Model model) {\n        //we add the hospitalList to show in the Hospital drop-down list\n        model.addAttribute(hospitalRepo.findAll());\n        return \"persons/edit\";\n    }",
            "if (result.hasErrors()) {\n        // we need to add this here as the dropdown list\n        // has to be populated correctly\n        // and \"hospitalList\" is not a model attribute\n        model.addAttribute(hospitalRepo.findAll());\n        return \"persons/edit\";\n    }\n    personManager.save(person);\n    return \"redirect:/persons/\".concat(person.getId());\n  }",
            "//allowed fields\n     binder.setAllowedFields(\"firstName\", \"lastName\");\n     //disallowed fields\n     binder.setDisallowedFields(\"pk\", \"*Pk\");"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 144,
          "text": "Chapter 3 ■ Spring MVC\nThe recommended behavior is to whitelist only the necessary fields, even if there might be a lot of them \nto minimize the security holes.\nThe validation errors are binded to the form object too using a BindingResult object.\n@RequestMapping(method = RequestMethod.POST)\n    public String save(@Valid Person person, BindingResult result, Model model) {\n        if (result.hasErrors()) {\n          return \"persons/edit\";\n        }\n    ...\n}\nIf you look at the beginning of this section, where the Edit person form code is, you see that some \nelements look like this:\n<sf:errors cssClass=\"error\" path=\"dateOfBirth\"/></td>\nThey are right next to their analogue elements:\n<sf:input path=\"dateOfBirth\"/>\nAnd they have the exact path attribute value. These elements are used to display validation errors when \nthe POST handler method returns back to the edit view because the BindingResult object was populated \nby an existing validator bean. When returning to the form, the submitted data is still there, but there is extra \ninformation about the state and condition of the submitted data, something more or less like what you see in \nFigure 3-17.\nFigure 3-17.  Spring default validation errors displayed after a form failed submission\n131",
          "tables": [],
          "code_blocks": [
            "public String save(@Valid Person person, BindingResult result, Model model) {\n        if (result.hasErrors()) {\n          return \"persons/edit\";\n        }\n    ..."
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 145,
          "text": "Chapter 3 ■ Spring MVC\nSpring MVC has its own validator messages, but supports externally provided validator messages too. \nData binding error messages can be customized and internationalized. The following are some examples; \ndepending on the validation library used, the message keys could be different:\nNotEmpty.person.firstName=Please insert First Name Value\nSize.person.firstName=Length must be between {2} and {1}\ntypeMismatch.dateOfBirth=Invalid format, should be \\'yyyy-mm-dd\\'\ntypeMismatch.amount=Incorrect amount\nAnd after the customization, when a submit fails, the invalidated form looks like what’s shown in \nFigure 3-18.\nFigure 3-18.  Customized validation errors displayed after a form failed submission\nData Validation\nSpring MVC supports JSR 303/349 Bean Validation for validating form objects. If the library javax.\nvalidation:validation-api:[version] is in the classpath and the application is configured using \n<mvc:annotation-driven/> or @EnableWebMvc, it is automatically detected and enabled.\nSpring 4+ also supports Hibernate Validator 4.3+, but for the org.hibernate:hibernate-\nvalidator:[version] library to be used, a custom validator that implements org.springframework.\nvalidation.Validator must be set in the configuration; for example:\n<!-- Enables hibernate validator -->\n<bean id=\"validator\"\n    class=\"o.s.validation.beanvalidation.LocalValidatorFactoryBean\"/>\n \n<!-- Defines basic MVC defaults (handler adapter, mapping,\n                date formatting, etc) -->\n<mvc:annotation-driven validator=\"validator\"/>\nThe Hibernate Validator is an extension of the default set of validation annotations provided by the \nvalidation-api library, that’s why when using Hibernate Validator, validation-api is enabled by default, \nas validation-api is a dependency of the Hibernate Validator.\n132",
          "tables": [],
          "code_blocks": [
            "class=\"o.s.validation.beanvalidation.LocalValidatorFactoryBean\"/>",
            "date formatting, etc) -->"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 146,
          "text": "Chapter 3 ■ Spring MVC\n■ !  to depict this, a special gradle task was created for you in the 00-pr-dao module: allCompileDeps. \nWhen executed, gradle prints the dependency tree for the 00-pr-dao module in the intellij iDea console.  \nif you analyze the output, you will find the following snippet.\n+--- org.hibernate:hibernate-validator:5.1.3.Final\n|    +--- javax.validation:validation-api:1.1.0.Final\n|    +--- org.jboss.logging:jboss-logging:3.1.3.GA\n|    \\--- com.fasterxml:classmate:1.0.0\nThe following are examples of validation annotations:\n•\t @NotNull: Field cannot be null\n•\t @Size (min, max): File must have a length in the range (min, max)\n•\t @Pattern: String not null and matching\n•\t @NotEmpty: String must not be empty (Hibernate)\n•\t @Min(val), @Max(val): String must be of length at least minimum,  \nor maximum in size\nThey are used on the fields of interest in the domain object or data transfer object:\npublic class Person extends AbstractEntity {\n \n    @Size(min=2, max=50)\n    public String firstName;\n \n    @Size(min=2, max=50)\n    public String lastName;\n \n    @NotNull\n    // comment the following if a custom formatter is registered\n    @DateTimeFormat(pattern = \"yyyy-MM-dd\")\n    private Date dateOfBirth;\n...\n}\nThe validation is invoked by annotating the form object with @Valid and the errors are registered in the \nBindingResult object too, alongside the binding errors.\nIn the JSP form, the way the errors are displayed can also be customized. In the previous section, each \nerror was mapped to its field, but you can also print all the errors in the same place by using the following \nsyntax:\n<sf:form modelAttribute=\"person\">\n          <form:errors path=\"*\"/>\n...\n</sf:form>\nThis approach is not recommended for big forms. It is also quite annoying for the user to have to search \nfor the form field he has to correct. By linking the error to the form field, it becomes quite obvious where the \ncorrection must be applied.\n133",
          "tables": [],
          "code_blocks": [
            "@Size(min=2, max=50)\n    public String firstName;\n \n    @Size(min=2, max=50)\n    public String lastName;\n \n    @NotNull\n    // comment the following if a custom formatter is registered\n    @DateTimeFormat(pattern = \"yyyy-MM-dd\")\n    private Date dateOfBirth;",
            "<form:errors path=\"*\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 147,
          "text": "Chapter 3 ■ Spring MVC\nThe Hibernate Validator contains its own set of internationalization files with default internationalized \nmessages. The Resource bundle is named ValidationMessages; it is located in the hibernate-valdiator.jar \nunder the org.hibernate.validator package. You can expand the hibernate-validator.jar and look at it \ncontents in Intellij IDEA, as shown in Figure 3-19.\nFigure 3-19.  Contents of the hibernate-validator.jar\nThe message keys in the ValidationMessages.properties files are the message keys set by default in the \ndefinition of each annotation. For example, the following is a snippet of code for the @NotEmpty annotation:\n@Constraint(validatedBy = { })\n@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })\n@Retention(RUNTIME)\n@ReportAsSingleViolation\n@NotNull\n@Size(min = 1)\npublic @interface NotEmpty {\n    String message() default \"{org.hibernate.validator.constraints.NotEmpty.message}\";\n         ...\n}\nFor every field that fails, the @NotEmpty validation has the default error message printed next to it  \n(if configured so), read from the Hibernate Validator resource bundle files. These messages can be \noverridden by creating your own ValidationMessages resource bundle in the classpath of the project. Also, \nthe message keys can be customized by making the new message key a parameter for the message property \nwhen using the annotation; this allows specific messages to be displayed when the same annotation is used \non different fields:\n// in the Person entity class\n@NotEmpty(message=\"lastname.notempty\")\npublic String lastName;\n \n#in the ValidationMessages.properties\nlastname.notempty=Lastname cannot be empty!\n134",
          "tables": [],
          "code_blocks": [
            "String message() default \"{org.hibernate.validator.constraints.NotEmpty.message}\";\n         ..."
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 148,
          "text": "Chapter 3 ■ Spring MVC\nWhen using Spring forms, the error messages can be part of the application resource bundle under  \nWEB-INF\\messages; the message keys usually respect the following template:\nconstraintName.modelAttributeName.propertyName\nEach part of the Spring message key is linked to elements in the application, as depicted in Figure 3-20.\nFigure 3-20.  Spring message keys and linked elements\nThe message samples at the end of the previous section include customized validation messages, used \nin the 05-pr-mvc-form-practice and solution modules.\nSpring also supports the JEE @Constraint21 annotation, which can be used to define customized \nvalidation annotations.\n// Pnc.java\n@Constraint(validatedBy = [PncValidator.class])\n@Target( { ElementType.METHOD, ElementType.FIELD })\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Pnc {\n    //using specific message key\n    String message() default \"{pncFormatExpected}\";\n    Class<?>[] groups() default {};\n}\n \n21See http://docs.oracle.com/javaee/7/api/javax/validation/Constraint.html.\n135",
          "tables": [],
          "code_blocks": [
            "//using specific message key\n    String message() default \"{pncFormatExpected}\";\n    Class<?>[] groups() default {};"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 149,
          "text": "Chapter 3 ■ Spring MVC\n//In PncValidator.java\npublic class PncValidator implements\n                        ConstraintValidator<Pnc, String> {\n    @Override\n    public void initialize(Pnc constraintAnnotation) {\n        // nothing to initialize\n    }\n \n    @Override\n    public boolean isValid(String value, ConstraintValidatorContext context) {\n        return (value == null) || value.matches(\"[1-2][0-9]*\");\n    }\n}\n \n// In Resouce bundle global.properties files\npncFormatExpected= A valid Personal Numerical Code is required!\n// Usage in IdentityCard.java\npublic class IdentityCard extends AbstractEntity {\n...\n@Pnc\nprivate String pnc;\n...\n}\nOr the org.springframework.validation.Validator interface can be implemented to provide a \ncustom validator implementation, which can be specific to a controller and can be set using @InitBinder:\nclass PncValidator extends Validator {\n    public void validate(Object target, Errors errors) {\n        if ((Person)target)\n                        .identityCard.pnc.matches(\"[1-2][0-9]*\") )\n            errors.rejectValue(\"pnc\", \"pncFormatExpected\");\n    }\n \n    public boolean supports(Class<?> clazz) {\n        return clazz instanceof Person.class;\n    }\n}\n \n@InitBinder\npublic void initBinder(WebDataBinder binder) {\n    binder.setValidator(new PncValidator());\n}\n136",
          "tables": [],
          "code_blocks": [
            "ConstraintValidator<Pnc, String> {\n    @Override\n    public void initialize(Pnc constraintAnnotation) {\n        // nothing to initialize\n    }\n \n    @Override\n    public boolean isValid(String value, ConstraintValidatorContext context) {\n        return (value == null) || value.matches(\"[1-2][0-9]*\");\n    }",
            "public void validate(Object target, Errors errors) {\n        if ((Person)target)\n                        .identityCard.pnc.matches(\"[1-2][0-9]*\") )\n            errors.rejectValue(\"pnc\", \"pncFormatExpected\");\n    }\n \n    public boolean supports(Class<?> clazz) {\n        return clazz instanceof Person.class;\n    }",
            "binder.setValidator(new PncValidator());"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 150,
          "text": "Chapter 3 ■ Spring MVC\nOr a validation method can be implemented directly into the data transfer object and called from the \ncontroller:\npublic class CriteriaDto {\n    public void validate(Errors errors) {\n    if (fieldValue == null || fieldValue.isEmpty())\n             errors.rejectValue(\"fieldValue\", \"valueExpected\");\n    }\n}\n...\n \n@RequestMapping(method=RequestMethod.Get)\npublic String search(CriteriaDto criteriaDto, BindingResult result) {\n    criteriaDto.validate(result);\n    // process failure or success normally ...\n}\nManaging the Form Object\nUsing a form implies multiple requests, which means that the form object has to be the same across two or \nmore requests (when validations fail, for example). There are more ways to manage the form object:\n•\t The object is created on every request. This strategy is recommended when \ncreating a new object and the form contains all required data for it.\n•\t The object is retrieved on every request using a @ModelAttribute annotated \nmethod. This strategy works best for editing existing objects. It scales well and it is \nvery simple. The disadvantage is that before every request, the method to retrieve \nthe object is called; thus Spring MVC must bind the request parameters to it. For big \nforms using data transfer objects representing an aggregation of domain objects, this \nprocess can introduce a certain latency because domain objects have to be retrieved \nfrom the database and then aggregated.\n•\t The object is stored in the session between requests. This strategy works for both \ncreating and editing objects. It performs better, but it does not scale because it \ncrowds the session.\n•\t The object is managed by using flash attributes. This is the best solution for both \nscenarios, as the object is passed from one request to another by Spring MVC.\nIn the first case, the object is created in the initial GET request, and then Spring MVC takes care of \ncreating it again and binding all request parameters to it.\n@Controller\n@RequestMapping(\"/persons/{id}\")\npublic class PersonsController {\n \n    //1. object is being created on every request\n    // initial GET request, object is created\n    @RequestMapping(value=\"/new\", method=RequestMethod.GET)\n    public String new(Model model) {\n        model.add(new Person());\n    }\n \n137",
          "tables": [],
          "code_blocks": [
            "public void validate(Errors errors) {\n    if (fieldValue == null || fieldValue.isEmpty())\n             errors.rejectValue(\"fieldValue\", \"valueExpected\");\n    }",
            "criteriaDto.validate(result);\n    // process failure or success normally ...",
            "//1. object is being created on every request\n    // initial GET request, object is created\n    @RequestMapping(value=\"/new\", method=RequestMethod.GET)\n    public String new(Model model) {\n        model.add(new Person());\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 151,
          "text": "Chapter 3 ■ Spring MVC\n    //2. object is being retrieved\n    @ModelAttribute\n     public Person findPerson(@PathVariable Long id) {\n        return personManager.findOne(id);\n    }\n \n    // the POST request - Spring MVC takes care of creating the object and binding\n     @RequestMapping(method=RequestMethod.POST)\n     public String save(Person person) {\n       ...\n     }\n}\nIn the second case, the object is retrieved by a manager (service class) before every request and  \n@ModelAttribute annotation on a method is used for this; you can see this in the code sample at the \nbeginning of the “Data Binding” section. The last two cases were covered in the “Redirecting” section.\nSummary\nAfter reading this chapter, you should have a wide understanding of Spring Web MVC and all it has to offer. \nHere is a simple list of topics that you should keep handy when reviewing your new knowledge:\n•\t What is the DispatcherServlet and what is its role in Spring Web MVC applications?\n•\t What is the controller programming model?\n•\t How do you configure Spring MVC applications using XML, Java configuration, \nmixed cases, and Servlet 3.0 with no web.xml configurations?\n•\t What are the Spring MVC infrastructure beans and how are they configured?\n•\t What is the difference between a URL and a URI?\n•\t How you can create a reusable layout using Tiles for a Spring web application?\n•\t How do you personalize a Spring MVC application?\n•\t What types of views does Spring MVC support? What must be provided to do so?\n•\t How do you chain ViewResolvers to support multiple view types in a single \napplication?\n•\t How do you configure a ContentNegotiatingViewResolver to support multiple view \ntypes for the same resource?\n•\t How do you create a Spring form?\n•\t Spring MVC provides a JSP tag library for form rendering. How do you format and \nvalidate data handled by the form?\n•\t How does data binding work?\n•\t How do you write unit and integration tests to test controllers logic?\n138",
          "tables": [],
          "code_blocks": [
            "//2. object is being retrieved\n    @ModelAttribute\n     public Person findPerson(@PathVariable Long id) {\n        return personManager.findOne(id);\n    }\n \n    // the POST request - Spring MVC takes care of creating the object and binding\n     @RequestMapping(method=RequestMethod.POST)\n     public String save(Person person) {\n       ...\n     }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 152,
          "text": "Chapter 3 ■ Spring MVC\nQuick Quiz\nQuestion 1: Considering the following configuration in web.xml, what is the name of the parameter that \nholds the location of the Spring MVC configuration file?\n<servlet>\n    <servlet-name>mvc-dispatcher</servlet-name>\n    <servlet-class>o.s.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n        <param-name>?????</param-name>\n        <param-value>\n            /WEB-INF/spring/mvc-config.xml\n        </param-value>\n     </init-param>\n     <load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n     <servlet-name>mvc-dispatcher</servlet-name>\n     <url-pattern>/</url-pattern>\n</servlet-mapping>\nA.  contextListener\nB.  configurationLocation\nC.  contextConfigLocation\nQuestion 2: Considering the following configuration in web.xml, what is the name of the parameter that \npoints to the Spring infrastructure bean that enables Java configuration?\n<servlet>\n<servlet-name>mvc-dispatcher</servlet-name>\n<servlet-class>o.s.web.servlet.DispatcherServlet</servlet-class>\n<init-param>\n    <param-name>???</param-name>\n    <param-value>\n      o.s.web.context.support.AnnotationConfigWebApplicationContext\n    </param-value>\n</init-param>\n<init-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>\n        com.book.config.WebConfig\n    </param-value>\n </init-param>\n <load-on-startup>1</load-on-startup>\n</servlet>\n \n<servlet-mapping>\n    <servlet-name>mvc-dispatcher</servlet-name>\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\n139",
          "tables": [],
          "code_blocks": [
            "<servlet-name>mvc-dispatcher</servlet-name>\n    <servlet-class>o.s.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n        <param-name>?????</param-name>\n        <param-value>\n            /WEB-INF/spring/mvc-config.xml\n        </param-value>\n     </init-param>\n     <load-on-startup>1</load-on-startup>",
            "<servlet-name>mvc-dispatcher</servlet-name>\n     <url-pattern>/</url-pattern>",
            "<param-name>???</param-name>\n    <param-value>\n      o.s.web.context.support.AnnotationConfigWebApplicationContext\n    </param-value>",
            "<param-name>contextConfigLocation</param-name>\n    <param-value>\n        com.book.config.WebConfig\n    </param-value>\n </init-param>\n <load-on-startup>1</load-on-startup>",
            "<servlet-name>mvc-dispatcher</servlet-name>\n    <url-pattern>/</url-pattern>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 153,
          "text": "Chapter 3 ■ Spring MVC\nA.  contextClass\nB.  configClassLocation\nC.  contextConfigLocation\nD.  contextClassName\nQuestion 3: In web.xml, the servlet name has been configured to mvc-dispatcher. What is the default name \nof the MVC configuration file that Spring looks for?\nA.  mvc-config.xml\nB.  mvc-dispatcher.xml\nC.  mvc-dispatcher-servlet.xml\nQuestion 4: As a developer, what do you need to do to configure Spring Web MVC application without using \nan web.xml file ?\nA.  Extend the AbstractDispatcherServletInitializer class and override at \nleast createServletApplicationContext and getServletMappings.\nB.  Extend the AbstractAnnotationConfigDispatcherServletInitializer \nclass and override at least getServletConfigClasses and \ngetServletMappings.\nC.  Implement WebApplicationInitializer.\nD.  Extend WebApplicationInitializer and annotate the class with @\nEnableWebMvc.\nQuestion 5: Which of the following are Spring MVC infrastructure components?\nA.  Validator implementations\nB.  HandlerAdapter implementations\nC.  HandlerMapping implementations\nD.  ControllerAdvice implementations\nQuestion 6: The purpose of HandlerMapping implementations is to map incoming requests to the \nappropriate handlers and a list of pre- and post-processor interceptors. Is this statement true?\nA.  Yes\nB.  No\nQuestion 7: RequestMappingHandlerMapping is registered by default when the following configuration style \nis used for a Spring web application:\nA.  XML configuration using the MVC namespace specific element \n<mvc:annotation-driven/>\nB.  Java configuration using a configuration class annotated with @EnableWebMVC\n140",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 154,
          "text": "Chapter 3 ■ Spring MVC\nQuestion 8: What are the key interfaces used by Spring to render responses without tying itself to a specific \nview technology?\nA.  View\nB.  ViewResolver\nC.  ViewConfigurer\nQuestion 9: Which of the following is an out-of-the-box view technology supported by Spring?\nA.  JSP\nB.  Thymeleaf\nC.  Velocity templates\nD.  XSLT\nE.  Tiles\nQuestion 10: What is the default ViewResolver implementation configured by Spring?\nA.  InternalResourceViewResolver\nB.  JspResourceViewResolver\nC.  UrlBasedViewResolver\nD.  BeanNameViewResolver\nQuestion 11: What is the difference between chaining ViewResolver beans and content-type negotiation?\nA.  There is no difference.\nB.  View Resolver chaining allows supporting multiple view types in a single \napplication.\nC.  Content-type negotiation allows support for multiple view types for the same \nresource.\nQuestion 12: What is true about the HTTP Accept header?\nA.  It can be used in a Spring Web MVC application to decide the view type for a \nresource only when the client is a browser.\nB.  It is used for REST web services.\nC.  It is useless when the client is a browser.\nD.  It can be taken into consideration by setting a value for the \nignoreAcceptHeader property in the ContentNegotiatingViewResolver \nbean.\nQuestion 13: From the following list, select the Spring infrastructure bean types responsible with application \npersonalization:\nA.   MessageSource implementations\nB.  LocaleChangeInterceptor\nC.  LocaleResolver implementations\nD.  ThemeResolver implementations\n141",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 155,
          "text": "Chapter 3 ■ Spring MVC\nQuestion 14: What is true about the @ExceptionHandler and @ControllerAdvice annotations?\nA.  They are used for handling exceptions thrown by controller methods.\nB.  When a method inside a controller is annotated with @ExceptionHandler, \nthis method handles the exceptions thrown only in that controller.\nC.  @ControllerAdvice is used at class level; in addition to @ExceptionHandler \nannotated methods, this class can define other types of methods.\nQuestion 15: Given the following controller, to what request will the call method be mapped to?\n@Controller\n @RequestMapping(\"/persons\")\npublic class PersonsController {\n \n    @RequestMapping(\"/list\")\n    public String call(Model model,HttpServletRequest rq) {\n    ...\n    }\n}\nA.  http://localhost:8080/persons\nB.  http://localhost:8080/persons/list\nC.  http://localhost:8080/persons/call\nQuestion 16: Given the following controller, is the declaration of the show method correct?\n@Controller\n @RequestMapping(\"/persons\")\npublic class PersonsController {\n \n    @RequestMapping(\"/{id}\")\n    public String show(@PathVariable String number, Model model) {\n    ...\n    }\n}\nA.  Yes\nB.  No\nQuestion 17: What of the following is something that a Spring MVC handler method could not return?\nA.  a string\nB.  a Model\nC.  a ModelAndView\nD.  a JstlView instance\nE.  a null value\n142",
          "tables": [],
          "code_blocks": [
            "@RequestMapping(\"/list\")\n    public String call(Model model,HttpServletRequest rq) {\n    ...\n    }",
            "@RequestMapping(\"/{id}\")\n    public String show(@PathVariable String number, Model model) {\n    ...\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 156,
          "text": "Chapter 3 ■ Spring MVC\nQuestion 18: Which of the following statements regarding annotation-based configuration are true?\nA.  Annotating a class with Controller is not enough for that class to handle \nrequests; the class also has to extend Spring’s AbstractController class.\nB.  @RequestMapping is both used at class and method level.\nC.  To enable auto-detection of controller classes, you have to enable component \nscanning in your configuration.\nD.  @ModelAttribute can only be used to annotate controller method \narguments.\nQuestion 19: What is true about @ModelAttribute ?\nA.  This annotation is used to bind a method parameter or method return value \nto a named model attribute, exposed to a web view.\nB.  If a method is annotated with it, that method will be executed before \nhandling any request.\nC.  This annotation is used to bind a form object to a controller.\nQuestion 20: What is @InitBinder used for?\nA.  To initialize a controller.\nB.  To mark a method that initializes the WebDataBinder, which is used to \npopulate command and form object arguments of annotated handler \nmethods.\nC.  To mark a method for execution before handling any request.\nQuestion 21: Which is true when a new view technology is added to a Spring web application?\nA.  The view technology in question must provide a class implementing Spring’s \nView interface.\nB.  The view technology in question must provide a class implementing Spring’s \nViewResolver interface.\nC.  The view technology must require specific configuration beans to be defined.\nQuestion 22: When working with Spring forms, which is the recommended workflow?\nA.  A GET request is made to display the form, a POST request is made to submit \nthe data, and a GET request is made to display a confirmation page and \nprevent multiple resubmissions.\nB.  A GET request is made to display the form, and a POST request is made to \nsubmit the data.\nQuestion 23: Given the following Spring form definition, what is wrong with it?\n<%@ taglib prefix=\"sf\" uri=\"http://www.springframework.org/tags/form\" %>\n...\n  <sf:form action=\"${personsUrl}\" method=\"GET\">\n  ...\n</sf:form>\n143",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 157,
          "text": "Chapter 3 ■ Spring MVC\nA.  The method of a form cannot be GET.\nB.  The modelAttribute is missing.\nC.  The <%@ taglib prefix=\"spring\" uri=\"http://www.springframework.\norg/tags\" %> is missing\nQuestion 24: Does Spring MVC support validation of form data?\nA.  Yes\nB.  No\nQuestion 25: Which of the following are validation annotations used on form object fields?\nA.  @NotNull\nB.  @Size\nC.  @Valid\nD.  @NotEmpty\nE.  @Constraint\nF.  @Required\nG.  @Pattern\nPractical Exercise\nThis chapter is quite big, so it has four module projects associated with it and each of the modules covers a \nspecific section. Figure 3-21 depicts the eight module projects attached to this chapter: four practice projects \nand four proposed solutions for them. You are welcome to analyze the proposed solutions and compare \nthem to your solutions to test your understanding of Spring MVC.\nFigure 3-21.  Practice projects for Chapter 3\n144",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 158,
          "text": "Chapter 3 ■ Spring MVC\nAll web modules depend on the 01-pr-service module. This project contains the @Service classes and \nthe repositories used to manage data. The 01-pr-service depends on the 00-pr-dao module that contains \nentity classes and common classes (formatters, enums, and utility classes) used by all other modules. The \nservice module was created to respect the standardized three-tiered software architecture pattern, depicted \nin Figure 3-22. Each tier has a specific responsibility:\n•\t The data tier is the data access layer that usually encapsulates persistence \nmechanisms and exposes the data. It should provide an application programming \ninterface (API) to the logic tier that exposes methods of managing the stored data \nwithout exposing or creating dependencies on the data storage mechanisms.22\n•\t The logic tier (also known as the service layer) controls an application’s functionality \nby performing detailed processing. This tier is needed when the application needs to \nbe accessed by different type of clients (browsers, web services, etc.).\n•\t The presentation layer is the topmost level of the application that users can directly \naccess, such as a web page or a desktop GUI.\nFigure 3-22.  Typical standardized three-tiered architecture\n22In the PErsonal REcords Manager project, because Spring DATA JPA is used, the implementation of the repositories \nAPI is reduced to interfaces extending the JpaRepository interface. They are placed in the logic tier/service layer.\n145",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 159,
          "text": "Chapter 3 ■ Spring MVC\nBecause the Personal Records Manager is quite a small project, the service classes do not do much \nbesides calling analogous methods form repository beans.\nThe HospitalFormatter is part of the 01-pr-service module because it needs a manager instance to \nretrieve the hospital instance from the repository.\nThe DBInitializer class is also located in the service class; it is used to populate the database with \nsome sample entries when a web application starts. This class is a simple bean with access to all the service \ncomponents used in the application, and with a @PostConstruct annotated method that uses those service \nclasses to insert data. This is the most practical way to initialize a small test-scoped database that does not \nrequire external configuration files or additional libraries in the classpath. The bean is annotated with  \n@Component and it is automatically discovered, created, and initialized at application boot time.\nThe @Service annotated classes are organized in the hierarchy depicted in Figure 3-23.\nFigure 3-23.  Service classes hierarchy\nThey are all named [EntityType]ManagerImpl, where EntityType is the type of object managed by the \nclass. The Impl suffix is used to emphasize that the class is a concrete implementation for the [EntityType]\nManager interface.\nThe BaseManager interface contains all the basic method skeletons common to all service classes.\n  @Transactional\npublic interface BaseManager<E extends AbstractEntity> {\n \n    @Transactional(readOnly = true)\n    List<E> findAll();\n \n    @Transactional(readOnly = true)\n    E findById(Long id);\n \n    E save(E e);\n \n    void delete(E e);\n \n    void deleteById(Long id);\n}\nThe manager interfaces extending it add method skeletons specific to each managed entity-type.\nThe repository components are created using Spring Data JPA and are in fact interfaces extending the \nJpaRepository interface. This interface extends CrudRepository, which provides sophisticated CRUD \nfunctionality for the entity class being managed. All other method definitions that are needed, but not \n146",
          "tables": [],
          "code_blocks": [
            "@Transactional(readOnly = true)\n    List<E> findAll();\n \n    @Transactional(readOnly = true)\n    E findById(Long id);\n \n    E save(E e);\n \n    void delete(E e);\n \n    void deleteById(Long id);"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 160,
          "text": "Chapter 3 ■ Spring MVC\nprovided, are defined in the interface extending JpaRepository. They are annotated with the @Query \nannotation, and the query to be executed is set through it; for example:\n@Query(\"select p from Person p where p.lastName = :lastName\")\nList<Person> getByLastname(@Param(\"lastName\") String lastName);\nFor Spring to provide proxy repositories with the configured implementation for the interfaces that \nextend JpaRepository, the following line has been added to the app-dao-config.xml configuration file:\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    ...\n      xmlns:jpa=\"http://www.springframework.org/schema/data/jpa\"\n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    ...\n      http://www.springframework.org/schema/data/jpa\n      http://www.springframework.org/schema/data/jpa/spring-jpa.xsd\n    ...\">\n  <jpa:repositories base-package=\"com.pr.repos\"/>\n</beans>\nThe equivalent Java configuration makes use of the @EnableJpaRepositories annotation:\n@Configuration\n@EnableJpaRepositories(\"com.pr.repos\")\nclass ApplicationConfiguration {\n \n  @Bean\n  public EntityManagerFactory entityManagerFactory() { ... }\n  @Bean\n  public DataSource dataSource() {...}\n \n...\n{\nThe basic configuration *.gradle file for each web module project looks like this:\n(1) apply plugin: 'war'\napply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'\n \ndependencies {\n      (2) compile project(':01-pr-service')\n      compile misc.slf4jApi, misc.slf4jJcl, misc.logback,\n              hibernate.ehcache, hibernate.em, hibernate.core, hibernate.validator,\n              spring.jdbc, spring.orm, spring.contextSupport, spring.data,\n              spring.webmvc,\n              misc.dbcp, misc.h2, misc.joda, misc.jstl, misc.tilesJsp,\n              misc.tilesReqApi, misc.javaxEl\n      testCompile tests.junit, tests.mockito, spring.test,\n           tests.hamcrestCore, tests.hamcrestLib\n}\n \n147",
          "tables": [],
          "code_blocks": [
            "...\n      xmlns:jpa=\"http://www.springframework.org/schema/data/jpa\"\n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    ...\n      http://www.springframework.org/schema/data/jpa\n      http://www.springframework.org/schema/data/jpa/spring-jpa.xsd\n    ...\">\n  <jpa:repositories base-package=\"com.pr.repos\"/>",
            "@Bean\n  public EntityManagerFactory entityManagerFactory() { ... }\n  @Bean\n  public DataSource dataSource() {...}",
            "(2) compile project(':01-pr-service')\n      compile misc.slf4jApi, misc.slf4jJcl, misc.logback,\n              hibernate.ehcache, hibernate.em, hibernate.core, hibernate.validator,\n              spring.jdbc, spring.orm, spring.contextSupport, spring.data,\n              spring.webmvc,\n              misc.dbcp, misc.h2, misc.joda, misc.jstl, misc.tilesJsp,\n              misc.tilesReqApi, misc.javaxEl\n      testCompile tests.junit, tests.mockito, spring.test,\n           tests.hamcrestCore, tests.hamcrestLib"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 161,
          "text": "Chapter 3 ■ Spring MVC\ngretty {\n    port = 8080\n  (3) contextPath = '/mvc-layout'\n}\n  1.  This line is where the Gretty plugin is defined to run this module.\n  2.  This is the line where the dependency from the 01-pr-service project is defined. \nThis line ensures that before compiling the web application, the 01-pr-service \nis compiled first.\n  3.  This is the line where the Gretty plugin is configured to start the application with \na different context than the name of the project. In the case presented  \nhere after starting the application, the web interface can be accessed at  \nhttp://localhost:8080/mvc-layout This was necessary for practical reasons, \nbecause by default the module name is used, and the names of the modules in \nthis chapter are quite long.\nAll the projects can be built without the tests by running the allCompile task, as mentioned earlier in \nthe book. In case you forgot, the task can be found directly under the project root, in this case the personal-\nrecords project, in the Intellij IDEA Gradle task tab, as you can see in Figure 3-24.\nFigure 3-24.  The Gradle allCompileTask\nThe other two tasks you need to use are the appStart and appStop under the module-project name in \nthe Intellij IDEA Gradle task tab; they start and stop the web application, as depicted in Figure 3-25.\n148",
          "tables": [],
          "code_blocks": [
            "port = 8080\n  (3) contextPath = '/mvc-layout'"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 162,
          "text": "Chapter 3 ■ Spring MVC\nFigure 3-25.  The Gerry start and stop web application tasks\nAll the modules in personal-records can be built and run separately when using Gradle outside of \nIntellij IDEA, by using the command line in a terminal and running specific Gradle tasks:\n$ cd personal-records\n$ gradle :02-pr-mvc-basic-practice:build\n$ gradle :02-pr-mvc-basic-practice:run\nIn the previous examples, the :02-pr-mvc-basic-practice is the name of the submodule, and :build \nand run are Gradle tasks to be run for the modules.\n■ !  When running examples in the command line, the run task is used instead of appStart to run the web \nmodules in gretty, so the execution can be ended by pressing any key in the terminal.\nEach of the projects suffixed with -practice is incomplete, missing either a bean definition or a \nconfiguration. In its place there is a TODO comment explaining what you have to do to make the project \nbuild. Each project covers a specific topic from the chapter, as follows:\n•\t 02-pr-mvc-basic-practice is a simple Spring web application project that displays \na list of persons from the applications. It should contain proper definitions for all the \npersonalization beans you read about in the chapter; it is what the TODOs are all \nabout: configuring the personalization beans properly. It has only one controller, the \nPersonsController, which is used to populate the list.jsp and show.jsp views. \nThis controller also has an @ExceptionHandler method that handles cases when a \nlink is manually created with a non-existing person id. (Test the exception handling \nmethod by manually accessing http://localhost:8080/mvc-basic/persons/99.)\n•\t 03-pr-mvc-layout-practice is a simple Spring web application project that uses the \nTiles engine to create views. Some configuration is missing and some methods have \nto be added for the project to work correctly. The Tiles template for the application \nis found under webapp/WEB-INF/templates; it is called layout.jsp. You can see the \nfull path within the project in Figure 3-26.\n149",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 163,
          "text": "Chapter 3 ■ Spring MVC\nFigure 3-26.  Path of the Tiles layout template\nThere are two controllers defined PersonsController and HospitalsController. Each of \nthe controllers has the responsibility of populating the corresponding list.jsp views and the \nHospitalsController has a method that uses redirect: and redirectAttributes. This project also contains \nunit and integration tests designed to test you controllers.\n•\t 04-pr-mvc-view-practice is a simple Spring web application project that uses \ncontent view negotiation to present the data to the user in a specific view format \nfor the persons/list URL. All it is missing is a proper configuration for the \nContentNegotiatingViewResolver bean.\n•\t 05-pr-mvc-form-practice is a simple Spring web application project that presents \nthe user with a form to edit users and one to search for users. The TODO tasks \nrequire the user to place the correct annotation on methods to enable validation and \nfinish implementing the person search form. The part of the application managing \nHospital entries has been removed for the purpose of simplicity, but if you want to \npractice your Spring form skills, you are welcome to try to create an edit form for a \nHospital entry after you have solved the existing TODOs.\nAll the applications are internationalized and themed. There are two languages available—English and \nGerman, and two colored themes—blue and green.\nWhen all the tests pass, all the applications start successfully and provide the expected functionality, and \nyou feel confident that you have a solid grasp of the Spring Web MVC, you can continue to the next chapter.\n150",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 164,
          "text": "Chapter 4\nSpring Portlets\nAlthough not required for the certification exam, spring portlets are covered in this book because a lot of \nmedium-sized companies tend to favor portal applications, which come with a set of modules already \nimplemented. Companies may also hire developers to provide the customized functionality via pluggable \ncomponents. Usually, these portal applications are licensed and supported, which is an advantage when \nthings do not go exactly as planned, because you have direct contact with a team of experts that can help you \nwith problems specific to the software.\nPortlets are pluggable web components used when creating a portal, which is a complex web-based \napplication that provides personalization, authentication, and customizable content aggregation from \nmultiple sources. A portlet is a Java-based web component; its lifecycle is managed by a portlet container, \nwhich processes requests and generates dynamic content.1 Each portlet produces a fragment of markup \nthat is combined with the markup of other portlets in the context of a composite portal page. On enterprise \napplication servers, a new war archive is deployed on a server, either manually by copying it into a \ndeployment directory, or by uploading it using a manager application. A standard Java portlet should be \ndeployable on any portlet container2 that complies with the standard.\nThe advantage of using portlets is that the developer has to only handle the implementation of the logic \ninside a portlet; the portal server takes care of the rest, such as building and securing the page. Although this \nseems restrictive, the value of a portal application is the control that is given to administrators and users.\nA portlet (or a collection of portlets) behaves as a web-based application per-se, and it can be \naggregated to build more complex web applications—portals. Portal applications are as widely used as \nservlet applications and the design of such applications comes in two flavors:\n•\t Portlets provide small units of functionality and are aggregated by the portal server \ninto a larger application (see Figure 4-1).\n1This definition is given in the official Java portlet specification at https://jcp.org/en/jsr/detail?id=286.\n2A portlet container is an application that runs portlets and provides the appropriate context. Examples of well-known \nand widely used portal applications that can be customized using portlets include IBM WebSphere Portal; Liferay Portal, \nan enterprise web platform for building business solutions; GateIn Portal (formerly JBoss Portal), an open source web \nsite framework; and the Blackboard learning management system.\n151",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 165,
          "text": "Chapter 4 ■ Spring portletS\nFigure 4-1.  Diagram of portlets as units of a single-page portal application\n•\t Whole applications can be written to reside in only one or a few portal pages  \n(see Figure 4-2).\nFigure 4-2.  Diagram of a multipage portal application\n152",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 166,
          "text": "Chapter 4 ■ Spring portletS\nChoosing which approach to use depends on the requirements of the application and the number of \ndifferent functionalities that the application must provide. For example, a university’s portal application \nis made of multiple pages, and each of those is made of multiple portlets with functionality related to a \ncommon domain. But a smaller application—a blog, for example—does not need multiple pages; the whole \napplication can fit into one portal page.\nLiferay Community Edition version 6.2-ce-ga43 is used to run the examples in this chapter (Figure 4-3 \nshows the official Liferay site to help you easily see what you need to download). Choices are made by taking \ncompatibility with Spring into consideration, as well as how practical development and deployment will be. \nEvery portal application requires specific configurations, but Liferay allows high decoupling between portal \nand application configuration, which is quite an important feature, as you will soon discover.\nFigure 4-3.  Liferay Portal version to download: Community Edition Bundle with Tomcat\nSpring provides an MVC framework for the JSR-168 and JSR-268 portlet development. This framework \ntries, as much as possible, to mirror the Web MVC framework, and also uses the same underlying view \nabstractions and integrations technology to make portlet development more practical.\n3Download the Liferay Community Edition from http://www.liferay.com/downloads/liferay-portal/\navailable-releases.\n153",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 167,
          "text": "Chapter 4 ■ Spring portletS\nPortlet Basics\nPortlet workflow is different from servlet workflow because it involves two distinct phases: an action phase \nand a render phase. The action phase is executed only once; this is the phase where backend logic is \nexecuted. During the render phase, the response that gets sent back to the user is produced. So there is a \nseparation between activities that affect the state of the system and the activities that generate data to be \ndisplayed.\nFigure 4-4 depicts the difference between MVC servlet handling and MVC portlet handling when  \nusing Spring.\nFigure 4-4.  Spring MVC portlet handling\nIn the early versions of Spring MVC framework, implementing a controller class in a servlet-based \napplication meant extending the o.s.web.servlet.mvc.AbstractController class (or implementing the \norg.springframework.web.servlet.mvc.Controller interface) and overriding the handleRequest() \nmethod, which is called by DispatcherServlet. Starting with Spring 3.0, this was no longer necessary, \nbecause annotations (@Controller and @RequestMapping) are used to provide a more flexible and practical \nway of working with controllers.\nThere is an equivalent Spring class for portlets that should be extended to create a portlet: the  \norg.springframework.web.portlet.mvc.AbstractController class (and an equivalent interface  \norg.springframework.web.portlet.mvc.Controller).\nThe handleActionRequest() and the handleRenderRequest() methods should be overridden; the  \norg.springframework.web.portlet.DispatcherPortlet handles their invocation.\nSince Spring 3.0, annotations have made things easier for development of portlets too. @Controller is \nused to annotate a portlet controller, @RenderMapping is used to annotate a render method, and  \n@ActionMapping is used to annotate an action method.\n154",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 168,
          "text": "Chapter 4 ■ Spring portletS\nThe advantage of annotations is that multiple render and action methods can be defined, and they can \nbe called depending on the request parameters.\nThe DispatcherPortlet uses a few special infrastructure beans to process requests and render \nappropriate views; they are implementations of interfaces analogous to MVC servlet interfaces. So when it \ncomes to portlets, handler mappings are used to map requests and portlet modes with controllers, multipart \nresolvers, and handler exception resolvers. Data binding, command object usage, model handling, and \nview resolution are the same as in the servlet framework, and they are performed by the same classes. An \nintermediary servlet bridge class, called ViewRendererServlet, is used for rendering views; it transforms a \nportlet rendering request to a servlet request and the view can be rendered using the servlet infrastructure \nspecific beans (view resolvers, messageSource, etc.). The only things not available are the usage of the \nredirect: prefix and RedirectView, because these kinds of operations are linked to the URL of the request, \nwhich in this case is generated by the portal and the results would be unexpected.\nMost portal applications expect the result of rendering a portlet to be an HTML fragment, so any view \ntechnologies like JSP/JSTL, Velocity, FreeMarker, and XSLT are allowed. This also means that Spring taglib \nand Spring form taglib are supported.\nEach portlet has a javax.portlet.PortletMode defined, which indicates the function the portlet is \nperforming in the render method. A portlet can change its portlet mode programmatically when processing \nan action request. The portlet specification defines three portlet modes: VIEW, EDIT, and HELP. Depending \non the security restrictions, a user can have access only to specific portlet modes; unauthenticated users can \nonly use VIEW and HELP, whereas authenticated users can also use EDIT.\nPortlets are required to support VIEW mode; and this is the only mode needed—even in complex \napplications. EDIT and HELP are not mandatory. Portal applications can define their own custom portlet \nmodes. For example, the Liferay Portal has additional portlet modes:\n•\t ABOUT\n•\t CONFIG\n•\t PRINT\n•\t PREVIEW\n•\t EDIT_DEFAULTS\n•\t EDIT_GUEST\nLiferay also allows its users to create their own portlet modes.\nSpring also acts as a portlet container, providing portlets with a runtime environment and managing \ntheir lifecycle. Spring receives requests from the portal and decides which portlet to execute. The portal is \nresponsible with aggregating the resulted content.\nThe following is the typical flow of events for using a portal application:\n  1.  The user gets authenticated by the portal.\n  2.  The user makes an HTTP request to the portal.\n  3.  The request is received by the portal.\n  4.  The portal determines if the request contains an action targeted to any of the \nportlets associated with the portal page.\n  5.  Using the portlet container, the portal invokes portlets to obtain content to be \ndisplayed in the resulting portal page.\n  6.  The portal aggregates the output of the portlets in the main page, and then sends \nthe results back to the client.\n155",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 169,
          "text": "Chapter 4 ■ Spring portletS\nAs seen in this example, even if the request is directed to a single portlet in the page, the whole page is \nbeing reconstructed and rendered. This can be avoided by using AJAX components in the portlet pages, and \ninstead of action requests, resource requests can be used (methods will be annotated with  \n@ResourceMapping), but this implies adding a lot of resource handling logic for conversion and validation, \nwhich otherwise can be done by Spring automatically.\nA portal page can be made of one or more portlets, as seen in Figure 4-5.\nFigure 4-5.  Liferay Portal page with various portlet components\nConfiguration\nSpring Portlet is a request-driven web MVC framework designed around the DispatcherPortlet, \nwhich is the entry point for a portlet application. It plays the same role as a front controller as \nDispatcherServlet does for servlet applications. Because each portlet behaves as a stand-alone \napplication, a DispatcherPortlet is defined for each portlet. Each DispatcherPortlet has its own \nWebApplicationContext, which inherits everything defined in the root WebApplicationContext. Everything \ninherited can thus be overridden in the portlet-specific scope. A context inheritance diagram example is \ndepicted in Figure 4-6.\n156",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 170,
          "text": "Chapter 4 ■ Spring portletS\nFigure 4-6.  Context inheritance diagram in this chapter’s application sample\nConfiguring a portlet application can be done by using only XML files, but when working with Spring \nMVC portlet, it is practical to use annotations to reduce the size of XML configuration files and make them \nmore readable.\nIn the source code attached to this chapter, two portlets are defined: PortletSearch and PortletAdd. \nSnippets of code from the content of one or the other are used in this book to provide examples for the terms \nand definitions being mentioned.\nThe XML Part of the Configuration\nThe DispatcherPortlet(s) is/are declared in a configuration file name portlet.xml, which resides under \nthe WEB-INF directory. This file must exist with the mentioned name and in the mentioned location in any web \narchive containing portlet definitions. It is the configuration file for the portlet applications. You can consider \nit the equivalent of web.xml for portlets.\nA portlet application has the same structure as a normal web application, but the necessary \nconfiguration files depend on the portal application. How to use Liferay in this case will be discussed shortly; \nyou can see the application structure provided in Figure 4-7.\n157",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 171,
          "text": "Chapter 4 ■ Spring portletS\nFigure 4-7.  The structure and configuration files for a Liferay portlet application\nEach file under WEB-INF has a specific purpose that will be discussed in detail later in this chapter.  \nA short description of these files and their purposes can be seen in Table 4-1.\nTable 4-1.  Message Converters Table\nFile Name Purpose Observation\napp-config.xml Application configuration Spring, part of the root context\nliferay-display.xml List of portlets available Liferay\nliferay-portlet.xml Portlets configuration in the portal Liferay\nmvc-config.xml Web infrastructure configuration Spring, part of the root context\npersonAdd-portlet.xml PersonAdd portlet configuration file Spring, inherits root context\npersonSearch-portlet.xml PersonSearch portlet configuration file Spring, inherits root context\nThe following list describes what every configuration file contains.\n•\t app-config.xml and mvc-config.xml are the typical Spring configuration files that \ncontain the user-defined application beans and web infrastructure beans that are \ninherited by portlet contexts:\n<!-- app-config.xml -->\n    <context:component-scan base-package=\"com.pr\">\n        <context:include-filter type=\"annotation\"\n                    expression=\"o.s.stereotype.Service\"/>\n        <context:include-filter type=\"annotation\"\n                    expression=\"o.s.stereotype.Repository\"/>\n    </context:component-scan>\n \n158",
          "tables": [],
          "code_blocks": [
            "<context:component-scan base-package=\"com.pr\">\n        <context:include-filter type=\"annotation\"\n                    expression=\"o.s.stereotype.Service\"/>\n        <context:include-filter type=\"annotation\"\n                    expression=\"o.s.stereotype.Repository\"/>\n    </context:component-scan>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 172,
          "text": "Chapter 4 ■ Spring portletS\n    <!-- Import configuration for the datasource and the dao project -->\n    <import resource=\"classpath:spring/app-dao-config.xml\"/>\n    <import resource=\"classpath:spring/db-config.xml\"/>\n \n<!-- mvc-config.xml -->\n    <bean id=\"viewResolver\"\n          class=\"o.s.web.servlet.view.InternalResourceViewResolver\"\n          p:viewClass=\"org.springframework.web.servlet.view.JstlView\"\n          p:prefix=\"/WEB-INF/person/\" p:suffix=\".jsp\"/>\n \n<bean id=\"messageSource\"\n          class=\"o.s.context.support.ReloadableResourceBundleMessageSource\"\n          p:basename=\"classpath:localization/global\"\n          lazy-init=\"true\"/>\n•\t liferay-display.xml is a Liferay Portal configuration file, which contains the list \nof portlets available to add in the pages of a site and a category that groups them \ntogether. This file is not mandatory, but it is recommended to create it to shorten \nthe deployment process. Having this file in the war (alongside liferay-display.xml) \nallows you to install a portlet war application using the App Manager in Liferay, \nwithout any additional operations (see Figure 4-8).\nFigure 4-8.  The App Manager in Liferay\n159",
          "tables": [],
          "code_blocks": [
            "<!-- Import configuration for the datasource and the dao project -->\n    <import resource=\"classpath:spring/app-dao-config.xml\"/>\n    <import resource=\"classpath:spring/db-config.xml\"/>",
            "<bean id=\"viewResolver\"\n          class=\"o.s.web.servlet.view.InternalResourceViewResolver\"\n          p:viewClass=\"org.springframework.web.servlet.view.JstlView\"\n          p:prefix=\"/WEB-INF/person/\" p:suffix=\".jsp\"/>",
            "class=\"o.s.context.support.ReloadableResourceBundleMessageSource\"\n          p:basename=\"classpath:localization/global\"\n          lazy-init=\"true\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 173,
          "text": "Chapter 4 ■ Spring portletS\n•\t This is the syntax of the file: \n<display>\n        <category name=\"Personal Records\">\n              <portlet id=\"personAdd\" />\n              <portlet id=\"personSearch\" />\n         </category>\n</display>\n•\t And when creating a site or a site template, Liferay provides user portlets  \n(see Figure 4-9). \nFigure 4-9.  How Liferay provides user portlets for usage in portal pages\n160",
          "tables": [],
          "code_blocks": [
            "<category name=\"Personal Records\">\n              <portlet id=\"personAdd\" />\n              <portlet id=\"personSearch\" />\n         </category>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 174,
          "text": "Chapter 4 ■ Spring portletS\n•\t liferay-portlet.xml is a Liferay configuration file that contains typical settings for \nuser created portlets in the context of the web application: portlet names, if they can \nbe used more than once in a page,4 additional JavaScript files, CSS files,5 and so forth.\n<liferay-portlet-app>\n    <portlet>\n          <!-- The canonical name of the portlet, it has to be unique -->\n          <portlet-name>personSearch</portlet-name>\n          <!-- Indicates if multiple instances of this portlet\n               can appear on the same page -->\n          <instanceable>false</instanceable>\n \n          <!-- not used in the example, but can appear in a configuration -->\n          <footer-portlet-javascript>/js/main.js</footer-portlet-javascript>\n          <header-portlet-css>/styles/general.css</header-portlet-css>\n          <requires-namespaced-parameters>false</requires-namespaced-parameters>\n    ...\n       </portlet>\n</liferay-app>\nAs these settings are Liferay specific, they won’t be covered in detail here. If you are interested in \nworking with Liferay, you can find more details on the official site at www.liferay.com.\n! Starting with liferay 6.2, the requires-namespaced-parameters parameter must be specified for a portlet. \nit must be set to false for parameter values to be read correctly. When not specified, the default value is true \nand the portal associates a unique name to each htMl element in the page to prevent name collisions between \ndifferent portlets in the page.\n•\t personSearch-portlet.xml and personAdd-portlet.xml are portlet application \nconfiguration files. A configuration file for each portlet must be created. All beans \nused by the portlet controller bean (except the beans inherited from the root context) \nare declared in it. The name must match the <portletName>-portlet.xml template, \nwhere <portletName> is the name of the portlet as declared in portlet.xml. In our \nexample, only the definition of the portlet controller bean can be specified. This file \nis loaded by the DispatcherPortlet:\n<bean id=\"personSearch\" class=\"com.pr.search.PersonController\"\n      p:personManager-ref=\"personManager\"/>\n4Portlets behave as stand-alone applications, so it is possible to add the same portlet multiple times to a page, unless \nconfigured differently.\n5Liferay and other portlet containers provide a context for the portlets to run in. This context contains theme elements \ndefined in CSS files, and additional functionality in the interface via JavaScript. But the user can override or complement \nLiferay by providing custom CSS and JavaScript files.\n161",
          "tables": [],
          "code_blocks": [
            "<portlet>\n          <!-- The canonical name of the portlet, it has to be unique -->\n          <portlet-name>personSearch</portlet-name>\n          <!-- Indicates if multiple instances of this portlet\n               can appear on the same page -->\n          <instanceable>false</instanceable>\n \n          <!-- not used in the example, but can appear in a configuration -->\n          <footer-portlet-javascript>/js/main.js</footer-portlet-javascript>\n          <header-portlet-css>/styles/general.css</header-portlet-css>\n          <requires-namespaced-parameters>false</requires-namespaced-parameters>\n    ...\n       </portlet>",
            "p:personManager-ref=\"personManager\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 175,
          "text": "Chapter 4 ■ Spring portletS\nBut if you want to use annotations as much as possible, you could do so:\n<!-- in personSearch-portlet.xml -->\n    <context:component-scan base-package=\"com.pr.search\"/>\n    <mvc:annotation-driven/>\n \n<!-- in personAdd-portlet.xml -->\n      <context:component-scan base-package=\"com.pr.add\"/>\n      <mvc:annotation-driven/>\nThe scanned package contains the portlet controller class and all the  \ncomponents involved in defining the functionality of a portlet. Although the <mvc:annotation-driven/> \ndeclaration seems redundant, it is actually needed because portlets are independent applications, even if \nthey inherit the same root context and they reside in the same portal application context.\nAs mentioned, each portlet behaves as a standalone application, and that’s why these configuration files \nare needed. The root Spring configuration is defined in the  \napp-config.xml and mvc-config.xml. Without these configuration files, the deployment will fail, because \nthe Spring MVC portlet expects a configuration file for each portlet. Here is what happens at deploy time if the \npersonSearch-portlet.xml file is missing:\no.s.w.p.c.XmlPortletApplicationContext - Refreshing PortletApplicationContext\nfor namespace 'personSearch-portlet'...\no.s.b.f.x.XmlBeanDefinitionReader - Loading XML bean definitions from\nPortletContext resource /WEB-INF/personSearch-portlet.xml\nERROR o.s.w.p.DispatcherPortlet - Context initialization failed\no.spring.beans.factory.BeanDefinitionStoreException: IOException parsing XML\ndocument from PortletContext resource /WEB-INF/personSearch-portlet.xml;\nnested exception is java.io.FileNotFoundException:\nCould not open PortletContext resource /WEB-INF/personSearch-portlet.xml\n...\n•\t portlet.xml is the configuration file that defines settings for the portlet(s), such \nas the portlet request handler (the portlet class). When working with Spring only, \nDispatcherPortlet, supported modes, supported locales, supported MIME types, \nand the resource bundle are used. This file contains multiple portlet elements—one \nfor each portlet defined in the application.\n<portlet-app ...>\n<portlet>\n      <portlet-name>personSearch</portlet-name>\n      <portlet-class>o.s.web.portlet.DispatcherPortlet</portlet-class>\n            <supports>\n                  <mime-type>text/html</mime-type>\n                  <portlet-mode>view</portlet-mode>\n            </supports>\n            <resource-bundle>localization.global</resource-bundle>\n            <portlet-info>\n                  <title>Person Search</title>\n            </portlet-info>\n</portlet>\n \n<portlet>\n162",
          "tables": [],
          "code_blocks": [
            "<context:component-scan base-package=\"com.pr.search\"/>\n    <mvc:annotation-driven/>",
            "<context:component-scan base-package=\"com.pr.add\"/>\n      <mvc:annotation-driven/>",
            "<portlet-name>personSearch</portlet-name>\n      <portlet-class>o.s.web.portlet.DispatcherPortlet</portlet-class>\n            <supports>\n                  <mime-type>text/html</mime-type>\n                  <portlet-mode>view</portlet-mode>\n            </supports>\n            <resource-bundle>localization.global</resource-bundle>\n            <portlet-info>\n                  <title>Person Search</title>\n            </portlet-info>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 176,
          "text": "Chapter 4 ■ Spring portletS\n     <portlet-name>personAdd</portlet-name>\n    ...\n    <!-- configuration is analogous to the one for personSearch -->\n</portlet>\n<!-- More settings for other portlets -->\n</portlet-app>\n•\t web.xml contains the deployment descriptor for the web resources, and this is \nwhere the ViewRendererServlet is declared and the connection to the Spring MVC \nconfiguration is made. There is no DispatcherServlet defined, because portlet \napplications run in a portlet context, which is different form a servlet context. \nAccording to Portlet Specification 1.0, every portlet application is also a Servlet \nSpecification 2.3–compliant web application, and thus it needs a web application \ndeployment descriptor, meaning a web.xml file:\n<web-app ...>\n    <context-param>\n      <param-name>contextConfigLocation</param-name>\n      <param-value>/WEB-INF/root-context.xml</param-value>\n    </context-param>\n    <listener>\n        <listener-class>o.s.web.context.ContextLoaderListener</listener-class>\n    </listener>\n \n        <servlet>\n                <servlet-name>ViewRendererServlet</servlet-name>\n                <servlet-class>o.s.web.servlet.ViewRendererServlet</servlet-class>\n                <load-on-startup>1</load-on-startup>\n        </servlet>\n \n        <servlet-mapping>\n                <servlet-name>ViewRendererServlet</servlet-name>\n                <url-pattern>/WEB-INF/servlet/view</url-pattern>\n        </servlet-mapping>\n</web-app>\nThe ViewRendererServlet is the bridge servlet for portlet support. During the render \nphase, DispatcherPortlet wraps PortletRequest into ServletRequest and forwards control to \nViewRendererServlet for actual rendering. This process allows the Spring Portlet MVC framework to use the \nsame View infrastructure as that of its servlet version; that is, the Spring Web MVC framework. The /WEB-\nINF/servlet/view is the default value available for internal resource dispatching. The ViewRendererServlet \nbridge servlet can be mapped to a different URL pattern by using the viewRendererUrl property.\n163",
          "tables": [],
          "code_blocks": [
            "<portlet-name>personAdd</portlet-name>\n    ...\n    <!-- configuration is analogous to the one for personSearch -->",
            "<context-param>\n      <param-name>contextConfigLocation</param-name>\n      <param-value>/WEB-INF/root-context.xml</param-value>\n    </context-param>\n    <listener>\n        <listener-class>o.s.web.context.ContextLoaderListener</listener-class>\n    </listener>\n \n        <servlet>\n                <servlet-name>ViewRendererServlet</servlet-name>\n                <servlet-class>o.s.web.servlet.ViewRendererServlet</servlet-class>\n                <load-on-startup>1</load-on-startup>\n        </servlet>\n \n        <servlet-mapping>\n                <servlet-name>ViewRendererServlet</servlet-name>\n                <url-pattern>/WEB-INF/servlet/view</url-pattern>\n        </servlet-mapping>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 177,
          "text": "Chapter 4 ■ Spring portletS\n! as mentioned at the beginning of the chapter, the controllers can be created without annotations by extending \nthe |o.s.web.portlet.mvc.AbstractController class. this is the old way of doing things, before the \nintroduction of the @Controller annotation. it is still supported, but not recommended, and it is not as practical \nas using an annotated controller. in this case, the <portletName>-portlet.xml looks a little different. the \nHelloWorldController in the book-code/04-chapter-solution module has a configuration file that looks \nlike this:\n<bean id=\"helloWorldController\" class=\"com.book.HelloWorldController\"/>\n<bean id=\"portletModeHandlerMapping\"\n  class=\"o.s.web.portlet.handler.PortletModeHandlerMapping\">\n  <property name=\"portletModeMap\">\n       <map>\n          <entry key=\"view\">\n             <ref bean=\"helloWorldController\"/>\n          </entry>\n       </map>\n  </property>\n</bean>\nthe PortletModeHandlerMapping class is an implementation of the o.s.web.portlet.HandlerMapping \ninterface used by Spring to map from the current PortletMode to request handler beans.\nThe Annotation Part of the Configuration\nAt the time this book is being written, a full annotation configuration for a portlet-based application is not \npossible. A combination of XML and annotations can be used, because Spring MVC annotations are available \nfor usage in portlet controllers too. For example, in the PersonAddController, the @ModelAttribute is used \nin a similar manner as for a servlet container. The PersonAddController is a simple controller that allows the \nuser to create a person instance.\nimport org.springframework.stereotype.Controller;\n \n...\n \n@Controller(\"personAdd\")\n@RequestMapping(\"VIEW\")\npublic class PersonAddController {\n...\n@RenderMapping\n    public String render(Model model) {\n    model.addAttribute(new Person());\n    return \"add\";\n  }\n \n164",
          "tables": [],
          "code_blocks": [
            "<map>\n          <entry key=\"view\">\n             <ref bean=\"helloWorldController\"/>\n          </entry>\n       </map>\n  </property>",
            "public String render(Model model) {\n    model.addAttribute(new Person());\n    return \"add\";\n  }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 178,
          "text": "Chapter 4 ■ Spring portletS\n@ModelAttribute\nprivate List<Hospital> getHospitals() {\n    return hospitalManager.findAll();\n}\n \n@ActionMapping(\"add\")\npublic void addPerson(@Valid @ModelAttribute Person person,\n    BindingResult result, ActionRequest actionRequest,\n    ActionResponse actionResponse,\n    SessionStatus sessionStatus, Model model) {\n    if (!result.hasErrors()) {\n        logger.info(\"ACTION: action saving person = \" person);\n        try {\n              personManager.save(person);\n              model.addAttribute(\"message\",\n                    messageSource.getMessage(\"label.Person.saved\", null,\n                          actionRequest.getLocale()));\n              sessionStatus.setComplete();\n        } catch (Exception e) {\n            logger.error(\"Unexpected error when saving person.\", e);\n            model.addAttribute(\"error\", \"Internal Error.\n                  Contact Administrator.\");\n        }\n    } else {\n        logger.info(\"Validation failed\");\n        model.addAttribute(\"errors\", result);\n    }\n  }\n}\nThe model attribute defined by getHospitals() is used to populate the hospital drop-down list in the \nview fragment in add.jsp. The view fragment is basically normal JSP code; any taglibs can be used, and the \nportlet taglib is used to define the render and action URLs that will be mapped to methods in the controller \nresponsible for populating and managing data for the JSP fragment.\n(1) <%@ taglib prefix=\"portlet\" uri=\"http://java.sun.com/portlet_2_0\"%>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n<%@ taglib prefix=\"fn\" uri=\"http://java.sun.com/jsp/jstl/functions\" %>\n(2) <%@ taglib prefix=\"sf\" uri=\"http://www.springframework.org/tags/form\" %>\n<%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\" %>\n \n(3) <portlet:defineObjects />\n \n<h3>\n  <spring:message code=\"persons.add.title\"/>\n</h3>\n \n(4) <portlet:actionURL var=\"addPersonUrl\">\n   <portlet:param name=\"javax.portlet.action\" value=\"add\"/>\n</portlet:actionURL>\n \n165",
          "tables": [],
          "code_blocks": [
            "return hospitalManager.findAll();",
            "BindingResult result, ActionRequest actionRequest,\n    ActionResponse actionResponse,\n    SessionStatus sessionStatus, Model model) {\n    if (!result.hasErrors()) {\n        logger.info(\"ACTION: action saving person = \" person);\n        try {\n              personManager.save(person);\n              model.addAttribute(\"message\",\n                    messageSource.getMessage(\"label.Person.saved\", null,\n                          actionRequest.getLocale()));\n              sessionStatus.setComplete();\n        } catch (Exception e) {\n            logger.error(\"Unexpected error when saving person.\", e);\n            model.addAttribute(\"error\", \"Internal Error.\n                  Contact Administrator.\");\n        }\n    } else {\n        logger.info(\"Validation failed\");\n        model.addAttribute(\"errors\", result);\n    }\n  }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 179,
          "text": "Chapter 4 ■ Spring portletS\n(5) <portlet:renderURL var=\"cleanPersonUrl\">\n   <portlet:param name=\"action\" value=\"clean\" />\n</portlet:renderURL>\n \n<div class=\"person\">\n...\n<sf:form name=\"person\" modelAttribute=\"person\"\n               action=\"${addPersonUrl}\"\n               method=\"POST\">\n      <table>\n          <tr>\n             <th>\n             <label for=\"firstName\">\n                 <span class=\"man\">*</span>\n                 <spring:message code=\"label.Person.firstname\"/>\n             </label>\n           </th>\n           <td><sf:input path=\"firstName\"/></td>\n           <td><sf:errors cssClass=\"error\" path=\"firstName\"/></td>\n         </tr>\n         <tr>\n             <th>\n                <label for=\"middleName\">\n                    <spring:message code=\"label.Person.middlename\"/>\n                </label>\n             </th>\n             <td><sf:input path=\"middleName\"/></td>\n             <td><sf:errors cssClass=\"error\" path=\"middleName\"/></td>\n         </tr>\n         ...\n         <!-- other form elements -->\n         <tr>\n             <td>\n                  <input type=\"submit\"\n                              value=\" <spring:message code=’command.save’/>\">\n             </td>\n             <td>\n                 <a href=\"${cleanPersonUrl}\">\n                     <spring:message code=\"command.cancel\"/>\n                 </a>\n              </td>\n         </tr>\n       </table>\n     </sf:form>\n</div>\n166",
          "tables": [],
          "code_blocks": [
            "action=\"${addPersonUrl}\"\n               method=\"POST\">\n      <table>\n          <tr>\n             <th>\n             <label for=\"firstName\">\n                 <span class=\"man\">*</span>\n                 <spring:message code=\"label.Person.firstname\"/>\n             </label>\n           </th>\n           <td><sf:input path=\"firstName\"/></td>\n           <td><sf:errors cssClass=\"error\" path=\"firstName\"/></td>\n         </tr>\n         <tr>\n             <th>\n                <label for=\"middleName\">\n                    <spring:message code=\"label.Person.middlename\"/>\n                </label>\n             </th>\n             <td><sf:input path=\"middleName\"/></td>\n             <td><sf:errors cssClass=\"error\" path=\"middleName\"/></td>\n         </tr>\n         ...\n         <!-- other form elements -->\n         <tr>\n             <td>\n                  <input type=\"submit\"\n                              value=\" <spring:message code=’command.save’/>\">\n             </td>\n             <td>\n                 <a href=\"${cleanPersonUrl}\">\n                     <spring:message code=\"command.cancel\"/>\n                 </a>\n              </td>\n         </tr>\n       </table>\n     </sf:form>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 180,
          "text": "Chapter 4 ■ Spring portletS\nThe previous sample code is a snippet from the definition of the add.jsp fragment. A few lines are \nmarked with numbers in parentheses; here is why those lines are important:\n•\t (1) The portlet taglib definition for JRS 286. (A portlet container that supports JSR \n286 should also support JSR 168.)\n•\t (2) The Spring form taglib definition.\n•\t (3) Needed to use renderRequest, renderResponse, and portletConfig variables.6\n•\t (4) An element used to define an action URL for a portlet. The javax.portlet.action \nparameter value must match the value of the @ActionMapping annotation placed on \nthe action method in the controller. Other parameters with different names can be \nused and the {name,value} pairs, must appear as a value for the @ActionMapping \nannotation params attribute to correctly identify the action method to use. In the \ncase described in the preceding snippet, the following method will be mapped to the \naddPersonUrl:\n@Controller(\"personAdd\")\n@RequestMapping(\"VIEW\")\npublic class PersonAddController {\n...\n@ActionMapping(\"add\")\n         public void addPerson(...){\n        ...\n        }\n    ...\n}\n•\t (5) An element used to define a render URL. This element has a parameter, and \nits name and value appears in the @RenderMapping annotation params attribute to \ncorrectly identify the render method to use. In the case described in the preceding \nsnippet, the following methods will be mapped to the cleanPersonUrl:\n@Controller(\"personAdd\")\n@RequestMapping(\"VIEW\")\npublic class PersonAddController {\n...\n  @RenderMapping(params = \"action=clean\")\n    public String renderNew(Model model) {\n    //the model attribute is removed from the model and a new on is added\n    //causing the form to be emptied of data\n        model.asMap().remove(\"o.s.validation.BindingResult.person\");\n        model.addAttribute(new Person());\n        return \"add\";\n    }\n...\n}\n6https://blogs.oracle.com/deepakg/entry/jsr286_defineobjects_tag.\n167",
          "tables": [],
          "code_blocks": [
            "public void addPerson(...){\n        ...\n        }\n    ...",
            "public String renderNew(Model model) {\n    //the model attribute is removed from the model and a new on is added\n    //causing the form to be emptied of data\n        model.asMap().remove(\"o.s.validation.BindingResult.person\");\n        model.addAttribute(new Person());\n        return \"add\";\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 181,
          "text": "Chapter 4 ■ Spring portletS\nConfiguration Details and Recommendations\nIf you paid enough attention to the example configuration files presented in the previous sections, you \nmight have noticed that there are some common elements between the configuration files; portlet names \nand portlet ids have to respect some strict rules in order for the portlets to be deployed correctly. Figure 4-10 \nis a mashup of all files used in defining a portlet. In this image, only configuration elements specific to the \nPersonAdd portlet are depicted. Analogous elements are also defined for the PersonSearch portlet in this \nbook’s code samples. If you decide to experiment with the provided code and create your own portlet, the \nconfiguration should be done similarly to what is presented in Figure 4-10 for the PersonAdd portlet.\nFigure 4-10.  All the files defining the PersonAdd portlet\nWhen developing a portlet, it is important to keep a standard for naming beans and configuration \nitems; make it as global as possible, because when elements are not found, Spring reports these as errors in \nthe portal application. Spring is quite clear in telling you what is missing, but portal application exceptions \ncan be quite confusing, especially when you are working with a portal application for the first time. So if you \nwant your portlet development to go flawlessly, try to follow these recommendations:\n  1.  Try to start development by writing the controller. Name the controller \nappropriately. A controller name should be made of the following:\na.  The name of object type being manipulated\nb.  The type of manipulation (list, search, edit, add)\nc.  The Controller suffix\n168",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 182,
          "text": "Chapter 4 ■ Spring portletS\nFor example, a controller that handles requests for searching for a person would be named \nPersonSearchController. The name of the controller bean should be the object type name + manipulation \ntype. So the PersonSearchController name is annotated with @Controller(\"personSearch\").\n  2.  The second file is the Spring portlet configuration type. It is named as follows:\na.  The name of the object type being manipulated\nb.  The type of manipulation (list, search, edit, add)\nc.  The -portlet suffix\nSo, a file to configure a portlet that performs a person search would be called personSearch-portlet.xml. \nInside this file, a bean defines the controller type that you previously created, and dependencies are injected \nwhen XML configuration is used. The bean id is the name of the controller bean defined in the previous step.\n<bean id=\"personSearch\">\n      <property name=\"personManager\" ref=\"personManager\"/>\n</bean>\nWhen annotations are used to configure the necessary components, only the package that you are \ninterested in is scanned, and the <mvc:annotation-driven/> is added:\n<context:component-scan base-package=\"com.pr.search\"/>\n<mvc:annotation-driven/>\n  3.  The liferay-display.xml is next. Set the portlet id as object type name + \nmanipulation type.\n  4.  In the liferay-portlet.xml, set the portlet name as object type name + \nmanipulation type too.\nSo, for the portlet that displays a list of people, the portlet id and portlet name should be personList.\n  5.  In portlet.xml, use the same portlet name as you did in the previous step.\n  6.  Another recommendation is to make portlets that display data instanceable and \nthe portlets that alter data non-instanceable. The reason for this is as follows: if \na portlet that displays data is placed twice in the page, both portlets will always \ndisplay the same data, because they share the request. The same happens with \nportlets that alter data; so basically, two action requests are made with the same \nparameters, even if the input parameters have been populated in only one of \nthem. This leads to exceptions at the database level if the database is properly \ndesigned. If not, this leads to data duplications, and sometimes data corruption.\n  7.  If you have only one portlet, the root-context.xml is not necessary and all \nSpring infrastructure beans can be declared in the <portletName>-portlet.xml.\nThe Development and Deployment of a Portlet Application\nSince this chapter does not cover topics required for the certification exam, no quiz or practical exercises are \nin it; instead, a short step-by-step tutorial explains how to install, start, and configure Liferay, and deploys the \ncode samples offered to you. After you understand the process and create some portal pages with the given \nportlets, you can try to create your own portlet by following the recommendations from the previous section.\n169",
          "tables": [],
          "code_blocks": [
            "<property name=\"personManager\" ref=\"personManager\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 183,
          "text": "Chapter 4 ■ Spring portletS\nDownload, Install, Start, and Configure Liferay\nAs mentioned in the beginning of this chapter, Liferay can be downloaded from www.liferay.com/\ndownloads/liferay-portal/available-releases. The following examples use the Community Edition, \nbundled with Tomcat, because it is free and can be downloaded directly. Also, Tomcat is really easy to use.\nAfter you click the Download button a *.zip file is saved onto your computer. The file is usually named \nliferay-portal-tomcat-[version]-ce-ga[index]-[date+build_number].zip. Unpack the archive in a \ndesired location. And this is the end of the install process.\nIf you open the directory, you will see the content depicted in Figure 4-11.\nFigure 4-11.  The Liferay installation archive\nThe tomcat-[version] is the version of Tomcat that Liferay is based upon. It has the normal structure \nand functionality of a Tomcat application server, but it contains some extra jars and configuration files for \nthe Liferay Portal application.\n! Currently, liferay is based on tomcat 7, so a configuration without a web.xml file is not possible.\nTo start Liferay, you have to open a shell terminal or a Command Prompt instance. Go to the  \ntomcat/bin directory inside the Liferay installation. Start the server as you would start Tomcat. \nWindows / Command Prompt\nC:\\{directory}\\liferay-{version}\\omcat-{version}\\bin catalina.bat run\n# you also have the option to \"double-click\" on startup.bat\n \nLinux / MacOs shell terminal\ncd /{directory}/liferay-{version}/tomcat-{version}/bin ./startup.sh\n170",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 184,
          "text": "Chapter 4 ■ Spring portletS\nYou can look in tomcat-[version]/logs/catalina.out to see when the server is up and whether \nexceptions were thrown due to incompatibilities between the Java version and Liferay. There could be other \ntomcat *.log files in the directory, but the catalina.out file is the one you should be interested in, because \nit is the main logging file for Tomcat and logs are written into it in real time when the server is up. Liferay 6.2 \nis compatible with Java 8, however, so no such problem should arise. When the server is started, a window is \nopened in your default system browser at the address http://localhost:8080.\nThis page asks you to insert a few settings details. For the examples in this book, the default \nconfiguration can be used. The page should look like the one shown in Figure 4-12.\nFigure 4-12.  The Liferay welcome page\nClick the Finish Configuration button on the bottom-left corner of the page. The default settings are \nsaved in an internal in-memory database. You should see a confirmation page that looks like the shown one \nin Figure 4-13.\n171",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 185,
          "text": "Chapter 4 ■ Spring portletS\nFigure 4-13.  Liferay configurations saved confirmation page\nClick the Go to my Portal button in the bottom-left corner of the page. The next page is the Terms of \nUse page. Just scroll down and click the I Agree button. Next, you are presented with a page requiring you \nto add a password reminder. Just insert something simple and click the Save button. The default password \nfor user test@liferay.com is test (see Figure 4-14). After introducing a password reminder, you should \nbe redirected to the portal home page (see Figure 4-15). If you see this page, then your server is correctly \nconfigured and you can start deploying custom portlets.\nFigure 4-14.  Liferay Password Reminder page\n172",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 186,
          "text": "Chapter 4 ■ Spring portletS\nFigure 4-15.  Liferay Portal home page\nIn Liferay, portlets have to be added manually to a page by selecting them from a list with available \ncomponents. A page is usually part of a site. In Liferay, there are also site templates, which can be used \nto create multiple sites that inherit the configuration of a template. Of course, you could add the portlets \ndirectly to the home page you see after logging in, and then start testing them; but for the examples in this \nchapter, you will use Liferay the proper way.\nThe first step is to create a site template. To do this, expand the Admin menu and select Control Panel. \nFigure 4-16 shows where this option is found on the menu.\nFigure 4-16.  Liferay Admin menu\n173",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 187,
          "text": "Chapter 4 ■ Spring portletS\nAfter selecting the Control Panel option, an admin page with all possibilities is displayed (see Figure 4-17).\nFigure 4-17.  Liferay admin page\nThese options are numbered in Figure 4-17 to show you their order of usage when creating your site: \n  1.  Link to the Site Templates administration page.\n  2.  Link to the portlets (Applications) administration page.\n  3.  Link to the Sites administration page.\nThis page takes care of administration for the portal application and all sites hosted by it. Sites can be \nsecured or public. They can have users with different access roles and rights. They can have custom pages. \nSite templates can be created and user-provided portlets can be installed by using the App Manager. So let’s \ncreate a public site and populate it with the provided portlet samples.\nClick the Site Templates link to display the Site Template configuration page. Click the +Add button. \nThe form for creating the site template is displayed (see Figure 4-18). Insert the name of the site template \nand a description, if you want (description is not mandatory, the site name is). Click the Save button.\n174",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 188,
          "text": "Chapter 4 ■ Spring portletS\nFigure 4-18.  Liferay create Site Template page\nThe more extended site template configuration is next. Click the Pages option in the menu on the \nleft. Next, click the Site pages option. In the center of the page, a set of options for all the pages in the site \ntemplate are presented. One of these options is the theme for all pages. Select the Dark radio button under \nthe Color Schemes section to use the dark scheme for the site template, because in the style sheet used in \nthe example, the style is defined to be compatible with it (see Figure 4-5). Then click the Save button on the \nright. Figure 4-19 depicts the actual page and the order of operations.\n  1.  Link to all site pages configurations.\n  2.  Select the Dark theme option.\n  3.  Link to the home page template configuration page.\n  4.  Click the Save button.\n175",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 189,
          "text": "Chapter 4 ■ Spring portletS\nFigure 4-19.  Liferay customize site template page\nClick the home link (3), to customize the home page. Change the name if you want; in this example, the \nfirst letter is in uppercase. Next, select a layout. The preferred layout is 2 Columns (50/50), so the portlets \ncan be added side by side in the page. After doing this, click the Save button. A green message box should \nappear at the top of the page, letting you know that all went well (see Figure 4-20).\n176",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 190,
          "text": "Chapter 4 ■ Spring portletS\nFigure 4-20.  Liferay customize Home Page Template\nSo, now a site template has been created; it contains a single page named Home, which is the page the \nsample portlets implementations will be placed. To do that, you have to preview the site template, which is \ndone by going back to the Site Templates Administration page and clicking the Site Templates button at the \ntop of the page. A list with all the defined site templates is displayed. The last one on the list should be the \nrecently created site template. Click the Actions button for the site and select the View Pages option  \n(see Figure 4-21).\n177",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 191,
          "text": "Chapter 4 ■ Spring portletS\nFigure 4-21.  Liferay Site Templates page\nIn a new browser window or tab, your site template is opened for customizations. On the left, there \nis a light-blue button with a + sign on it. If you click it, a menu opens to allow you to modify the content of \nthe home page. Since there is only one page, it is automatically selected. (When there are multiple pages to \ncustomize, you would just click a page header to select it, and then all customizations to be done on it.) Click \nthe Applications menu item to see a list of the available out-of-the-box Liferay portlets to add on the page. \nThey are grouped by category. The page in administration mode is shown in Figure 4-22.\n178",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 192,
          "text": "Chapter 4 ■ Spring portletS\nFigure 4-22.  Site Template home page in administration mode\nNow it is time to load the sample portlets.\nOpen the book-code project and run the war task under the 04-chapter-solution project. The \nexecution of this task creates a *.war file under 04-chapter-solution\\build\\libs that needs to be \ndeployed to the Liferay Portal. The module contains two portlets:\n•\t Hello World Portlet is a simple portlet application with a controller created \nby implementing the o.s.web.portlet.mvc.Controller, as mentioned at the \nbeginning of the chapter. The handleRenderRequest of this portlet sets an attribute \nto the model, which is displayed during the render phase.\nimport javax.portlet.ActionRequest;\nimport javax.portlet.ActionResponse;\nimport javax.portlet.RenderRequest;\nimport javax.portlet.RenderResponse;\n \nimport o.s.web.portlet.ModelAndView;\nimport o.s.web.portlet.mvc.Controller;\n \npublic class HelloWorldController implements Controller {\n \n179",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 193,
          "text": "Chapter 4 ■ Spring portletS\n  public ModelAndView handleRenderRequest(RenderRequest request,\n             RenderResponse response) throws Exception {\n       Map<String, Object> model = new HashMap<String, Object>();\n       model.put(\"helloWorldMessage\",\n              \"Hello World from Spring WEB portlet example application!!\");\n       return new ModelAndView(\"helloWorld\", model);\n}\n \n  public void handleActionRequest(ActionRequest request,\n                  ActionResponse response) throws Exception {\n            //we do not have action requests\n  }\n}\n•\t Hello World Portlet2 is a simple portlet application with a controller created \nand configured using a typical Spring configuration: annotations and XML. As a \nbonus, this portlet has a @ResourceMapping annotated method that is used to send \na text directly to the browser. These types of methods can be used in AJAX calls, as \nmentioned at the beginning of this chapter.\nimport o.s.stereotype.Controller;\nimport o.s.ui.Model;\nimport o.s.web.bind.annotation.RequestMapping;\nimport o.s.web.portlet.bind.annotation.ActionMapping;\nimport o.s.web.portlet.bind.annotation.RenderMapping;\nimport o.s.web.portlet.bind.annotation.ResourceMapping;\n@Controller(\"helloworld2\")\n@RequestMapping(\"VIEW\")\npublic class HelloWorldController2 {\n \n@RenderMapping\npublic String render(Model model){\n    model.addAttribute(\"helloWorldMessage\",\n          \"Hello World from Annotated Spring Portlet!!\");\n    return \"helloWorld2\";\n}\n \n//We do not need to do anything here.\n//Empty method given as example of how action methods are defined.\n@ActionMapping(value=\"doSomething\")\npublic void action(ActionRequest request, ActionResponse response){\n}\n \n  //Example of resource request method\n  @ResourceMapping(value = \"getData\")\n  public void getData(ResourceRequest resourceRequest,\n         ResourceResponse resourceResponse) throws IOException {\n       resourceResponse.getWriter().write(\"Test data for Ajax call.\");\n  }\n}\n180",
          "tables": [],
          "code_blocks": [
            "RenderResponse response) throws Exception {\n       Map<String, Object> model = new HashMap<String, Object>();\n       model.put(\"helloWorldMessage\",\n              \"Hello World from Spring WEB portlet example application!!\");\n       return new ModelAndView(\"helloWorld\", model);",
            "public void handleActionRequest(ActionRequest request,\n                  ActionResponse response) throws Exception {\n            //we do not have action requests\n  }",
            "model.addAttribute(\"helloWorldMessage\",\n          \"Hello World from Annotated Spring Portlet!!\");\n    return \"helloWorld2\";",
            "//Example of resource request method\n  @ResourceMapping(value = \"getData\")\n  public void getData(ResourceRequest resourceRequest,\n         ResourceResponse resourceResponse) throws IOException {\n       resourceResponse.getWriter().write(\"Test data for Ajax call.\");\n  }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 194,
          "text": "Chapter 4 ■ Spring portletS\nPlease take the time to analyze the code and the configuration files, and then execute the task and build \nthe *.war. If the task is executed correctly, you should see the result in 04-chapter-solution\\build\\libs. \nCompare Figure 4-23 with your own environment.\nFigure 4-23.  The 04-chapter-solution portlet sample\nNow that you have the archive with the portlets, it is time to upload them to Liferay. For this you need to \ngo the portal administration page (Control Panel) and click the App Manager link. A page with all available \nportlets is displayed.\nThe following actions must be performed:\n  1.  Click the Install tab on the menu.\n  2.  A page with an upload Form will be displayed, asking you to upload an LPKG \nor a WAR file. Click the Browse button. (On some systems, this button might be \nnamed Choose File.)\n  3.  Select the 04-chapter-solution-1.0-SNAPSHOT.war file.\n  4.  Click the Install button.\nIf the *.war file is installed correctly, a green message box appears on the top of the page with the \nmessage: The plugin was uploaded successfully and is now being installed (see Figure 4-24).\n181",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 195,
          "text": "Chapter 4 ■ Spring portletS\nFigure 4-24.  Using the App Manager to install custom portlets in Liferay\n! Community editions of liferay may have minor bugs and throw exceptions, although everything is \nhappening as it should. For example, the liferay version used to test the portlet implementations, liferay-\nportal-6.2-ce-ga4, throws a com.liferay.portal.kernel.messaging. MessageListenerException:java.lang.\nNullPointerException, which is printed in the catalina.out log file, but the portlets are installed correctly.\nTo make sure that the portlets were installed correctly and are ready to use, click the Manage tab. The \n04-chapter-solution-1.0-SNAPSHOT application should be at top of the list because of its name, and if you \nexpand the gray rectangle underneath, you should see something similar to what’s shown in Figure 4-25.\n182",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 196,
          "text": "Chapter 4 ■ Spring portletS\nFigure 4-25.  Correctly installed portlet samples in Liferay\nNow is the time to go back to the site template and place these two portlets in the home page. \nLiferay has a quick navigation menu on top of the page, which can be used for faster navigation between \nadministrative pages. (It is pinpointed to you in Figure 4-25). There is a Sites option on it. By clicking this, \nthe Liferay site–related configurations page is displayed (see Figure 4-21). Now all you have to do is click the \nSite Templates button, and then preview the site template as shown earlier.\nThe page shown in Figure 4-22 should have an extra category now, the Chapter 04 Sample. Expand \nthis, and then drag each portlet to the page and place it accordingly. The home page should look like what’s \nshown in Figure 4-26; you can also see the new category group for the HelloWorld sample portlets.\nFigure 4-26.  Sample portlets added to the page\n183",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 197,
          "text": "Chapter 4 ■ Spring portletS\nBefore creating a site using the template, the way to uninstall a war application should be presented, \nbecause things might go wrong during portlet development. For example, the following exception is thrown \nat Liferay deployment when the configuration of a portlet application is incorrect:\no.s.w.p.c.XmlPortletApplicationContext - Refreshing PortletApplicationContext\nfor namespace 'personSearch-portlet'...\no.s.b.f.x.XmlBeanDefinitionReader - Loading XML bean definitions from\nPortletContext resource /WEB-INF/personSearch-portlet.xml\nERROR o.s.w.p.DispatcherPortlet - Context initialization failed\no.spring.beans.factory.BeanDefinitionStoreException: IOException parsing XML\ndocument from PortletContext resource /WEB-INF/personSearch-portlet.xml;\nnested exception is java.io.FileNotFoundException:\nCould not open PortletContext resource /WEB-INF/personSearch-portlet.xml\n...\nConfiguration errors—such as missing beans or missing expected configuration files (like in the \npreceding exception)—are displayed only in the catalina.out file. In the App Manager you can see the \ngreen message confirmation box as long as the file can be read. The difference is message under the portlet \nname in the Manage section: There are no configurable plugins for this app.\nWhen this happens, click the Manage tab, and then click the Actions button attached to the application \nyou want to uninstall. Select the Uninstall option. See Figure 4-27 for the message and uninstall option.\nFigure 4-27.  Uninstall a portlet application\nNow let’s create a site. Select Sites from the top menu, and then select Sites. Click the +Add button. \nNext, select the Personal Records Template. The succession of these steps is depicted in Figure 4-28.\n184",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 198,
          "text": "Chapter 4 ■ Spring portletS\nFigure 4-28.  The steps to create a site using a site template\nYou will be directed to a new page, where a name and description can be inserted for the site. There are \nother options possible, but for now, just accept the default values and click the Save button. The page will \nlook like the one shown in Figure 4-29.\nFigure 4-29.  Site configuration page\n185",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 199,
          "text": "Chapter 4 ■ Spring portletS\nAfter creating the site, more configuration options become available, and you can see them all in the \npage that is loaded after the save operation. A recommended practice is to customize the site URL, as Liferay \nwill generate one from the site name (which might not be an acceptable URL). For example, for a site named \nPersonal Records Manager, the site URL generated by Liferay is personal-records-manager. To modify a \nsite URL, in the site configuration page, click the Site URL menu option on the right, and then change the \ngenerated site URL with the desired URL under the Friendly URL section, as depicted in Figure 4-30.\nFigure 4-30.  Site URL configuration\nClick the Save button, and then access the newly created site from the menu. Go to My Sites. The \nsite name should appear in the menu. By clicking it, you should be redirected to the site home page (see \nFigure 4-31).\n186",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 200,
          "text": "Chapter 4 ■ Spring portletS\nFigure 4-31.  Accessing a Liferay site\nAfter the two extra-simple HelloWorld portlets from the book-code project are added to the site, look \nin personal-records for the module named 06-pr-mvc-portlet-solution. This module contains two \ncomplex portlets: one for creating a Person instance and one for searching the Person database and deleting \nPerson instances. These are complex portlets that access a database and perform actual data modification; \nthey don’t just display data. Most code samples mentioned in this chapter are from these portlets. These \nportlets have been developed in such a way that all Spring MVC has to offer is included: model attributes, \nSpring forms, automatic conversion and validation, and so on. The code for the Spring form and validation is \nthe same as the one for forms used in a servlet environment, and you can find it all in Chapter 3. The reason \nfor this is that servlet and portlet environments differ only by the type of requests being resolved and the way \nthey are mapped to handlers. Once a request has been mapped to a handler, processing the data inside the \nbody of a request is independent of the application type.\nPlease take a look at the project, and then deploy the portlets on Liferay and add them to the site \ntemplate in the same manner presented so far. Your updated site should afterward look like what is shown in \nFigure 4-32, or a little different if you chose a different way to place your portlets in the page.\n187",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 201,
          "text": "Chapter 4 ■ Spring portletS\nFigure 4-32.  The Personal Records Manager portal site\nSummary\nAfter reading this chapter, you should have a basic understanding of how to use the Spring MVC Portlet \nframework with the Liferay Portal application. Here is a list of things that you should remember in case you \never end up working on a portal project:\n•\t Portlets are specialized web components that behave as stand-alone web \napplications and used to create composite pages in portal applications.\n•\t The Spring MVC Portlet framework mirrors the Spring MVC framework. The role of \nthe front controller is played by the DispatcherPortlet in portlet applications.\n•\t A portlet works with two types of requests: render and action. The render requests \ndo not involve business logic or data manipulation; they just request data from the \nportal to display it in the page. Actions do the actual data manipulation.\n•\t Most Spring MVC infrastructure beans and features are available for use in portlet \napplications.\n•\t Liferay is very compatible with Spring MVC Portlet; the configuration is totally \ndecoupled.\n188",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 202,
          "text": "Chapter 5\nSpring RESTful Services\nREST is an acronym for REpresentational State Transfer. It was introduced and defined in 2000 by Roy \nFielding in his doctoral dissertation. REST is a lightweight alternative to mechanisms like RPC (Remote \nProcedure Calls) and web services (SOAP, WSDL, etc.). REST is an architecture style for designing networked \n(distributed) applications. The idea is that, rather than using complex mechanisms such as CORBA, RPC, \nor SOAP to connect machines, simple HTTP is used to make calls between machines. RESTful applications \nuse HTTP requests to post data (create and/or update), read data (e.g., make queries), and delete data. Thus, \nREST uses HTTP for all four CRUD (create/read/update/delete) operations.\nCore REST Concepts\nThe REST architectural style describes six constraints:\n•\t Uniform interface: Defines the interface between client and server. Rest uses HTTP \nas an application protocol, as a platform, not just a transport protocol. The following \nHTTP specifications are used:\n•\t HTTP verbs are used as actions to execute on the resources (GET, PUT, PATCH, \nPOST, DELETE, HEAD, and OPTIONS)1\n•\t URIs are used to identify resource names. The resources are conceptually \nseparate from representations. Representations of the resources are returned \nfrom the server to the client, after a client request (typically JSON or XML). \nRepresentations contain metadata that can be used by the client to modify or \ndelete the resource on the server, provided it has permission to do so.\n•\t HTTP response: Response codes, the body, and headers are used to deliver state \nto clients. Clients deliver state using body content, query-string parameters, \nrequest headers, and the URI.\n1Although REST seems strongly connected to HTTP, REST principles can be followed using other protocols too,  \nfor example: POP, IMAP, and any protocol that uses URL-like paths and supports GET and POST methods.\n189",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 203,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\n•\t Statelessness: The server should contain no client state. Each request has enough \ncontext for the server to process the message. The URI uniquely identifies the \nresource, and the body contains the state (or state change) of that resource if the \nrequest is one that has a body (PUT, POST, PATCH). When working with a specific \ncontainer, a session is used to preserve state across multiple HTTP requests. When \nusing REST, there is no need for this, which increases the scalability because the \nserver does not have to maintain, update, or communicate the session state.\n•\t Client-server: A RESTful architecture is a client-server architecture, so the system \nis disconnected. The server might not be available all the time, so operations are \nasynchronous.\n•\t Cacheable: Anything returned by the server can be cached explicitly (the server \nspecifies conditions for caching), implicitly (the client uses its own caching \nconditions), or negotiated(the client and the server negotiate caching conditions)\n•\t Layered system: The client cannot assume direct connection to the server. \nSometimes a requested resource can be cached, and some other unknown software \nand hardware layers are interposed between the client and the server. Intermediary \nservers may improve system scalability and/or security by enabling load balancing, \nproviding shared caches, and enforcing security policies.\n•\t Code on demand: Executable code can be transferred as a representation to the \nclient (usually JavaScript or compiled Java applications known as applets).\n■ Note   processes running on different hosts communicate over a layered set of network protocols \ndefined by the OSi model. the uppermost level is the application layer and protocols specific to it are called \napplication protocols. this is the layer that is closest to the user, which means the user interacts directly with \nthe software application. Between the application layer and the transport layer are two more layers.\nthe transport layer provides the functional and procedural means of transferring variable-length data \nsequences from a source to a destination host via one or more networks, while maintaining the quality of \nservice functions. the protocols specific to it are called transport protocols.\nWhen using reSt, data is not just sent and received via http (transport), but data is actively manipulated by the \nuser in the context of an application. More information about network layers and protocols can be found on the \ninternet; if you are interested in finding out more, you can check out Wikipedia at https://en.wikipedia.org/\nwiki/OSI_model. advanced networking is not the object of this book or the certification exam.\nComplying with the first five constraints ensures that a RESTful application will be scalable, simple, \neasy to modify, portable, and reliable. The last constraint is optional; a REST application can be built without \ncode being transferred to clients, if there is no need for such operations. The main REST HTTP methods are \npresented in Table 5-1.\n190",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 204,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nTable 5-1.  Message Converters\nHTTP Method Purpose Observation\nGET Read Reads a resource; does not change it: therefore, it can be considered safe. \nReading the same resource always returns the same result: therefore, it can \nbe considered idempotent.\nPOST Create Used to create a new resource. Neither safe nor idempotent. Two identical \nPOST requests will result in two identical resources being created or errors \nat application level.\nPUT Update Most often used for update capabilities. It is not safe, because it modifies \nthe state on the server, but is idempotent (unless subsequent calls of the \nsame PUT request increments a counter within the resource, for example).\nDELETE Delete Used to delete resources. Not safe, but can be considered idempotent \nbecause requests to delete a resource that no longer exists will always \nreturn a 404 (not found).\nTo analyze contents of the REST requests and responses handled by the browser, the Firebug plugin in \nFirefox can be used. Simply install it directly from the official site (http://getfirebug.com/) and enable it \nby clicking the little bug on the right corner of the page (1). To see the contents of a request, just click on the \nNet tab (2), as depicted in Figure 5-1.\nFigure 5-1.  Using the Firebug plugin in Firefox to analyze REST requests and responses handled by the browser\n191",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 205,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nThe following describes the GET example shown in Figure 5-2:\n•\t It retrieves a representation of a resource.\n•\t It might have length restrictions.2\n•\t It is a safe operation; idempotent; repetitive execution that has no side effects.\n•\t It is cacheable and ETags are used to keep tags on resource versions.3\n•\t When a resource is not found, a 404 (Not Found) status code is returned;  \notherwise 200 (OK)\nFigure 5-2.  GET Request and Response example; snippets form the Firebug console\nThe following describes the POST example shown in Figure 5-3:\n•\t It creates a new resource.\n•\t It is not idempotent; repetitive execution causes duplicate data and/or errors.\n•\t The response has the created resource location URI in the response header.\n•\t When the resource being created requires a parent that does not exist a  \n404 (Not Found) status code is returned. When an identical resource already exists \na 409 (Conflict) status code is returned. When the resource was created correctly a \n201 (Created) status code is returned.\n2Servers should be cautious about depending on URI lengths above 255 bytes, because some older client or proxy \nimplementations may not properly support these lengths. When a browser does not support a certain request length,  \na 400 (Bad Request) status code is returned.\n3You can read more about ETags at http://en.wikipedia.org/wiki/HTTP_ETag.\n192",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 206,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nFigure 5-3.  POST Request and Response example\nThe following describes the PUT example shown in Figure 5-4:\n•\t It updates an existing resource or creates it with a known destination URI. The URI of \na resource contains an identifier for that resource. If that identifier is not generated \nby the application, but can be created by the client a behavior such as this can be \nimplemented: when a PUT request refers to an existing resource, the resource is \nupdated, otherwise a new resource with the identifier from the URI and the contents \nin the request body is created.\n•\t It is idempotent; repetitive execution has the same result.\n•\t It is not safe; repetitive updates could corrupt data.\n•\t When the resource being updated requires a parent that does not exist, or the \nresource requested to be updated does not exist, a 404 (Not Found), status code  \nis returned. When the resource is updated correctly, a 200 (OK) (or a 204  \n(No Content) if not returning any content in the body) status code is returned.\nFigure 5-4.  PUT Request and Response example\n193",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 207,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nThe following describes the DELETE example shown in Figure 5-5:\n•\t It deletes a resource.\n•\t It is idempotent; repetitive execution has the same result.\n•\t It is not safe; repetitive deletes could corrupt data.\n•\t When the resource being deleted does not exist, a 404 (Not Found), status code \nis returned. When the resource was deleted correctly, a 200 (OK) status code is \nreturned.\nFigure 5-5.  DELETE Request and Response example\nWhen it comes to REST, everything is about resource states and transferring them between a client \nand a server, in different forms. The request specifies the representation type using the Accept HTTP \nheader for GET and the Content-Type HTTP header for PUT and POST, as you have seen in the preceding \nimages, because when the client is not a browser (remember Chapter 3), the Accept header is taken \ninto consideration. The URI extension can be used as a representation type identifier too. The response \nreports the representation type returned using the Content-Type HTTP header. When using Spring, the \nrepresentation type is specified using an attribute of the @RequestMapping annotation and well-known \nmedia types defined in the MediaType class:\n@RestController\n@RequestMapping(value = \"/rest-persons\")\npublic class PersonsRestController extends BaseController {\n...\n@ResponseStatus(HttpStatus.OK)\n@RequestMapping(value = \"id/{id}\", method = RequestMethod.GET,\n                 produces = MediaType.APPLICATION_JSON_VALUE)\npublic Person getPersonById(@PathVariable Long id) throws NotFoundException {\n    logger.info(\"-----> PERSON: \" + id);\n    Person person = personManager.findById(id);\n      if (person == null) {\n           throw new NotFoundException(Person.class, id.toString());\n      }\n      return person;\n}\n...\n}\n \n194",
          "tables": [],
          "code_blocks": [
            "produces = MediaType.APPLICATION_JSON_VALUE)",
            "logger.info(\"-----> PERSON: \" + id);\n    Person person = personManager.findById(id);\n      if (person == null) {\n           throw new NotFoundException(Person.class, id.toString());\n      }\n      return person;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 208,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\n//Exception handler class for Rest errors.\n@ControllerAdvice(basePackages = \"com.pr.rest\")\npublic class RestExceptionProcessor {\n/\n \n       Maps NotFoundException to a 404 Not Found HTTP status code.\n \n     @ResponseStatus(value = HttpStatus.NOT_FOUND,\n           reason = \"This entity is not found in the system\")\n     @ExceptionHandler({NotFoundException.class})\n     public void handleNotFound(NotFoundException nfe) {\n         // just return empty 404\n         logger.info(\"-----> Entity \" + nfe.getObjType() +\n           \" with identifier\" + nfe.getObjIdentifier() + \"not found.\");\n     }\n}\nHATEOAS\nOn his public blog,4 Roy Fielding mentioned that most REST services are not really RESTful, because \nfully RESTful services should only return links. Basically, HATEOAS implies that when a client makes a \nREST request to a server, the server should return a response that informs the client of all possible REST \noperations using links. For example, a resource should contain links to related resources, including URIs for \nediting it and deleting it, and so forth. Following this idea, well-known author Leonard Richardson defined \nthe Richardson Maturity Model,5 which describes four levels of REST compliance:\n•\t Level 0, also known as the Swamp of POX. Only HTTP is used as a transport method.\n•\t Level 1, also known as the Resource Level. HTTP is used as a transport method and \nURIs are used to identify resources.\n•\t Level 2, also known as the HTTP Verb Level. This is the level where HTTP headers, \nstatuses, methods, distinct URIs and everything else HTTP has to offer to provide a \nREST service. At this level, HTTP is used the way it’s meant to be.\n•\t Level 3, also known as the Hypermedia Controls Level. This is the final level, where a \nfully complying REST service should be. HATEOAS, an abbreviation for Hypermedia \nAs The Engine Of Application State, is a constraint of the REST application \narchitecture that distinguishes it from most other network application architectures. \nThe principle is that a client interacts with a network application entirely through \nhypermedia provided dynamically by application servers.\nThe Spring team has developed a separate project to make it easy to implement RESTful services that \ncomply with the third level. Spring HATEOAS6 provides APIs to ease creating REST representations that \nfollow the HATEOAS principle when working with Spring, and especially Spring MVC.\n4This blog is at http://roy.gbiv.com.\n5Martin Fowler has a great article on this at http://martinfowler.com/articles/richardsonMaturityModel.html.\n6The project official page is at http://projects.spring.io/spring-hateoas/.\n195",
          "tables": [],
          "code_blocks": [
            "Maps NotFoundException to a 404 Not Found HTTP status code.\n \n     @ResponseStatus(value = HttpStatus.NOT_FOUND,\n           reason = \"This entity is not found in the system\")\n     @ExceptionHandler({NotFoundException.class})\n     public void handleNotFound(NotFoundException nfe) {\n         // just return empty 404\n         logger.info(\"-----> Entity \" + nfe.getObjType() +\n           \" with identifier\" + nfe.getObjIdentifier() + \"not found.\");\n     }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 209,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nHATEOAS is a concept of application architecture, which defines the way clients interact with servers \nusing hypermedia links they find inside representations returned by the server. To implement HATEOAS, \nresources representations must comply with a set of standards and contain hypermedia information.  \nOne of the most common standards used to hyperlink resources is HAL.7 A resource in HAL is just a  \nplain-old JSON or XML object with whatever properties needed, but that provides the possibility to \nhyperlink resources. The following is a code snippet showing what a resource representation that complies \nto the HAL standard looks like:\n//GET Request: /persons/5 using JSON format\n// Response representation returned below:\n{\n\" links\": {\n    \"self\": { \"href\": \"/persons/5\" },\n    \"parents\": [\n      { \"href\": \"/persons/2\", \"title\": \"mother\" },\n      { \"href\": \"/persons/3\", \"title\": \"father }\n    ]\n},\n    \"firstName\" : \"John\",\n    \"middleName\" : \"Constantine\",\n    \"lastName\" : \"Smith\",\n    \"dateOfBirth\" : \"1935-10-01\",\n    \"gender\" : \"MALE\",\n    \"hospital\" : {\n    \"code\" : \"134181\",\n    \"name\" : \"General Hospital\",\n    \"address\" : \"Sample address\",\n    \"location\" : \"Constance, Romania\"\n},\n\"identityCard\" : {\n    \"pnc\" : \"1351001134181\",\n    \"series\" : \"CO\",\n    \"number\" : \"205727\",\n    \"emittedAt\" : \"1949-10-01\",\n    \"expiresAt\" : \"1985-10-01\",\n    \"address\" : \"34eeb1d5-0ff4-4d4a-b811-4ff32aa15ada\"\n  }\n \n}\n \n//GET Request: /persons/5 analogous example using XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<person rel=\"self\" href=\"/person/5\">\n      <linkList>\n          <link rel=\"parent\" title=\"mother\" href=\"/persons/2\"/>\n          <link rel=\"parent\" title=\"father\" href=\"/persons/3\"/>\n      </linkList>\n \n7This is at http://stateless.co/hal_specification.html.\n196",
          "tables": [],
          "code_blocks": [
            "\"self\": { \"href\": \"/persons/5\" },\n    \"parents\": [\n      { \"href\": \"/persons/2\", \"title\": \"mother\" },\n      { \"href\": \"/persons/3\", \"title\": \"father }\n    ]",
            "\"firstName\" : \"John\",\n    \"middleName\" : \"Constantine\",\n    \"lastName\" : \"Smith\",\n    \"dateOfBirth\" : \"1935-10-01\",\n    \"gender\" : \"MALE\",\n    \"hospital\" : {\n    \"code\" : \"134181\",\n    \"name\" : \"General Hospital\",\n    \"address\" : \"Sample address\",\n    \"location\" : \"Constance, Romania\"",
            "\"pnc\" : \"1351001134181\",\n    \"series\" : \"CO\",\n    \"number\" : \"205727\",\n    \"emittedAt\" : \"1949-10-01\",\n    \"expiresAt\" : \"1985-10-01\",\n    \"address\" : \"34eeb1d5-0ff4-4d4a-b811-4ff32aa15ada\"\n  }",
            "<linkList>\n          <link rel=\"parent\" title=\"mother\" href=\"/persons/2\"/>\n          <link rel=\"parent\" title=\"father\" href=\"/persons/3\"/>\n      </linkList>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 210,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\n      <firstName>John</firstName>\n      <lastName>Constantine</lastName>\n      <!-- other simple properties-->\n      ...\n      <hospital>\n               <code>134181</code>\n               <!-- other simple properties-->\n            ...\n      </hospital>\n      <identityCard>\n              <pnc>1351001134181</pnc>\n              <!-- other simple properties-->\n            ...\n      </identityCard>\n \n</person>\nAdvantages of REST\nThe following list describes the advantages of REST.\n•\t REST is simple.\n•\t REST is widely supported.\n•\t Resources can be represented in a wide variety of data formats (JSON, XML, Atom, etc.).\n•\t You can make good use of HTTP cache and proxy servers to help you handle high \nloads and improve performance.\n•\t It reduces client/server coupling.\n•\t Browsers can interpret representations.\n•\t JavaScript can use representations.\n•\t A REST service can be consumed by applications written in different languages.\n•\t It is easy for new clients to use a RESTful application, even if the application was not \ndesigned specifically for a client.\n•\t Because of the statelessness of REST systems, multiple servers can be behind a load \nbalancer and provide services transparently, which means increased scalability.\n•\t Because of the uniform interface, documentation of the resources and basic API \noperations are unnecessary.\n•\t The hypermedia constraint assures that application processing transitions are always \nnavigable by clients, simply by following opaque server-provided links. Thus, the \nclient does not need to understand anything more than the data format. (And when \nJSON is used, the data format is quite obvious.)\n•\t Using REST does not imply specific libraries at the client level in order to \ncommunicate with the server. With REST, all that is needed is a network connection.\n197",
          "tables": [],
          "code_blocks": [
            "<firstName>John</firstName>\n      <lastName>Constantine</lastName>\n      <!-- other simple properties-->\n      ...\n      <hospital>\n               <code>134181</code>\n               <!-- other simple properties-->\n            ...\n      </hospital>\n      <identityCard>\n              <pnc>1351001134181</pnc>\n              <!-- other simple properties-->\n            ...\n      </identityCard>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 211,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nREST services can be secured, but as the interaction between the client and server is stateless, \ncredentials have to be embedded in every request header. Basic authentication is the easiest to implement \nwithout additional libraries (HTTP Basic, HTTP Digest, XML-DSIG, or XML-Encryption), but it guarantees \nthe lowest level of security. Basic authentication should never be used without TLS (formerly known as \nSSL) encryption because the credentials can be easily decoded otherwise. In Figure 5-6, you can see how \nbasic authentication is used when a client communicates with a RESTful application that requires basic \nauthentication.\nFigure 5-6.  Basic authentication when using RESTful systems\n! When a collection is expected, it is enough use: /persons (plural) and /hospitals (plural). the /all \nlink was used here because the original web controllers implemented in Chapter 3 were kept separate, so you \ncan access the interface and verify the changes you are doing via reSt in the browser. Basically, the reSt and \nweb functionalities are fully decoupled. and because the PersonsController was already mapped to /persons \nand the HospitalController was already mapped to /hospitals, there was no other way to do this but to \nmap the reSt controllers to different urls.\n! Snippets of code from the HospitalsRestController are not mentioned in the book, because the code is \nalmost identical to the one for the reSt methods in PersonsController; the only difference is the resource \ntype. But the code is available for you to practice on in the book’s code samples.\nOther common protocols used with RESTful systems are OAuth 1.0a and OAuth 2.0. Custom security \nimplementation should be used only if necessary, because the skill to understand cryptographic digital \nsignatures is quite difficult to master.\nThere may be a lot more to say about REST in general, but the introduction to REST must end here, \nas this chapter is about Spring and how Spring can be used to develop RESTful applications. And you will \nnotice that providing and consuming REST services with Spring is so easy that a deep understanding of REST \nis not actually needed.\n198",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 212,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nRESTful Applications Using Spring MVC\nTo learn how to implement and test RESTful services using MVC, module 09-pr-rest-practice was \ncreated. This module contains the implementation of the operations depicted in Figure 5-7.\nFigure 5-7.  RESTful architecture for the practice section\nRESTful Clients with Spring\nA RESTful application can be accessed by any type of client that can create the type of request supported \nby the application. To test a Spring RESTful application, Spring provides two classes: RestTemplate and \nAsyncRestTemplate.\nThe RestTemplate is Spring’s central class for synchronous client-side HTTP access. This class provides \na wide set of methods for each HTTP method, which can be used to access RESTful services and enforces \nREST principles.8 Figure 5-8 depicts a correspondence between HTTP methods and RestTemplate methods \nthat can be used to access REST services.\n8Javadoc for this class can be found at http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/ \nspringframework/web/client/RestTemplate.html.\n199",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 213,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nFigure 5-8.  RestTemplate api to HTTP methods correspondence\nAs you can see, the execute and exchange methods can be used for any type of REST calls, as long \nas the HTTP method is given as a parameter for the methods. All methods are polymorphic,9 and using \none or another depends on the requirements and the developer’s preferences. URI instances are returned \nto identify resources, and RestTemplate methods support URI templates. So, the following two calls are \nidentical:\n//using URI Template\nString url = \"http://localhost:8080/mvc-rest/rest-person/id/{id}\";\nPerson person = restTemplate.getForObject(url, Person.class, \"1\");\n \n// using URI\nString url = \"http://localhost:8080/mvc-rest/rest-personid/1\";\nPerson person = restTemplate.getForObject(url, Person.class);\n9Multiple methods with the same name, but different signatures are provided. Just check out the Spring API for \nRestTemplate at http://docs.spring.io/spring/docs/4.1.x/javadoc-api/org/springframework/web/client/\nRestTemplate.html.\n200",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 214,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nThe execute method can also be given a RequestCallback implementation as a parameter, which tells \nthe RestTemplate what to do with the request before sending it to the server. Considering this, a GET request \nfor a Person instance with id=1 could be written with the exchange method like this:\nString url =\"http://localhost:8080/mvc-rest/rest-person/id/{id}\";\n       Person person = restTemplate.execute(url, HttpMethod.GET,\n       new RequestCallback() {\n             @Override\n             public void doWithRequest(ClientHttpRequest request)\n                     throws IOException {\n                 HttpHeaders headers = request.getHeaders();\n                 headers.add(\"Accept\", MediaType.APPLICATION_JSON_VALUE);\n                 System.out.println(\"Request headers = \" + headers);\n            }\n      }, new HttpMessageConverterExtractor<Person>(Person.class,\n          restTemplate.getMessageConverters())\n               , new HashMap<String, Object>() {{\n          put(\"id\", \"1\");\n      }});\nObjects passed to and returned from the methods getForObject(), postForLocation(), and put() \nare converted to HTTP requests and from HTTP responses by HttpMessageConverters. Message converters \nare automatically detected and used by Spring in applications configured with <mvc:annotation-driven/> \nor @EnableWebMvc. In the code sample for this chapter, the representations are in JSON format, so \nMappingJackson2HttpMessageConverter is used. And because the message format is supported by default, \nthe HttpMessageConverterExtractor<T> is not necessary in the previous example. Also, if no Accept header \nis specified, all formats supported by Spring are considered. So in this case, RequestCallback becomes \nunnecessary too, so you can stick to the simpler restTemplate.getForObject method that was mentioned \nin the previous code snippet.\nSpeaking of message converters, restTemplate deals only with objects, so it internally converts \nresources to representations, and vice-versa, using message converter implementations of the \nHttpMessageConverter<T> interface. Spring comes with a default long list of supported message converters, \nbut if necessary, a developer can provide his own implementation of the HttpMessageConverter<T>. \nTable 5-2 provides a list of the most commonly used message converters and the datatype handled:\nTable 5-2.  Message Converters\nMessage Converter Data Type Observation\nStringHttpMessageConverter text/plain\nMappingJackson2HttpMessageConverter application/*+json Only if Jackson 2 is present\non the classpath\nAtomFeedHttpMessageConverter application/atom+xml Only if Rome is present on\nthe classpath\nRssChannelHttpMessageConverter application/rss+xml Only if Rome is present on\nthe classpath\nMappingJackson2XmlHttpMessageConverter application/*+xml Only if Jackson 2 is present\non the classpath\n201",
          "tables": [],
          "code_blocks": [
            "Person person = restTemplate.execute(url, HttpMethod.GET,\n       new RequestCallback() {\n             @Override\n             public void doWithRequest(ClientHttpRequest request)\n                     throws IOException {\n                 HttpHeaders headers = request.getHeaders();\n                 headers.add(\"Accept\", MediaType.APPLICATION_JSON_VALUE);\n                 System.out.println(\"Request headers = \" + headers);\n            }\n      }, new HttpMessageConverterExtractor<Person>(Person.class,\n          restTemplate.getMessageConverters())\n               , new HashMap<String, Object>() {{\n          put(\"id\", \"1\");\n      }});"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 215,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nTo use a restTemplate, you can define and initialize it directly where you need it, or declare a bean \nand inject it. restTemplate handles HTTP connections internally, so the developer does not have to write \nextra code with opening and closing connections. A different HTTP client can also be used, and Apache \nprovides an implementation that can be injected into a RestTemplate bean. This is highly recommended for \nproduction applications when authentication and HTTP connection pooling are usually needed.\nTo use the Apache Commons HttpClient, Spring provides a factory class named \nHttpComponentsClientHttpRequestFactory, which provides an HttpClient instance that uses a default \norg.apache.http.impl.conn.PoolingClientConnectionManager10 that is able to service connection \nrequests from multiple execution threads.\n<bean id=\"restTemplate\" class=\"o.s.web.client.RestTemplate\">\n    <property name=\"requestFactory\">\n        <bean class= \"o.s.http.client.HttpComponentsClientHttpRequestFactory\"/>\n    </property>\n</bean>\nConfiguring a RestTemplate bean using Java Configuration looks like this:\n\\\\in the @Configuration and @EnableWebMvc annotated class\n@Bean\n  public RestTemplate restTemplate() {\n      RestTemplate restTemplate = new RestTemplate();\n      restTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory());\n      return restTemplate;\n}\nOther examples of restTemplate usage are in the following code snippet:\n// GET request to retrieve all persons born at a hospital with a specific code\nString url = \"http://localhost:8080/mvc-rest/rest-hospitals/{code}/persons\";\n \nPerson[] persons = restTemplate.getForObject(url, Person[].class, \"134181\");\n \n// POST request to create a person\nPerson person = buildPerson();\nfinal HttpHeaders headers = new HttpHeaders();\nheaders.setContentType(MediaType.APPLICATION_JSON);\n \nfinal HttpEntity<Person> personRequest = new HttpEntity<>(person, headers);\nString url = \"http://localhost:8080/mvc-rest/rest-persons/create\";\n// this method returns the created resource\nPerson newPerson = this.restTemplate.postForObject(url, personRequest, Person.class);\n//this method returns the URI of the created resource\nURI uri = this.restTemplate.postForLocation(url, personRequest, Person.class);\n \n//DELETE request to delete a person by id\nString url = \"http://localhost:8080/mvc-rest/rest-persons/delete/23\";\nrestTemplate.delete(url);\n10The class is part of the Apache http-client library. JavaDoc API can be accessed at http://hc.apache.org/ \nhttpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/ conn/PoolingClientConnection \nManager.html.\n202",
          "tables": [],
          "code_blocks": [
            "<property name=\"requestFactory\">\n        <bean class= \"o.s.http.client.HttpComponentsClientHttpRequestFactory\"/>\n    </property>",
            "RestTemplate restTemplate = new RestTemplate();\n      restTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory());\n      return restTemplate;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 216,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nREST services are used most commonly by AJAX components in a web application, and currently all \nHTTP methods are supported in AJAX. But most browsers do not support any other methods besides GET \nand POST in HTML forms. To use them in a form, Spring has introduced hidden methods. Basically, a \nhidden input is added to a form with a regular POST method. If the POST request is to be treated as a PUT \nrequest, the value of the field will be equal to this method name, as shown in the code sample below. A filter \ninterceptor intercepts the request, searches for that parameter, and modifies the request accordingly before \nsending it to the appropriate handler.\nFor this to work, the Spring form has the method attribute value set to the desired HTTP method, and \nthe resulting HTML form has a hidden field added:\n<!-- Spring form -->\n<sf:form method=\"put\" action=\"..\" modelAttribute=\"..\">\n    ...\n</sf:form>\n \n<!-- HTML form -->\n<form method=\"post\" action=\"...\">\n     <input type=\"hidden\" name=\"method\" value=\"put\" />\n     ...\n</form>\nThe filter interceptor that takes care of intercepting requests and modifying the methods is the \nHiddenHttpMethodFilter, which can be configured in a web.xml file or in a class implementing \nWebApplicationInitializer.\n<!-- in web.xml -->\n  <!-- Enables use of HTTP methods PUT and DELETE -->\n      <filter>\n           <filter-name>httpMethodFilter</filter-name>\n           <filter-class>o.s.web.filter.HiddenHttpMethodFilter</filter-class>\n      </filter>\n \n      <filter-mapping>\n          <filter-name>httpMethodFilter</filter-name>\n          <url-pattern>/*</url-pattern>\n      </filter-mapping>\n \n\\\\in class extending AbstractDispatcherServletInitializer\n\\\\ or AbstractAnnotationConfigDispatcherServletInitializer\n@Override\nprotected Filter[] getServletFilters() {\n      return new Filter[] { new HiddenHttpMethodFilter()};\n}\nAsynchronous REST Calls\nAt the beginning of this section, AsyncRestTemplate was mentioned. This class can be used to create Spring \nREST clients that make asynchronous calls to a REST service. The AsyncRestTemplate class is nothing \nother than a wrapper class for RestTemplate that provides the asynchronous behavior via a set of methods \n(analogous to the ones in RestTemplate) that return Future<T> wrappers (or ListenableFuture<F> \n203",
          "tables": [],
          "code_blocks": [
            "...",
            "<input type=\"hidden\" name=\"method\" value=\"put\" />\n     ...",
            "<filter>\n           <filter-name>httpMethodFilter</filter-name>\n           <filter-class>o.s.web.filter.HiddenHttpMethodFilter</filter-class>\n      </filter>\n \n      <filter-mapping>\n          <filter-name>httpMethodFilter</filter-name>\n          <url-pattern>/*</url-pattern>\n      </filter-mapping>",
            "return new Filter[] { new HiddenHttpMethodFilter()};"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 217,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nthat extends Future<T> when a callback method is needed) instead of concrete data. An example of an \nasynchronous GET request can be found in the AsyncRestTemplateTest class, in the 07-pr-rest-solution. \nIn the same class, you can also find an example with a callback.\nprivate static final String PERSON_BASE_URL =\n         \"http://localhost:8080/mvc-rest/rest-persons/id/{id}\";\nAsyncRestTemplate asyncRestTemplate = new AsyncRestTemplate();\n...\n \nFuture<ResponseEntity<Person>> futurePerson =\n      asyncRestTemplate.exchange(url, HttpMethod.GET, entity, Person.class, \"5\");\n  //waiting a little, to give time to the async call to complete\n         Thread.sleep(1000L);\n \nResponseEntity<Person> result = futurePerson.get();\nPerson person = result.getBody();\nassertNotNull(person);\n \n//callback example\nListenableFuture<ResponseEntity<Person>> futurePerson =\n       asyncRestTemplate.exchange(url, HttpMethod.GET, entity, Person.class, \"5\");\n  futurePerson.addCallback(new ListenableFutureCallback<ResponseEntity<Person>>() {\n               @Override\n               public void onSuccess(ResponseEntity result) {\n                Person person = (Person) result.getBody();\n                assertNotNull(person);\n                }\n \n                @Override\n                public void onFailure(Throwable t) {\n                    logger.error(\"------> Async call failure!\", t);\n                }\n});\nImplementing REST with Spring MVC\nThere are multiple Java frameworks available for implementing RESTful applications: Spark, Restlet,  \nJAX-RS(Java EE), and RESTEasy, but Spring MVC is the easiest to use. This section contains a lot of \ninformation and code snippets to convince you that this affirmation is true. REST support was added to \nSpring MVC in version 3.0, and although developing RESTful applications was always easy, in version 4.x \nthings have become even more practical.\nAmong the aforementioned frameworks, JAX-RS is shipped with out-of-the-box Spring Integration. \nThis framework encapsulates the Java API for RESTful web services (JAX-RS, defined in JSR 311). Jersey, the \nreference implementation of JAX-RS, implements support for the annotations defined in JSR 311, making \nit easy for developers to build RESTful web services by using the Java programming language. It is focused \nmore on application-to-application communication, so the focus is not on browser clients. That’s the \namazing thing about Spring MVC—a Spring RESTful application does not care about its client type at all.\n204",
          "tables": [],
          "code_blocks": [
            "\"http://localhost:8080/mvc-rest/rest-persons/id/{id}\";",
            "asyncRestTemplate.exchange(url, HttpMethod.GET, entity, Person.class, \"5\");\n  //waiting a little, to give time to the async call to complete\n         Thread.sleep(1000L);",
            "asyncRestTemplate.exchange(url, HttpMethod.GET, entity, Person.class, \"5\");\n  futurePerson.addCallback(new ListenableFutureCallback<ResponseEntity<Person>>() {\n               @Override\n               public void onSuccess(ResponseEntity result) {\n                Person person = (Person) result.getBody();\n                assertNotNull(person);\n                }\n \n                @Override\n                public void onFailure(Throwable t) {\n                    logger.error(\"------> Async call failure!\", t);\n                }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 218,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nSpring MVC provides the following resources to build RESTful applications:\n•\t The potential to declare status codes.\n•\t URI templates.\n•\t Content negotiation.\n•\t Many message converters offer out-of-the-box support.\n•\t RestTemplate and AsyncRestTemplate classes are used for easily creating client \napplications or for testing RESTful application services.\n•\t Browsers are supported as clients, although HTTP method conversion is necessary \nfor PUT and DELETE methods. When making REST requests from a web page, \njQuery can be used (this is covered in Chapter 6).\nA few of these have already been mentioned in the previous section, as they were involved in creating \nREST clients; the others are covered in this section.\nTo develop a RESTful service class with Spring MVC, you have to do the most obvious thing: create a \ncontroller that contains handler methods that return resources representations instead of views, which are \nthe actual response body. In Spring 3.0, we had to do the following:\n@Controller\n@RequestMapping(value = \"/rest-persons\")\npublic class PersonsRestController {\n \n@Autowired\nPersonManager personManager;\n \n      @ResponseStatus(HttpStatus.OK)\n      @RequestMapping(value = \"/id/{id}\", method = RequestMethod.GET)\n       public @ResponseBody Person getPersonById(@PathVariable Long id)\n            throws NotFoundException {\n           Person person = personManager.findById(id);\n           if (person == null) {\n               throw new NotFoundException(Person.class, id.toString());\n           }\n           return person;\n      }\n}\nLooks like any MVC controller, right? The only difference is the @ResponseBody that indicates a method \nreturn value should be bound to the web response body. The advantage here is that, in the same controller \nyou can also have methods that are not used to provide REST representations, having all the people \nmanagement data in one place. But, because it is a good practice to decouple code with different scopes, \nin Spring MVC 4.0 the @RestController was introduced. This annotation is conveniently annotated with \n205",
          "tables": [],
          "code_blocks": [
            "@ResponseStatus(HttpStatus.OK)\n      @RequestMapping(value = \"/id/{id}\", method = RequestMethod.GET)\n       public @ResponseBody Person getPersonById(@PathVariable Long id)\n            throws NotFoundException {\n           Person person = personManager.findById(id);\n           if (person == null) {\n               throw new NotFoundException(Person.class, id.toString());\n           }\n           return person;\n      }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 219,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\n@Controller and @ResponseBody, which practically means that if you annotate a class with it, all handler \nmethods are transparently annotated with @ResponseBody. Also, the purpose of this controller becomes \nquite obvious—it handles only REST requests. Thus, the preceding code becomes the following:\n@RestController\n@RequestMapping(value = \"/rest-persons\")\npublic class PersonsRestController extends BaseController {\n \n      @ResponseStatus(HttpStatus.OK)\n      @RequestMapping(value = \"/id/{id}\", method = RequestMethod.GET)\n       public Person getPersonById(@PathVariable Long id) throws NotFoundException {\n       ... // identical content as above\n      }\n}\nAnd this is all. All methods defined inside this class can then be called from REST clients, and \nthey will receive the requested representations. What happens in the background—the way that the \nDispatcherServlet is involved—is depicted in Figure 5-9.\nFigure 5-9.  Spring MVC RESTFul Container\n206",
          "tables": [],
          "code_blocks": [
            "@ResponseStatus(HttpStatus.OK)\n      @RequestMapping(value = \"/id/{id}\", method = RequestMethod.GET)\n       public Person getPersonById(@PathVariable Long id) throws NotFoundException {\n       ... // identical content as above\n      }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 220,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nSo basically, the controller methods return data directly to the client—data that no longer needs \nto be processed in order to render a view. Every time a request is mapped to a handler method that has \nparameters annotated with @RequestBody, or the method is annotated with @ResponseBody, Spring loops \nover all HttpMessageConverters; it is seeking the first that fits the given MIME type and class, and then uses \nit for the actual conversion.\nMapping requests to methods is the same as with web controllers. All annotations applicable in web \nhandler methods are applicable in REST handler methods too: @PathVariable, @Valid, and so forth.  \n@RequestParam can be used too, but this would break the REST constraints mentioned at the beginning of \nthe chapter.\nHTTP Status Codes\nWhen a web application returns a response, that response has a status code that describes a certain state \nof the returned resource or the result of the operation that the request triggered on the server. The most \nfamiliar is probably the 404 Not Found status code that is returned when a requested resource cannot \nbe found. A full list of HTTP status codes can be found on Wikipedia, which you should look at if you are \ncurious about and unfamiliar with HTTP status codes.11\nRESTful applications use HTTP status codes to communicate with their clients. With Spring MVC, the \nstatus code of a response can be set easily using the @ResponseStatus annotation. This annotation can \nreceive as a value any of the constants defined in Spring class HttpStatus. Table 5-3 contains the most \ncommon response statuses used in RESTful applications.\nHere are some examples of @ResponseStatus annotated REST handlers that you will work with in the \npractice project for this chapter:\n@ResponseStatus(HttpStatus.NO_CONTENT)\n@RequestMapping(value = \"/delete/{pnc}\", method = RequestMethod.DELETE)\npublic void deletePerson(@PathVariable String pnc) throws NotFoundException {\n  ...\n}\n \n@ResponseStatus(HttpStatus.CREATED)\n@RequestMapping(value = \"/create\", method = RequestMethod.POST,\n             produces = MediaType.APPLICATION_JSON_VALUE,\n             consumes = MediaType.APPLICATION_JSON_VALUE)\npublic Person createPerson(@RequestBody @Valid Person newPerson) {\n     ...\n}\n \n@ResponseStatus(HttpStatus.OK)\n    @RequestMapping(value = \"/all\", method = RequestMethod.GET,\n    produces = MediaType.APPLICATION_JSON_VALUE)\npublic List<Person> getAll() {\n...\n}\n11See http://en.wikipedia.org/wiki/List_of_HTTP_status_codes.\n207",
          "tables": [],
          "code_blocks": [
            "produces = MediaType.APPLICATION_JSON_VALUE,\n             consumes = MediaType.APPLICATION_JSON_VALUE)",
            "...",
            "@RequestMapping(value = \"/all\", method = RequestMethod.GET,\n    produces = MediaType.APPLICATION_JSON_VALUE)"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 221,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nTable 5-3.  HTTP Status Codes\nHTTP Status HttpStatus Constant Observation\n200 OK Successful GET  with  returned content.\n201 CREATED Successful PUT or POST; location header should \ncontain URI or new resource.\n204 NO_CONTENT Empty  response; after\nsuccessful PUT or DELETE.\n404 NOT_FOUND Resource was not found.\n403 FORBIDDEN Server is refusing to respond to the request, because \nthe response is not authorized.\n405 METHOD_NOT_ALLOWED HTTP method is not supported for the resource \nidentified by the Request-URI.\n409 CONFLICT Problems when making changes, when PUT or POST \ntry  to  save  data that already exists and is marked as \nunique\n415 UNSUPPORTED_MEDIA_TYPE The server is refusing to service the request because \nthe entity of the request is in a format not supported \nby the requested resource for the requested method.\n! the \"produces\" and \"consumes\" properties are covered later in the chapter.\n! normally, void or null returning methods result in a default view name determined by the request’s path \ninformation (from @RequestMapping annotations on the class and method, as explained in Chapter 3).the  \n@ResponseStatus overrides the default behavior, causing a null ModelAndView to be used, which indicates \nthat the response has been handled by the controller method already. So, obviously the @ResponseStatus is \nmandatory for a reStful handler method returning void or null.\nException Handling\nThe status codes can be used for exception handlers too. Yes, RESTful handlers can also throw exceptions, \nand they have to be properly handled. Similar to Spring MVC web specific controllers, exception handlers \ncan be defined either in the body of the REST controller, or they can be defined in class annotated with  \n@ControllerAdvice. And the same ExceptionHandler annotation is used to annotate the exception handler \nmethods. In the next code snippet, such a class was defined with two exception handlers for different types \nof exceptions, and the handlers were limited to the com.pr.rest package, using the basePackages attribute, \nin order to handle exceptions thrown only by controllers in that package.\n208",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 222,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\n  @ControllerAdvice(basePackages = \"com.pr.rest\")\npublic class RestExceptionProcessor {\n     private Logger logger = LoggerFactory.getLogger(RestExceptionProcessor.class);\n \n     //Maps IllegalArgumentExceptions to a 404 Not Found HTTP status code\n    @ResponseStatus(value = HttpStatus.NOT_FOUND,\n           reason = \"This entity is not found in the system\")\n    @ExceptionHandler({NotFoundException.class})\n    public void handleNotFound(NotFoundException nfe) {\n \n      // just return empty 404\n      logger.info(\"-----> Entity \" + nfe.getObjType() + \" with identifier\"\n          + nfe.getObjIdentifier() + \"not found.\");\n}\n \n     // Maps DataIntegrityViolationException to a 409 Conflict HTTP status code.\n     @ResponseStatus(value = HttpStatus.CONFLICT,\n            reason = \"Another entity with the same identity exists\")\n     @ExceptionHandler({DataIntegrityViolationException.class})\n     public void handleAlreadyExists() {\n            // just return empty 409\n            logger.info(\"-----> Entity save operation failure\");\n     }\n}\nContent can be returned using an exception handler, but in this case, the client must be implemented to \nhandle the response.\n@ExceptionHandler(NotFoundException.class)\n    @ResponseStatus(value= HttpStatus.NOT_FOUND)\n    @ResponseBody\n    public JsonError personNotFound(HttpServletRequest req, NotFoundException ex) {\n        Locale locale = LocaleContextHolder.getLocale();\n        String errorMessage = messageSource.\n                        getMessage(\"error.no.person.id\", null, locale);\n \n        errorMessage += ex.getObjIdentifier();\n        String errorURL = req.getRequestURL().toString();\n \n        return new JsonError(errorURL, errorMessage);\n}\n \n  ...\npublic class JsonError {\n    private String url;\n    private String message;\n \n    public JsonError(String url, String message) {\n       this.url = url;\n       this.message = message;\n    }\n \n    // getters and setters\n}\n209",
          "tables": [],
          "code_blocks": [
            "private Logger logger = LoggerFactory.getLogger(RestExceptionProcessor.class);\n \n     //Maps IllegalArgumentExceptions to a 404 Not Found HTTP status code\n    @ResponseStatus(value = HttpStatus.NOT_FOUND,\n           reason = \"This entity is not found in the system\")\n    @ExceptionHandler({NotFoundException.class})\n    public void handleNotFound(NotFoundException nfe) {\n \n      // just return empty 404\n      logger.info(\"-----> Entity \" + nfe.getObjType() + \" with identifier\"\n          + nfe.getObjIdentifier() + \"not found.\");",
            "// Maps DataIntegrityViolationException to a 409 Conflict HTTP status code.\n     @ResponseStatus(value = HttpStatus.CONFLICT,\n            reason = \"Another entity with the same identity exists\")\n     @ExceptionHandler({DataIntegrityViolationException.class})\n     public void handleAlreadyExists() {\n            // just return empty 409\n            logger.info(\"-----> Entity save operation failure\");\n     }",
            "@ResponseStatus(value= HttpStatus.NOT_FOUND)\n    @ResponseBody\n    public JsonError personNotFound(HttpServletRequest req, NotFoundException ex) {\n        Locale locale = LocaleContextHolder.getLocale();\n        String errorMessage = messageSource.\n                        getMessage(\"error.no.person.id\", null, locale);\n \n        errorMessage += ex.getObjIdentifier();\n        String errorURL = req.getRequestURL().toString();\n \n        return new JsonError(errorURL, errorMessage);",
            "...",
            "private String url;\n    private String message;\n \n    public JsonError(String url, String message) {\n       this.url = url;\n       this.message = message;\n    }\n \n    // getters and setters"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 223,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nThe “produces” and “consumes” Properties\nIn the previous examples, the consumes and produces annotation properties of the @RequestMapping were \nused. These two attributes are used to narrow the primary mapping for a request. The consumes attribute \ndefines the consumable media types of the mapped request (defined on the server) and the value of the \nContent-Type header (defined on the client side) must match at least one of the values of this property in \norder for a method to handle a specific REST request. Let’s say, for example, that in the REST client, the \nfollowing headers were set:\nfinal HttpHeaders headers = new HttpHeaders();\nfinal String url = \"http://localhost:8080/mvc-rest/rest-persons/create\";\n\\\\\"application/json\"\nheaders.setContentType(MediaType.APPLICATION_JSON);\nfinal HttpEntity<Person> personRequest = new HttpEntity<>(person, headers);\n        Person newPerson =\n             restTemplate.postForObject(url, personRequest, Person.class);\nOn the server, the following REST handler would be mapped to process this request:\n@ResponseStatus(HttpStatus.CREATED)\n@RequestMapping(value = \"/create\", method = RequestMethod.POST,\n  produces = MediaType.APPLICATION_JSON_VALUE,\n  consumes = {MediaType.APPLICATION_JSON_VALUE,\n  //Public constant media type for {@code application/octet-stream}.\n    MediaType.APPLICATION_OCTET_STREAM})\npublic Person createPerson(@RequestBody @Valid Person newPerson) {\n...\n}\nThe produces attribute defines the producible media types of the mapped request, narrowing the \nprimary mapping. The value of the Accept header (on the client side) must match at least one of the values \nof this property in order for a method to handle a specific REST request. Let’s say, for example, that in the \nREST client there is the following request:\nfinal  String  url  =  \"http://localhost:8080/mvc-rest/rest-persons/id/{id}\";\nPerson  person   =  restTemplate.execute(url,  HttpMethod.GET,  request  ->  {\n            HttpHeaders headers = request.getHeaders();\n            headers.add(\"Accept\", MediaType.APPLICATION_JSON_VALUE);\n        }, new HttpMessageConverterExtractor<>(Person.class,\n               restTemplate.getMessageConverters())\n                 , new HashMap<String, Object>() {{\n          put(\"id\", \"1\");\n        }});\n! as mentioned, the code for making a reSt request for a person can be far simpler than what was depicted \nearlier. the execute method was used here to show how this method can be used.\n210",
          "tables": [],
          "code_blocks": [
            "Person newPerson =\n             restTemplate.postForObject(url, personRequest, Person.class);",
            "MediaType.APPLICATION_OCTET_STREAM})",
            "HttpHeaders headers = request.getHeaders();\n            headers.add(\"Accept\", MediaType.APPLICATION_JSON_VALUE);\n        }, new HttpMessageConverterExtractor<>(Person.class,\n               restTemplate.getMessageConverters())\n                 , new HashMap<String, Object>() {{\n          put(\"id\", \"1\");\n        }});"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 224,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nOn the server, the following REST handler would be mapped to process this request:\n@ResponseStatus(HttpStatus.OK)\n@RequestMapping(value = \"/id/{id}\", method = RequestMethod.GET,\n    produces = MediaType.APPLICATION_JSON_VALUE)\npublic Person getPersonById(@PathVariable Long id) throws NotFoundException {\n        return personManager.findById(id)\n}\nAccessing Servlet Environment and Request Data\nBecause RESTful controllers are run in a servlet environment, and the interface is the DispatcherServlet, \nthe servlet environment properties can be injected and accessed in the same manner presented in Chapter 3.  \nThe RESTful handler methods can have flexible signatures. HttpServletRequest or HttpServletResponse \ncan be used as parameters, and Spring will take care of populating them for you. The @PathVariable and \n@RequestParam annotations can be used to tell Spring to inject request data automatically. @Valid can be \nused to validate resources submitted with POST or PUT. And so on. Even SpEL expressions are supported. \nThe next example depicts a REST handler for a POST method, which creates a person and adds the URI of \nthe new resource; this is built from the original request URL that is populated by Spring as a value for the \nLocation header:\n@ResponseStatus(HttpStatus.CREATED)\n@RequestMapping(value = \"/create2\", method = RequestMethod.POST)\n    public void createPerson2(@RequestBody @Valid Person newPerson,\n          @Value(\"#{request.requestURL}\")StringBuffer originalUrl,\n          HttpServletResponse response) {\n \n          Person person = personManager.save(newPerson);\n          logger.info(\"-----> PERSON: \" + person);\n          response.setHeader(\"Location\",\n                 getLocationForPersonResource(originalUrl, person.getId()));\n}\n \n//Determines URL of person resource based on the full URL of the given request,\n//appending the path info with the given childIdentifier using a UriTemplate.\nprotected static String getLocationForPersonResource\n     (StringBuffer url, Object childIdentifier) {\n     String newURL = url.toString();\n     newURL = newURL.replace(\"create2\", \"id/{id}\");\n     UriTemplate template = new UriTemplate(newURL);\n     return template.expand(childIdentifier).toASCIIString();\n}\n211",
          "tables": [],
          "code_blocks": [
            "produces = MediaType.APPLICATION_JSON_VALUE)",
            "return personManager.findById(id)",
            "public void createPerson2(@RequestBody @Valid Person newPerson,\n          @Value(\"#{request.requestURL}\")StringBuffer originalUrl,\n          HttpServletResponse response) {\n \n          Person person = personManager.save(newPerson);\n          logger.info(\"-----> PERSON: \" + person);\n          response.setHeader(\"Location\",\n                 getLocationForPersonResource(originalUrl, person.getId()));",
            "(StringBuffer url, Object childIdentifier) {\n     String newURL = url.toString();\n     newURL = newURL.replace(\"create2\", \"id/{id}\");\n     UriTemplate template = new UriTemplate(newURL);\n     return template.expand(childIdentifier).toASCIIString();"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 225,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nAnother method for accessing request and response is the HttpEntity<T> class and its subclasses: \nRequestEntity<T> and ResponseEntity<T>. By using these classes, you can get access to the request and \nresponse body. RequestEntity<T> and ResponseEntity<T> can be used as follows:\n•\t In the REST client to encapsulate every detail about a REST request that is made by \ncalling restTemplate.exchange.\n                final String url = \"http://localhost:8080/mvc-rest/rest-persons/id/{id}\";\n \n                final RequestEntity<Person> entity = RequestEntity.post(new URI(url))\n                               .accept(MediaType.APPLICATION_JSON)\n                               .contentType(MediaType.APPLICATION_JSON)\n                //setting a custom header that will be accessed in the handler method\n                               .header(\"custom\", \"true\")\n                               .body(person);\n \n                      ResponseEntity<Person> response =  restTemplate.exchange(entity, \nPerson.class);\n                      Person newPerson = response.getBody();\n \n                     //get URI location for the Person created\n                     HttpHeaders headers = response.getHeaders();\n                     URI uri = headers.getLocation();\n•\t In the RESTful handler method to access request headers, read the body of a request, \nand write headers to the response stream.\n                @ResponseStatus(HttpStatus.CREATED)\n                @RequestMapping(value = \"/create3\", method = RequestMethod.POST)\n                public ResponseEntity<Person> handle(HttpEntity<Person> requestEntity,\n                           @Value(\"#{request.requestURL}\") StringBuffer originalUrl)\n                              throws UnsupportedEncodingException {\n                     // will return \"true\"\n                      String requestHeader = requestEntity.getHeaders().getFirst(\"custom\");\n                    //we are just making sure the header is the one sent from the client\n                     assertTrue(Boolean.parseBoolean(requestHeader));\n \n                     Person person = requestEntity.getBody();\n                     Hospital hospital = hospitalManager.\n                          findByCode(person.getHospital().getCode());\n                     person.setHospital(hospital);\n                     Person newPerson = personManager.save(person);\n \n                     HttpHeaders responseHeaders = new HttpHeaders();\n                     responseHeaders.set(\"Location\",\n                            getLocationForPersonResource(originalUrl, person.getId()));\n                     return new ResponseEntity<>(newPerson, responseHeaders,\n                         HttpStatus.CREATED);\n           }\n212",
          "tables": [],
          "code_blocks": [
            "final String url = \"http://localhost:8080/mvc-rest/rest-persons/id/{id}\";\n \n                final RequestEntity<Person> entity = RequestEntity.post(new URI(url))\n                               .accept(MediaType.APPLICATION_JSON)\n                               .contentType(MediaType.APPLICATION_JSON)\n                //setting a custom header that will be accessed in the handler method\n                               .header(\"custom\", \"true\")\n                               .body(person);\n \n                      ResponseEntity<Person> response =  restTemplate.exchange(entity,",
            "Person newPerson = response.getBody();\n \n                     //get URI location for the Person created\n                     HttpHeaders headers = response.getHeaders();\n                     URI uri = headers.getLocation();",
            "@ResponseStatus(HttpStatus.CREATED)\n                @RequestMapping(value = \"/create3\", method = RequestMethod.POST)\n                public ResponseEntity<Person> handle(HttpEntity<Person> requestEntity,\n                           @Value(\"#{request.requestURL}\") StringBuffer originalUrl)\n                              throws UnsupportedEncodingException {\n                     // will return \"true\"\n                      String requestHeader = requestEntity.getHeaders().getFirst(\"custom\");\n                    //we are just making sure the header is the one sent from the client\n                     assertTrue(Boolean.parseBoolean(requestHeader));\n \n                     Person person = requestEntity.getBody();\n                     Hospital hospital = hospitalManager.\n                          findByCode(person.getHospital().getCode());\n                     person.setHospital(hospital);\n                     Person newPerson = personManager.save(person);\n \n                     HttpHeaders responseHeaders = new HttpHeaders();\n                     responseHeaders.set(\"Location\",\n                            getLocationForPersonResource(originalUrl, person.getId()));\n                     return new ResponseEntity<>(newPerson, responseHeaders,\n                         HttpStatus.CREATED);\n           }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 226,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\n! as with @RequestBody and @ResponseBody, Spring uses HttpMessageConverter<T> to convert to and from \nthe request and response streams. the HttpMessageConverter<T> and supported implementations were \ncovered in the “reStful applications using Spring MvC” section.\nAsynchronous REST Services Using @Async Annotated Methods\nThe “Asynchronous REST Calls” section showed how to make an asynchronous REST call using the \nAsyncRestTemplate class. In that case, the client did the rest call and could then focus on other operations \nuntil the Future object returned the concrete data.\nBut asynchronous calls can be made in a different way using @Async annotated methods. This \nannotation marks a method as a candidate for asynchronous execution. It can also be used at type level; \nin this case, all methods in the class are considered asynchronous. Asynchronous methods can have any \nsignature and any parameter types. There are absolutely no restrictions about this. However, the return type \nis restricted to void and Future (and implementations of this interface). Immediately after a client calls an \nasynchronous method, the invocation returns and the execution of the method is submitted to a Spring \nTaskExecutor12. Asynchronous methods that return void are used when the client does not expect a reply.\nBy default, to execute a method annotated with @Async, the executor that is used is the one supplied to \nthe <task:annotation-driven/> element. (The Spring Task namespace was introduced in Spring 3.0 to help \nconfigure TaskExecutor and TaskScheduler instances.)\n<task:annotation-driven executor=\"prExecutor\"/>\n<task:executor id=\"prExecutor\" pool-size=\"100\"/>\nIn Java Configuration, support for @Async can be enabled using @EnableAsync in one of the \nconfiguration classes of the application—those annotated with @Configuration. To provide a different \nexecutor, like in the preceding XML example, the class must implement org.springframework.scheduling.\nannotation.AsyncConfigurer and provide a concrete implementation for the getAsyncExecutor method.\n@Configuration\n@EnableAsync\n public class AppConfig implements AsyncConfigurer {\n \n      @Override\n      public Executor getAsyncExecutor() {\n          ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n          executor.setCorePoolSize(100);\n          executor.initialize();\n          return executor;\n      }\n      ...\n}\n12Spring’s TaskExecutor interface is equivalent to the java.util.concurrent.Executor interface and extends it \nwithout modifying the API in order for clients to declare a dependency on an executor and receive any TaskExecutor \nimplementation. It was created to remove the need for Java libraries when using thread pools.\n213",
          "tables": [],
          "code_blocks": [
            "@Override\n      public Executor getAsyncExecutor() {\n          ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n          executor.setCorePoolSize(100);\n          executor.initialize();\n          return executor;\n      }\n      ..."
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 227,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nAlso the @Async annotation has a value attribute to indicate that an executor other than the default \nshould be used when the executor13 is defined as a bean:\n@Async(\"otherExecutor\")\npublic Future<Person> findPerson(Long id) throws InterruptedException {\n    String url = \"http://localhost:8080/mvc-rest/rest-persons/id/{id}\";\n    Person person = restTemplate.getForObject(url, Person.class, \"1\");\n    Thread.sleep(1000L);\n    return new AsyncResult<>(person);\n}\n \n<!-- in a spring configuration file we define an Executor bean -->\n  <bean id=\"otherExecutor\"\n         class=\"o.s.scheduling.concurrent.ThreadPoolTaskExecutor\"\n         init-method=\"initialize\" destroy-method=\"shutdown\">\n         <property name=\"corePoolSize\" value=\"100\"/>\n  </bean>\n \n// in a class annotated with @Configuration\n@Bean(name=\"otherExecutor\", destroyMethod = \"shutdown\",\n      initMethod = \"initialize\")\n     ThreadPoolTaskExecutor getExecutor() {\n         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n         executor.setCorePoolSize(100);\n         return executor;\n     }\n! an example of an @Async annotated method and usage can be found in 07-pr-rest-solution. the example \nis covered in the “practical exercise” section.\nIntercepting REST Calls\nThere is a section in Chapter 3 about handler interceptors for controller methods, which mentions that REST \nrequests can be intercepted too, but the REST interceptors have to implement the ResponseBodyAdvice<T> \nor extend one of its subclasses and provide the proper implementation for the beforeBodyWrite and \nsupports.\nWhen extending JsonViewResponseBodyAdvice or AbstractMappingJacksonResponseBodyAdvice, \nthe beforeBodyWriteInternal method must be implemented, because the \nAbstractMappingJacksonResponseBodyAdvice class provides a concrete implementation for beforeBodyWrite, \nwhich calls beforeBodyWriteInternal after creating a proper JSON body container. ResponseBodyAdvice<T> \nimplementation allows you to customize the response after the execution of a @ResponseBody or a \nResponseEntity<T> method, but before being passed for conversion to an HTTP message converter. These \ninterceptors are annotated with @ControllerAdvice and are automatically picked up and used by Spring.\n13You can see all methods available for a ThreadPoolTaskExecutor at http://docs.spring.io/spring/docs/4.1.x/\njavadoc-api/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.html.\n214",
          "tables": [],
          "code_blocks": [
            "String url = \"http://localhost:8080/mvc-rest/rest-persons/id/{id}\";\n    Person person = restTemplate.getForObject(url, Person.class, \"1\");\n    Thread.sleep(1000L);\n    return new AsyncResult<>(person);",
            "class=\"o.s.scheduling.concurrent.ThreadPoolTaskExecutor\"\n         init-method=\"initialize\" destroy-method=\"shutdown\">\n         <property name=\"corePoolSize\" value=\"100\"/>\n  </bean>",
            "initMethod = \"initialize\")\n     ThreadPoolTaskExecutor getExecutor() {\n         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n         executor.setCorePoolSize(100);\n         return executor;\n     }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 228,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nIn the 07-pr-rest-solution module, such an interceptor is implemented for you:\n@ControllerAdvice(basePackages = \"com.pr.rest\")\n//this interceptor is retricted to the classes in package \"com.pr.rest\"\npublic class AuditRestInterceptor\n    extends JsonViewResponseBodyAdvice {\n    private Logger logger = LoggerFactory.getLogger(AuditRestInterceptor.class);\n \n   @Override\n   public boolean supports(MethodParameter returnType, Class converterType) {\n        logger.info(\"-----> Audit REST interceptor supports(Person.class) ? \"\n              + Person.class.isAssignableFrom(returnType.getParameterType()));\n        return (super.supports(returnType, converterType)\n                && returnType.getMethodAnnotation(JsonView.class) != null);\n \n   }\n \n....\n}\nThe supports method tests if the AuditRestInterceptor supports the given controller method return \ntype and the selected HttpMessageConverter<T> type.\nThe value logged in the preceding supports method implementation is true if the controller method \nreturn type is assignable to a reference of type Person.\n  @ControllerAdvice(basePackages = \"com.pr.rest\")\n//this interceptor is retricted to the classes in package \"com.pr.rest\"\npublic class AuditRestInterceptor\n    extends JsonViewResponseBodyAdvice {\n    private Logger logger = LoggerFactory.getLogger(AuditRestInterceptor.class);\n    ...\n \n    @Override\n    protected void beforeBodyWriteInternal(MappingJacksonValue bodyContainer,\n           MediaType contentType, MethodParameter returnType,\n           ServerHttpRequest request, ServerHttpResponse response) {\n        logger.info(\"-----> Audit REST interceptor beforeBodyWrite\");\n         response.getHeaders().add(HttpHeaders.CONTENT_ENCODING, \"UTF-8\");\n       super.beforeBodyWriteInternal(bodyContainer, contentType, returnType,\n             request, response);\n    }\n}\nIn the beforeBodyWriteInternal, the CONTENT_ENCODING header is added to the response, so the \npresence of this header can be tested in the client and you can make sure that the interceptor did its job. \nAfter that, the super.beforeBodyWriteInternal() is called to keep the original behavior of the extended \nclass, which is to modify the response body before being converted and sent back to the client.\n215",
          "tables": [],
          "code_blocks": [
            "extends JsonViewResponseBodyAdvice {\n    private Logger logger = LoggerFactory.getLogger(AuditRestInterceptor.class);\n \n   @Override\n   public boolean supports(MethodParameter returnType, Class converterType) {\n        logger.info(\"-----> Audit REST interceptor supports(Person.class) ? \"\n              + Person.class.isAssignableFrom(returnType.getParameterType()));\n        return (super.supports(returnType, converterType)\n                && returnType.getMethodAnnotation(JsonView.class) != null);\n \n   }",
            "extends JsonViewResponseBodyAdvice {\n    private Logger logger = LoggerFactory.getLogger(AuditRestInterceptor.class);\n    ...\n \n    @Override\n    protected void beforeBodyWriteInternal(MappingJacksonValue bodyContainer,\n           MediaType contentType, MethodParameter returnType,\n           ServerHttpRequest request, ServerHttpResponse response) {\n        logger.info(\"-----> Audit REST interceptor beforeBodyWrite\");\n         response.getHeaders().add(HttpHeaders.CONTENT_ENCODING, \"UTF-8\");\n       super.beforeBodyWriteInternal(bodyContainer, contentType, returnType,\n             request, response);\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 229,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nYou see this interceptor in action when testing your REST services, because the log messages are \nprinted in the log console.\nINFO c.p.r.AuditRestInterceptor - -->\n      Audit REST interceptor supportsPerson.class ? true\nINFO c.p.r.AuditRestInterceptor - --> Audit REST interceptor beforeBodyWrite\nUsing Spring HATEOAS\nHATEOAS and Spring HATEOAS project were mentioned at the beginning of the chapter. When the \nHypermedia REST constrains are respected by a REST service, it is said that the service is a Hypermedia \nDriven REST web service. Hypermedia is quite important for REST, because it allows you to build services \nthat are almost fully decoupled from their clients. The representations returned by the REST services contain \nlinks that indicate further locations of resources that the client needs access to.\nTo build a Hypermedia Driven REST web service with Spring, the spring-hateoas dependency must \nbe added to the project. The current version of spring-hateoas is 0.17.0.RELEASE. This library (it is only one \njar currently, but it will probably grow into a framework) provides a set of classes used to generate resource \nURIs. It also provides classes to decorate representations with links to return to the HATEOAS complying \nclient.\nIn this chapter’s examples, the Person class is wrapped inside a PersonHateoas class that extends \nthe core class of spring-hateoas: ResourceSupport. This class provides methods useful to add links to \nrepresentations and to access representations links. The PersonHateoas looks like this:\n...\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.springframework.hateoas.ResourceSupport;\n \npublic class PersonHateoas extends ResourceSupport {\n \n     private Person person;\n \n     @JsonCreator\n     public PersonHateoas(@JsonProperty(\"person\") Person person) {\n         this.person = person;\n     }\n \n     public Person getPerson() {\n     return person;\n    }\n}\nThe PersonHateoas class has a field of type Person. By extending class ResourceSupport, methods to \ngenerate HATEOAS links and references are inherited. When requesting a Person resource from a HATEOAS \nREST service, a PersonHateoas is serialized and sent to the client. When the serialization is done in JSON \nformat, some specific JSON annotations are needed when declaring the PersonHateoas class. The  \n@JsonProperty specifies that at serialization time, the resulted object will contain a property named person \nthat will be mapped to a serialized version of the Person instance. Looks like a simple POJO, right? Well, \nthat’s what it is.\n216",
          "tables": [],
          "code_blocks": [
            "Audit REST interceptor supportsPerson.class ? true",
            "private Person person;\n \n     @JsonCreator\n     public PersonHateoas(@JsonProperty(\"person\") Person person) {\n         this.person = person;\n     }\n \n     public Person getPerson() {\n     return person;\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 230,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nA controller that returns an instance of PersonHateoas must define handler methods that \npopulate the PersonHateoas instances with HAREOAS-specific links. In order to do, Spring offers utility \nmethods that allow you to create links by pointing to controller classes, which are grouped under the \nControllerLinkBuilder. The controller and the method do nothing special, except that before returning \nthe response, the personHateoas object is populated with its own URI, using utility methods from the \nControllerLinkBuilder class that link together in a very readable way. For example, the underlined \ncode snippet in the previous example can be read like this: Add link to which the handler method \ngetPersonHateoasById from the PersonHateoasController class is mapped, with PathVariable id equal to \nperson.getId() to the personHateoas ph instance. The sources for spring-hateoas are available on GitHub \nat https://github.com/spring-projects/spring-hateoas.\nIn the following code snippet, the linkTo and methodOn methods from ControllerLinkBuilder are \nstatically imported and used to generate the resource link for the Person instance with id=1.\n...\nimport static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\nimport static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;\n \n@RestController\n@RequestMapping(value = \"/hateoas\")\npublic class PersonHateoasController {\n \nprivate Logger logger = LoggerFactory.getLogger(PersonHateoasController.class);\n \n@ResponseStatus(HttpStatus.OK)\n@RequestMapping(value = \"/{id}\", method = RequestMethod.GET,\n      produces = MediaType.APPLICATION_JSON_VALUE)\npublic HttpEntity<PersonHateoas> getPersonHateoasById(\n      @PathVariable Long id) throws NotFoundException {\n     logger.info(\"-----> PERSON: \" + id);\n     Person person = personManager.findById(id);\n     if (person == null) {\n         throw new NotFoundException(Person.class, id.toString());\n     }\n     PersonHateoas ph = new PersonHateoas(person);\n     ph.add(\n            linkTo(\n                 methodOn(PersonHateoasController.class)\n                       .getPersonHateoasById(person.getId())\n            ).withSelfRel()\n       );\n     return new ResponseEntity<>(ph, HttpStatus.OK);\n    }\n}\nIn the previous example, the controller class is the one that takes care of setting the links by inspecting \nthe mappings. But Spring provides another way—by using EntityLinks implementations. To use them, \nthe controller class must be annotated with @ExposesResourcesFor, which makes EntityLinks available \n217",
          "tables": [],
          "code_blocks": [
            "produces = MediaType.APPLICATION_JSON_VALUE)",
            "@PathVariable Long id) throws NotFoundException {\n     logger.info(\"-----> PERSON: \" + id);\n     Person person = personManager.findById(id);\n     if (person == null) {\n         throw new NotFoundException(Person.class, id.toString());\n     }\n     PersonHateoas ph = new PersonHateoas(person);\n     ph.add(\n            linkTo(\n                 methodOn(PersonHateoasController.class)\n                       .getPersonHateoasById(person.getId())\n            ).withSelfRel()\n       );\n     return new ResponseEntity<>(ph, HttpStatus.OK);\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 231,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nby dependency injection. Also, the configuration class must be annotated with @EnableEntityLinks. The \nEntityLinks interface API exposes methods to access links pointing to controllers backing an entity type.  \nSo the controller becomes this:\n...\nimport org.springframework.hateoas.EntityLinks;\nimport org.springframework.hateoas.ExposesResourceFor;\n@Controller\n@ExposesResourceFor(Person.class)\n@RequestMapping(\"/hateoas\")\npublic class PersonHateoasController extends BaseController {\n    private Logger logger = LoggerFactory.getLogger(PersonHateoasController.class);\n \n    @Autowired\n    private EntityLinks entityLinks;\n \n    @RequestMapping(value = \"/{id}\", method = RequestMethod.GET,\n              produces = \"application/hal+json\")\n    public HttpEntity<PersonHateoas> getPersonHateoasById\n       (@PathVariable Long id) throws NotFoundException {\n       logger.info(\"-----> PERSON: \" + id);\n       Person person = personManager.findById(id);\n       if (person == null) {\n           throw new NotFoundException(Person.class, id.toString());\n       }\n       PersonHateoas ph = new PersonHateoas(person);\n \n       ph.add(entityLinks.linkForSingleResource(Person.class, id).withSelfRel());\n       return new ResponseEntity<>(ph, HttpStatus.OK);\n    }\n}\nAnd the @EnableEntityLinks annotation is added to the configuration class. Also, to enable HAL \nsupport, the EnableHypermediaSupport should be added to the configuration class too.\nimport org.springframework.hateoas.config.EnableEntityLinks;\nimport org.springframework.hateoas.config.EnableHypermediaSupport;\nimport org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;\n...\n@EnableEntityLinks\n@EnableHypermediaSupport(type= {HypermediaType.HAL})\n@Configuration\n@EnableWebMvc\n@ComponentScan(basePackages = {\"com.pr, com.pr.web, com.pr.rest, com.pr.hateoas\"})\n@ImportResource({\"classpath:spring/app-service-config.xml\",\n  \"classpath:spring/db-config.xml\"})\npublic class WebConfig extends WebMvcConfigurerAdapter {\n....\n}\n218",
          "tables": [],
          "code_blocks": [
            "private Logger logger = LoggerFactory.getLogger(PersonHateoasController.class);\n \n    @Autowired\n    private EntityLinks entityLinks;\n \n    @RequestMapping(value = \"/{id}\", method = RequestMethod.GET,\n              produces = \"application/hal+json\")\n    public HttpEntity<PersonHateoas> getPersonHateoasById\n       (@PathVariable Long id) throws NotFoundException {\n       logger.info(\"-----> PERSON: \" + id);\n       Person person = personManager.findById(id);\n       if (person == null) {\n           throw new NotFoundException(Person.class, id.toString());\n       }\n       PersonHateoas ph = new PersonHateoas(person);\n \n       ph.add(entityLinks.linkForSingleResource(Person.class, id).withSelfRel());\n       return new ResponseEntity<>(ph, HttpStatus.OK);\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 232,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nThe full documentation for spring-hateoas can be found at http://docs.spring.io/spring-hateoas/\ndocs/current/reference/html/.\nThe Hypermedia Driven REST web service that was just created can be tested with \nrestTemplate, just like any REST service. But to deserialize the HATEOAS links correctly, a custom \nMappingJackson2HttpMessageConverter must be set for the restTemplate. The ObjectMapper must also be \ncustomized to register the Jackson2HalModule implementation provided by Spring HATEOAS.\nimport org.springframework.core.ParameterizedTypeReference;\nimport org.springframework.hateoas.Resource;\nimport org.springframework.hateoas.hal.Jackson2HalModule;\n...\npublic class PersonHateoasControllerTest {\n \n      @Test\n      public void getHateoasPerson() throws Exception {\n          ObjectMapper mapper = new ObjectMapper();\n          mapper.configure\n                   (DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n          mapper.registerModule(new Jackson2HalModule());\n \n          MappingJackson2HttpMessageConverter\n             converter = new MappingJackson2HttpMessageConverter();\n          converter.setSupportedMediaTypes(\n                  MediaType.parseMediaTypes(\"application/hal+json\"));\n          converter.setObjectMapper(mapper);\n \n          RestTemplate restTemplate = new RestTemplate(\n                  Collections.<HttpMessageConverter<?>> singletonList(converter));\n \n          String url = \"http://localhost:8080/mvc-rest/hateoas/{id}\";\n \n          ResponseEntity<PersonHateoas> responseEntity =\n                  restTemplate.getForEntity(url, PersonHateoas.class, \"1\");\n          PersonHateoas personHateoas = responseEntity.getBody();\n \n          assertNotNull(personHateoas);\n          assertTrue(personHateoas.hasLinks());\n          assertEquals(\"http://localhost:8080/mvc-rest/hateoas/1\",\n                         ppersonHateoas.getLink(\"self\").getHref());\n          assertEquals(\"John\", personHateoas.getPerson().getFirstName());\n          assertEquals(\"Smith\", personHateoas.getPerson().getLastName());\n    }\n}\n219",
          "tables": [],
          "code_blocks": [
            "@Test\n      public void getHateoasPerson() throws Exception {\n          ObjectMapper mapper = new ObjectMapper();\n          mapper.configure\n                   (DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n          mapper.registerModule(new Jackson2HalModule());\n \n          MappingJackson2HttpMessageConverter\n             converter = new MappingJackson2HttpMessageConverter();\n          converter.setSupportedMediaTypes(\n                  MediaType.parseMediaTypes(\"application/hal+json\"));\n          converter.setObjectMapper(mapper);\n \n          RestTemplate restTemplate = new RestTemplate(\n                  Collections.<HttpMessageConverter<?>> singletonList(converter));\n \n          String url = \"http://localhost:8080/mvc-rest/hateoas/{id}\";\n \n          ResponseEntity<PersonHateoas> responseEntity =\n                  restTemplate.getForEntity(url, PersonHateoas.class, \"1\");\n          PersonHateoas personHateoas = responseEntity.getBody();\n \n          assertNotNull(personHateoas);\n          assertTrue(personHateoas.hasLinks());\n          assertEquals(\"http://localhost:8080/mvc-rest/hateoas/1\",\n                         ppersonHateoas.getLink(\"self\").getHref());\n          assertEquals(\"John\", personHateoas.getPerson().getFirstName());\n          assertEquals(\"Smith\", personHateoas.getPerson().getLastName());\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 233,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nAnd the response sent to the client will look like this:\n{\"person\":\n    {\"firstName\":\"John\",\n      \"middleName\":null,\n      \"lastName\":\"Smith\",\n      \"dateOfBirth\":\"1935-10-01\",\n      \"gender\":\"MALE\",\"\n      \"hospital\":{...},\n      \"identityCard\":{...},\n      \" links\":{\"self\":{\"href\":\"http://localhost:8080/mvc-rest/hateoas/1\"}}\n  }\n! the hospital and identityCard objects are not displayed in the previous example, as their contents are \nnot relevant for it. the content of those properties represents the JSOn serialization of the hospital and \nidentityCard fields specific to the Person instance. their contents are displayed in figure 5-15.\nThe response body contains two properties: \"person\" and \"links\". The \"person\" property value is \nthe JSON representation of the Person instance with id=1. The \"links\" property contains a link and its \nmeaning. The \"rel\":\"self\" tells the client that the link points to the current resource. In this chapter, the \nfundamentals of creating and consuming RESTful services with Spring MVC were covered, which is enough \nfor the certification exam.\nSummary\nAfter reading this chapter, you should have a proper understanding of how Spring can be used to provide \nand consume REST services. Here is a simple list of topics that you should keep handy when reviewing your \nacquired knowledge:\n•\t What is REST?\n•\t What type of clients can access a web application?\n•\t How are resources exposed to the client?\n•\t How many types of representations are supported?\n•\t What is the difference between @Controller and @RestController?\n•\t Make sure that you can describe Spring MVC support for RESTful applications.\n•\t Understand how to access request/response data.\n•\t Use message converters.\n•\t How is asynchronous REST supported?\n•\t What is HATEOAS?\n•\t How do you build a HATEOAS complying service with Spring HATEOAS and MVC?\n220",
          "tables": [],
          "code_blocks": [
            "{\"firstName\":\"John\",\n      \"middleName\":null,\n      \"lastName\":\"Smith\",\n      \"dateOfBirth\":\"1935-10-01\",\n      \"gender\":\"MALE\",\"\n      \"hospital\":{...},\n      \"identityCard\":{...},\n      \" links\":{\"self\":{\"href\":\"http://localhost:8080/mvc-rest/hateoas/1\"}}\n  }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 234,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nQuick Quiz\nQuestion 1: What is REST?\n  A.  a software design pattern\n  B.  a framework\n  C.  an architecture style\nQuestion 2: Which of the following methods are HTTP methods?\n  A.  PUT\n  B.  GET\n  C.  SUBMIT\n  D.  OPTIONS\nQuestion 3: What Spring class can be used to access and test REST services?\n  A.  RestTemplate\n  B.  AsyncRestTemplate\n  C.  Both\n  D.  None\nQuestion 4: What does the RestTemplate handle?\n  A.  Resources\n  B.  Representations\n  C.  Both\nQuestion 5: What can be said about the @RestController annotation?\n  A.  It is used to declare a controller providing REST services.\n  B.  Is annotated with @Controller and @ResponseBody.\n  C.  Controller methods annotated with @RequestMapping assume @ResponseStatus \nsemantics by default when the controller is annotated with @RestController.\nQuestion 6: What is the effect of annotating a method with @ResponseStatus?\n  A.  The default behavior for resolving to a view for methods returning void or null is \noverridden.\n  B.  The HTTP status code matching the @ResponseStatus is added to the response \nbody.\n  C.  It forces usage of HTTP message converters.\nQuestion 7: Which of the following HTTP message converters are supported by Spring MVC?\n  A.  StringHttpMessageConverter\n  B.  MappingJackson2HttpMessageConverter, but Jackson2 must be in the classpath\n  C.  YamlMessageConverter\n221",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 235,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nQuestion 8: Which of the following RestTemplates can be used to make a GET REST call to a URL?\n  A.  restTemplate.getForObject(...)\n  B.  optionsForAllow(...)\n  C.  getForEntity(...)\n  D.  exchange(..., HttpMethod.GET,...)\nQuestion 9: Does the following REST handler method comply with the HATEOAS constraint?\n@ResponseStatus(HttpStatus.CREATED)\n@RequestMapping(value = \"/create\", method = RequestMethod.POST,\n    produces = MediaType.APPLICATION_JSON_VALUE,\n    consumes = MediaType.APPLICATION_JSON_VALUE)\n    public Person createPerson(@RequestBody @Valid Person newPerson) {\n    logger.info(\"-----> CREATE\");\n    Hospital hospital = hospitalManager.findByCode(\n          newPerson.getHospital().getCode());\n    newPerson.setHospital(hospital);\n    Person person = personManager.save(newPerson);\n    logger.info(\"-----> PERSON: \" + person);\n    return person;\n}\n  A.  Yes, because it returns a representation of the object that was created.\n  B.  No, because it does not set the location header to the URI of the created resource.\n  C.  This is not a REST handler method.\n  D.  No, because a Link object is not added to the returned resource.\nPractical Exercise\nThe practical exercises for this chapter require you to develop some REST client test methods to check your \nunderstanding of implementing RESTful application with Spring MVC. The project module is named  \n07-pr-rest-practice. An analogous module with proposed solutions exists, which is named  \n07-pr-rest-solution. The projects and their TODOs are shown in Figure 5-10.\n222",
          "tables": [],
          "code_blocks": [
            "produces = MediaType.APPLICATION_JSON_VALUE,\n    consumes = MediaType.APPLICATION_JSON_VALUE)\n    public Person createPerson(@RequestBody @Valid Person newPerson) {\n    logger.info(\"-----> CREATE\");\n    Hospital hospital = hospitalManager.findByCode(\n          newPerson.getHospital().getCode());\n    newPerson.setHospital(hospital);\n    Person person = personManager.save(newPerson);\n    logger.info(\"-----> PERSON: \" + person);\n    return person;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 236,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nFigure 5-10.  Projects associated with this chapter\nThe project is split into packages that contain classes grouped by purpose:\n•\t com.pr.config contains the Java Configuration class used to configure the application.\n•\t com.pr.hateoas contains classes that describe a hypermedia-driven REST web service\n•\t com.pr.problem contains classes that handle the exceptions thrown in the application.\n–  GlobalExceptionHandler handles exceptions thrown by methods in the \ncontrollers under the com.pr.web package. The restriction is done using  \n@ControllerAdvice(basePackages = \"com.pr.web\").\n–  NotFoundException is a type of exception thrown when a resource cannot be \nfound.\n–  RestExceptionProcessor handles exceptions thrown by methods in the REST \ncontrollers under the com.pr.rest package.\n223",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 237,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\n•\t com.pr.rest contains classes that implement REST services and interceptors.\n–  AuditRestInterceptor is an interceptor for REST services that prints simple \nmessages and adds a header to the response before it is written.\n–  HospitalsRestController is a REST controller for managing Hospital \nresources.\n–  PersonsRestController is a REST controller for managing Person resources.\n•\t com.pr.web contains the web controllers that receive requests from a browser and \nreturn views. The structure of the project is depicted in Figure 5-11.\nFigure 5-11.  Package organization of the 07-pr-rest-practice project module\nThe tests for the rest controllers are located under the same packages as the controllers being tested. \nThe only exception is the com.pr.async that contains a configuration class, a service class, and a test class \nused to test an asynchronous REST method annotated with @Async. You have no TODO tasks in this package; \nthe example is simply provided for you to run it and see how an REST asynchronous is made.\nAll the TODO tasks are in the RestPersonControllerTest class. They cover GET, POST, and DELETE \noperations.\nThe practical exercise for this chapter requires Gradle tasks to be run in parallel, because the REST tests \nrequire the web application to be started. To do this, you have to create an Intellij IDEA Gradle launcher to \nstart the application, and another to stop it. The test cases are run by right-clicking the method you want to \nexecute, and then selecting Run from the menu that appears.\n224",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 238,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nTo create a Gradle launcher, you have to do the following:\n  1.  In the Gradle Task view, right-click the appStart task. A menu is displayed. Select \nCreate personal-records:07-pr-rest-practice.\n  2.  In the popup check the Single instance only check box. Modify the name to \nsomething more relevant, like mvc-rest-start.\n  3.  Click Apply, and then OK. Your launcher should be available in the Intellij IDEA \nlauncher menu.\nThe flow for creating a Gradle launcher is depicted in Figure 5-12. Do the same to create a launcher for \nthe appStop task.\nFigure 5-12.  Creating a Gradle launcher\n225",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 239,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nThen from the launcher menu, select the mvc-rest-start launcher and start the application. If the \napplication starts correctly, you should see in the console the following log:\n  INFO    Jetty 9.2.10.v20150310 started and listening on port 8080\n  INFO    mvc-rest runs at:\n  INFO     http://localhost:8080/mvc-rest\nRun 'gradle appStop' to stop the server.\nOpen the link in a browser. You should see the page shown in Figure 5-13.\nFigure 5-13.  The mvc-rest web application\nThe web application will help you verify that your REST requests have executed correctly.\nOnce you have the web application up, you can go ahead and try to solve the TODO tasks. There are \neight TODOs, numbered from 15 to 22, that require you to perform certain types of REST requests.\n! get requests can be done directly in the browser, so if you want to get creative with get reSt handler \nmethods, you can test them in a browser. for example, try to access http://localhost:8080/mvc-rest/\nrest-persons/id/1. You should see a JSOn reply like the one depicted in the figure 5-14.\n226",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 240,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\nFigure 5-14.  JSON response for a GET REST request\nTo format JSON representations properly for display, a @MappingJackson2HttpMessageConverter bean \nhas to be defined and configured accordingly. There are two ways of doing this:\n•\t Call setPrettyPrint on the @MappingJackson2HttpMessageConverter\n@Bean\npublic MappingJackson2HttpMessageConverter\n            mappingJackson2HttpMessageConverter() {\n     MappingJackson2HttpMessageConverter converter\n                      = new MappingJackson2HttpMessageConverter();\n     converter.setObjectMapper(objectMapper());\n     converter.setPrettyPrint(true);\n     return converter;\n}\n \n@Bean\npublic ObjectMapper objectMapper() {\n    return new ObjectMapper();\n}\n227",
          "tables": [],
          "code_blocks": [
            "mappingJackson2HttpMessageConverter() {\n     MappingJackson2HttpMessageConverter converter\n                      = new MappingJackson2HttpMessageConverter();\n     converter.setObjectMapper(objectMapper());\n     converter.setPrettyPrint(true);\n     return converter;",
            "return new ObjectMapper();"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 241,
          "text": "Chapter 5 ■ Spring reStful ServiCeS\n•\t  Enable the indentation of the serialization output by calling enable on the \nobjectMapper set for the @MappingJackson2HttpMessageConverter bean\n@Bean\npublic ObjectMapper objectMapper() {\n    ObjectMapper objMapper = new ObjectMapper();\n    objMapper.enable(SerializationFeature.INDENT_OUTPUT);\n    return objMapper;\n}\n! pOSt and Delete requests can be tested using a firefox plugin called poster.14 figure 5-15 shows a reSt \npOSt request and response done with poster. \nFigure 5-15.  POST REST request and response done with Poster. You have to copy and paste the RequestBody \ninto the Poster content text area\n14The plugin can be found at https://addons.mozilla.org/en-US/firefox/addon/poster/.\n228",
          "tables": [],
          "code_blocks": [
            "ObjectMapper objMapper = new ObjectMapper();\n    objMapper.enable(SerializationFeature.INDENT_OUTPUT);\n    return objMapper;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 242,
          "text": "Chapter 6\nSpring Web with AJAX\nThe topic of this chapter is not a subject in the certification exam, but it is useful to know all the tools that \ncan be used to develop a web application in the most efficient way. A properly designed user interface \nshould ensure that a request is sent to the server only when the content of the request is complete and valid \nso that it can be used by a server operation. Using requests between the client and the server application is \nnot a good practice. It is time-consuming and can go wrong when the network connection is unstable.\nWhat Is AJAX?\nAJAX is an acronym for asynchronous JavaScript and XML, but over the years, this term has grown and \nmeans so much more than the technologies that make the acronym. AJAX describes the way that various \nweb technologies can make web applications highly responsive and provide the user with an almost \ndesktop-like interaction. Basically, web applications developed with AJAX can provide rich interaction, \njust-in-time information, and dynamic information without a page refresh. Of course, this comes with \nprogramming complexity; some of the logic that happens on the server must be moved on the client side, \nwhere the logic must be implemented in JavaScript. The most obvious example is the validation of user \ninput. There's no point in sending invalid data to the server, right?1\nBefore AJAX, a web application functioned like this:\n  1.  The user requested a page using a browser.\n  2.  The server where the web application was installed created and sent a response \nto be rendered in the browser.\n  3.  The user sent some data to the server.\n  4.  The server received the data and validated it. If the validation failed, the data and \nvalidation errors were put into a response that was sent back to the browser.\n  5.  The response was received by the browser, which displayed the new page.\n1There are JavaScript libraries that can validate form user input before submission; for example, the jQuery validation \nplugin (http://jqueryvalidation.org).\n229",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 243,
          "text": "Chapter 6 ■ Spring Web With aJaX\nThis happens for any user request; the whole page is rebuilt and displayed every time a response is \nreceived from the server. It is quite a time-consuming process, depending on the health of the network, and \nthe user may see an annoying flickering as the web pages are displayed. Figure 6-1 depicts the traditional \npre-AJAX web application communication flow with the client.\nFigure 6-1.  Traditional pre-AJAX web application communication flow\nThe validation case was chosen because an example of an editing form with validation was presented  \nin Chapter 3 (the 05-pr-mvc-form module). The validation was implemented on the server side using the  \n@Valid annotation. This can be easily seen by installing the Firebug plugin in Firefox (see the Net tab). All \nthe steps mentioned next are depicted in Figure 6-2. \n  1.  Start 05-pr-mvc-form-solution.\n  2.  Open the Firebug console (1), click the Net tab (2), and then click (3) Enable.\n  3.  Click the Persons menu item (4). Select a user (5), click the link to see the details, \nand then click the Edit link (6).\n  4.  Click the Clear option (7) in the Firebug console to make sure that you do not \nhave previous requests polluting the console.\n  5.  Delete the first name (8) and last name (9). Click Save (10) and then analyze \nwhat is shown in the Net console.\n230",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 244,
          "text": "Chapter 6 ■ Spring Web With aJaX\nFigure 6-2.  Steps to analyze the communication between client and server\n231",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 245,
          "text": "Chapter 6 ■ Spring Web With aJaX\nAfter performing the last step, you should see the POST request in the console. If you expand it, you \nsee the response sent by the server (returned by the DispatcherServlet), a new HTML page containing \nthe HTML code of the page, plus the validation elements. There are also a few GET requests for the static \ncontents of the page, which are handled by the default servlet container for static resources. Figure 6-3 \ndepicts the last communication with the server.\nFigure 6-3.  The final step of communication, validation failure response\n232",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 246,
          "text": "Chapter 6 ■ Spring Web With aJaX\nIn the preceding example, a POST request was sent to the server. The validation was executed on the \nserver and failed, so no data was saved. Basically, this was a useless request, and the full page was rebuilt \nand redisplayed just to show the user what was wrong with the data. The GET requests to retrieve the \nheader and footer information, and the styling *.css files, are also useless, because they are used to retrieve \ninformation already present in the page. These useless requests can be avoided either by using caching or by \nmaking sure only the form part of the page is dynamic. AJAX can help with this. A request can be sent to the \nserver with the form data by using an AJAX request; the data retrieved from the server can be used to rebuild \nonly a part of the page by using an AJAX callback. Or even better, validation can be performed on the client \nside by using JavaScript (pure or competent JavaScript libraries like the jQuery validation plugin). And an \nAJAX request sends data to the server, which is processed successfully. This is just an example. AJAX can also \nbe used when searching data. An autocomplete behavior can be implemented for the search field by using \nan AJAX call to build a list (server side) and afterward to display the list using JavaScript (usually below the \nautocomplete input).2\nOne of the most popular JavaScript frameworks is jQuery3 because it is small and provides a wide \nrange of functionalities—document traversal and manipulation, event handling, and animations—in a very \npractical way. Most popular JavaScript frameworks are actually developed using jQuery.4\nA new way of developing web applications nowadays is to totally decouple the Web from server \nfunctionality, keeping all web logic on the client and all back-end logic on the server, reducing \ncommunication between the client and the server as much as possible, and handling requests in a manner \nsimilar to REST. AJAX remoting was not supported until Spring 3. JSON also became very popular once \njQuery took off and it is now the most common format for performing data exchange between a client and a \nserver.\n! a sample of this behavior is implemented in the RestSearchController that you can find in the 08-pr-ajax-\nsolution. it is presented in detail later in the chapter.\nMaking AJAX Requests\nAJAX requests can be made using a JavaScript object of type XMLHttpRequest, which was designed by \nMicrosoft and adopted by Mozilla, Apple, and Google, and standardized in W3C5. All modern browsers \nsupport it. To create an instance of XMLHttpRequest, you just instantiate it:\nvar xhr = new XMLHttpRequest();\n2jQuery UI provides a plugin that to implement the behavior with little effort (https://jqueryui.com/\nautocomplete/).\n3The official jQuery site (https://jquery.com).\n4Examples include jQuery UI (https://jqueryui.com), Bootstrap (http://getbootstrap.com), AngularJS \n(https://angularjs.org).\n5See http://www.w3.org/TR/XMLHttpRequest/.\n233",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 247,
          "text": "Chapter 6 ■ Spring Web With aJaX\nThe xhr object can make requests to a server and update only a portion of the page. Figure 6-4 \ndepicts XMLHttpRequest. When the client sends a request using this type of object, the server responds by \npopulating the xhr.responseText property.\nFigure 6-4.  AJAX request diagram\nA search request for a person with a first name that contains the letter a can be send to the server using \na function similar to the following. Everything after ? are request parameters.\n<script type=\"text/javascript\">\nvar url=\"${personsUrl}/ajax?fieldName=firstName\"\n        ¨&fieldValue=a\"\n        ¨&exactMatch=false\";\nvar xhr = new XMLHttpRequest();\nxhr.open(\"GET\", url);\nxhr.send();\nxhr.onreadystatechange =\n    function () {\n        if (xhr.readyState == 4 && xhr.status == 200) {\n             displayResults(xhr.response);\n    }\n};\n</script>\nThe xhr.send() method has multiple forms. It sends the request body to the URL that a connection was \npreviously open to by calling xhr.open(\"GET\", url). In the previous example, there was no request body to \nsend, because all the request parameters were in the URL.\nThe readyState can have different values, but the one in the fourth example tests if the request has \nfinished and the response is ready. The status property is the HttpStatus value that was mentioned in \nChapter 3; it is result code from the server. If you want to know more about the XMLHttpRequest type, \nyou can take a look at the full specifications at https://xhr.spec.whatwg.org/. But since jQuery was \nintroduced, there's been no need to use it explicitly because there are better and more practical ways to \nmake AJAX requests.\n234",
          "tables": [],
          "code_blocks": [
            "¨&fieldValue=a\"\n        ¨&exactMatch=false\";",
            "function () {\n        if (xhr.readyState == 4 && xhr.status == 200) {\n             displayResults(xhr.response);\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 248,
          "text": "Chapter 6 ■ Spring Web With aJaX\n! an example for making a request using an object of type XMLHttpRequest can be found in the 08-pr-\najax-solution. Just look for the legacySearch JavaScript function in the search.jsp file. to test that \nfunction, just comment the $.getJSON call in line 112 and uncomment the legacySearch call in line 113. \nrestart the application and try it. but you might want to do this after finishing reading this chapter, when your \nunderstanding of jQuery, JavaScript, and the logic of the application will make things easier for you.\nAs you can see, using objects of type XMLHttpRequest to perform AJAX calls is quite cumbersome. A \nlot of problems might appear when the response type is something more complex than text; like JSON, for \nexample, because a lot of extra code has to be written to perform conversions that get the response body in a \nproper format.\nThe methods and properties of the XMLHttpRequest class used in the previous example are explained in \nTable 6-1.\nTable 6-1.  XMLHttpRequest Methods and Properties\nMethod Description\nopen(http method, URL,   Initializes a request. This method is to be used from JavaScript code.\n[asynch-Flag, username, password])\nsend(content in various formats) This method sends a request. The content can be null. If the request \nis asynchronous (which is the default), this method returns as soon \nas the request is sent.\nonreadystatechange This property returns an EventHandler every\ntime the readyState attribute changes.\nreadystate Returns an unsigned short, the state of the request, and the API. \n(http://www.w3.org/TR/XMLHttpRequest/#xmlhttprequest) \ndefined values are:\n0 -> UNSENT : open() was not called yet\n1 -> OPENED : send() was called\n2 -> HEADERS_RECEIVED : send() was called and headers and \nstatus are available\n3 -> LOADING : downloading; responseText holds partial data\n4 -> DONE : the request was completed\nstatus This property is of type unsigned short and contains the HTTP result \ncode. Most common values are\n200 -> ok\n201 -> Created\n400 -> bad request\n404 -> not found\n403 -> forbidden\n500 -> internal server error\nresponseText This property contains the response to the request as text, or null if \nthe request was unsuccessful or has not yet been sent.\n235",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 249,
          "text": "Chapter 6 ■ Spring Web With aJaX\nIntroducing jQuery\nIn the practice exercise, you will perform a search request that updates only the content of a <div> element. \nThe JSP page is /webapp/WEB-INF/persons/search.jsp. The contents are as follows:\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n<%@ taglib prefix=\"fn\" uri=\"http://java.sun.com/jsp/jstl/functions\" %>\n<%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\" %>\n<%@ taglib prefix=\"sf\" uri=\"http://www.springframework.org/tags/form\" %>\n \n<h2>\n  <spring:message code=\"persons.search.title\"/>\n</h2>\n \n<div class=\"form\">\n   <spring:url value=\"/persons\" var=\"personsUrl\"/>\n   <sf:form modelAttribute=\"criteriaDto\" method=\"get\">\n     <table>\n      <tr>\n        <th>\n          <label for=\"fieldName\">\n            <spring:message code=\"label.Criteria.fieldname\"/> :\n          </label>\n        </th>\n \n        <td>\n          <sf:select path=\"fieldName\" id=\"fieldName\">\n            <sf:option value=\"firstName\">\n                  <spring:message code=\"label.Person.firstname\"/>\n            </sf:option>\n            <sf:option value=\"lastName\">\n                  <spring:message code=\"label.Person.lastname\"/>\n            </sf:option>\n            <sf:option value=\"dob\">\n                  <spring:message code=\"label.Person.dob\"/>\n            </sf:option>\n            <sf:option value=\"pnc\">\n                  <spring:message code=\"label.ic.pnc\"/>\n            </sf:option>\n            <sf:option value=\"hospital\">\n                  <spring:message code=\"label.Hospital.name\"/>\n            </sf:option>\n          </sf:select>\n        </td>\n        <td></td>\n      </tr>\n       <tr>\n         <th>\n           <label for=\"fieldValue\">\n            <span class=\"man\">*</span>\n            <spring:message code=\"label.Criteria.fieldvalue\"/> :\n           </label>\n236",
          "tables": [],
          "code_blocks": [
            "<table>\n      <tr>\n        <th>\n          <label for=\"fieldName\">\n            <spring:message code=\"label.Criteria.fieldname\"/> :\n          </label>\n        </th>\n \n        <td>\n          <sf:select path=\"fieldName\" id=\"fieldName\">\n            <sf:option value=\"firstName\">\n                  <spring:message code=\"label.Person.firstname\"/>\n            </sf:option>\n            <sf:option value=\"lastName\">\n                  <spring:message code=\"label.Person.lastname\"/>\n            </sf:option>\n            <sf:option value=\"dob\">\n                  <spring:message code=\"label.Person.dob\"/>\n            </sf:option>\n            <sf:option value=\"pnc\">\n                  <spring:message code=\"label.ic.pnc\"/>\n            </sf:option>\n            <sf:option value=\"hospital\">\n                  <spring:message code=\"label.Hospital.name\"/>\n            </sf:option>\n          </sf:select>\n        </td>\n        <td></td>\n      </tr>\n       <tr>\n         <th>\n           <label for=\"fieldValue\">\n            <span class=\"man\">*</span>\n            <spring:message code=\"label.Criteria.fieldvalue\"/> :\n           </label>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 250,
          "text": "Chapter 6 ■ Spring Web With aJaX\n         </th>\n         <td><sf:input path=\"fieldValue\" id=\"fieldValue\"/>\n          <em>\n              <br><spring:message code=\"label.dateFormat.accepted\"/>\n          </em>\n         </td>\n         <td><label class=\"error\" id=\"fieldValueError\"/>\n         </td>\n       </tr>\n       <tr>\n         <td></td>\n         <td colpan=\"2\">\n           <sf:checkbox path=\"exactMatch\" id=\"exactMatch\"/>\n           <spring:message code=\"label.Criteria.exactmatch\"/>\n         </td>\n       </tr>\n       <tr>\n         <td>\n           <input id=\"searchButton\" type=\"submit\"\n            value=\"<spring:message code='command.search'/>\"/>\n         </td>\n         <td>\n           <input id=\"cancelButton\" type=\"submit\"\n            value=\"<spring:message code='command.cancel'/>\"/>\n         </td>\n       </tr>\n       <tr>\n         <td colspan=\"3\">\n         <!-- HTML element that will be dynamically populated -->\n              <label class=\"error\" id=\"noResults\"/>\n         </td>\n       </tr>\n     </table>\n  </sf:form>\n</div>\n \n<!-- The div with results, that will be loaded dynamically -->\n<div id=\"resultDiv\">\n  <table>\n     <thead>\n     <tr>\n       <td>\n         <spring:message code=\"label.ic.pnc\"/>\n       </td>\n       <td>\n         <spring:message code=\"label.Person.firstname\"/>\n       </td>\n       <td>\n         <spring:message code=\"label.Person.lastname\"/>\n       </td>\n     </tr>\n     </thead>\n237",
          "tables": [],
          "code_blocks": [
            "</th>\n         <td><sf:input path=\"fieldValue\" id=\"fieldValue\"/>\n          <em>\n              <br><spring:message code=\"label.dateFormat.accepted\"/>\n          </em>\n         </td>\n         <td><label class=\"error\" id=\"fieldValueError\"/>\n         </td>\n       </tr>\n       <tr>\n         <td></td>\n         <td colpan=\"2\">\n           <sf:checkbox path=\"exactMatch\" id=\"exactMatch\"/>\n           <spring:message code=\"label.Criteria.exactmatch\"/>\n         </td>\n       </tr>\n       <tr>\n         <td>\n           <input id=\"searchButton\" type=\"submit\"\n            value=\"<spring:message code='command.search'/>\"/>\n         </td>\n         <td>\n           <input id=\"cancelButton\" type=\"submit\"\n            value=\"<spring:message code='command.cancel'/>\"/>\n         </td>\n       </tr>\n       <tr>\n         <td colspan=\"3\">\n         <!-- HTML element that will be dynamically populated -->\n              <label class=\"error\" id=\"noResults\"/>\n         </td>\n       </tr>\n     </table>\n  </sf:form>",
            "<thead>\n     <tr>\n       <td>\n         <spring:message code=\"label.ic.pnc\"/>\n       </td>\n       <td>\n         <spring:message code=\"label.Person.firstname\"/>\n       </td>\n       <td>\n         <spring:message code=\"label.Person.lastname\"/>\n       </td>\n     </tr>\n     </thead>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 251,
          "text": "Chapter 6 ■ Spring Web With aJaX\n     <tbody id=\"resultTable\">\n     </tbody>\n   </table>\n</div>\n \n<script type=\"text/javascript\">\n$(document).ready(function () {\n     // JavaScript content to make the page dynamic\n}\n</script>\nA few Spring form elements have been replaced with HTML elements that will be displayed and \npopulated by JavaScript methods. HTML elements from a page can be populated or emptied, hidden or \ndisplayed using JavaScript. If you click the Search button, a request (only one) is made to retrieve results, \nand the resultTable is populated and the resultDiv is displayed. Figure 6-5 depicts an AJAX request to \nsearch for people. The result table is populated and displayed with the response returned. As you can see, \nno other requests are necessary. This is the power of AJAX: a practical way of retrieving from server only the \ninformation that is really needed.\nFigure 6-5.  AJAX request\n238",
          "tables": [],
          "code_blocks": [
            "<tbody id=\"resultTable\">\n     </tbody>\n   </table>",
            "// JavaScript content to make the page dynamic"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 252,
          "text": "Chapter 6 ■ Spring Web With aJaX\nThe JavaScript code that is missing from the earlier code snippet is written using jQuery. By providing \nfunctions that are more practical and easier to use, this framework helps the developer to focus on the key \naspects of making a request: which resource is requested from the server (the URI), which parameters are to \nbe used for the request, and which callback method is to be executed when the response is received.6 That \nis what jQuery is—a library or a collection of JavaScript functions that a developer can use to avoid writing \ncomplicated JavaScript logic. jQuery provides the following features:\n•\t DOM element selection\n•\t DOM element manipulation\n•\t CSS manipulation\n•\t Events and event-related functions\n•\t JavaScript effects and animations\n•\t Strong cross-browser support\n•\t Small footprint and speed\n•\t Functions for JSON parsing\nTo use jQuery, the jquery.js file containing JavaScript functions has to be referred in the page. When \nusing Spring and Tiles, the jquery.js file is referred in the template file that builds every page of the site. \nThe jquery.js file can be added to the project or it can be referred directly from the Web if access to the \nInternet is assumed to always be possible. The 08-pr-ajax-practice is the project for this chapter and its \nstructure is depicted in Figure 6-6.\nFigure 6-6.  Practice project to exercise Spring with AJAX\n6Some jQuery AJAX methods allow definition of two callback methods: one for successful requests and one for failed ones.\n239",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 253,
          "text": "Chapter 6 ■ Spring Web With aJaX\nThe jQuery.js file is part of the project; it is stored under \\webapp\\js. Its name is postfixed with the \nversion of jQuery—in this case, 2.1.4; it is referred in \\webapp\\WEB-INF\\templates\\layout.jsp like this:\n<head>\n  <script type=\"text/javascript\" src=\"<c:url value='/js/jquery-2.1.4.js' /> \">\n  </script>\n</head>\nWhen Internet access is always assumed, the file does not have to be part of the project; it can be \nreferred directly using the link from the official site:\n<head>\n  <script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-2.1.4.min.js\">\n  </script>\n</head>\nOn the official site, two versions are available. The development version, which was copied in the \nproject, is uncompressed and has proper formatting that is readable; it should be used during development. \nThe minified (obfuscated) version is compressed, not readable, reduced in size, and appropriate for \nproduction use.7\njQuery HTML DOM Manipulation\nThe principle of jQuery is to select an element(s) and perform some action(s) on it (them):\n$(selector).action();\nThe $ is actually a variable of type jQuery that is added to the current page when the jquery.js file \nis referred. Every function defined in the jQuery type can thus be used. You can check this for yourself by \ninspecting the code in the jquery.js. You find the following:\njQuery = function( selector, context ) { ...}\nwindow.jQuery = window.$ = jQuery;\nThe selector can be anything: an HTML id, a CSS class, an HTML element type, or a combination of any \nof these. jQuery is flexible like that. The identification of the element is done by a selector engine. Examples \nare depicted in the following code snippet:\n<!-- Selecting elements by type -->\n$(\"p\")   // selects all <p> elements in the page\n$(\"p a\") // selects all anchor tags inside a paragraph tag\n \n<!-- Selecting element having id=resultDiv-->\n$(\"#resultDiv\")\n \n<!-- Selecting all elements with class=error -->\n$(\".error\")\n7Smaller resources load faster on browsers; that’s why production minified files are recommended.\n240",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 254,
          "text": "Chapter 6 ■ Spring Web With aJaX\nThe action can be any function available for that HTML element. For example, the val and text \nfunctions get and set values for a field:\n<!-- Getting the value form a text field -->\nvar fieldName = $(\"#fieldName\").val();\n<!-- Setting the \"John\" value of text field -->\n$(\"#fieldValue\").val(\"John\");\n<!-- Setting the value of a label element -->\n$(\"#fieldValueError\").text(err);\nAnd there are special functions to manipulate HTML, such as adding, removing, replacing, displaying, \nor showing extra elements :\n<!-- The contents of the element with id \"resultTable\" are deleted-->\n$(\"#resultTable\").empty();\n<!-- Adding HTML elements to the element with \"resultTable\" id -->\n$(\"#resultTable\").append(\"<tr><td>123456</td></tr>\")\n<!-- Replacing HTML content of the element with \"resultTable\" id-->\n$(\"#resultTable\").html(\"<tr><td>123456</td></tr>\");\n<!-- Hide all elements with class \"error\"\n$(\".error\").hide();\n<!-- Fading out element with certain speed: slow/fast/normal -->\n$(\"#resultDiv\").fadeOut(\"fast\");\n<!-- Fading in element with certain speed: slow/fast/normal -->\n$(\"#resultDiv\").fadeIn(\"fast\");\nSpecific behavior can be attached to elements using JavaScript HTML DOM events.8\n<!-- Attach 'onClick' event handler to the search button using HTML.\nStatic - the event handler is always bound to the button-->\n<input id=\"searchButton\"\n           type=\"submit\"\n           value=\"<spring:message  code='command.search'/>\"\n           onclick=\"submitSearch\"/>\n \n// Attach 'onClick' event handler to the search button using javascript\n// Dynamic - developer can decide when/if the event handler\n// is bound to the search button.The following function is called when the DOM\n \n// is ready\n$(function() {\n   $(\"#searchButton\").onclick = submitSearch;\n});\nAn HTML event called DOMContentLoaded triggers on an HTML document when the page is ready. It \nwaits for the full HTML and scripts, and then triggers. The ${function){} is equivalent to $(document).\nready(function () {} and handles the ready event. This ensures that the JavaScript code in the body is \nexecuted after all the HTML elements were rendered.\n8The complete list of HTML DOM events can be found at http://www.w3schools.com/jsref/dom_obj_event.asp.\n241",
          "tables": [],
          "code_blocks": [
            "type=\"submit\"\n           value=\"<spring:message  code='command.search'/>\"\n           onclick=\"submitSearch\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 255,
          "text": "Chapter 6 ■ Spring Web With aJaX\nAfter the submitSearch method is bound to the searchButton, the method is called when the button is \nclicked. The body of the method contains jQuery HTML element manipulation statements.\nfunction submitSearch(event) {\n   //prevent submission of the form so this function can send the request\n   event.preventDefault();\n \n   // extract values form HTML elements\n    var fieldName = $(\"#fieldName\").val();\n    var fieldValue = $(\"#fieldValue\").val();\n    var exactMatch = $(\"#exactMatch\").is(\":checked\");\n \n   //validate parameters before sending the request\n   if (isValid(fieldName, fieldValue)) {\n   //definition of the isValid method is not relevant in this context\n   // and will be covered later\n \n    var params = {\n       fieldName: fieldName,\n       fieldValue: fieldValue,\n       exactMatch: exactMatch\n    };\n    //clear errors from previous attempts if any\n    $(\".error\").hide();\n \n    //sending request to http://localhost:8080/mvc-ajax/ajax\n    $.getJSON(\"${personsUrl}/ajax\", params, displayResults);\n    //definition of the displayResults method is not relevant in this context\n    // and will be covered later\n   }\n   return false;\n}\nIn earlier versions of jQuery, the .bind() method was used for attaching an event handler directly to \nelements.\n$(function() {\n   $(\"#searchButton\").bind(\"click\", submitSearch);\n  }\nThe same can be done using the jQuery click() function to directly bind a function to the button:\n$(function() {\n   $(\"#searchButton\").click(\n   function (event) {\n            //content of submitSearch method mentioned earlier\n   });\n});\n242",
          "tables": [],
          "code_blocks": [
            "// extract values form HTML elements\n    var fieldName = $(\"#fieldName\").val();\n    var fieldValue = $(\"#fieldValue\").val();\n    var exactMatch = $(\"#exactMatch\").is(\":checked\");\n \n   //validate parameters before sending the request\n   if (isValid(fieldName, fieldValue)) {\n   //definition of the isValid method is not relevant in this context\n   // and will be covered later\n \n    var params = {\n       fieldName: fieldName,\n       fieldValue: fieldValue,\n       exactMatch: exactMatch\n    };\n    //clear errors from previous attempts if any\n    $(\".error\").hide();\n \n    //sending request to http://localhost:8080/mvc-ajax/ajax\n    $.getJSON(\"${personsUrl}/ajax\", params, displayResults);\n    //definition of the displayResults method is not relevant in this context\n    // and will be covered later\n   }\n   return false;",
            "//content of submitSearch method mentioned earlier\n   });"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 256,
          "text": "Chapter 6 ■ Spring Web With aJaX\njQuery AJAX Calls\njQuery provides methods to make AJAX calls using the ajax method. Because the syntax of this method is \ncomplicated, wrappers for performing GET and POST requests are provided.9\n$.get(URL, parameters, callback, dataType)\n•\t URL: The URL of the server resource being requested via GET\n•\t parameters: Any data that should be sent to the server using a GET request  \n(string, Object, Array)\n•\t callback: A function to be executed after the request is completed\n•\t dataType: The type of data representing the response body (text, XML, JSON, etc.)\nThis method can be used like this:\n$(function() {\n  $(\"#searchButton\").bind(\"click\", submitSearch);\n});\n \nfunction submitSearch(event) {\n ...\n // code to extract parameters is the same as previous example\n \n //sending request to http://localhost:8080/mvc-ajax/ajax\n    $.getJSON(\"${personsUrl}/ajax\", params, displayResults);\n   }\n}\nThe displayResults method should receive a JSON array as an argument that transforms into <tr/> \nelements that will be added to the resultTable. Each line contains a link (which is the person's personal \nnumeric code) to the details page in the first column, the first name in the second column, and the last name \nin the third column. The HTML code should be similar to the following:\n<tr>\n <td>\n   <a href=\"#\" onclick=\"getPersonDetails('2600909134181')\">\n     2600909134181\n   </a>\n </td>\n <td>Jessica</td>\n <td>Jones</td>\n</tr>\n9The full API for jQuery in a very readable format can be accessed at http://jqapi.com/.\n243",
          "tables": [],
          "code_blocks": [
            "$.getJSON(\"${personsUrl}/ajax\", params, displayResults);\n   }",
            "2600909134181\n   </a>\n </td>\n <td>Jessica</td>\n <td>Jones</td>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 257,
          "text": "Chapter 6 ■ Spring Web With aJaX\nThe link is a function call that displays a pop-up with that person’s information. The personal numeric \ncode is used as an argument, because the person id is not serialized and it is not used in the JavaScript \nfunctions for security reasons.\nfunction displayResults(results) {\n  if (results.length == 0) {\n     $(\"#noResults\").fadeIn(\"fast\");\n     $(\"#noResults\").text(\"No results for search\");\n  } else {\n      $(\"#resultTable\").empty();\n      results.forEach(function(person){\n             $(\"#resultTable\").append(\n               \"<tr>\"\n                + \"<td>\"\n                 +'<a href=\"#\"' + 'onclick=\"getPersonDetails('\n                  + \"'\"+ person.identityCard.pnc +\"'\" + ')\">'\n                  + person.identityCard.pnc +'</a>'\n                + \"</td>\"\n                + \"<td>\" + person.firstName + \"</td>\"\n                + \"<td>\"+ person.lastName + '</td>\"\n               +\"</tr>\");\n         });\n    $(\"#resultDiv\").fadeIn(\"fast\");\n  }\n}\n•\t $.getJSON(URL, parameters, callback): Load JSON-encoded data from the server \nusing a GET HTTP request. Basically, equivalent to $.get (URL, parameters, \ncallback, \"json\"). The parameters argument is an object containing the request \nparameters and their values. Before making the request, that object is parsed and the \nparameter names and values are extracted and added to the request URL.\n•\t $.post(URL, parameters, callback, dataType): A method to make a POST \nrequest. Parameters have the same meaning, as mentioned previously for $.get.\n! in JavaScript and htML, the single quote(') and double quote(\") have the same meaning and can be used \ntogether in complicated text constructions to avoid escaping them. this was done in the previous code snippet \nto create the contents of the \"resultTable\" element.\n! the JavaScript code in this chapter's example might not be optimal, but it was written in such a way to use all \nthe examples given in the book.\n244",
          "tables": [],
          "code_blocks": [
            "$(\"#noResults\").fadeIn(\"fast\");\n     $(\"#noResults\").text(\"No results for search\");\n  } else {\n      $(\"#resultTable\").empty();\n      results.forEach(function(person){\n             $(\"#resultTable\").append(\n               \"<tr>\"\n                + \"<td>\"\n                 +'<a href=\"#\"' + 'onclick=\"getPersonDetails('\n                  + \"'\"+ person.identityCard.pnc +\"'\" + ')\">'\n                  + person.identityCard.pnc +'</a>'\n                + \"</td>\"\n                + \"<td>\" + person.firstName + \"</td>\"\n                + \"<td>\"+ person.lastName + '</td>\"\n               +\"</tr>\");\n         });\n    $(\"#resultDiv\").fadeIn(\"fast\");\n  }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 258,
          "text": "Chapter 6 ■ Spring Web With aJaX\nSpring MVC, AJAX, and jQuery\nThe main advantage of AJAX is that you can have one JSP page that handles the request and the result, so \nno need to redirect to another page (view) to display the result. When using Spring, a controller handles the \nAJAX request. The controller method to handle AJAX requests has the following typical syntax:\n@RequestMapping(value = \"/ajax\", method = RequestMethod.GET)\npublic @ResponseBody\n  List<Person> getPersons(CriteriaDto criteria) {\n   try {\n     List<Person> persons = personManager.getByCriteriaDto(criteria);\n     return persons;\n   } catch (InvalidCriteriaException ice) {\n     ice.printStackTrace();\n   }\n   return new ArrayList<>();\n}\nOf course, a view cannot represent the response, so the controller methods must be annotated with \n@ResponseBody. The response will be serialized to JSON because the client (the $.getJSON in this case) \naccepts this content type. And because the jackson library is in the classpath of the project, Spring does its \nthing, and serializes the response properly, without the need for any other configuration.\nIf the client does not specify the type of the format for the response, then produces = MediaType.\nAPPLICATION_JSON_VALUE should be added to the @RequestMapping annotation. But using this attribute \nwhen the client requests the default format would just be redundant.\ngetByCriteriaDto is a service method to search a person using the criteria provided by the user. It was \ncovered in Chapter 3.\nThe client jQuery method is depicted in the following code snippet:\n$(\"#searchButton\").click(\n  function (event) {\n   event.preventDefault();\n   var fieldName = $(\"#fieldName\").val();\n   var fieldValue = $(\"#fieldValue\").val();\n   var exactMatch = $(\"#exactMatch\").is(\":checked\");\n   //console.log('Criteria:' + fieldName + \", \" + fieldValue\n     + \", \" + exactMatch);\n \n   if (isValid(fieldName, fieldValue)) {\n     var params = {\n     fieldName: fieldName,\n     fieldValue: fieldValue,\n     exactMatch: exactMatch\n   }\n   $(\".error\").hide();\n   $.getJSON(\"${personsUrl}/ajax\", params, displayResults);\n  }\n  return false;\n});\n \n245",
          "tables": [],
          "code_blocks": [
            "List<Person> persons = personManager.getByCriteriaDto(criteria);\n     return persons;\n   } catch (InvalidCriteriaException ice) {\n     ice.printStackTrace();\n   }\n   return new ArrayList<>();",
            "+ \", \" + exactMatch);\n \n   if (isValid(fieldName, fieldValue)) {\n     var params = {\n     fieldName: fieldName,\n     fieldValue: fieldValue,\n     exactMatch: exactMatch\n   }\n   $(\".error\").hide();\n   $.getJSON(\"${personsUrl}/ajax\", params, displayResults);\n  }\n  return false;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 259,
          "text": "Chapter 6 ■ Spring Web With aJaX\n   //global variables representing internationalized error messages\n   // they are set by the controller\n   var fieldValueErrMessage = \"${fieldValueErrMessage}\";\n   var fieldDateErrMessage = \"${fieldDateErrMessage}\";\n \nfunction isValid(fieldName, fieldValue){\n   var err='';\n    if(fieldValue.length == 0) {\n        err = fieldValueErrMessage;\n     } else if(fieldName == 'dob' && !isValidDate(fieldValue)) {\n        err = fieldDateErrMessage;\n   }\n \nif(err.length > 0) {\n   $(\"#fieldValue\").focus();\n   $(\"#fieldValueError\").text(err);\n   $(\"#fieldValueError\").fadeIn('fast');\n     return false;\n  }\n  return true;\n}\nAs mentioned, the params object is constructed to group the parameter names and values for the GET \nrequest. Even if it looks like a JSON object, it is not, and it does not need to be because it is not used as such. \nThe params object is not placed in the body of the request to be deserialized in the controller; instead, its \ncontent is extracted and added as request parameters to the request URL before making the request. Spring \nMVC takes these parameters and uses them to create an argument of type CriteriaDto, which is then \npassed as arguments of the search method in the controller.\nThe isValid method validates the request parameters and displays an error message if the parameters \nare invalid. If the request parameters are valid, the request is sent to the server and the response is processed \nusing the displayResults method. The isValidDate is a utility method that matches a string to a date \nformat.\nUsing REST-Style Remoting with JSON\nIf the request body and the response body are both in JSON format, considering that an AJAX request is  \nall about data exchange, REST could be used to make AJAX calls. So instead of using @Controller,  \n@RestController could handle AJAX calls. The JavaScript must change too. To demonstrate how this can \nbe done, a new menu option was created in 08-pr-ajax-solution. A new form was also added. They are \ndepicted in Figure 6-7. \n246",
          "tables": [],
          "code_blocks": [
            "if(fieldValue.length == 0) {\n        err = fieldValueErrMessage;\n     } else if(fieldName == 'dob' && !isValidDate(fieldValue)) {\n        err = fieldDateErrMessage;\n   }",
            "return false;\n  }\n  return true;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 260,
          "text": "Chapter 6 ■ Spring Web With aJaX\nFigure 6-7.  Menu item and form for using a RestController to perform a search\nThe form is a simplified version of the one previously used, because the field name in the search criteria \nis not selectable anymore. This was done to reduce the complexity of the JavaScript and to focus on the AJAX \nrequest. The only restriction now is for the user-inserted string to not be empty. Also, the page technically \ndoes not even need a Spring form anymore. A POST request can be done without having a form by using the \njQuery $.ajax method to perform the AJAX call. So no model attribute is needed to populate the form; you \nhave a simpler web interface, as another Spring component was removed. The following code can be found \nin /webapp/WEB-INF/persons/rest-search.jsp:\n<div class=\"person\">\n    <spring:url value=\"/rest-search/perform\" var=\"searchUrl\"/>\n        <table>\n            <tr>\n                <th>\n                   <spring:message code=\"label.Criteria.fieldname\"/> :\n                </th>\n \n                <td>\n                    <label>\n                         <spring:message code=\"label.Person.firstname\"/>\n                    </label>\n                </td>\n                <td></td>\n            </tr>\n            <tr>\n                <th>\n                     <span class=\"man\">*</span>\n                      <spring:message code=\"label.Criteria.fieldvalue\"/> :\n                </th>\n                <td><input name=\"fieldValue\" id=\"fieldValue\"/>\n                </td>\n247",
          "tables": [],
          "code_blocks": [
            "<spring:url value=\"/rest-search/perform\" var=\"searchUrl\"/>\n        <table>\n            <tr>\n                <th>\n                   <spring:message code=\"label.Criteria.fieldname\"/> :\n                </th>\n \n                <td>\n                    <label>\n                         <spring:message code=\"label.Person.firstname\"/>\n                    </label>\n                </td>\n                <td></td>\n            </tr>\n            <tr>\n                <th>\n                     <span class=\"man\">*</span>\n                      <spring:message code=\"label.Criteria.fieldvalue\"/> :\n                </th>\n                <td><input name=\"fieldValue\" id=\"fieldValue\"/>\n                </td>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 261,
          "text": "Chapter 6 ■ Spring Web With aJaX\n                <td>\n                </td>\n            </tr>\n            <tr>\n                <td></td>\n                <td colpan=\"2\">\n                    <input type=\"checkbox\" id=\"exactMatch\" />\n                    <spring:message code=\"label.Criteria.exactmatch\"/>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <input id=\"searchButton\" type=\"submit\"\n                       value=\"<spring:message code='command.search'/>\"/>\n                </td>\n                <td>\n                    <input id=\"cancelButton\" type=\"submit\"\n                       value=\"<spring:message code='command.cancel'/>\"/>\n                </td>\n            </tr>\n            <tr>\n                <td colspan=\"3\"><label class=\"error\" id=\"noResults\"/></td>\n            </tr>\n        </table>\n</div>\n \n<div id=\"resultDiv\">\n<!-- this div does not change-->\n</div>\nTo display the form, a different controller than the one handling the AJAX request has to be used, \nbecause a REST controller does not use views.\n@Controller\n@RequestMapping(value = \"/rest-search\")\npublic class RestFormController {\n \n    // Displays the REST customized person search form to the user\n    @RequestMapping(method = RequestMethod.GET)\n    public String search() {\n        return \"persons/rest-search\";\n    }\n}\nThe controller to handle the AJAX requests is a typical REST controller, annotated with @RestController, \nwhich was introduced in Chapter 5. The method handling the AJAX request expects the criteria to be \nsubmitted in JSON format (the consumes attribute) and provides a response that will be serialized to the \nJSON format (the produces attribute).\n248",
          "tables": [],
          "code_blocks": [
            "<td>\n                </td>\n            </tr>\n            <tr>\n                <td></td>\n                <td colpan=\"2\">\n                    <input type=\"checkbox\" id=\"exactMatch\" />\n                    <spring:message code=\"label.Criteria.exactmatch\"/>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <input id=\"searchButton\" type=\"submit\"\n                       value=\"<spring:message code='command.search'/>\"/>\n                </td>\n                <td>\n                    <input id=\"cancelButton\" type=\"submit\"\n                       value=\"<spring:message code='command.cancel'/>\"/>\n                </td>\n            </tr>\n            <tr>\n                <td colspan=\"3\"><label class=\"error\" id=\"noResults\"/></td>\n            </tr>\n        </table>",
            "// Displays the REST customized person search form to the user\n    @RequestMapping(method = RequestMethod.GET)\n    public String search() {\n        return \"persons/rest-search\";\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 262,
          "text": "Chapter 6 ■ Spring Web With aJaX\n@RestController\n@RequestMapping(value = \"/rest-search/perform\")\npublic class RestSearchController {\n \n    @Autowired\n    protected PersonManager personManager;\n \n    @ResponseStatus(HttpStatus.OK)\n    @RequestMapping(method = RequestMethod.POST,\n            produces = MediaType.APPLICATION_JSON_VALUE,\n            consumes = MediaType.APPLICATION_JSON_VALUE)\n    public List<Person> getAll(@RequestBody CriteriaDto criteria)\n         throws InvalidCriteriaException {\n        if (criteria.getFieldValue() == null || criteria.getFieldValue().isEmpty()) {\n            return personManager.getByCriteriaDto(criteria);\n        }\n        return new ArrayList<>();\n    }\n}\nTo make things more interesting, two callbacks will be used: one for the case when the request is \nresolved correctly and one for the case when the request fails.\n<script type=\"text/javascript\">\n$(function () {\n \n  $(\"#searchButton\").click(\n     function (event) {\n     event.preventDefault();\n      sendAjaxReq();\n  });\n \n });\n function sendAjaxReq(){\n        var fieldValue = $(\"#fieldValue\").val();\n        var exactMatch = $(\"#exactMatch\").is(\":checked\");\n \n        if (fieldValue != '') {\n            $.postJSON(\"${searchUrl}\",\n            JSON.stringify({\n                \"fieldName\": \"firstName\",\n                \"fieldValue\": fieldValue,\n                \"exactMatch\": exactMatch}),displayResults);\n     // the displayResults method was not changed\n        }\n    }\n \n249",
          "tables": [],
          "code_blocks": [
            "@Autowired\n    protected PersonManager personManager;\n \n    @ResponseStatus(HttpStatus.OK)\n    @RequestMapping(method = RequestMethod.POST,\n            produces = MediaType.APPLICATION_JSON_VALUE,\n            consumes = MediaType.APPLICATION_JSON_VALUE)\n    public List<Person> getAll(@RequestBody CriteriaDto criteria)\n         throws InvalidCriteriaException {\n        if (criteria.getFieldValue() == null || criteria.getFieldValue().isEmpty()) {\n            return personManager.getByCriteriaDto(criteria);\n        }\n        return new ArrayList<>();\n    }",
            "$(\"#searchButton\").click(\n     function (event) {\n     event.preventDefault();\n      sendAjaxReq();\n  });\n \n });\n function sendAjaxReq(){\n        var fieldValue = $(\"#fieldValue\").val();\n        var exactMatch = $(\"#exactMatch\").is(\":checked\");\n \n        if (fieldValue != '') {\n            $.postJSON(\"${searchUrl}\",\n            JSON.stringify({\n                \"fieldName\": \"firstName\",\n                \"fieldValue\": fieldValue,\n                \"exactMatch\": exactMatch}),displayResults);\n     // the displayResults method was not changed\n        }\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 263,
          "text": "Chapter 6 ■ Spring Web With aJaX\n//function is added to the jQuery object\n// so it can be called with $.postJSON\n$.postJSON = function(url, data, callback) {\n        return $.ajax({\n            \"type\": \"POST\",\n            \"url\": url,\n            \"contentType\": \"application/json\",\n            \"data\": data,\n            \"dataType\": \"json\"\n        }).done(function(results) {\n            displayResults(results);\n        }).fail(function (){\n            alert(\"ERROR!\");\n        });\n};\nThe first new function that requires attention is JSON.stringify, which converts a JavaScript value to a \nJSON string. This is needed because the $.ajax method performs a POST into a CriteriaDto object at the \ncontroller level. The response is already in JSON format, so its sister method, JSON.parse, which transforms \na string into a JSON object, is not needed.10\nThe done and the fail callback methods can be chained with the $.ajax call. They are called on the \nrequest object that is returned by the $.ajax method.\nDepending on the requirements of the application, the implementation with Spring MVC or Spring \nREST can be used. The last one is usually recommended for applications that also have clients that do not \nuse a web interface, like REST web services, mobile applications, and so forth.\nCustom Tags\nWeb applications are deployed on application servers when they are used in production. When the \napplications are small, multiple applications can be deployed on the same server, and each of them should \nhave a contextPath defined for requests to be filtered and received by the appropriate application. The \napplication does not know on which server it will be deployed, on which port the server was configured to \nwork on, and under which name the application will be available, because that's what a context is, sort of. \nOther applications can be deployed on that server, and without a context for each of them, the server would \nnot be able to forward requests to the specific application. That is why all links in an application must be \nrelative to the context of the application.\nIn the sample applications used with this book, a context path is defined by configuring the Gretty \nplugin:\ngretty {\n    port = 8080\n    contextPath = '/mvc-ajax'\n}\n10The API for these two functions can be found at https://msdn.microsoft.com/library/cc836459%28v= \nvs.94%29.aspx .\n250",
          "tables": [],
          "code_blocks": [
            "return $.ajax({\n            \"type\": \"POST\",\n            \"url\": url,\n            \"contentType\": \"application/json\",\n            \"data\": data,\n            \"dataType\": \"json\"\n        }).done(function(results) {\n            displayResults(results);\n        }).fail(function (){\n            alert(\"ERROR!\");\n        });",
            "port = 8080\n    contextPath = '/mvc-ajax'"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 264,
          "text": "Chapter 6 ■ Spring Web With aJaX\nEach request to any resource of this application contains mvc-ajax because of that setting. All the \nlinks in the application are relative to this context, so in case the context changes, the links still point to \nthe correct resources. When the application is started locally, it can be accessed at the following link: \nhttp://localhost:8080/mvc-ajax. This link can be considered an entry point in the application. If \ncontextPath = '/mvc-ajax' changes to contextPath = '/myproject', the entry point link changes to \nhttp://localhost:8080/myproject and all the other links in the application are relative to the new \ncontext as well.\nTo generate a link relative to an application context in a JSP page, development Java scriptlets were used \nat the beginning of Java Web applications:\n<a href=\"<%=request.getContextPath()%>Display Persons</a>\nBut scriptlets make the JSP code quite difficult to read, and they could not be inherited or reused. They \nbecame obsolete in JSP 2.0. The smarter features that replaced them are called JSP tags. These are custom \nJSP elements that can be used inside a JSP page to add extra functionality or wrap up repetitive JSP code. To \ncreate a URL relative to the context of an application, the c:url can be used like this:\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%>\n<c:url value=\"/persons\" var=\"url\"/>\n<a href=\"${url}\">Display Persons</a>\nWith the spring:url tag, a link relative to the context can be defined in a JSP page in a similar way as \nusing c:url:\n<%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\"%>\n<spring:url value=\"/persons\" var=\"url\"/>\n<a href=\"${url}\">Display Persons</a>\nJSP tags make the JSP pages more readable. The most popular JSP tag collection is JSTL (JSP Standard \nTag Library).11 The c:url tag is one of the core tags in this library. If you want to take a look at the contents of \nthe JSTL library, go to Intellij IDEA and look in the Project view. There is a node named External Libraries. \nExpanding that node makes all the dependencies of the project become visible. Look for Maven:javax.\nservlet:jstl:1.2 and expand that node; you should see something similar to what's shown in Figure 6-8.\n11JSTL is part of the JEE web development platform and extends the JSP specification by adding a set of JSP tags that \ncan be used for the most common tasks, like XML and text processing, conditional execution, loops, and so forth. More \ndetails about tag libraries can be found on the official page https://jstl.java.net/.\n251",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 265,
          "text": "Chapter 6 ■ Spring Web With aJaX\nFigure 6-8.  Contents of the jstl.jar library\nA developer can create his own custom JSP tags to define a custom task and use it in a JSP page. To \ncreate a custom tag, a dedicated file containing JSP code needs to be created for that tag (in Figure 6-8, the \ndedicated files are the ones with .tld extension). A class and a *.tld file (tag library descriptors) are needed \nif the tag is complex (the tld file and the class are more verbose and won't be covered in this book).\nIn the following code snippet, you can see the definition of a custom tag that allows context relative URL \nto be generated in a simple manner (and tests it too):\n<!-- WEB-INF/tags/smart.tag -->\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%>\n<%@ attribute name=\"inputURL\" required=\"true\" rtexprvalue=\"true\"%>\n<%@ attribute name=\"text\" required=\"true\" rtexprvalue=\"true\"%>\n<c:url value=\"${inputURL}\" var=\"url\"/>\n<a href=\"${url}\">${text}</a>\n \n<!-- usage in a JSP file -->\n<%@ taglib prefix=\"url\" tagdir=\"/WEB-INF/tags\"%>\n...\n<url:smart inputURL=\"/persons/search/\" text=\"Search Persons\"/>\n252",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 266,
          "text": "Chapter 6 ■ Spring Web With aJaX\nThe inputURL and text are tag attributes that are populated when the tag is used. The following is the \nHTML code that results from the <url:smart /> line:\n<a href=\"/mvc-ajax/persons/search/\">Search Persons</a>\nIf you are interested in learning more about custom tag creation, Oracle has a very good public \ntutorial.12\nSummary\nAfter reading this chapter, you should have a proper understanding of how Spring can be combined with \nAJAX technologies to create efficient web applications with responsive pages. Here is a small list of questions \nthat you might want to keep handy when reviewing your acquired knowledge:\n•\t What is AJAX?\n•\t What is an instance of XMLHttpRequest used for?\n•\t What is jQuery and how can it be used to access Spring applications?\n•\t What is a custom JSP tag is and how do you create one?\nQuick Quiz\nQuestion 1: What is AJAX?\n  A.  a framework to create responsive web pages\n  B.  a set of standards on how to create responsive web pages\n  C.  an acronym for Asynchronous JavaScript and XML\n  D.  a set of technologies that can be used to create highly responsive web \napplications\nQuestion 2: What can be said about jQuery?\n  A.  It is a tag library.\n  B.  It is a set of technologies to create responsive web pages.\n  C.  It is the most popular JavaScript library.\nQuestion 3: What jQuery method can be used to make a GET request?\n  A.  $.get\n  B.  $.getJSON\n  C.  $.ajax\n  D.  $.post\n12Oracle custom tags creation; see https://docs.oracle.com/javaee/7/tutorial/.\n253",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 267,
          "text": "Chapter 6 ■ Spring Web With aJaX\nQuestion 4: What is a custom JSP tag?\n  A.  a custom tag is a user-defined JSP language element\n  B.  a special class that handles JSP tasks execution\nPractical Exercise\nThe practical exercises for this chapter require you to develop a REST handler method to search and return a \nlist of people matching the criteria sent from the browser, as well as a few JavaScript functions using jQuery \nto display results and errors. You'll use the 08-pr-ajax-practice project module. 08-pr-ajax-solution is \nanalogous module with a proposed solution. This module also contains extra implementations that were \nmentioned earlier in the chapter.\nThe TODO tasks for this chapter are shown in Figure 6-9.\nFigure 6-9.  TODO tasks for Spring with AJAX practice module\n254",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 268,
          "text": "Chapter 6 ■ Spring Web With aJaX\nThe PersonsSearchController is the controller used to handle requests that come from the search.jsp \npage. The PersonsController contains a single method that is used to retrieve a person's information and \nreturn it to the client in JSON format. The rest of the project setup (configuration and tiles) are the same as in \nprevious modules. No extra settings are needed to handle AJAX requests.\nThe application is configured via Jetty to run at http://localhost:8080/mvc-ajax. Just run the \napplication using 'gradle appStart' and stop it using 'gradle appStop'.\nAfter you complete the proposed TODOs, as a bonus exercise, you can try creating the start custom tag \ndescribed in the last section of this chapter.\n255",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 269,
          "text": "Chapter 7\nSpring Web Flow\nAs time went by, and more and more services could remotely use web applications, the web applications \nbecame more complex—and designing and implementing them became a cumbersome process. Most \napplications imply creating objects and passing them through several states, or creating objects depending \non each other. Spring Web Flow (SWF) is a component of the Spring Framework’s web stack that was created \nto help develop complex applications by reducing the difficulty in development.\nThe Spring Web Flow complements the @Controller model and provides the infrastructure needed to \nbuild complex web applications that support controlled page navigation and state transition; all of this adds \nup to a rigorously defined conversation between the end user and the application. It is possible to write such \napplications with any other web technology, but the definition of a flow is interconnected with the rest of the \nweb components; it is scattered all over the implementation, which makes refactoring and maintenance a \nreal pain. What Spring Web Flow brings to the table is the possibility to define flows as separate components \ndetached from the rest of the implementation—web-specific classes and views. The flow components can \nbe defined and used similar to the way beans are used in Spring. Flow definitions can be inherited, thus \nimplementing flow hierarchies. Flows can be reused and customized as needed.\nAs this book being is written, the current version of Spring Web Flow is the 2.4.2.RELEASE,1 so this is \nthe version added as a dependency for the Web Flow chapter sources. This version includes the ability to \nconfigure flows using Java Configuration and many other features.\nThe main library is called spring-webflow. When building the project for the first time, the spring-js \nand spring-binding transitive dependencies should be downloaded too.\nWhat Is a Flow?\nA flow models the sequence of steps necessary to perform a task. The most common and simple flow \nexample is ordering items on the Internet. This operation requires the following steps in which the user \nis guided through: choose item, proceed to checkout, create an account or log in to your account, insert \nshipping detail, insert payment details, and approve payment to complete the process. Each failure to \nprovide the correct information stops the user from advancing to the next step. If the user wants to go back \nand review a previous screen, he can do so, unless configured otherwise. But there are web operations that \ndepend on the data received from the user to direct them from one flow to another.\n1The official site of the project (http://projects.spring.io/spring-webflow/) is usually updated late, so it might \nshow an earlier version; the most recent release can be found on the Maven public repositpry site at  \nhttp://mvnrepository.com.\n257",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 270,
          "text": "Chapter 7 ■ Spring Web FloW\nBy using the Personal Records Manager at the completion of this chapter, you will be able to create \nan account and personal data for a person. This operation requires you to design a flow that executes the \nfollowing steps:\n  1.  Insert personal data.\n  2.  If the hospital where the user was born is in the system, select it.\n  3.  Otherwise, the user is directed to the page where he can create a Hospital \ninstance.\n  4.  Return to the previous step and complete creating the Person instance.\n  5.  Insert IdentityCard data.\n  6.  Review data.\n  7.  If the person is an adult (age > 18), add an account.\nThese steps are depicted in Figure 7-1.\nFigure 7-1.  Personal Records Manager web flow\nIn Spring Web Flow, a flow consists of a series of steps called states. A flow will always have only one \nstart point and one or more end points. Leaving one state and passing into another can be restricted by the \nresult of a conditional expression. Entering a new state usually results in a view being displayed to the user. \nThe user works with the view, causing user events to occur. The user events trigger transitions between \nstates, which in turn cause navigation to another view.\n258",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 271,
          "text": "Chapter 7 ■ Spring Web FloW\nAside from making development easier and clearer, Spring Web Flow was created to solve the following \nproblems related to complex web navigation:\n•\t Duplicate submissions.\n•\t Pop-up window support within a flow.\n•\t State synchronization problems between the server and the client caused by using \nthe browser’s back and refresh buttons.\n•\t State collisions between windows.\n•\t Stale session state. (A session can end up containing inactive data, when a timeout is \nset. The inactive items must be precisely identified and purged.)\n•\t Short-circuiting navigation rules. (Possibility to jump over steps in the navigation, \ndepending on navigation conditions.)\nWeb Flow Architecture\nIn Spring Web Flow, flows are defined using an XML-based flow definition language. The backing \nclasses follow the model already established by Spring MVC. Spring Web Flow provides its own classes to \nidentify handler methods matching flow execution requests and resolving views. The DispatcherServlet is \nstill the front controller when the application is servlet based. For implementation with portlets, there is an \nanalogous implementation provided with DispatcherPortlet(s) as entry points. The similarities with the \nSpring MVC model can be observed in Figure 7-2.\nFigure 7-2.  The Spring Web Flow backing classes\n259",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 272,
          "text": "Chapter 7 ■ Spring Web FloW\nThe FlowController class is the adapter between the Spring MVC Controller layer and the Spring Web \nFlow engine. Its responsibility is to provide implementation so that Spring Web Flow can run embedded as a \ncontroller within a DispatcherServlet. So basically, the FlowController is itself a front controller for Spring \nWeb Flow.\nThe FlowHandlerMapping maps all flow requests to the appropriate handlers using \nFlowDefinitionRegistry. The FlowHandlerAdapter takes care of executing the flow handler methods in a \nservlet environment using the FlowExecutor implementation.\nAfter they do their jobs, the DispatcherServlet uses the FlowViewResolver interface to resolve a view \nfrom the state of an executing flow.\nWhen working with flows, each flow definition is declared in a specific configuration file and is \nregistered in the system by the FlowDefinitionRegistry. For each flow in the system, a configuration file is \ncreated and placed in the same directory with all resources implied in the flow execution: views templates, \nproperty files, and others. In Figure 7-3, you can see how the files are organized in the practice project for \nthis chapter.\nFigure 7-3.  Personal Records Manager web flow configuration file and resources\n260",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 273,
          "text": "Chapter 7 ■ Spring Web FloW\nThe newPerson-flow.xml configuration file contains the states that the users are directed through to \ncreate a new person. For now, the empty file is presented containing only the Spring Web Flow namespace \nused to define flow elements:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<flow xmlns=\"http://www.springframework.org/schema/webflow\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xsi:schemaLocation=\"http://www.springframework.org/schema/webflow\n        http://www.springframework.org/schema/webflow/spring-webflow.xsd\">\n \n    <!-- states and actions will be placed here later -->\n</flow>\nThe flows are exposed to the client as web resources. The client starts flows by accessing these \nresources. For example, accessing http://localhost:8080/webflow-basic/persons/newPerson starts \nthe newPerson flow. (The reason the URL has that particular structure is explained later.) Starting a flow \nactually means starting a new flow execution, meaning an execution context for the task currently in progress \nis created. The execution context is user session-scoped, meaning all the variables and data needed for the \nexecution of the task is kept in the user session, unless an execution step requires otherwise. (Sometimes \ndata can be saved to the database and removed from the session.)\nWeb Flow Internal Logic\nWhen the flow starts executing, you can use the URL changing to\nhttp://localhost:8080/webflow-basic/persons/newPerson?execution=e1s1\nThe parameter execution is the session-scoped execution key. Its value contains the flow execution \nidentifier (e1) and the identifier of the execution step that is currently in progress (s1). Every time the \nflow progresses a step, the step identifier is incremented. Every time a new flow execution is started, the \nexecution identifier is incremented.\nA user resumes flow executions by clicking buttons in the interface—buttons (or links) that have events \nassociated with them using the name property. For example:\n<button id=\"newPersonButton\" name=\" eventId proceed\" type=\"submit\">\n     <spring:message code=\"command.proceed\" />\n</button>\nSo when the button with the newPersonButton id is clicked, a request is sent to the URL.\n.../persons/newPerson?execution=e1s1&_event_id=proceed\nThe data provided by the user is bound to the flow context. The flow handles the event, processes the \ndata as defined, and decides what to do next based on the definition of the flow: display a new view to the \nuser, display the same view, and remain in the same step of execution if validation failed or ends the flow. \nWhen a flow execution has ended, the execution cannot be resumed; this implies that the transaction cannot \nbe completed multiple times. After a flow execution ends, the flow state is automatically cleaned.\nThe interaction between a client and a flow always consists of two separate steps: the client will request \na resource or activate (trigger) an event and the flow will redirect to the appropriate state. This means that \neach web flow interaction involves two requests: the client request and the flow redirect request. This has \nanother implication: the data submitted by the initial request will not be available after the redirecting is \n261",
          "tables": [],
          "code_blocks": [
            "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xsi:schemaLocation=\"http://www.springframework.org/schema/webflow\n        http://www.springframework.org/schema/webflow/spring-webflow.xsd\">\n \n    <!-- states and actions will be placed here later -->",
            "<spring:message code=\"command.proceed\" />"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 274,
          "text": "Chapter 7 ■ Spring Web FloW\ndone and the next view has already been rendered. But there are ways of persisting the data across requests \nwhen using web flows; this is covered later in the chapter. In Figure 7-4, the interaction between the client \nand a flow is displayed.\nFigure 7-4.  Schema of an interaction between the client and a flow\nConfiguration and Infrastructure Beans\nSpring provides two ways of configuring the environment in which the web flow components can be used: \nusing an the XML namespace and defining the infrastructure beans in an webflow-config.xml file, or using \nJava Configuration annotations by defining a configuration class that extends a specific Spring class.\n■ !  the configuration file can be named in whatever way the developer desires, as long as it is relevant in the \ncontext of the developed application. the beans can be defined in any other Spring configuration file already \nexisting in the application; but the recommended approach and best practice is to keep infrastructure beans \ndefinitions grouped by their purpose. in the application used for practice with this book, the beans are grouped \nas follows:\n•\t MVC infrastructure beans in mvc-config.xml\n•\t application custom beans in app-config.xml\n•\t Web Flow infrastructure beans in webflow-config.xml\n•\t Security infrastructure beans in security-config.xml\n262",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 275,
          "text": "Chapter 7 ■ Spring Web FloW\nWhen configuring an application that uses Web Flow, there are roughly three steps that have to be \ncovered:\n  1.  A flow executor and a flow registry bean have to be defined and configured to \nmatch the structure of the application so that the flows can be executed correctly \nby Spring Web Flow.\n  2.  A flow adapter and a flow mapping bean have to be defined and added to the \nlist of existing handler mapping and handler adapter beans for the Spring MVC \nconfiguration to enable flow handling by Spring MVC.\n  3.  An MvcViewFactoryCreator bean has to be created and configured to use the \nbean view resolvers already defined in the application.\nThe following two sections cover how this is done when using XML and Java Configuration.\nConfiguration Using XML\nAs mentioned in previous chapters, the Spring MVC configuration infrastructure beans are defined \nin the examples of this book into a file named mvc-config.xml. In this file, FlowHandlerMapping and \nFlowHandlerAdapter bean definitions have to be added:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:p=\"http://www.springframework.org/schema/p\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/mvc\n       http://www.springframework.org/schema/mvc/spring-mvc.xsd\n                http://www.springframework.org/schema/beans\n                http://www.springframework.org/schema/beans/spring-beans.xsd\">\n \n  <mvc:annotation-driven\n   conversion-service=\"typeConversionService\"\n   validator=\"validator\"/>\n \n  <bean id=\"validator\"\n  class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\"/>\n \n<!-- Define a custom ConversionService -->\n   <bean id=\"typeConversionService\"\n     class=\"o.s.format.support.FormattingConversionServiceFactoryBean\">\n     ...\n     </bean>\n \n263",
          "tables": [],
          "code_blocks": [
            "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:p=\"http://www.springframework.org/schema/p\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/mvc\n       http://www.springframework.org/schema/mvc/spring-mvc.xsd\n                http://www.springframework.org/schema/beans\n                http://www.springframework.org/schema/beans/spring-beans.xsd\">\n \n  <mvc:annotation-driven\n   conversion-service=\"typeConversionService\"\n   validator=\"validator\"/>\n \n  <bean id=\"validator\"\n  class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\"/>",
            "class=\"o.s.format.support.FormattingConversionServiceFactoryBean\">\n     ...\n     </bean>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 276,
          "text": "Chapter 7 ■ Spring Web FloW\n<!-- other Spring MVC specific beans, look in Chapter 3 for reference -->\n...\n <!-- Maps requests to flows in the flowRegistry; e.g. a path of\n    /persons/newPerson looks for a flow with id \"persons/newPerson\" -->\n    <bean id=\"flowMappings\"\n      class=\"org.springframework.webflow.mvc.servlet.FlowHandlerMapping\"\n           p:order=\"-1\"\n           p:flowRegistry-ref=\"flowRegistry\"/>\n \n    <!-- Dispatches requests mapped to flows to FlowHandler implementations -->\n    <bean class=\"org.springframework.webflow.mvc.servlet.FlowHandlerAdapter\"\n        p:flowExecutor-ref=\"flowExecutor\"/>\n \n</beans>\nIn the previous example, because <mvc:annotation-driven/> is used, the annotation-driven \nSpring MVC Controller programming model is automatically enabled, and no other HandlerMapping \nimplementation needs to be defined. However, the FlowHandlerMapping must be the first HandlerMapping \nimplementation used to try to retrieve a mapping to make sure that the flow is identified correctly; that’s why \norder=\"-1\" is used to set the highest priority in the handler mappings list. This class returns null in the case \nof no flow id match, allowing the next handler mapping in the chain to execute.\nIn the webflow-config.xml file, the Spring Web Flow–specific beans are defined and the specific \nnamespace are used:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:webflow=\"http://www.springframework.org/schema/webflow-config\"\n    xsi:schemaLocation=\"\n      http://www.springframework.org/schema/beans\n      http://www.springframework.org/schema/beans/spring-beans.xsd\n      http://www.springframework.org/schema/webflow-config\n    http://www.springframework.org/schema/webflow-config/spring-webflow-config.xsd\">\n \n    <!-- Executes web flows -->\n    <webflow:flow-executor id=\"flowExecutor\" flow-registry=\"flowRegistry\" />\n    <!-- Contains the flows defined by this application -->\n    <webflow:flow-registry id=\"flowRegistry\" base-path=\"/WEB-INF\"\n         flow-builder-services=\"flowBuilderServices\">\n         <webflow:flow-location-pattern value=\"**/*-flow.xml\" />\n    </webflow:flow-registry>\n \n    <!-- Configures services needed to build flow definitions -->\n    <webflow:flow-builder-services id=\"flowBuilderServices\"\n          view-factory-creator=\"mvcViewFactoryCreator\"\n           conversion-service=\"conversionService\"\n           development=\"true\" />\n \n264",
          "tables": [],
          "code_blocks": [
            "/persons/newPerson looks for a flow with id \"persons/newPerson\" -->\n    <bean id=\"flowMappings\"\n      class=\"org.springframework.webflow.mvc.servlet.FlowHandlerMapping\"\n           p:order=\"-1\"\n           p:flowRegistry-ref=\"flowRegistry\"/>\n \n    <!-- Dispatches requests mapped to flows to FlowHandler implementations -->\n    <bean class=\"org.springframework.webflow.mvc.servlet.FlowHandlerAdapter\"\n        p:flowExecutor-ref=\"flowExecutor\"/>",
            "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:webflow=\"http://www.springframework.org/schema/webflow-config\"\n    xsi:schemaLocation=\"\n      http://www.springframework.org/schema/beans\n      http://www.springframework.org/schema/beans/spring-beans.xsd\n      http://www.springframework.org/schema/webflow-config\n    http://www.springframework.org/schema/webflow-config/spring-webflow-config.xsd\">\n \n    <!-- Executes web flows -->\n    <webflow:flow-executor id=\"flowExecutor\" flow-registry=\"flowRegistry\" />\n    <!-- Contains the flows defined by this application -->\n    <webflow:flow-registry id=\"flowRegistry\" base-path=\"/WEB-INF\"\n         flow-builder-services=\"flowBuilderServices\">\n         <webflow:flow-location-pattern value=\"**/*-flow.xml\" />\n    </webflow:flow-registry>\n \n    <!-- Configures services needed to build flow definitions -->\n    <webflow:flow-builder-services id=\"flowBuilderServices\"\n          view-factory-creator=\"mvcViewFactoryCreator\"\n           conversion-service=\"conversionService\"\n           development=\"true\" />"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 277,
          "text": "Chapter 7 ■ Spring Web FloW\n    <!-- Configures Web Flow to render Tiles views resolved by Spring MVC -->\n    <bean id=\"mvcViewFactoryCreator\"\n       class=\"org.springframework.webflow.mvc.builder.MvcViewFactoryCreator\">\n        <property name=\"viewResolvers\" ref=\"tilesViewResolver\" />\n        <property name=\"useSpringBeanBinding\" value=\"true\"/>\n    </bean>\n \n    <!-- Configures Web Flow to automatically convert custom types\n         (using the same converter as for Spring MVC) -->\n    <bean id=\"conversionService\"\n       class=\"org.springframework.binding.convert.service.DefaultConversionService\">\n       <constructor-arg ref=\"typeConversionService\" />\n    </bean>\n \n</beans>\nThe Spring webflow-config namespace provides XML elements that make defining Spring Web Flow \ncomponents more practical and more readable for the user, but a more detailed explanation is needed for \nthe preceding configuration.\n•\t flowExecutor: This bean created is of type FlowExecutorImpl and it uses the \nflowRegistry bean to identify all flows eligible for execution. This bean is the \nentry point into the Web Flow system, as it manages starting and resuming flow \nexecutions. When an executor bean is created, Spring automatically looks for a flow \nregistry bean named flowRegistry, so the preceding definition can be simplified to\n          <webflow:flow-executor id=\"flowExecutor\"/>\nAlso, because this is the central bean of the Spring Web Flow engine, listeners \ncan be registered for it to verify rights to perform specific execution steps or audit \nthe execution steps for debugging purposes.\n<webflow:flow-executor id=\"flowExecutor\">\n    <webflow:flow-execution-listeners>\n        <webflow:listener ref=\"secureFlowExecutionListener\" />\n        <webflow:listener ref=\"auditFlowExecutionListener\" />\n    <webflow:flow-execution-listeners>\n</webflow:flow-executor>\n    ...\n<bean id=\"secureFlowExecutionListener\"\n   class=\"org.springframework.webflow.security.SecurityFlowExecutionListener\"/>\n<bean id=\"auditFlowExecutionListener\"\n     class=\"com.pr.audit.AuditFlowExecutionListener\"/>\n■ !  the flow execution listeners can be configured to be applied only on certain flows; for example:\n<webflow:listener ref=\"secureFlowExecutionListener\"\n   criteria=\"administrativeFlow1, administrativeFlow2\"/>\n265",
          "tables": [],
          "code_blocks": [
            "<!-- Configures Web Flow to render Tiles views resolved by Spring MVC -->\n    <bean id=\"mvcViewFactoryCreator\"\n       class=\"org.springframework.webflow.mvc.builder.MvcViewFactoryCreator\">\n        <property name=\"viewResolvers\" ref=\"tilesViewResolver\" />\n        <property name=\"useSpringBeanBinding\" value=\"true\"/>\n    </bean>\n \n    <!-- Configures Web Flow to automatically convert custom types\n         (using the same converter as for Spring MVC) -->\n    <bean id=\"conversionService\"\n       class=\"org.springframework.binding.convert.service.DefaultConversionService\">\n       <constructor-arg ref=\"typeConversionService\" />\n    </bean>",
            "<webflow:flow-executor id=\"flowExecutor\"/>",
            "<webflow:flow-execution-listeners>\n        <webflow:listener ref=\"secureFlowExecutionListener\" />\n        <webflow:listener ref=\"auditFlowExecutionListener\" />\n    <webflow:flow-execution-listeners>",
            "...",
            "class=\"com.pr.audit.AuditFlowExecutionListener\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 278,
          "text": "Chapter 7 ■ Spring Web FloW\nthe flowExecutor can be configured to tune flow execution persistence settings by adding a customized \ndefinition for flow-execution-repository.\n<webflow:flow-executor id=\"flowExecutor\" flow-registry=\"flowRegistry\">\n<webflow:flow-execution-repository max-executions=\"5\"\n   max-execution-snapshots=\"30\" />\n</webflow:flow-executor>\nthe max-executions property is used to configure the maximum number of persistent flow executions allowed \nper user session. When the maximum number of executions is exceeded, the oldest execution is removed.\nthe max-execution-snapshots property is used to configure the maximum number of history snapshots \nallowed per flow execution. history snapshots enable browser back button support. When snapshotting is \ndisabled, pressing the browser back button will not work. it will result in using an execution key that points to a \nsnapshot that has not been recorded. \n•\t flowRegistry: Each flow definition registered in this registry bean is assigned a \nunique identifier. The base-path property is used specify the root directory, under \nwhich all the flow definition files are found; usually this is the WEB-INF directory. \nThe flow-location-pattern further narrows the search for the flow definitions, \nproviding a wildcard template file name for the flow definition files. But flow \ndefinitions can be also registered one at a time using flow-location elements. For \nexample:\n<webflow:flow-registry id=\"flowRegistry\" base-path=\"/WEB-INF\"\n     flow-builder-services=\"flowBuilderServices\">\n    <webflow:flow-location path=\"persons/newPerson/newPerson-flow.xml\"/>\n</webflow:flow-registry>\n•\t flowBuilderServices: This bean registers custom implementations of services \nneeded to build flow definitions: view resolvers, data convertors, formatters, \nvalidators, and others. In version 2.4.0.RELEASE, the validation-hints were added, \nso flow definition can apply partial validation on the model through the validation-\nhints attribute supported on view state and transition elements. This bean was \nmodified to add a property named validation-hint-resolver that can be used to \nset a custom validation hints resolver. (An example is presented later in the book.)\n■ !  the development=\"true\" is quite important, because as you will solve the practice exercises, you might \nnot want to restart the application every time you make a change to a flow definition. Setting the development \nproperty to \"true\" ensures that changes to a flow definition is autodetected and results in a flow refresh. \n266",
          "tables": [],
          "code_blocks": [
            "flow-builder-services=\"flowBuilderServices\">\n    <webflow:flow-location path=\"persons/newPerson/newPerson-flow.xml\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 279,
          "text": "Chapter 7 ■ Spring Web FloW\n•\t mvcViewFactoryCreator: This bean is used by a FlowBuilder to configure a flow’s \nview states with Spring MVC–based view factories. In this case, the tiles view \nresolver is injected into it, so it can be used to resolve view states using it. The \nuseSpringBeanBinding property is set to “true” to enable the same binding system \nused by the Spring MVC in a Web Flow environment.\n•\t conversionService: This bean is a wrapper for the conversion service bean used by \nSpring MVC, which is provided to the flowBuilderServices bean to be used during \na flow execution.\nConfiguration Using Annotations\nFor the 09-pr-webflow-basic-practice, a full Java Configuration is used; no web.xml. Three classes were \ndefined for such proposes under the com.pr.config package. Figure 7-5 depicts all three classes, their \nparents, and the relationship between them. \nFigure 7-5.  Configuration classes for Personal Records Manager project when Spring Web Flow is used\n■ ?  Can you tell which class takes care of a certain part of the infrastructure just by looking at the diagram in \nFigure 7-5?\n267",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 280,
          "text": "Chapter 7 ■ Spring Web FloW\nEach class covers a part of the infrastructure setup needed to run a Spring web application without a \nweb.xml file that uses Spring Web Flow.\n•\t The MvcConfig class encapsulates the Spring MVC infrastructure bean definitions \nthat were covered in Chapter 3. To plug in the Web Flow beans, some modifications \nwere done. The webFlowConfig was injected so the handler mapping and handler \nadapter specific to flows could be configured.\n ...\nimport org.springframework.webflow.mvc.servlet.FlowHandlerAdapter;\nimport org.springframework.webflow.mvc.servlet.FlowHandlerMapping;\n \n@Configuration\n@EnableWebMvc\npublic class MvcConfig extends WebMvcConfigurerAdapter {\n     @Autowired\n     private WebFlowConfig webFlowConfig;\n \n     //other Spring MVC infrastructure beans: formatters, interceptors,\n     // resolvers, etc. Review Chapter 3 for reference.\n     ...\n \n     //Web Flow specific infrastructure beans\n       @Bean\n     public FlowHandlerMapping flowHandlerMapping() {\n         FlowHandlerMapping handlerMapping = new FlowHandlerMapping();\n         handlerMapping.setOrder(-1);\n         handlerMapping.setFlowRegistry(this.webFlowConfig.flowRegistry());\n         return handlerMapping;\n     }\n \n     @Bean\n     public FlowHandlerAdapter flowHandlerAdapter() {\n         FlowHandlerAdapter handlerAdapter = new FlowHandlerAdapter();\n         handlerAdapter.setFlowExecutor(this.webFlowConfig.flowExecutor());\n         handlerAdapter.setSaveOutputToFlashScopeOnRedirect(true);\n         return handlerAdapter;\n     }\n}\nThe WebFlowConfig class encapsulates the Spring Web Flow infrastructure \nbean definitions. To align these beans with Spring MVC, the mvcConfig \nbean was injected, so formatter, validators, and view resolvers could be \naccessed and set to use during flow executions. This class extends the \nSpring specialized AbstractFlowConfiguration class, which does not \nprovide any configuration itself but provides access via protected methods \nto builders for flow executor (getFlowExecutorBuilder()), flow registry \n(getFlowDefinitionRegistryBuilder()), and  flow builder services \n(getFlowBuilderServicesBuilder()).\n268",
          "tables": [],
          "code_blocks": [
            "@Autowired\n     private WebFlowConfig webFlowConfig;\n \n     //other Spring MVC infrastructure beans: formatters, interceptors,\n     // resolvers, etc. Review Chapter 3 for reference.\n     ...\n \n     //Web Flow specific infrastructure beans\n       @Bean\n     public FlowHandlerMapping flowHandlerMapping() {\n         FlowHandlerMapping handlerMapping = new FlowHandlerMapping();\n         handlerMapping.setOrder(-1);\n         handlerMapping.setFlowRegistry(this.webFlowConfig.flowRegistry());\n         return handlerMapping;\n     }\n \n     @Bean\n     public FlowHandlerAdapter flowHandlerAdapter() {\n         FlowHandlerAdapter handlerAdapter = new FlowHandlerAdapter();\n         handlerAdapter.setFlowExecutor(this.webFlowConfig.flowExecutor());\n         handlerAdapter.setSaveOutputToFlashScopeOnRedirect(true);\n         return handlerAdapter;\n     }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 281,
          "text": "Chapter 7 ■ Spring Web FloW\n ...\nimport org.springframework.webflow.config.AbstractFlowConfiguration;\nimport org.springframework.webflow.definition.registry.FlowDefinitionRegistry;\nimport org.springframework.webflow.engine.builder.support.FlowBuilderServices;\nimport org.springframework.webflow.executor.FlowExecutor;\nimport org.springframework.webflow.mvc.builder.MvcViewFactoryCreator;\n \n@Configuration\npublic class WebFlowConfig extends AbstractFlowConfiguration {\n \n    @Autowired\n    private MvcConfig mvcConfig;\n     \n    @Bean\n    public FlowExecutor flowExecutor() {\n        return getFlowExecutorBuilder(flowRegistry())\n        // apply the listener for all flow definitions\n         .addFlowExecutionListener(new AuditFlowExecutorListener(), \"*\")\n        .build();\n    }\n \n    @Bean\n    public FlowDefinitionRegistry flowRegistry() {\n        return getFlowDefinitionRegistryBuilder(flowBuilderServices())\n                .setBasePath(\"/WEB-INF\")\n                .addFlowLocationPattern(\"/**/*-flow.xml\")\n                .build();\n    }\n \n    @Bean\n    public FlowBuilderServices flowBuilderServices() {\n        return getFlowBuilderServicesBuilder()\n                .setViewFactoryCreator(mvcViewFactoryCreator())\n                .setValidator(this.mvcConfig.validator())\n                .setConversionService(conversionService())\n                .setDevelopmentMode(true)\n                .build();\n    }\n \n    @Bean\n    public MvcViewFactoryCreator mvcViewFactoryCreator() {\n        MvcViewFactoryCreator factoryCreator = new MvcViewFactoryCreator();\n        factoryCreator.setViewResolvers(Arrays.<ViewResolver>asList(\n               this.mvcConfig.tilesViewResolver()));\n        factoryCreator.setUseSpringBeanBinding(true);\n        return factoryCreator;\n    }\n \n269",
          "tables": [],
          "code_blocks": [
            "@Autowired\n    private MvcConfig mvcConfig;\n     \n    @Bean\n    public FlowExecutor flowExecutor() {\n        return getFlowExecutorBuilder(flowRegistry())\n        // apply the listener for all flow definitions\n         .addFlowExecutionListener(new AuditFlowExecutorListener(), \"*\")\n        .build();\n    }\n \n    @Bean\n    public FlowDefinitionRegistry flowRegistry() {\n        return getFlowDefinitionRegistryBuilder(flowBuilderServices())\n                .setBasePath(\"/WEB-INF\")\n                .addFlowLocationPattern(\"/**/*-flow.xml\")\n                .build();\n    }\n \n    @Bean\n    public FlowBuilderServices flowBuilderServices() {\n        return getFlowBuilderServicesBuilder()\n                .setViewFactoryCreator(mvcViewFactoryCreator())\n                .setValidator(this.mvcConfig.validator())\n                .setConversionService(conversionService())\n                .setDevelopmentMode(true)\n                .build();\n    }\n \n    @Bean\n    public MvcViewFactoryCreator mvcViewFactoryCreator() {\n        MvcViewFactoryCreator factoryCreator = new MvcViewFactoryCreator();\n        factoryCreator.setViewResolvers(Arrays.<ViewResolver>asList(\n               this.mvcConfig.tilesViewResolver()));\n        factoryCreator.setUseSpringBeanBinding(true);\n        return factoryCreator;\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 282,
          "text": "Chapter 7 ■ Spring Web FloW\n    @Bean\n    DefaultConversionService conversionService() {\n        return new DefaultConversionService(\n            conversionServiceFactoryBean().getObject());\n    }\n \n    @Bean\n    FormattingConversionServiceFactoryBean conversionServiceFactoryBean() {\n        FormattingConversionServiceFactoryBean\n             fcs = new FormattingConversionServiceFactoryBean();\n        Set<Formatter> fmts = new HashSet<>();\n        fmts.add(this.mvcConfig.dateFormatter());\n        fmts.add(this.mvcConfig.hospitalFormatter());\n        fcs.setFormatters(fmts);\n        return fcs;\n    }\n}\n■ !  to tune the flow execution persistence settings in Java, the following configuration has to be present in \nthe WebFlowConfig class:\n@Bean\npublic FlowExecutor flowExecutor() {\n return getFlowExecutorBuilder(flowRegistry())\n .addFlowExecutionListener(new AuditFlowExecutorListener(), \"*\")\n     .setMaxFlowExecutions(5)\n     .setMaxFlowExecutionSnapshots(30)\n     .build();\n} \n•\t The WebInitializer class provides the Servlet 3.0 configuration that replaces the \nweb.xml file. The configuration classes are added to the array of configuration classes \nused to create the application context by providing the proper implementation for \nthe getRootConfigClasses.\npublic class WebInitializer extends\n     AbstractAnnotationConfigDispatcherServletInitializer {\n \n   @Override\n   protected Class<?> getRootConfigClasses() {\n       return null;\n   }\n \n   @Override\n   protected Class<?> getServletConfigClasses() {\n       return new Class<?>{\n               MvcConfig.class,\n               WebFlowConfig.class\n       };\n   }\n \n270",
          "tables": [],
          "code_blocks": [
            "@Bean\n    DefaultConversionService conversionService() {\n        return new DefaultConversionService(\n            conversionServiceFactoryBean().getObject());\n    }\n \n    @Bean\n    FormattingConversionServiceFactoryBean conversionServiceFactoryBean() {\n        FormattingConversionServiceFactoryBean\n             fcs = new FormattingConversionServiceFactoryBean();\n        Set<Formatter> fmts = new HashSet<>();\n        fmts.add(this.mvcConfig.dateFormatter());\n        fmts.add(this.mvcConfig.hospitalFormatter());\n        fcs.setFormatters(fmts);\n        return fcs;\n    }",
            ".setMaxFlowExecutions(5)\n     .setMaxFlowExecutionSnapshots(30)\n     .build();",
            "AbstractAnnotationConfigDispatcherServletInitializer {\n \n   @Override\n   protected Class<?> getRootConfigClasses() {\n       return null;\n   }\n \n   @Override\n   protected Class<?> getServletConfigClasses() {\n       return new Class<?>{\n               MvcConfig.class,\n               WebFlowConfig.class\n       };\n   }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 283,
          "text": "Chapter 7 ■ Spring Web FloW\n   @Override\n   protected String getServletMappings() {\n       return new String{\"/\"};\n   }\n \n   @Override\n   protected Filter getServletFilters() {\n       CharacterEncodingFilter cef = new CharacterEncodingFilter();\n       cef.setEncoding(\"UTF-8\");\n       cef.setForceEncoding(true);\n       return new Filter{new HiddenHttpMethodFilter(), cef};\n   }\n}\nAt this time, you might be wondering about the FlowController that you saw in Figure 7-2 and why it \nwasn’t mentioned anywhere in the configuration section. This class is the bridge between the Spring MVC \nController layer and the Spring Web Flow engine; it allows Spring Web Flow to run embedded as a Controller \nwithin a DispatcherServlet and it is used internally. This class uses the handlers and executor defined in the \nconfiguration to execute flows; it does this transparently.2\n■ !  before continuing to the next section, look at the 09-pr-webflow-basic-practice module under the \nperson-manger project. Start the application using the appStart gretty task for this module. in the browser, \nyou will notice that a new link has appeared, named New Person. the application is depicted in Figure 7-6.\nif you click the link, you will notice it fails with a 404 error. this is because no handler has been registered for \nthis resource Url. a few configurations have been set up, but some beans and configurations are missing so \nthat this application can use the Spring Web Flow engine. this is left for you to do. the toDo tasks contain \ncomments that direct you where you could implement the required changes. this module will help you test your \nunderstanding of the Spring Web Flow Java Configuration. the configuration files have been created, but it is \nyour responsibility to fill them correctly. the flow itself is empty, and no execution step is defined.\nafter clicking New Person link, you see the form in Figure 7-6. this means your configuration is correct and \nyou can continue with the chapter. if you have difficulties in completing the configuration, you can look at the \n09-pr-webflow-basic-solution module, which contains the proposed solution for the given tasks.\n2The code for the class is publicly available on GitHub at https://github.com/spring-projects/spring-webflow/ \nblob/master/spring-webflow/src/main/java/org/springframework/webflow/mvc/servlet/FlowController.\njava.\n271",
          "tables": [],
          "code_blocks": [
            "return new String{\"/\"};\n   }\n \n   @Override\n   protected Filter getServletFilters() {\n       CharacterEncodingFilter cef = new CharacterEncodingFilter();\n       cef.setEncoding(\"UTF-8\");\n       cef.setForceEncoding(true);\n       return new Filter{new HiddenHttpMethodFilter(), cef};\n   }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 284,
          "text": "Chapter 7 ■ Spring Web FloW\nFigure 7-6.  Link to the New Person flow\nCreate a Flow\nA flow describes a sequence of steps that is executed in the order established by the flow definition. A web \nflow is made of tree types of elements: states, transitions, and data. In a flow definition, the following types of \nstates can be used:\n•\t View state: In this type of state, the execution of a flow is paused to render a view \nto the user and wait for input data. It is defined using the <view-state ../> XML \nelement.\n•\t Action state: In this type of state, Java code is executed, and sometimes the next state \nto transition to depends on the outcome of this code. It is defined using the <action-\nstate ../> XML element.\n•\t Decision state: In this type of state, some branch logic is implemented using the \nXML flow definition language. It is defined using the <decision-state ../> XML \nelement.\n•\t Subflow state: The execution is transferred to another flow. When the subflow \nexecution is completed, the execution will return to this state. It is defined using the \n<decision-state ../> XML element.\n•\t End state: The final state of the flow execution. It is not mandatory for this state to \nrender a view, but usually a confirmation view is rendered to the user. It is defined \nusing the <end-state ../> XML element.\nThe states will be referred to using the XML element names in order to faciltate association between the \nstate type and the element used to configure it.\nThe switch from one state to the other is called a transition and it is triggered by events. Some data can \nbe shared among states, depending on the scope of that data. The simple schema of a flow definition and \ncomposing elements is depicted in Figure 7-7. The data is the information that is carried from one state to \nthe other; it has a life span that depends on the scope on which it was declared.\n272",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 285,
          "text": "Chapter 7 ■ Spring Web FloW\nFigure 7-7.  The general schema of a flow definition and composing elements\nFlow Definition\nA flow is defined in a single XML file, and all the states composing it are defined as child elements of the \nflow element. The content of the flow element is actually a task algorithm. All resources used by a flow \n(views, internationalization files) when being executed must be placed in the same directory as the flow \ndefinition file. Basically, each flow defined in an application has its own directory that contains all flow \ndefinition resources. This was mentioned in the “Spring Web Flow Architecture” section. In this section, all \nthe necessary steps in defining a flow are covered in detail. For example, to develop the /persons/newPerson \nflow, the following has to be created (use Figure 7-8 or reference ).\nFigure 7-8.  The components of a flow definition\n273",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 286,
          "text": "Chapter 7 ■ Spring Web FloW\n•\t A directory with the same name as the flow you are trying to create, so as the path \ninside the WEB-INF matches the URL path that you want to map the flow to\n•\t message.properties internationalization files\n•\t View files\n•\t A tiles configuration file, if tiles are used\n•\t A *-flow.xml spring configuration flow definition file\nWhen developing a flow, it is recommended to think and design the flow logic first—define the states \nand transitions, review the flow with business analysts, use mock views (plain HTML files that replace the \nview in testing scenarios)—to depict the steps and then add the behavior. To define the states of a flow, the \n*-flow.xml file must be populated. Usually, the first step is a view-state that displays a view to the user to \nprovide data to the flow.\n<!-- newPerson-flow.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<flow xmlns=\"http://www.springframework.org/schema/webflow\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xsi:schemaLocation=\"http://www.springframework.org/schema/webflow\n        http://www.springframework.org/schema/webflow/spring-webflow.xsd\">\n \n        <view-state id=\"enterPersonInfo\"/>\n</flow>\nThe view-state id resolves to a view template; by default, a *.jsp file is searched for in the current \ndirectory. View resolution is pluggable, depending on the view technology used. In the examples given \nin this book, Apache Tiles are used to define and resolve views; so the view to display when entering \nthe enterPersonInfo state is defined in the tiles.xml under the flow directory. The views used for the \nworkflows extend the same tiles template, webapp/WEB-INF/standard/layout.jsp, defined for views in \nChapter 3.\n<!-- tiles.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE tiles-definitions PUBLIC\n        \"-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN\"\n        \"http://tiles.apache.org/dtds/tiles-config_3_0.dtd\">\n \n<tiles-definitions>\n \n    <definition name=\"enterPersonInfo\" extends=\"layout\">\n        <put-attribute name=\"pageTitle\" value=\"persons.new.title\" />\n        <put-attribute name=\"content\"\n               value=\"/WEB-INF/persons/newPerson/newPersonInfo.jsp\" />\n        <put-attribute name=\"menuTab\" value=\"newPerson\" />\n    </definition>\n</tiles-definitions>\n274",
          "tables": [],
          "code_blocks": [
            "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xsi:schemaLocation=\"http://www.springframework.org/schema/webflow\n        http://www.springframework.org/schema/webflow/spring-webflow.xsd\">\n \n        <view-state id=\"enterPersonInfo\"/>",
            "\"-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN\"\n        \"http://tiles.apache.org/dtds/tiles-config_3_0.dtd\">",
            "<definition name=\"enterPersonInfo\" extends=\"layout\">\n        <put-attribute name=\"pageTitle\" value=\"persons.new.title\" />\n        <put-attribute name=\"content\"\n               value=\"/WEB-INF/persons/newPerson/newPersonInfo.jsp\" />\n        <put-attribute name=\"menuTab\" value=\"newPerson\" />\n    </definition>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 287,
          "text": "Chapter 7 ■ Spring Web FloW\nIn the newPersonInfo.jsp view file template, the user event is linked to a button using the name \nattribute.\n<!-- newPersonInfo.jsp -->\n<h2>\n   <spring:message code=\"persons.new.title\"/>\n</h2>\n \n<div class=\"person\">\n    <sf:form id=\"newPersonForm\" method=\"POST\" modelAttribute=\"person\">\n        <table>\n            <tr>\n                <th>\n                    <label for=\"firstName\">\n                        <span class=\"man\">*</span>\n                            <spring:message code=\"label.Person.firstname\"/> :\n                    </label>\n                </th>\n                <td><sf:input path=\"firstName\"/></td>\n                <td><sf:errors cssClass=\"error\" path=\"firstName\"/></td>\n            </tr>\n            <!-- other form elements -->\n            ...\n            <tr>\n                <td colspan=\"2\">\n                    <button id=\"newPersonButton\" name=\"_eventId_proceed\"\n                         type=\"submit\">\n                        <spring:message code=\"command.proceed\" />\n                    </button>\n                </td>\n            </tr>\n        </table>\n    </sf:form>\n</div>\nNext, a transition must be defined by adding the <transition> element as a child to the state you \nare transitioning from when a user event is activated. If no navigation is performed (for example, when \nvalidation fails), the initial view is refreshed.\n <!-- newPerson-flow.xml -->\n <flow ...>\n<view-state id=\"enterPersonInfo\">\n        <transition on=\"proceed\" to=\"reviewPerson\" />\n</view-state>\n \n<view-state id=\"reviewPerson\">\n        <transition on=\"confirm\" to=\"enterIdentityCard\"/>\n</view-state>\n...\n</flow>\n275",
          "tables": [],
          "code_blocks": [
            "<sf:form id=\"newPersonForm\" method=\"POST\" modelAttribute=\"person\">\n        <table>\n            <tr>\n                <th>\n                    <label for=\"firstName\">\n                        <span class=\"man\">*</span>\n                            <spring:message code=\"label.Person.firstname\"/> :\n                    </label>\n                </th>\n                <td><sf:input path=\"firstName\"/></td>\n                <td><sf:errors cssClass=\"error\" path=\"firstName\"/></td>\n            </tr>\n            <!-- other form elements -->\n            ...\n            <tr>\n                <td colspan=\"2\">\n                    <button id=\"newPersonButton\" name=\"_eventId_proceed\"\n                         type=\"submit\">\n                        <spring:message code=\"command.proceed\" />\n                    </button>\n                </td>\n            </tr>\n        </table>\n    </sf:form>",
            "<transition on=\"proceed\" to=\"reviewPerson\" />",
            "<transition on=\"confirm\" to=\"enterIdentityCard\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 288,
          "text": "Chapter 7 ■ Spring Web FloW\nWhen performing typical web navigations, there is always a Cancel button that allows the user to cancel \nthe whole process. When using Spring Web Flow, this can be done by declaring a <global-transition> \nelement, but using global transition elements sort of breaks the flow. It’s similar to using a goto statement.  \nIt also makes the flow definition less readable.3\n<flow ...>\n    <global-transition on=\"cancel\" to=\"cancelled\" />\n    ...\n</flow>\nA flow can have one or multiple end-states defined (<end-state> elements are used to define them) \nand a flow execution can end in any of them, based on the events the user triggers. After a flow execution \nreaches an end state, the flow terminates and the outcome is returned, unless the end state sends a final \nresponse or redirects the user to another resource, typically a confirmation page.\n<flow ...>\n    <end-state id=\"end\" />\n</flow>\nRedirecting to a confirmation page after a flow has finished the execution is tricky, as the flow data is \ngone. The solution is to use a redirect to a stateless confirmation page and to use a parameter that has a \nvalue that can be used to display confirmation data. The <end-state> element has a view attribute that can \nbe used to specify the URL to redirect to.\n<flow ...>\n<end-state id=\"finish\"\n           view=\"externalRedirect:contextRelative:/person/1\" />\n</flow>\n■ !  the value is hard-coded id value (“1”) in the previous example only because the concept that could be \nused to make that link dynamic— flow variable—has not been covered yet.\nThe contextRelative prefix is one of the explicit redirects supported in the context of a flow execution. \nWithout these prefixes, the returned resource location is relative to the current servlet mapping. The flow \nredirect prefixes help you have more control over where the user is redirected. The following is the complete \nlist of flow redirection prefixes:\n•\t servletRelative: Redirects to a resource relative to the current server\n•\t contextRelative: Redirects to a resource relative to the current web application \ncontext path\n•\t serverRelative: Redirects to a resource relative to the server root\n•\t http:// or https:// Redirects to a fully qualified resource URI\n3The GOTO statement (see https://en.wikipedia.org/wiki/Goto).\n276",
          "tables": [],
          "code_blocks": [
            "<global-transition on=\"cancel\" to=\"cancelled\" />\n    ...",
            "<end-state id=\"end\" />",
            "view=\"externalRedirect:contextRelative:/person/1\" />"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 289,
          "text": "Chapter 7 ■ Spring Web FloW\nThese redirect prefixes are supported in a flow definition together with the externalRedirect: directive \nin view-state or end-state elements. The view-state element has a view property that can be used to \nspecify a different view than the one with the same state id, and this view can be outside the newPerson flow \ndirectory:\n<flow ...>\n    <view-state id=\"reviewPerson\"\n        view=\"externalRedirect:contextRelative:/verifyPerson\">\n         <transition on=\"confirm\" to=\"enterIdentityCard\"/>\n    </view-state>\n</flow>\nA flow can also redirect to a different flow by using the flowRedirect: directive in its end state; this \nbasically means the current flow ends and a new one is started.\nIn conclusion, when creating a web flow, it is recommended that the following steps be followed in this \norder:\n  1.  Define view states and end states.\n  2.  Define transition between states.\n  3.  Create mock views to test the connection of the states.\n  4.  Add the intended behavior.\nTo create a web flow like the one shown in Figure 7-1, the following must be done:\n•\t When defining view states and end states, the focus is on the steps that the user is \nguided through. The why (conditions and events) and how (business logic) is left for \nlater.\n<flow ...>\n <!-- newPerson-flow.xml -->\n <view-state id=\"enterPersonInfo\" />\n <view-state id=\"enterHospitalInfo\" />\n <view-state id=\"enterIdentityCard\" />\n <view-state id=\"reviewPersonData\" />\n <view-state id=\"enterAccountInfo\" />\n <view-state id=\"reviewAccountData\" />\n <end-state id=\"end\" />\n</flow>\n•\t Then transitions should be defined as follows:\n <!-- newPerson-flow.xml -->\n<flow ...>\n <view-state id=\"enterPersonInfo\" >\n         <transition on=\"addHospital\" to=\"enterHospitalInfo\" />\n         <transition on=\"proceed\" to=\"enterIdentityCard\" />\n </view-state>\n \n  <view-state id=\"enterHospitalInfo\" >\n         <transition on=\"save\" to=\"enterPersonInfo\" />\n </view-state>\n \n277",
          "tables": [],
          "code_blocks": [
            "<view-state id=\"reviewPerson\"\n        view=\"externalRedirect:contextRelative:/verifyPerson\">\n         <transition on=\"confirm\" to=\"enterIdentityCard\"/>\n    </view-state>",
            "<transition on=\"addHospital\" to=\"enterHospitalInfo\" />\n         <transition on=\"proceed\" to=\"enterIdentityCard\" />\n </view-state>\n \n  <view-state id=\"enterHospitalInfo\" >\n         <transition on=\"save\" to=\"enterPersonInfo\" />\n </view-state>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 290,
          "text": "Chapter 7 ■ Spring Web FloW\n <view-state id=\"enterIdentityCard\" >\n         <transition on=\"review\" to=\"reviewPersonData\" />\n </view-state>\n \n <view-state id=\"reviewPersonData\" >\n        <transition on=\"addAcount\" to=\"enterAccountInfo\" />\n </view-state>\n \n <view-state id=\"enterAccountInfo\" >\n         <transition on=\"review\" to=\"reviewAccountData\" />\n </view-state>\n \n <view-state id=\"reviewAccountData\" >\n         <transition on=\"save\" to=\"end\" />\n <view-state>\n \n <end-state id=\"end\" />\n</flow>\n•\t To test the connections between the states, mock views should be created. This is \nan approach that helps users interact with the flow process to test the transitions \nbetween the states. Mock views contain static data; no extra data needs to be \ninserted by the user and no validation is performed. The dynamic behavior is added \nlater, when the back end of the application is developed.\n <!-- newPersonInfo.jsp -->\n<h2> Mock New Person </h2>\n<div class=\"person\">\n    <form id=\"newPersonForm\" method=\"POST\" >\n        <table>\n            <tr>\n                <th>\n                    First Name\n                </th>\n                <td><input path=\"firstName\"/></td>\n            </tr>\n            <!-- other form elements -->\n            ...\n           <tr>\n                <td colspan=\"2\">\n                    <button id=\"newPersonButton\" name=\" eventId proceed\"\n                            type=\"submit\">\n                        Proceed\n                    </button>\n                </td>\n           </tr>\n        </table>\n    </form>\n</div>\n \n278",
          "tables": [],
          "code_blocks": [
            "<transition on=\"review\" to=\"reviewPersonData\" />\n </view-state>\n \n <view-state id=\"reviewPersonData\" >\n        <transition on=\"addAcount\" to=\"enterAccountInfo\" />\n </view-state>\n \n <view-state id=\"enterAccountInfo\" >\n         <transition on=\"review\" to=\"reviewAccountData\" />\n </view-state>\n \n <view-state id=\"reviewAccountData\" >\n         <transition on=\"save\" to=\"end\" />\n <view-state>\n \n <end-state id=\"end\" />",
            "<form id=\"newPersonForm\" method=\"POST\" >\n        <table>\n            <tr>\n                <th>\n                    First Name\n                </th>\n                <td><input path=\"firstName\"/></td>\n            </tr>\n            <!-- other form elements -->\n            ...\n           <tr>\n                <td colspan=\"2\">\n                    <button id=\"newPersonButton\" name=\" eventId proceed\"\n                            type=\"submit\">\n                        Proceed\n                    </button>\n                </td>\n           </tr>\n        </table>\n    </form>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 291,
          "text": "Chapter 7 ■ Spring Web FloW\n <!-- enterIdentityCard.jsp -->\n <h2> Mock New Account </h2>\n <div class=\"identityCard\">\n    <form id=\"newIdentityCardForm\" method=\"POST\" >\n        <table>\n            <tr>\n                <th>\n                    Account Number\n                </th>\n                <td><input path=\"accountNumber\"/></td>\n            </tr>\n            <!-- other form elements -->\n            ...\n           <tr>\n                <td colspan=\"2\">\n                    <button id=\"newAccountButton\" name=\"_eventId_review\"\n                           type=\"submit\">\n                        Review\n                    </button>\n                </td>\n           </tr>\n        </table>\n    </form>\n</div>\n \n <!-- other mock views look similar so their content will not be listed here -->\n■ !  as you probably noticed in the previous example, only view and end states were used. this is because \nthese are the simplest states that can be used to create a flow; also, defining them is very easy and intuitive. \nthe other types of states (action, decision, and subflow) are covered later and added, one by one, to the flow \nyou have become familiar with to allow you to gradually increase your understanding of Spring Web Flow.\nTesting Web Flows\nEvery flow in an application should have a unit test to verify that the flow logic works as expected. \nThe Spring Web Flow provides a test class at org.springframework.webflow.test.execution.\nAbstractXmlFlowExecutionTests that has to be extended to use unit tests to test flows. This class provides \nthe test infrastructure needed to test that a flow definition executes as expected; no Spring or JUnit \nannotations are needed. All that is needed is for the getResource(FlowDefinitionResourceFactory \nresourceFactory) method to be implemented correctly is to provide the test a flow definition file.\n279",
          "tables": [],
          "code_blocks": [
            "<form id=\"newIdentityCardForm\" method=\"POST\" >\n        <table>\n            <tr>\n                <th>\n                    Account Number\n                </th>\n                <td><input path=\"accountNumber\"/></td>\n            </tr>\n            <!-- other form elements -->\n            ...\n           <tr>\n                <td colspan=\"2\">\n                    <button id=\"newAccountButton\" name=\"_eventId_review\"\n                           type=\"submit\">\n                        Review\n                    </button>\n                </td>\n           </tr>\n        </table>\n    </form>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 292,
          "text": "Chapter 7 ■ Spring Web FloW\nimport org.springframework.webflow.config.FlowDefinitionResource;\nimport org.springframework.webflow.config.FlowDefinitionResourceFactory;\nimport org.springframework.webflow.test.MockExternalContext;\nimport org.springframework.webflow.test.execution.AbstractXmlFlowExecutionTests;\n \npublic class NewPersonFlowTest extends AbstractXmlFlowExecutionTests {\n    private static final String ENTER_PERSON_INFO = \"enterPersonInfo\";\n    private static final String ENTER_IDENTITY_CARD = \"enterIdentityCard\";\n    private static final String REVIEW_ACCOUNT_DATA = \"reviewAccountData\";\n    private static final String END = \"end\";\n \n    @Override\n    protected FlowDefinitionResource getResource\n             (FlowDefinitionResourceFactory resourceFactory) {\n        return resourceFactory.createFileResource(\n             \"src/main/webapp/WEB-INF/persons/newPerson/newPerson-flow.xml\");\n    }\n \n    public void testStart() throws Exception {\n        startFlow(new MockExternalContext());\n        assertCurrentStateEquals(ENTER_PERSON_INFO);\n    }\n \n    public void testEnterPersonInfoProceed() throws Exception {\n       setCurrentState(ENTER_PERSON_INFO);\n        MockExternalContext externalContext = new MockExternalContext();\n        externalContext.setEventId(\"proceed\");\n        resumeFlow(externalContext);\n        assertCurrentStateEquals(ENTER_IDENTITY_CARD);\n    }\n \n// other similar transition tests\n..\n \n  public void testReviewPersonConfirm() throws Exception {\n        setCurrentState(REVIEW_ACCOUNT_DATA);\n        MockExternalContext externalContext = new MockExternalContext();\n        externalContext.setEventId(\"save\");\n        resumeFlow(externalContext);\n        assertFlowExecutionEnded();\n        assertFlowExecutionOutcomeEquals(END);\n        assertTrue(externalContext.getExternalRedirectRequested());\n        assertEquals(\"contextRelative:/persons/1\",\n                externalContext.getExternalRedirectUrl());\n  }\n}\nThe testStart method starts the flow by calling startFlow and tests that the flow has entered the start \nstate by calling assertCurrentStateEquals.\n280",
          "tables": [],
          "code_blocks": [
            "private static final String ENTER_PERSON_INFO = \"enterPersonInfo\";\n    private static final String ENTER_IDENTITY_CARD = \"enterIdentityCard\";\n    private static final String REVIEW_ACCOUNT_DATA = \"reviewAccountData\";\n    private static final String END = \"end\";\n \n    @Override\n    protected FlowDefinitionResource getResource\n             (FlowDefinitionResourceFactory resourceFactory) {\n        return resourceFactory.createFileResource(\n             \"src/main/webapp/WEB-INF/persons/newPerson/newPerson-flow.xml\");\n    }\n \n    public void testStart() throws Exception {\n        startFlow(new MockExternalContext());\n        assertCurrentStateEquals(ENTER_PERSON_INFO);\n    }\n \n    public void testEnterPersonInfoProceed() throws Exception {\n       setCurrentState(ENTER_PERSON_INFO);\n        MockExternalContext externalContext = new MockExternalContext();\n        externalContext.setEventId(\"proceed\");\n        resumeFlow(externalContext);\n        assertCurrentStateEquals(ENTER_IDENTITY_CARD);\n    }",
            "public void testReviewPersonConfirm() throws Exception {\n        setCurrentState(REVIEW_ACCOUNT_DATA);\n        MockExternalContext externalContext = new MockExternalContext();\n        externalContext.setEventId(\"save\");\n        resumeFlow(externalContext);\n        assertFlowExecutionEnded();\n        assertFlowExecutionOutcomeEquals(END);\n        assertTrue(externalContext.getExternalRedirectRequested());\n        assertEquals(\"contextRelative:/persons/1\",\n                externalContext.getExternalRedirectUrl());\n  }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 293,
          "text": "Chapter 7 ■ Spring Web FloW\nThe testEnterPersonInfoProceed tests that starting from an exact state when an event is triggered, \nthe transition is done to the expected state. Triggering the event is done by using a mock context and calling \nsetEventId on it.\n■ !  before continuing to the next section, take a look at the 10-pr-webflow-fundamentals-practice \nmodule under the person-manger project. all the files necessary for creating a very simple flow have been \nprovided for you. Figure 7-9 depicts the simplified version of the newPerson flow that is required to complete \nthe practice example. it uses mock views and only view states; no business logic is required to complete this \npractice exercise. the purpose of this module is to help you test your understanding of defining states and \ntransitions, and using mock flows and testing the simple flow you have created.\nFigure 7-9.  Link to the simplified New Person flow\nthis flow guides the user through the process of creating a person using the minimum amount of information. \nthe first step of this flow should display a form to the user. after submitting the form, the user should be taken \nto a screen where he can review the information before being confirmed. after confirming, the user should be \ntaken to the screen displaying the details of the completed transaction.\nthe practice module has ten toDo tasks to be resolved, numbered from 40 to 49. each task has a short \ndescription instructing you on what you have to do. the web application can be started by executing the \nappStart gradle task. the newPerson flow definition has been completed and the execution works completely \nif the user can be guided through all the expected steps. the test has been implemented correctly if all the \nmethods pass.\nWhen executing the flow, and the current state is the reviewPersonData. try clicking the back button of the \nbrowser to see what happens. You should be able to go back and resubmit. no browser warnings should occur, \nand the request Url should depict that you are back to the previous step of the same flow execution.\nif the current Url were http://localhost:8080/persons/newPerson?execution=e1s2, clicking the back \nbutton should redirect the user to http://localhost:8080/persons/newPerson?execution=e1s1.\ntry the same after the flow has finished its execution and note the parameters in the request Url. the flow \nexecution should be restarted and the execution Url parameter should have the expected value.\n■ ?  Can you remember how the execution parameter value should change when a new flow execution is \nstarted?\n281",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 294,
          "text": "Chapter 7 ■ Spring Web FloW\nActions and Scopes\nDuring the execution of a web flow, it is expected for business services to be called for the flow to accomplish \nits task. Using view states only rendering a view and establishing the next view state in the navigation is \npossible. Thus, more elements are needed to define which business services are called and what to do with \nthe results in the context of a flow. These elements are called actions; they can be called within a flow on \nseveral execution points.\nActions are defined in Spring Web Flow using the Spring Expression Language. Most of the time, their \nresult has to be stored in a flow variable that has a life span defined by the scope that they are declared for. \nExplaining the type of actions that can be defined for a web flow, and when and how they should be used, \ncannot be done properly without first mentioning web flow scopes.\nIn Figure 7-7, in the bottom-left corner of each rectangle grouping state, you see a scope specific to \nthat group of states, written in italics. Within a flow, you can define instance variables. For example, when \ncreating a new person using a flow, the Person instance can be stored in a flow variable and be made \navailable during the flow execution; and so at the end of the flow execution, redirection can be done to a \npage to render the instance just created:\n<flow ...>\n    <var name=\"person\" class=\"com.pr.ents.Person\"/>\n    ...\n    <end-state id=\"finish\"\n           view=\"externalRedirect:contextRelative:/person/#{person.id}\" />\n</flow>\nFlow variables and other data objects exist in a scope, and when using web flows, multiple types of \nscopes are available to implement the desired functionality. Each flow provides a context where objects are \nstored. The data scopes are provided by this context and its state is managed by the Spring Web Flow. During \nflow execution, objects are added to different scopes, depending on the flow definition. They are cleaned \nwhen they go out of scope.\nThe previous example depicted the explicit creation of a flow variable; the <var /> element was used \nfor that. But variables can be assigned dynamically by using actions. The advantage of using actions to assign \nvariables is that the variables can be assigned to any scope possible. Explicit variables, declared with <var/>, \ncan be assigned only a flow scope and a view scope. There are five web flow scopes that are supported by the \ncontext of a flow:\n•\t Flow scope: This is the scope that lasts until the flow ends.\n•\t View scope: This is the scope associated with each view-state.\n•\t Request scope: This is the scope matching a single request\n•\t Flash scope: This the scope allocated when a flow starts; it is cleaned automatically \nafter each view is rendered and destroyed when the flow ends.\n•\t Conversation scope: This is a global execution scope; all subflows share this scope. \nIt gets allocated when a top-level flow starts and it is destroyed when the top-level \nflow ends.\n■ !  the conversation-scoped objects are stored in the http session and should generally be serializable to \naccount for typical session replication.\n282",
          "tables": [],
          "code_blocks": [
            "<var name=\"person\" class=\"com.pr.ents.Person\"/>\n    ...\n    <end-state id=\"finish\"\n           view=\"externalRedirect:contextRelative:/person/#{person.id}\" />"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 295,
          "text": "Chapter 7 ■ Spring Web FloW\nFlow Variables\nThe scope of a variable can be determined contextually. For example, when the explicit definition of a \nvariable is directly under the <flow/> element, the scope for that variable is the flow scope. When the \nexplicit definition of a variable is under the <view-state/> element, the scope of that variable is view scope. \nBut when using EL expressions and Java code, the scope needs to be specified explicitly.\nWhen using <var/> to define variables, you have to keep in mind that if the objects are complex and \nrequire other properties to be injected, they must either have a constructor, setters annotated with  \n@Autowired, or both depending on the chosen configuration.\n <!-- newPerson-flow.xml -->\n<flow ...>\n    <var name=\"identityCardProcessor\" class=\"com.pr.webflow.IdentityCardProcessor\"/>\n    ...\n</flow>\n \n// com.pr.webflow.IdentityCardProcessor.java\npublic class IdentityCardProcessor implements Serializable {\n    private IdentityCardManager identityCardManager;\n \n    @Autowired\n     public IdentityCardProcessor(\n              IdentityCardManager identityCardManager){...}\n}\n// or\npublic class IdentityCardProcessor implements Serializable {\n    private IdentityCardManager identityCardManager\n \n    @Autowired\n    public void setIdentityCardManager(\n               IdentityCardManager identityCardManager){...}\n}\nExplicit variables are most often used as data models for views. They are used to pass as arguments to \nbusiness services invoked by the flow; such an implementation is depicted in Figure 7-10.\nFigure 7-10.  Explicit flow variable usages example\n283",
          "tables": [],
          "code_blocks": [
            "<var name=\"identityCardProcessor\" class=\"com.pr.webflow.IdentityCardProcessor\"/>\n    ...",
            "private IdentityCardManager identityCardManager;\n \n    @Autowired\n     public IdentityCardProcessor(\n              IdentityCardManager identityCardManager){...}",
            "private IdentityCardManager identityCardManager\n \n    @Autowired\n    public void setIdentityCardManager(\n               IdentityCardManager identityCardManager){...}"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 296,
          "text": "Chapter 7 ■ Spring Web FloW\n■ ?  From what has been covered so far, can you tell to which scope the person variable in the previous code \nsample belongs?\nExplicit variables can be defined as view-scoped objects too. In this case, the variable is created when \nthe view-state is entered and is destroyed when the transition to the next view-state occurs. They can be \nused as data models for a single view. They are often updated using AJAX requests before being used for the \nexpression conditioning the transition to the next state; such an implementation is depicted in Figure 7-11.\nFigure 7-11.  Explicit flow variable in view scope usages example\nIn the previous examples, you can see that performing the transition depends on the result of the \nevaluation of the expression in the <evaluate /> element. The expression in that element is a standard EL \nexpression that can be evaluated directly by the EL; it does not need to be enclosed in delimiters such as #{ }. \nThe delimiters are not needed when the expression is a string that represents a method call or property access, \nand using them will throw an IllegalArgumentException.\nThe delimiters are only needed when the argument string is a template EL expression that implies \nmixing literal text with one or more standard expressions, as in the redirect link for the end state in previous \nexamples.\n<flow ...>\n    <end-state id=\"finish\"\n           view=\"externalRedirect:contextRelative:/person/#{person.id}\" />\n</flow>\nConversation Variables\nThe conversation scope is the widest web flow scope. Variables defined within this scope are available to \nsubflows too. The conversation variables are similar to global variables and have the same disadvantages. \nConversation variables introduce a dependency between top-level flows and their subflows; that’s why the \nrecommendation is to not use them if a different option exists. When working with subflows, input/output \nparameters can be used to avoid conversation variables. A variable can be assigned to the conversation \nscope using the <evaluate /> element.\n284",
          "tables": [],
          "code_blocks": [
            "<end-state id=\"finish\"\n           view=\"externalRedirect:contextRelative:/person/#{person.id}\" />"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 297,
          "text": "Chapter 7 ■ Spring Web FloW\nIn the following example, a Person instance retrieved using a PersonManager service is being assigned \nto the conversation scope:\n<flow ...>\n<!-- The result of this expression is stored into the person variable -->\n    <evaluate result=\"conversationScope.person\"\n           expression=\"personManager.findById(personId)\"/>\n</flow>\nRequest and Flash Scopes\nAttributes placed in flash scope exist through the life of the current request and until the next view \nrendering. After the view renders, the flash scope is cleared. Flash scope is typically used to store messages \nthat should be preserved until after the next view renders. This scope is useful to pass data from one request \nto another as one flow state involves two requests, as depicted in Figure 7-4.\n•\t The first request lasts between the transition from the current state until entering the \nnext state.\n•\t The second lasts from the moment before the view is rendered to the end of \nrendering the same state.\nYou can consider the flash scope as an extension of the request scope in the Web Flow context, because \nthe request scope is not quite useful when using web flow, as is explained later in this section.\nAttributes placed in request scope exist for the life of the current request into the flow execution. When \nthe request ends, any attributes in request scope goes out of scope. Variables should be assigned the request \nscope when their values are refetched every time a state is redisplayed. If the data can be cached, the view \nscope would be more appropriate for the variable.\n■ !  the request scope can be useful when creating a sports betting site. the application should have a web \nflow defined, through which the user can place a bet. a request variable should be used to extract the most \nrecent results of games being played, so the user can be informed in real time of his winning chances.\nAlso, data with request scope can be used in cases where it is needed only to initialize the next view; but \nit should not be displayed by it.\n■ !  Consider the example of a betting site: only the list of games currently being played should be displayed, \nso a specific time interval value can be stored in a variable and used as criteria for selection.\nTo implement the previously mentioned cases, the flow scope can be used, and the games the user \ncan bet on can be retrieved using AJAX calls. Request scope is pretty useless, considering that usually a \ndeveloper is interested in sharing the data between the two requests implied by a web flow state.\n285",
          "tables": [],
          "code_blocks": [
            "<evaluate result=\"conversationScope.person\"\n           expression=\"personManager.findById(personId)\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 298,
          "text": "Chapter 7 ■ Spring Web FloW\nFigure 7-12 is a simple diagram with the duration of the flash scope and the request scope depicted to \nmake their differences in the context of a flow execution more obvious.\nFigure 7-12.  Comparison between request and flash scope\nIn Figure 7-12, you can clearly see the two requests implied by a flow state. One of them is the user \nrequest to start the flow with URL /person/newPerson. Accessing this URL makes the web flow engine send \na request to /persons/newPerson?execution=e1s1. The request to this web flow resource is the second \nrequest. The two arrows under the REQUEST bubble show exactly how long the attributes in the request \nscope is available. And under the FLASH bubble, you can see the longer arrow, which depicts how long the \nattributes in the flash scope are available. The execution points— :on-entry, on-render, and so forth—are \ncovered in the next section.\nActions\nNow that web flow scopes have been covered, it is time to introduce actions. Actions execute behavior at \nspecific points within the flow. There are several points where you can execute actions:\n•\t on flow start: The <evaluate /> element is declared as a child of the <on-start /> \nelement that marks the start of a flow execution. This action is executed only once, \nwhen the flow execution starts.\n<flow ...>\n   <on-start>\n      <evaluate expression=\"...\"/>\n   </on-start>\n</flow>\n286",
          "tables": [],
          "code_blocks": [
            "<evaluate expression=\"...\"/>\n   </on-start>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 299,
          "text": "Chapter 7 ■ Spring Web FloW\n•\t on state entry: The <evaluate /> element is declared as a child of the <on-entry /> \nelement that marks the entry in a state. (A view state in the following example). This \naction is executed only once, when entering the state.\n<flow ...>\n    <view-state ...>\n         <on-entry>\n             <evaluate expression=\"...\"/>\n        </on-entry>\n    </view-state>\n</flow>\n•\t on view render: The <evaluate /> element is declared as a child of the <on-render \n/> element that marks the moment immediately before a view is rendered. The \naction is executed on every browser refresh.\n<flow ...>\n    <view-state ...>\n         <on-render>\n             <evaluate expression=\"...\"/>\n        </on-render>\n    </view-state>\n</flow>\n•\t on transition execution: The <evaluate /> element is declared as a child of the \n<transition /> element. Actions imply evaluating expressions and the results are \nassigned to variables that have a specific scope assigned. The <evaluate /> action \nelement used in the following example can be used to evaluate an expression and \nassign the result a specific scope. It can prevent a transition if an exception is thrown \nor false is returned as a result when the expression is evaluated. How exceptions are \nhandled in the web flow context is covered later in the chapter. Only one <evaluate />  \nexpression is allowed.\n<flow ...>\n    <view-state ...>\n         <transition on=\"confirm\" to=\"nextStep\">\n             <evaluate expression=\"...\"/>\n        </transition>\n    </view-state>\n</flow>\n•\t on state exit: The <evaluate /> element is declared as a child of the <on-exit/> \nelement that marks the exit of a state. (A view state in the following example).  \nThis action is executed only once, when exiting the state.\n<flow ...>\n    <view-state ...>\n        <on-exit>\n          <evaluate expression=\"...\"/>\n       </on-exit>\n    </view-state>\n</flow>\n287",
          "tables": [],
          "code_blocks": [
            "<view-state ...>\n         <on-entry>\n             <evaluate expression=\"...\"/>\n        </on-entry>\n    </view-state>",
            "<view-state ...>\n         <on-render>\n             <evaluate expression=\"...\"/>\n        </on-render>\n    </view-state>",
            "<view-state ...>\n         <transition on=\"confirm\" to=\"nextStep\">\n             <evaluate expression=\"...\"/>\n        </transition>\n    </view-state>",
            "<view-state ...>\n        <on-exit>\n          <evaluate expression=\"...\"/>\n       </on-exit>\n    </view-state>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 300,
          "text": "Chapter 7 ■ Spring Web FloW\n•\t on flow end: The <evaluate /> element is declared as a child of the <on-end /> \nelement that marks the end of a flow execution. This action is executed only once, \nwhen the flow execution ends.\n<flow ...>\n...\n    <on-end>\n      <evaluate expression=\"...\"/>\n   </on-end>\n</flow>\nThe examples presented so far were simplified to set the focus on the syntax when defining your \nactions. The following example is a concrete one that you will use in the practice exercises:\n<flow ...>\n<!-- newPerson-flow.xml -->\n  <view-state id=\"enterPersonInfo\">\n        <on-render>\n            <evaluate expression=\"hospitalManager.findAll()\"\n               result=\"flowScope.hospitalList\" />\n        </on-render>\n        <transition on=\"proceed\" to=\"reviewPerson\" />\n  </view-state>\n</flow>\nThe <evaluate /> element can also be used to resolve properties on beans and even perform \nconversions. The actions are usually expressed in Spring EL,4 but Unified EL Standard and OGNL are \nsupported too. Using this type of syntax makes the actions more concise for executing behavior and easier to \nread from a development point of view.\nA Spring EL expression has the following template:\n<variable_name>.property_or_method\nThe variable_name is resolved against the current flow context. Variables referring to data scopes \n(flowScope, viewScope, requestScope, etc.) should only be used when assigning a new variable to one of the \nscopes. To resolve a flow variable, reserved variables are searched first, then the variable is searched within \neach flow scope, starting with request and expanding the scope gradually: flash, view, flow, conversation. \nIf the variable is not found, the flow application context is searched for a bean matching the variable name. \nLet’s look at a few examples to make usage of Spring EL expressions with web flows easier to understand:\n•\t flowScope.person: The person variable is resolved in flow scope\n•\t person: The person variable is searched in all scopes\n•\t hospitalManager.findAll(): The findAll method is called on the \nhospitalManager variable (in this book’s examples, hospitalManager is actually a \nbean).\n•\t hospitalManager.findByCode(hospitalCode): Calling a bean method and using \nthe hospitalCode variable as an argument.\n4See http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.\nhtml#expressions-language-ref.\n288",
          "tables": [],
          "code_blocks": [
            "<on-end>\n      <evaluate expression=\"...\"/>\n   </on-end>",
            "<on-render>\n            <evaluate expression=\"hospitalManager.findAll()\"\n               result=\"flowScope.hospitalList\" />\n        </on-render>\n        <transition on=\"proceed\" to=\"reviewPerson\" />\n  </view-state>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 301,
          "text": "Chapter 7 ■ Spring Web FloW\nWhen using Spring EL to write expressions, a few reserved variables can be used without any prior \nmanual initialization (Spring takes care of initializing them).\n•\t scope-specific variables: requestScope, flashScope, viewScope, flowScope, \nconversationScope\n•\t environment-specific variables: flowExecutionUrl, flowRequestContext, \nrequestParameters, externalContext, messageContext, resourceBundle, \ncurrentEvent, currentUser\n•\t externalContext.sessionMap is used to access HTTP session contents.  \n(No sessionScope variable exists in the context of a flow definition.)\nSome of these variables can be used in view template files also; in JSP, all scope variables are accessible, \nflowExecutionUrl is the URL of the current page, flowRequestContext is the RequestContext. Additional \nvariables are available: pageScope, requestParameters, sessionScope, and so forth.\nSo far, only the <evaluate /> element has been used, but there are alternatives more suitable in \nparticular cases. The <set /> action element is used to set the value of a variable, but it does not prevent a \ntransition and can be used multiple times within a transition element. For example, if you just want to view \nthe details on a person after it was selected from a list; there is nothing to evaluate, you just want view some \ndata. The <set /> element is more suitable for this case:\n<flow ...>\n<!-- reviewPerson-flow.xml -->\n  <view-state id=\"reviewPersonInfo\">\n     <on-render>\n        <evaluate expression=\"personManager.getByDateOfBirth(dob)\"\n              result=\"viewScope.persons\" result-type=\"dataModel\" />\n     </on-render>\n    <transition on=\"select\" to=\"viewPerson\">\n        <set name=\"flowScope.person\" value=\"persons.selectedRow\" />\n    </transition>\n  </view-state>\n</flow>\nWhen using <set />, a scope must be specified when creating a new variable, as there is no default.  \nIn the following example, the firstName variable is assigned to the flowScope scope.\n<set name=\"flowScope.firstName\"\n         value=\"requestParameters.firstName\"/>\nWhen updating an existing variable, or one of its properties, the scope is no longer required and the \nalgorithm presented previously is used to perform scope resolution.\n<set name=\"person.firstName\"\n         value=\"requestParameters.firstName\"/>\n289",
          "tables": [],
          "code_blocks": [
            "<on-render>\n        <evaluate expression=\"personManager.getByDateOfBirth(dob)\"\n              result=\"viewScope.persons\" result-type=\"dataModel\" />\n     </on-render>\n    <transition on=\"select\" to=\"viewPerson\">\n        <set name=\"flowScope.person\" value=\"persons.selectedRow\" />\n    </transition>\n  </view-state>",
            "value=\"requestParameters.firstName\"/>",
            "value=\"requestParameters.firstName\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 302,
          "text": "Chapter 7 ■ Spring Web FloW\nRequest Parameters\nIn the previous code sample, the requestParameters system variable was used. This variable contains all \nthe URL parameters for the current request. These parameters are not in the requestScope, and if they are \nneeded further in the execution flow, they need to be assigned to a proper scope; otherwise, they will be lost \nwhen the current request ends.\n<view-state id=\"reviewPersonInfo\">\n  <transition on=\"cancel\" to=\"cancelled\">\n    <evaluate expression=\n        \"personManager.delete(requestParameters.personId)\">\n    </transition>\n</view-state>\n■ ?  to test your understanding, look at the following code snippet:\n <view-state id=\"practiceInfo\">\n   <on-entry>\n    <set name=\"flashScope.var1\" value=\"var1\" >\n    <set name=\"requestScope.var2\" value=\"var2\" >\n   <on-entry>\n   <on-render>\n    <set name=\"requestScope.var3\" value=\"var3\" >\n    <set name=\"flashScope.var4\" value=\"var4\" >\n    <set name=\"requestScope.var5\" value=\"var5\" >\n   </on-render>\n </view-state>\ntry to determine which of the following affirmations is true and which is not, and why.5\n  1.    var2 is available after the view is rendered.\n  2.    var2 can be used to initialize the view, but is lost when the view is rendered.\n  3.    var1, var3, var4, and var5 are available after the view is rendered.\n  4.    var1 is lost if the view is refreshed.\n51. False. This variable is defined in the first requestScope and a state has two requests. Rendering the view is done in \nthe second request. 2. True. As explained earlier. 3. True. var1 and var4 are defined in flashScope; var3 and var5 are \ndefined in the scope of the rendering requestScope. 4. True. var1 is lost because it is defined when entering the state, \nand if the page is reloaded, entering the page is done only once. So when the page is reloaded, the flash scope is cleaned \nand var1 is lost.\n290",
          "tables": [],
          "code_blocks": [
            "<evaluate expression=\n        \"personManager.delete(requestParameters.personId)\">\n    </transition>",
            "<set name=\"flashScope.var1\" value=\"var1\" >\n    <set name=\"requestScope.var2\" value=\"var2\" >\n   <on-entry>\n   <on-render>\n    <set name=\"requestScope.var3\" value=\"var3\" >\n    <set name=\"flashScope.var4\" value=\"var4\" >\n    <set name=\"requestScope.var5\" value=\"var5\" >\n   </on-render>\n </view-state>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 303,
          "text": "Chapter 7 ■ Spring Web FloW\nActions are really useful components of a flow, but a flow definition must stay clear and readable. The \nrecommended practice is to keep your flow definition as simple as possible, use actions only to prevent \ntransactions or to decide to which state to transition next. The heavy-lifting actions should be performed in \nJava.\nAs you probably figured out by now, a web flow definition is a bridge between the service and the web \nlayer that can be used to control the navigation.\nModel Objects\nIn Chapter 3, you learned about controllers, models, and views. A model object handles data used in a view. \nThe views used in web flows view states also need model objects to render data. In web flow definitions, \nmodel objects can be assigned different scopes and are associated to a view state using the model attribute.\n<flow ...>\n   <view-state id=\"enterPersonInfo\" model=\"person\">\n       ...\n   </view-state>\n</flow>\nThe model object is accessible from the view template files and can be set as a model attribute for forms. \nThe Spring forms used in web flow views are identical to the ones used when working with Spring MVC; the \nonly difference is represented by the Submit button, which is used to trigger a user event when using web \nflows. This is what a Spring MVC view used to save a Person instance looks like:\n<!-- addPerson.jsp -->\n<%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\" %>\n<%@ taglib prefix=\"sf\" uri=\"http://www.springframework.org/tags/form\" %>\n   <spring:url value=\"/persons/{id}\" var=\"editUrl\">\n        <spring:param name=\"id\" value=\"${person.id}\"/>\n   </spring:url>\n    <sf:form modelAttribute=\"person\" action=\"${editUrl}\" method=\"POST\">\n        <table>\n            <tr>\n                <th>\n                    <label for=\"firstName\">\n                        <span class=\"man\">*</span>\n                        <spring:message code=\"label.Person.firstname\"/> :\n                    </label>\n                </th>\n                <td><sf:input path=\"firstName\"/></td>\n                <td><sf:errors cssClass=\"error\" path=\"firstName\"/></td>\n            </tr>\n            <!-- other form fields-->\n            ...\n            <tr>\n                <td>\n                    <button id=\"saveButton\" type=\"submit\">\n                        <spring:message code=\"command.save\"/>\n                    </button>\n                </td>\n                <td>\n291",
          "tables": [],
          "code_blocks": [
            "...\n   </view-state>",
            "<spring:param name=\"id\" value=\"${person.id}\"/>\n   </spring:url>\n    <sf:form modelAttribute=\"person\" action=\"${editUrl}\" method=\"POST\">\n        <table>\n            <tr>\n                <th>\n                    <label for=\"firstName\">\n                        <span class=\"man\">*</span>\n                        <spring:message code=\"label.Person.firstname\"/> :\n                    </label>\n                </th>\n                <td><sf:input path=\"firstName\"/></td>\n                <td><sf:errors cssClass=\"error\" path=\"firstName\"/></td>\n            </tr>\n            <!-- other form fields-->\n            ...\n            <tr>\n                <td>\n                    <button id=\"saveButton\" type=\"submit\">\n                        <spring:message code=\"command.save\"/>\n                    </button>\n                </td>\n                <td>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 304,
          "text": "Chapter 7 ■ Spring Web FloW\n                    <a href=\"${editUrl}\">\n                        <spring:message code=\"command.cancel\"/>\n                    </a>\n                </td>\n            </tr>\n        </table>\n</sf:form>\nThis is what a Spring Web Flow view used to save a Person instance looks like:\n <!-- newPersonInfo.jsp -->\n <%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\" %>\n<%@ taglib prefix=\"sf\" uri=\"http://www.springframework.org/tags/form\" %>\n<sf:form modelAttribute=\"person\" method=\"POST\" id=\"newPersonForm\">\n <table>\n            <tr>\n                <th>\n                    <label for=\"firstName\">\n                        <span class=\"man\">*</span>\n                        <spring:message code=\"label.Person.firstname\"/> :\n                    </label>\n                </th>\n                <td><sf:input path=\"firstName\"/></td>\n                <td><sf:errors cssClass=\"error\" path=\"firstName\"/></td>\n            </tr>\n            <!-- other form fields-->\n            ...\n            <tr>\n                <td>\n                    <button id=\"newPersonButton\" name=\"_eventId_proceed\"\n                           type=\"submit\">\n                        <spring:message code=\"command.proceed\" />\n                    </button>\n                </td>\n                <td>\n                    <button id=\"cancelOpButton\" name=\"_eventId_cancel\"\n                        type=\"submit\">\n                        <spring:message code=\"command.cancel\" />\n                    </button>\n                </td>\n            </tr>\n        </table>\n</sf:form>\nThe cancel user event is handled by a global transition, a concept that is covered later.\nThe model is populated with the request parameter process, also known as data binding. Validation \nand conversion are supported for all properties, but can be suppressed if needed (usually during \ndevelopment) using the bind and validation attributes on the <transition /> element, by setting them to \n\"false\".\n<view-state id=\"enterPersonInfo\"\n292",
          "tables": [],
          "code_blocks": [
            "<a href=\"${editUrl}\">\n                        <spring:message code=\"command.cancel\"/>\n                    </a>\n                </td>\n            </tr>\n        </table>",
            "<tr>\n                <th>\n                    <label for=\"firstName\">\n                        <span class=\"man\">*</span>\n                        <spring:message code=\"label.Person.firstname\"/> :\n                    </label>\n                </th>\n                <td><sf:input path=\"firstName\"/></td>\n                <td><sf:errors cssClass=\"error\" path=\"firstName\"/></td>\n            </tr>\n            <!-- other form fields-->\n            ...\n            <tr>\n                <td>\n                    <button id=\"newPersonButton\" name=\"_eventId_proceed\"\n                           type=\"submit\">\n                        <spring:message code=\"command.proceed\" />\n                    </button>\n                </td>\n                <td>\n                    <button id=\"cancelOpButton\" name=\"_eventId_cancel\"\n                        type=\"submit\">\n                        <spring:message code=\"command.cancel\" />\n                    </button>\n                </td>\n            </tr>\n        </table>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 305,
          "text": "Chapter 7 ■ Spring Web FloW\n           model=\"person\">\n   <transition on=\"submit\" to=\"reviewPersonInfo\" />\n   <transition on=\"cancel\" to=\"end\"\n                   bind=\"false\" validate=\"false\"/>\n</view-state>\nWhen using Spring MVC, the @InitBinder annotation was used to customize the properties of a model \nobject that should be binded to a view. Spring Web Flow has an equivalent for this too, because there is no \npoint in binding properties that the user does not modify or is not meant to use for security reasons. For \nexample, after personal data is introduced and the validation has passed, the enterIdentityCardInfo data \nused to generate the unique personal numerical code should no longer be editable by the user; otherwise, \nthe personal numerical code is no longer valid. The <binder /> element can be used to white-list elements \neligible for binding, like in the following example:\n    <!-- enterIdentityCardInfo-floq.xml -->\n   <view-state id=\"enterIdentityCardInfo\"\n             model=\"identityCard\">\n      <binder>\n             <binding property=\"series\" required=\"true\"/>\n             <binding property=\"number\" required=\"true\"/>\n             <!--current date will be used-->\n             <binding property=\"emittedAt\" required=\"false\"/>\n             <!-- current date 10 years will be used-->\n             <binding property=\"expiresAt\" required=\"false\"/>\n             <binding property=\"address\" required=\"true\"/>\n      </binder>\n</view-state>\nWhen the form is really big, the model object has a lot of fields and the web flow definition might \nbecome too verbose. A more appropriate solution in cases like this is to create a validator bean or method for \nthe model objects, as covered in Chapter 3.\nValidation, Formatting, and Conversion\nFormatters and converters used with web flows are the same as in Spring MVC: default ones are present \nout of the box, and custom formatters and converters have to be declared and associated with the web flow \nengine using the flow builder services, as shown in the “Configuration and Infrastructure Beans” section. \nThe same goes for validators: they have to be set on the flow builder services to be used.\n■ !  a Spring convertor is a general-purpose class used for conversion between two types that implement \norg.springframework.core.convert.converter.GenericConverter or one of its subinterfaces, or \nimplement org.springframework.core.convert.converter.Converter<S,T> or subinterfaces.\n293",
          "tables": [],
          "code_blocks": [
            "model=\"person\">\n   <transition on=\"submit\" to=\"reviewPersonInfo\" />\n   <transition on=\"cancel\" to=\"end\"\n                   bind=\"false\" validate=\"false\"/>",
            "<!-- enterIdentityCardInfo-floq.xml -->\n   <view-state id=\"enterIdentityCardInfo\"\n             model=\"identityCard\">\n      <binder>\n             <binding property=\"series\" required=\"true\"/>\n             <binding property=\"number\" required=\"true\"/>\n             <!--current date will be used-->\n             <binding property=\"emittedAt\" required=\"false\"/>\n             <!-- current date 10 years will be used-->\n             <binding property=\"expiresAt\" required=\"false\"/>\n             <binding property=\"address\" required=\"true\"/>\n      </binder>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 306,
          "text": "Chapter 7 ■ Spring Web FloW\na Spring formatter is a class specializing in transforming objects into strings or vice-versa, because when \nSpring MVC or Spring Web Flow is used, this is the focus of model objects. the classes must implement the \norg.springframework.format.Formatter<T> interface or one of its subinterfaces. the Formatter<T> \ninterface is favored by developers because it is more suitable for web applications. \nAlthough the registered converters are applied to any model objects, if needed, a different converter \ncan be set for a property using the converter attribute of the <binding /> element. A converter cannot be \nspecified in the web flow definition on a property that is not required; otherwise, when no value is provided, \nvalidation errors are generated and rendered in the view.\n<!-- enterIdentityCardInfo-floq.xml -->\n<view-state id=\"enterIdentityCardInfo\"\n         model=\"identityCard\">\n  <binder>\n         <binding property=\"series\" required=\"true\"/>\n         <binding property=\"number\" required=\"true\"/>\n         <binding property=\"emittedAt\" required=\"true\" converter=\"simpleDate\"/>\n         <binding property=\"expiresAt\" required=\"true\" converter=\"simpleDate\"/>\n         <binding property=\"address\" required=\"true\"/>\n  </binder>\n</view-state>\nJSR 349 bean validation is supported and annotations on the form object properties are used to set up \nthe validation; but to enable it, a bean of type LocalValidatorFactoryBean has to be defined and set on the \non the flowBuilderServices bean. A validator set on the FlowBuilderServices bean is applied to all model \nobjects in the application. For customizations, custom validators can also be used, just like in Spring MVC.\n■ !  remember the annotation validations?\n @Entity\n @SequenceGenerator(name = \"seqGen\", allocationSize = 1)\n public class Person implements Serializable {\n   @Column(nullable = false)\n   @Size(min=2, max=50)\n   @NotEmpty\n   public String firstName;\n   @Enumerated(EnumType.STRING)\n   @NotNull\n   private Gender gender;\n   ...\n }\n294",
          "tables": [],
          "code_blocks": [
            "model=\"identityCard\">\n  <binder>\n         <binding property=\"series\" required=\"true\"/>\n         <binding property=\"number\" required=\"true\"/>\n         <binding property=\"emittedAt\" required=\"true\" converter=\"simpleDate\"/>\n         <binding property=\"expiresAt\" required=\"true\" converter=\"simpleDate\"/>\n         <binding property=\"address\" required=\"true\"/>\n  </binder>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 307,
          "text": "Chapter 7 ■ Spring Web FloW\nWhen it comes to validation, there is one major difference between Spring MVC and Spring Web Flow—\nthe template of the internationalized validation message keys. In Spring Web Flow, the message key must \nmatch the following template to be picked up automatically. In Spring MVC, the message name is placed at \nthe beginning; in Spring Web Flow is placed at the end.\n #MVC\nmessageName.modelObject.property\n #Web Flow\nmodelObject.property.messageName\nBut this difference can be eliminated by using a bean of type DefaultMessageCodesResolver that is set \non the MvcViewFactoryCreator. Here is the XML configuration needed to make this happen:\n<!-- webflow-config.xml -->\n  <!-- Configures Web Flow to render Tiles views resolved by Spring MVC -->\n  <bean id=\"mvcViewFactoryCreator\"\n      class=\"org.springframework.webflow.mvc.builder.MvcViewFactoryCreator\">\n      <property name=\"viewResolvers\" ref=\"tilesViewResolver\" />\n      <property name=\"useSpringBeanBinding\" value=\"true\"/>\n      <property name=\"messageCodesResolver\" ref=\"mcr\" />\n  </bean>\n  \n       <bean id=\"mcr\"\n          class=\"org.springframework.validation.DefaultMessageCodesResolver\"/>\nAnd here is the Java Configuration:\n  \\\\ WebFlowConfig.java\n  @Bean\n    public MvcViewFactoryCreator mvcViewFactoryCreator() {\n        MvcViewFactoryCreator factoryCreator = new MvcViewFactoryCreator();\n        factoryCreator.setViewResolvers(Arrays.<ViewResolver>asList(\n            this.mvcConfig.tilesViewResolver()));\n        factoryCreator.setUseSpringBeanBinding(true);\n        factoryCreator\n             .setMessageCodesResolver(messageCodesResolver());\n        return factoryCreator;\n  }\n   \n  @Bean\n  public DefaultMessageCodesResolver messageCodesResolver(){\n      return new DefaultMessageCodesResolver();\n  }\n295",
          "tables": [],
          "code_blocks": [
            "class=\"org.springframework.webflow.mvc.builder.MvcViewFactoryCreator\">\n      <property name=\"viewResolvers\" ref=\"tilesViewResolver\" />\n      <property name=\"useSpringBeanBinding\" value=\"true\"/>\n      <property name=\"messageCodesResolver\" ref=\"mcr\" />\n  </bean>\n  \n       <bean id=\"mcr\"\n          class=\"org.springframework.validation.DefaultMessageCodesResolver\"/>",
            "public MvcViewFactoryCreator mvcViewFactoryCreator() {\n        MvcViewFactoryCreator factoryCreator = new MvcViewFactoryCreator();\n        factoryCreator.setViewResolvers(Arrays.<ViewResolver>asList(\n            this.mvcConfig.tilesViewResolver()));\n        factoryCreator.setUseSpringBeanBinding(true);\n        factoryCreator\n             .setMessageCodesResolver(messageCodesResolver());\n        return factoryCreator;\n  }\n   \n  @Bean\n  public DefaultMessageCodesResolver messageCodesResolver(){\n      return new DefaultMessageCodesResolver();\n  }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 308,
          "text": "Chapter 7 ■ Spring Web FloW\nAnother way to validate a model object is to use programmatic validation. You can define a validation \nmethod in the model object class specific to the view state. The method must have a specific name to be \ndiscovered and the convention naming is \n\"validate\" + {view-state-id(first letter is up-cased)}\nSo if instead of using a Person instance as model object, a specific form object implementation would \nbe used. That implementation can also be defined with a view-state specific validation method:\n<!-- Flow definition file-->\n<view-state id=\"enterPersonInfo\" model=\"personModelObject\" >\n    ...\n</view-state>\n \n<!-- PersonModelObject.java -->\npublic class PersonModelObject implements Serializable {\n        public void validateEnterPersonInfo(\n                ValidationContext validationContext) {\n                ...\n        }\n}\nKeep in mind that model objects are being serialized and deserialized by Spring to populate the form \nwith values, or retrieve field values from the form, so the model object class must implement the java.\nio.Serializable interface.\nIf the model object cannot be modified, a validator bean can be used. The bean name must match a \nspecific convention:\n{model object name} + \"Validator\"\nTo be automatically detected, the validation method must match the preceding conventions, but the \nsignature has an extra parameter—the model object that is automatically passed as an argument.\n<!-- Flow definition file-->\n<view-state id=\"enterPersonInfo\" model=\"person\" > ...</view-state>\n \n<!-- PersonValidator.java -->\n@Component\npublic class PersonValidator {\n        public void validateEnterPersonInfo(\n               Person person,\n               ValidationContext validationContext) {\n               ...\n        }\n}\n296",
          "tables": [],
          "code_blocks": [
            "...",
            "public void validateEnterPersonInfo(\n                ValidationContext validationContext) {\n                ...\n        }",
            "public void validateEnterPersonInfo(\n               Person person,\n               ValidationContext validationContext) {\n               ...\n        }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 309,
          "text": "Chapter 7 ■ Spring Web FloW\n■ !  When writing a validator class and using annotations to define the bean, make sure to specify a name \ncorresponding to the convention mentioned earlier, or make sure that you name the class appropriately.\nAnother way of defining validation with web flows is using the <evaluate /> element to call validation \nmethods and prevent transitions if the validation fails. But doing this is not recommended because it will \novercrowd the flow definition. Still, in some cases, this kind of approach could be necessary, so that’s why it \nis covered.\n<!-- Flow definition file-->\n<view-state id=\"enterPersonInfo\" model=\"person\" >\n \n   <transition on=\"submit\" to=\"enterIdentityCardInfo\">\n     <evaluate expression=\"personValidator.check(person, messageContext)\"/>\n   </transition>\n</view-state>\n \n<!-- PersonValidator.java -->\n@Component(\"personValidator\")\npublic class PersonValidator{\n        public boolean check(\n                Person person,\n                MessageContext messageContext) {\n                ...\n        }\n}\nThe method returns a Boolean value that can be used to prevent a transition when the result of its \nevaluation is false.\nValidation methods have flexible signatures and can use different types of objects to register errors. \nThey can use a ValidationContext object to register errors:\nimport org.springframework.binding.message.MessageBuilder;\nimport org.springframework.binding.validation.ValidationContext;\n...\npublic void validateEnterPersonInfo(ValidationContext validationContext) {\n  validationContext.getMessageContext().\n     addMessage(new MessageBuilder().error()\n     .source(\"person\")\n     .code(\"Size.person.firstName\")\n     .defaultText (\"Length must be between 2 and 50\").build());\n}\n297",
          "tables": [],
          "code_blocks": [
            "<transition on=\"submit\" to=\"enterIdentityCardInfo\">\n     <evaluate expression=\"personValidator.check(person, messageContext)\"/>\n   </transition>",
            "public boolean check(\n                Person person,\n                MessageContext messageContext) {\n                ...\n        }",
            "addMessage(new MessageBuilder().error()\n     .source(\"person\")\n     .code(\"Size.person.firstName\")\n     .defaultText (\"Length must be between 2 and 50\").build());"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 310,
          "text": "Chapter 7 ■ Spring Web FloW\nOr a MessageContext object:\nimport org.springframework.binding.message.MessageBuilder;\nimport org.springframework.binding.message.MessageContext;\n...\npublic boolean check(Person person, MessageContext messageContext) {\n    messageContext.addMessage\n        (new MessageBuilder().error().source(\"firstName\")\n             .code(\"Size.person.firstName\").build());\n        return true;\n}\nOr an Errors object:\nimport org.springframework.validation.Errors;\n...\npublic boolean check(Person person, Errors errors) {\n       errors.rejectValue(\"person\",\n               \"Size.person.firstName\",\n               \"Length must be between 2 and 50\");\n       return true;\n   }\nJSR-349 bean validation supports partial validation through validation groups.6 A group defines a \nsubset of constraints. Instead of validating all constraints for a given object graph, only a subset is validated. \nThis subset is defined by the group or groups targeted. \n@NotEmpty\n@Size(min=2, max=50, groups=NameRule.class)\npublic String firstName;\n \n@NotEmpty\n@Size(min=2, max=50, groups=NameRule.class)\npublic String lastName;\nGroups are represented by interfaces that are defined inside the model class or its parent.\npackage com.pr.validator;\npublic class PersonModelObject implements Serializable {\n...\n   public interface NameRule {\n   }\n}\n6If you want more information about validation groups, the official documentation is a great start; it can be found at \nhttps://docs.oracle.com/javaee/7/tutorial/index.html.\n298",
          "tables": [],
          "code_blocks": [
            "messageContext.addMessage\n        (new MessageBuilder().error().source(\"firstName\")\n             .code(\"Size.person.firstName\").build());\n        return true;",
            "errors.rejectValue(\"person\",\n               \"Size.person.firstName\",\n               \"Length must be between 2 and 50\");\n       return true;\n   }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 311,
          "text": "Chapter 7 ■ Spring Web FloW\nIn a flow definition, the equivalent of validation groups can be implemented using the  \nvalidation-hints attribute on the <view-state />:\n<!-- Flow definition file-->\n<view-state id=\"enterPersonInfo\" model=\"person\" validation-hints=\"group1,group2\">\n \n   <transition on=\"submit\" to=\"enterIdentityCardInfo\">\n     <evaluate expression=\"personValidator.check(person, messageContext)\"/>\n   </transition>\n</view-state>\nThe validation groups are used to group together fields of the model object that are subjected to \nvalidation together.\n@NotEmpty\n@Size(min=2, max=50, groups={\"group1,group2\"})\npublic String firstName;\n \n@NotEmpty\n@Size(min=2, max=50, groups={\"group1\"})\npublic String lastName;\nThe validation-hints attribute is an expression that resolves to a comma-delimited string consisting \nof hints that are resolved by a ValidationHintResolver bean. By default, Spring uses a bean of type org.\nspringframework.webflow.validation.\nBeanValidationHintResolver matches the string values to class-based bean validation groups. In the \npreceding case, this bean looked for interfaces named Group1 and Group2 in the model or its parent. Fully \nqualified class names can also be provided.\nA custom ValidationHintResolver can also be provided if necessary, but has to be set on the \nFlowBuilderServices in the web flow configuration. In the following, you can see an XML and Java \nConfiguration sample:\n  <!-- webflow-config.xml -->\n<webflow:flow-builder-services id=\"flowBuilderServices\"\n           view-factory-creator=\"mvcViewFactoryCreator\"\n            conversion-service=\"conversionService\"\n            validation-hint-resolver=\"customValidationHintResolver\" />\n \n<!-- WebFlowConfig.class-->\n@Bean\n public FlowBuilderServices flowBuilderServices() {\n   return getFlowBuilderServicesBuilder()\n                .setViewFactoryCreator(mvcViewFactoryCreator())\n                .setValidator(this.mvcConfig.validator())\n                .setConversionService(conversionService())\n                .setValidationHintResolver(customValidationHintResolver())\n                .setDevelopmentMode(true)\n                .build();\n}\n \n299",
          "tables": [],
          "code_blocks": [
            "<transition on=\"submit\" to=\"enterIdentityCardInfo\">\n     <evaluate expression=\"personValidator.check(person, messageContext)\"/>\n   </transition>",
            "view-factory-creator=\"mvcViewFactoryCreator\"\n            conversion-service=\"conversionService\"\n            validation-hint-resolver=\"customValidationHintResolver\" />",
            ".setViewFactoryCreator(mvcViewFactoryCreator())\n                .setValidator(this.mvcConfig.validator())\n                .setConversionService(conversionService())\n                .setValidationHintResolver(customValidationHintResolver())\n                .setDevelopmentMode(true)\n                .build();"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 312,
          "text": "Chapter 7 ■ Spring Web FloW\n@Bean\npublic CustomValidationHintResolver customValidationHintResolver(){\n    return new CustomValidationHintResolver();\n}\n \n//CustomValidationHintResolver.java\nimport org.springframework.webflow.validation.BeanValidationHintResolver;\n...\n@Component(\"customValidationHintResolver\")\npublic class CustomValidationHintResolver extends BeanValidationHintResolver {\n        ...\n}\n■ !  if you want to test your understanding so far, check if you understand how view-states, actions, and \ntransactions interact in the context of a flow. You can take a break from reading and try to solve the  \n11-pr-webflow-actions-practice practice project. this project contains all the classes necessary to \nimplement a flow that creates a Person instance in two steps. the view templates are provided, and in the \nnewPerson-flow.xml, the view-states and transaction elements are already in place. the only thing you have \nto do is to complete the web flow definition by adding actions and model objects. (toDo 40) Figure 7-13 shows \nthe elements of the flow definition and some hints about which actions should be used and where.\nFigure 7-13.  Web Flow action practice project flow definition\n300",
          "tables": [],
          "code_blocks": [
            "return new CustomValidationHintResolver();",
            "..."
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 313,
          "text": "Chapter 7 ■ Spring Web FloW\nA PersonModelObject class is provided to use an instance of this type in the flow definition. A class \ncalled PersonBuilder is defined with helper methods that can be used to create a person model object and \nsave the person that the flow will create. The following are the steps executed by the web flow:\n  1.  The enterPersonInfo view-state is entered and a form with the minimal data \nrequired to create a person is displayed. Almost all properties of the person \nmodel object for this form must be binded and are required, except for the \nmiddleName. When this view is rendered, the list of hospitals must be populated. \nIn this example, the hospitalList is only needed to render the view. Keep \nthis in mind when deciding which scope this variable should be assigned to. \nWhen leaving this state, the personal object model must be created from all \nthe data introduced by the user. The personal numerical code is generated \nby the application. Just add an action to call the buildPersonObject of the \npersonBuilder bean and save the result to a variable. This variable must be \naccessible to all view-states from this step on, so take this into account when \nchoosing the scope for it. Figure 7-14 depicts the view specific to this view-state.\nFigure 7-14.  The enterPersonInfo view-state\n301",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 314,
          "text": "Chapter 7 ■ Spring Web FloW\n  2.  Clicking the Review button must direct the user to the reviewPerson view-state, \nwhere the information introduced by the user and the application-generated \npersonal numeric code is displayed. Only the transition element is missing \nfrom the configuration state. The next state to go to is enterIdentityCardInfo. \nFigure 7-15 depicts the view specific to this view-state.\nFigure 7-15.  The reviewPerson view-state\n302",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 315,
          "text": "Chapter 7 ■ Spring Web FloW\n  3.  The enterIdentityCardInfo is entered, and in this state, the personal details \nintroduced and generated so far are displayed. The view specific to this view-\nstate also contains a form that is used to insert data for the IdentityCard \ninstance. A Person instance cannot be created without an IdentityCard. The \npersonal numerical code cannot be edited; to change it, you have to go back \nto the first step of the flow and change the data there. All the properties of the \nidentityCard object model for this form must be binded and all are mandatory. \nFigure 7-16 depicts the view specific to this view-state.\nFigure 7-16.  The enterIdentityCardInfo view-state\n303",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 316,
          "text": "Chapter 7 ■ Spring Web FloW\nTo save a person’s data, just click the Save button. In the web flow definition, the savePersonEntity \nin the personBuilder bean call must be added when transitioning away to the end state. The \nIdentityCardValidator class defines a validator method that is applied automatically before saving an \nIdentityCard instance. The validation method is discovered and applied specifically when the flow is \ntransitioning away from the enterIdentityCardInfo view-state, and checks if another person with the same \npersonal numerical code already exists in the system. To try it out, just add a person born on January 8, 1942 \nat Oxford Hospital. You should get an error message like the one shown in Figure 7-17.\nFigure 7-17.  The enterIdentityCardInfo view-state when invalid data is inserted\n■ Note   as an exercise, you could try to make the validation more precise by testing for number and series \nduplication in an identity card.\nAction States\nIf you remember the first logical schema (see Figure 7-1) of the web flow execution that it is meant to be \nimplemented after studying this chapter, you should remember that it had some decisional elements in \nthe if-then-else style that made the navigation flow dynamic; because when transitioning based on the \nvalue of a variable, you can end up in different states. In the examples presented so far, this was not possible, \nbecause view-states and actions are not enough to do this. What can be done with view-states and actions, \nhowever, is preventing transitioning when an action fails, but not changing the state to transition to. To make \nthis happen dynamically, two new state types are needed: action-states and decision-states.\nAn action state allows transition to a state that executes one or more actions using <evaluate /> and \n<set /> elements. The result of this action is raised as an event and a transition to another state is triggered. \nDifferent events can be raised to trigger different transitions dynamically, so an action state should be \nused when there is need of an action to be executed and the state to transition to is decided by the result \nof that action. Multiple <evaluate /> are allowed inside an action-state, but the last one is used to control \nthe transition. The <set /> element can be used to define variables needed to execute that action and it is \nrecommended for usage when transition control is not required.\n304",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 317,
          "text": "Chapter 7 ■ Spring Web FloW\nThe result of an action state can be any of the types in the following list, but it will always be converted \nto a string following the rules mentioned for each type, because to trigger a transition, the returned value \nmust be mapped to an event:\n•\t Boolean: Always evaluates to \"yes\" or \"no\".\n•\t String: The name of the event to trigger.\n•\t Enumerated types: The enumerated values is converted to String using the \ntoString() method. The toString method must be defined in such a way that it \nreturns acceptable values to transition on. Look at the following example; depending \non the result of the evaluation of the getDecision(...) method, the transition is \ndone to a different state.\n //ActionEnum.java\npublic enum ActionEnum {\n \n    EDIT_ACCOUNT(\"accountEditState\"),\n    DELETE_ACCOUNT(\"accountDeleteState\"),\n    CREATE_ACCOUNT(\"accountCreateState\");\n \n    private String value;\n \n    ActionEnum(String value) {\n        this.value = value;\n    }\n \n    public String getValue() {\n        return value;\n    }\n \n    @Override\n    public String toString() {\n        return value;\n    }\n}\n \n//DecisionBean.java\n@Component\npublic class DecisionBean implements Serializable {\n \n    public ActionEnum getDecision(int decisionId) {\n        switch (decisionId){\n            case 0:\n                return ActionEnum.EDIT_ACCOUNT;\n            case 1:\n                return ActionEnum.DELETE_ACCOUNT;\n            case 2:\n                return ActionEnum.CREATE_ACCOUNT;\n        }\n        throw new IllegalArgumentException(\"Option not supported!\");\n    }\n}\n \n305",
          "tables": [],
          "code_blocks": [
            "EDIT_ACCOUNT(\"accountEditState\"),\n    DELETE_ACCOUNT(\"accountDeleteState\"),\n    CREATE_ACCOUNT(\"accountCreateState\");\n \n    private String value;\n \n    ActionEnum(String value) {\n        this.value = value;\n    }\n \n    public String getValue() {\n        return value;\n    }\n \n    @Override\n    public String toString() {\n        return value;\n    }",
            "public ActionEnum getDecision(int decisionId) {\n        switch (decisionId){\n            case 0:\n                return ActionEnum.EDIT_ACCOUNT;\n            case 1:\n                return ActionEnum.DELETE_ACCOUNT;\n            case 2:\n                return ActionEnum.CREATE_ACCOUNT;\n        }\n        throw new IllegalArgumentException(\"Option not supported!\");\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 318,
          "text": "Chapter 7 ■ Spring Web FloW\n//account-flow.xml\n<flow...>\n<action-state id=\"accountDecision\">\n    <evaluate\n        expression=\"decisionBean.getDecision(requestParameters.decisionId)\" />\n    <transition on=\"EDIT_ACCOUNT\" to=\"edit\"/>\n    <transition on=\"DELETE_ACCOUNT\" to=\"delete\"/>\n    <transition on=\"CREATE_ACCOUNT\" to=\"create\"/>\n</action-state>\n<view-state id=\"edit\" ... >\n..\n</view-state>\n \n<view-state id=\"delete\" ... >\n..\n</view-state>\n \n< view-state id=\"create\" ... >\n..\n</view-state>\n \n</flow>\n•\t org.springframework.webflow.execution.Event: The transition will use the id of \nthe event object converted to String.\n•\t Any other value that evaluates to \"success\".\n■ !  When using an <evaluate /> expression inside a transition, a transition will occur if the result is any \nof the true(Boolean), “yes”, “true”(String), “success”. enumerated types are converted to a String using its \ntoString() method and the previous rule applies. any other object is treated as “success”.\n<view-state id=\"enterPersonInfo\" model=\"person\">\n...\n \n       <transition on=\"proceed\" to=\"enterIdentityCardInfo\" >\n          <evaluate expression=\"personService.isNewPerson(person)\"/>\n           <!-- Must return \"true\", \"yes\",\n               \"success\" or an object-->\n       </transition>\n</view-state>\n306",
          "tables": [],
          "code_blocks": [
            "<evaluate\n        expression=\"decisionBean.getDecision(requestParameters.decisionId)\" />\n    <transition on=\"EDIT_ACCOUNT\" to=\"edit\"/>\n    <transition on=\"DELETE_ACCOUNT\" to=\"delete\"/>\n    <transition on=\"CREATE_ACCOUNT\" to=\"create\"/>",
            "<transition on=\"proceed\" to=\"enterIdentityCardInfo\" >\n          <evaluate expression=\"personService.isNewPerson(person)\"/>\n           <!-- Must return \"true\", \"yes\",\n               \"success\" or an object-->\n       </transition>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 319,
          "text": "Chapter 7 ■ Spring Web FloW\nSo far, actions have been used in quite a simple manner and used to invoke methods on existing beans. \nThese actions can be categorized as No action because they are used to invoke business services directly. \nThe concept of “No action” might be confusing. The reason such a category exists is to categorize actions \nthat are not defined by action classes.\n <!-- newPerson-flow.xml-->\n<action-state id=\"checkDuplicate\">\n    <evaluate expression=\"personService.isNewPerson(person)\"/>\n    <transition on=\"success\" to=\"enterIdentityCardInfo\"/>\n    <!-- Transition always occurs -->\n</action-state>\n \n// PersonService.java\n@Service(\"personService\")\npublic class PersonService {\n    @Autowired\n    PersonManager personManager;\n \n    public boolean isNewPerson(Person person) {\n        String pnc = PncBuilder.build(person);\n        Person existingPerson = personManager.getByPnc(pnc);\n        return existingPerson == null;\n    }\n}\nBut when the logic of an action becomes complicated, and even needs access to the flow context, \nactions can be implemented in different ways. The most simple way is to create a POJO (a bean), pass the \nflow context as an argument, and then invoke its methods by the flow. These are called the POJO actions.\n■ !  to mark poJo actions, developers usually create their own annotation and set it to be component-\nscanned. in the personal records Manager project, the annotation is called @WebFlowAction.\n @Target({ElementType.TYPE})\n @Retention(RetentionPolicy.RUNTIME)\n @Documented\n @Component\n public @interface WebFlowAction {\n   /**\n    * The value may indicate a suggestion for a logical component name,\n    * to be turned into a Spring bean in case of an autodetected component.\n    * @return the suggested component name, if any\n    */\n   String value() default \"\";\n }\n307",
          "tables": [],
          "code_blocks": [
            "<evaluate expression=\"personService.isNewPerson(person)\"/>\n    <transition on=\"success\" to=\"enterIdentityCardInfo\"/>\n    <!-- Transition always occurs -->",
            "@Autowired\n    PersonManager personManager;\n \n    public boolean isNewPerson(Person person) {\n        String pnc = PncBuilder.build(person);\n        Person existingPerson = personManager.getByPnc(pnc);\n        return existingPerson == null;\n    }",
            "* The value may indicate a suggestion for a logical component name,\n    * to be turned into a Spring bean in case of an autodetected component.\n    * @return the suggested component name, if any\n    */\n   String value() default \"\";\n }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 320,
          "text": "Chapter 7 ■ Spring Web FloW\nFor Spring to scan for this annotation, you have to add it to the configuration:\n @Configuration\n @EnableWebMvc\n @ComponentScan(basePackages = {\"com.pr, com.pr.persons,\n   com.pr.hospitals, com.pr.validator\"},\n includeFilters = @ComponentScan.Filter(\n     value = WebFlowAction.class,\n     type = FilterType.ANNOTATION\n ))\n @ImportResource({\"classpath:spring/app-service-config.xml\",\n  \"classpath:spring/db-config.xml\"})\n public class MvcConfig extends WebMvcConfigurerAdapter {\n ...\n }\nSo, the following code can be written using a POJO action in the following manner:\n  <!-- newPerson-flow.xml-->\n<action-state id=\"checkDuplicate\">\n    <evaluate expression=\n      \"personAction.isNewPerson(requestContext)\" />\n      <transition on=\"success\" to=\"enterIdentityCardInfo\"/>\n</action-state>\n \n//PersonAction.java\nimport com.pr.WebFlowAction;\nimport org.springframework.webflow.execution.RequestContext;\n \n@WebFlowAction\npublic class PersonAction {\n \n    public String isNewPerson(RequestContext context) {\n        Person person = (Person) context.getFlowScope().get(\"person\");\n        String pnc = PncBuilder.build(person);\n        Person existingPerson = personManager.getByPnc(pnc);\n        if (existingPerson == null) {\n            return \"success\";\n        } else{\n            throw new DuplicatePersonException(existingPerson);\n        }\n    }\n}\nNotice how the context is declared as a parameter and set as an argument by the developer in the web \nflow action definition. They way that exceptions are handled in a web flow execution is covered later.\n308",
          "tables": [],
          "code_blocks": [
            "value = WebFlowAction.class,\n     type = FilterType.ANNOTATION\n ))\n @ImportResource({\"classpath:spring/app-service-config.xml\",\n  \"classpath:spring/db-config.xml\"})\n public class MvcConfig extends WebMvcConfigurerAdapter {\n ...\n }",
            "<evaluate expression=\n      \"personAction.isNewPerson(requestContext)\" />\n      <transition on=\"success\" to=\"enterIdentityCardInfo\"/>",
            "public String isNewPerson(RequestContext context) {\n        Person person = (Person) context.getFlowScope().get(\"person\");\n        String pnc = PncBuilder.build(person);\n        Person existingPerson = personManager.getByPnc(pnc);\n        if (existingPerson == null) {\n            return \"success\";\n        } else{\n            throw new DuplicatePersonException(existingPerson);\n        }\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 321,
          "text": "Chapter 7 ■ Spring Web FloW\nAnother type of actions are the plain actions. For each action, a class is created that implements the  \norg.springframework.webflow.execution.Action interface or extends the Spring-provided implementation, \nthe org.springframework.webflow.action.AbstractAction class. The implementation provided by Spring \nprovides some methods that can be used to generate events. For example, this class implements the  \norg.springframework.beans.factory.InitializingBean interface (covered in Chapter 2) to receive an \ninit callback when deployed within a Spring bean factory and exposes hooks to execute pre- (doPreExecute \n(RequestContext context)) and post- (doPostExecute(RequestContext context)) action execution.\nThe Action interface exposes only one method, named execute. Implementations of this interface are \nusually used to create singleton beans instantiated and managed by a Spring web application context. The \nrequest context is no longer declared as an argument in the flow definition, as an action defined this way is \nhandled by Spring, which knows the argument to call the action method with. The advantages of using plain \nactions is that they can easily be parametrized with mocks and stubs in test environments. Also, action proxies \nmay also be generated at runtime for delegating to POJO business operations that have no dependency on the \nSpring Web Flow API, which helps with decoupling components inside an application. They can be used to \nsimplify a flow definition when an action is simple enough, because there is no need for a SpEL in the evaluate \nelement or a method call; the name of the action component is enough for Spring to know what to do.\n package org.springframework.webflow.execution;\npublic interface Action {\n    public Event execute(RequestContext context)\n        throws Exception;\n}\nThe previous example can be written using a plain action too, and the code will look as follows:\n <!-- newPerson-flow.xml -->\n <action-state id=\"checkDuplicate\">\n    <evaluate expression=\"personAction\" />\n      <transition on=\"success\" to=\"enterIdentityCardInfo\"/>\n</action-state>\n//PersonAction.java\nimport org.springframework.webflow.execution.Action;\n...\n @WebFlowAction\npublic class PersonAction implements Action {\n \n    @Autowired\n    PersonManager personManager;\n \n    @Override\n    public Event execute(RequestContext context) throws Exception {\n        Person person = (Person) context.getFlowScope().get(\"person\");\n        String pnc = PncBuilder.build(person);\n        Person existingPerson = personManager.getByPnc(pnc);\n        if (existingPerson == null) {\n            return new Event(this, \"success\");\n        } else{\n           \\\\ how an exception is handled in webflow context is covered\n           \\\\later in the chapter\n            throw new DuplicatePersonException(existingPerson);\n        }\n    }\n}\n309",
          "tables": [],
          "code_blocks": [
            "public Event execute(RequestContext context)\n        throws Exception;",
            "<evaluate expression=\"personAction\" />\n      <transition on=\"success\" to=\"enterIdentityCardInfo\"/>",
            "@Autowired\n    PersonManager personManager;\n \n    @Override\n    public Event execute(RequestContext context) throws Exception {\n        Person person = (Person) context.getFlowScope().get(\"person\");\n        String pnc = PncBuilder.build(person);\n        Person existingPerson = personManager.getByPnc(pnc);\n        if (existingPerson == null) {\n            return new Event(this, \"success\");\n        } else{\n           \\\\ how an exception is handled in webflow context is covered\n           \\\\later in the chapter\n            throw new DuplicatePersonException(existingPerson);\n        }\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 322,
          "text": "Chapter 7 ■ Spring Web FloW\nThe context is automatically passed as an argument by Spring.\nThe most complex type of actions are the MultiActions. They are implemented by extending the org.\nspringframework.webflow.action.MultiAction class, an extension of AbstractAction that provides \nmultiple helper methods for returning events. All action methods must have the same signature as the \nexecute method from the previous example; the context is also automatically passed as argument by Spring.\n•\t success(), error(), yes(), no()\n•\t result(), result(String), error(Exception)\nThe code in the previous example does not differ much when implemented with MultiAction, but it is \nadded here to underline the differences between the two implementations:\n <!-- newPerson-flow.xml -->\n <action-state id=\"checkDuplicate\">\n    <evaluate expression=\"personAction.isNewPerson\" />\n      <transition on=\"success\" to=\"enterIdentityCardInfo\"/>\n</action-state>\n \n//PersonAction.java\nimport org.springframework.webflow.action.MultiAction;\n...\n @WebFlowAction\npublic class PersonAction extends MultiAction {\n    @Autowired\n    PersonManager personManager;\n \n    public Event isNewPerson(RequestContext context) throws Exception {\n        Person person = (Person) context.getFlowScope().get(\"person\");\n        String pnc = PncBuilder.build(person);\n        Person existingPerson = personManager.getByPnc(pnc);\n        if (existingPerson == null) {\n            return success();\n        } else{\n            throw new DuplicatePersonException(existingPerson);\n        }\n    }\n}\nIn the previous examples, the same behavior was implemented using all types of actions, but \ntechnically, each type of action implementation is suitable to a certain case.\n•\t No action: Easy to use: just plug in a business method call in the web flow definition. \nThe main disadvantage here is the tight coupling between business logic and \nthe flow definition, and the fact that business method calls can make your web \nflow definition look crowded. It is proper for usage in simple web flows in simple \napplications.\n•\t POJO action: Can be used to glue the flow logic with the business login in a \ndecoupled way and provides a flexible way to solve business layer exceptions; but the \ndisadvantage is that the flow definitions might become more complex.\n310",
          "tables": [],
          "code_blocks": [
            "<evaluate expression=\"personAction.isNewPerson\" />\n      <transition on=\"success\" to=\"enterIdentityCardInfo\"/>",
            "@Autowired\n    PersonManager personManager;\n \n    public Event isNewPerson(RequestContext context) throws Exception {\n        Person person = (Person) context.getFlowScope().get(\"person\");\n        String pnc = PncBuilder.build(person);\n        Person existingPerson = personManager.getByPnc(pnc);\n        if (existingPerson == null) {\n            return success();\n        } else{\n            throw new DuplicatePersonException(existingPerson);\n        }\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 323,
          "text": "Chapter 7 ■ Spring Web FloW\n•\t Plain action: There are not many cases when this should be used, except of course, \nfor explanatory exercises when teaching Spring Web Flow.\n•\t MultiAction: Offers all the advantages of a POJO action, and the code for the \nimplementation class might become quite complex.\nIt is recommended to use POJO actions and MultiActions, if possible, while taking into account the \ncomplexity of the flow definition vs. the complexity of the action class.\nFor any classes used to implement actions, the RequestContext is needed to obtain access to contextual \ninformation about the executing request. A new instance of this object is created every time there is a start, \nsignalEvent(resume flow), or refresh to reconstruct the last viewed selection when the user requests a \ndifferent response.\n•\t getFlowScope(): Returns a map that can be used to get/set flowScope attributes.\n•\t getRequestScope(): The same as getFlowScope(), but for the requestScope.\n•\t getActiveFlow(), getCurrentState(), getFlowExecutionURL(): Access \ninformation about the flow itself; typically used for auditing and debugging \napplications.\n•\t getMessageContext(): This can be used when an exception is thrown during an \naction execution on order to display an internationalized message regarding the \nerror.\n•\t getExternalContext(): Accesses information about the calling context.\nDecision States\nThe decision state type is an alternative for an action state type; when based on an evaluated expression, \nthere are multiple possibilities of transitioning. As you have seen so far with action-state, the only outcome \nis the transition to a \"success\" view-state or the reload of the current view-state to display an error message. \nThe decision state allows for branching of the transition process by using a practical if/then/else syntax, \nwhich allows an easier transitioning control. Similar to if/then/else statements in Java, the condition \nreturns a Boolean value that determines the next state to go. When more conditions are required, an action \nstate is more suitable.\n<!-- newPerson-flow.xml -->\n<decision-state id=\"checkDuplicate\">\n   <if test=\"personService.isNewPerson(person)\" then=\"enterIdentityCardInfo\"\n                   else=\"reviewExistingPerson\"/>\n  </decision-state>\nA new view-state has been introduced in this example, reviewExistingPerson; it allows the user to \ninspect the person already in the system to verify that the existing person is the one he tried to insert.\nA decision state can be used in the final proposed flow to implement in this chapter, which is to check if \na person’s age is greater than 18 so that an account can be created; else, end the execution:\n<!-- newPerson-flow.xml -->\n<decision-state id=\"checkAdult\">\n   <if test=\"personService.isAdult(person)\" then=\"enterAccountInfo\"\n                         else=\"end\"/>\n  </decision-state>\n \n311",
          "tables": [],
          "code_blocks": [
            "else=\"reviewExistingPerson\"/>\n  </decision-state>",
            "else=\"end\"/>\n  </decision-state>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 324,
          "text": "Chapter 7 ■ Spring Web FloW\n  //PersonService.java\n  import java.time.*;\n  ...\n@Service(\"personService\")\npublic class PersonService {\n \n   // using Java 8 classes to determine age\n   public boolean isAdult(Person person){\n        Date input = person.getDateOfBirth();\n        Instant instant = input.toInstant();\n        ZonedDateTime zdt = instant.atZone(ZoneId.systemDefault());\n        LocalDate birthday = zdt.toLocalDate();\n        long yearsDelta = birthday.until(LocalDate.now(), ChronoUnit.YEARS);\n        return yearsDelta>=18;\n   }\n}\nException Handling\nIn the previous examples, the DuplicatePersonException exception class was mentioned. This class \nwas introduced to throw an exception when the user tries to add an existing person to the system and to \nexemplify exception handling in the context of web flows.\n  public class DuplicatePersonException extends RuntimeException {\n \n    private Person person;\n \n    public DuplicatePersonException(Person person) {\n        super(\"The person already exists in the system.\");\n        this.person = person;\n    }\n \n    public Person getPerson() {\n        return person;\n    }\n}\nWhen exceptions are raised in the context of a flow execution, they can be taken care of in a few ways:\n•\t Let the exception propagate and define the web flow in such a way that an exception \nwill cause a transition to an exception view-state.\n<transition on-exception=\"com.pr.problem.DuplicatePersonException\"\n          to=\"errorEndState\" />\n312",
          "tables": [],
          "code_blocks": [
            "// using Java 8 classes to determine age\n   public boolean isAdult(Person person){\n        Date input = person.getDateOfBirth();\n        Instant instant = input.toInstant();\n        ZonedDateTime zdt = instant.atZone(ZoneId.systemDefault());\n        LocalDate birthday = zdt.toLocalDate();\n        long yearsDelta = birthday.until(LocalDate.now(), ChronoUnit.YEARS);\n        return yearsDelta>=18;\n   }",
            "private Person person;\n \n    public DuplicatePersonException(Person person) {\n        super(\"The person already exists in the system.\");\n        this.person = person;\n    }\n \n    public Person getPerson() {\n        return person;\n    }",
            "to=\"errorEndState\" />"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 325,
          "text": "Chapter 7 ■ Spring Web FloW\n•\t Handle any exception globally; define a state in which any other state will transition \ninto when an exception is thrown.\n<flow>\n    ...\n    <global-transitions>\n        <transition\n           on-exception=\"com.pr.problem.DuplicatePersonException\"\n                  to=\"errorEndState\" />\n    </global-transitions>\n</flow>\n•\t Use an <exception-handler bean=\"flowExceptionHandler\"/> element as a child \nelement to any state type. The bean set by the bean attribute of this element is a bean \nof type org.springframework.webflow.engine.FlowExecutionExceptionHandler. \nIt is recommended to avoid this option, as it can leave the flow in an invalid state \nwhen used incorrectly. The most simple way to create a flow executor handler is \nto extend the TransitionExecutingFlowExecutionExceptionHandler class that \nextends the previously mentioned interface. The following code snippet is the \nequivalent of the <global-transition /> element defined previously.\n import org.springframework.webflow.engine.support.\n          TransitionExecutingFlowExecutionExceptionHandler;\n \npublic class PersonFlowExceptionHandler\n    extends TransitionExecutingFlowExecutionExceptionHandler {\n \n    public PersonFlowExceptionHandler() {\n        super.add(DuplicatePersonException.class, \"errorStateId\");\n    }\n}\n•\t Catch the exception in an Action class and return an error event.\n //PersonAction.java\n@WebFlowAction\npublic class PersonAction extends MultiAction {\n \n    @Autowired\n    PersonManager personManager;\n \n    public Event isNewPerson(RequestContext context) throws Exception {\n        Person person = (Person) context.getFlowScope().get(\"person\");\n        String pnc = PncBuilder.build(person);\n        Person existingPerson = personManager.getByPnc(pnc);\n        if (existingPerson == null) {\n            return success();\n        } else {\n            return error();\n        }\n    }\n}\n313",
          "tables": [],
          "code_blocks": [
            "...\n    <global-transitions>\n        <transition\n           on-exception=\"com.pr.problem.DuplicatePersonException\"\n                  to=\"errorEndState\" />\n    </global-transitions>",
            "TransitionExecutingFlowExecutionExceptionHandler;",
            "extends TransitionExecutingFlowExecutionExceptionHandler {\n \n    public PersonFlowExceptionHandler() {\n        super.add(DuplicatePersonException.class, \"errorStateId\");\n    }",
            "@Autowired\n    PersonManager personManager;\n \n    public Event isNewPerson(RequestContext context) throws Exception {\n        Person person = (Person) context.getFlowScope().get(\"person\");\n        String pnc = PncBuilder.build(person);\n        Person existingPerson = personManager.getByPnc(pnc);\n        if (existingPerson == null) {\n            return success();\n        } else {\n            return error();\n        }\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 326,
          "text": "Chapter 7 ■ Spring Web FloW\n■ !  before continuing further, take a look at the 12-pr-webflow-actions2-practice module project. this \nproject is expected to create a new Person instance, add all the details for it, and also insert a bank account into \nthe system. to do this, all the elements presented until now are used: actions, action-states, decision-states, and \nalso exception handling. the flow in Figure 7-18 requires a Hospital instance to be selected to create a Person \ninstance. but what if the Hospital instance does not already exist in the system and has to be created first? adding \nextra logic to do this will make the definition of the flow complicated and will connect the person and hospital logic. \nthe proper way to do this is to add a subflow with the specific purpose of creating a new hospital instance.\nFigure 7-18.  Add person and account flow definition\n314",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 327,
          "text": "Chapter 7 ■ Spring Web FloW\nFigure 7-18 depicts a logical schema of the web flow definition to be implemented in this project. \nAll elements are required to be defined in the newPerson-flow.xml. The isNewPerson is represented as a \ntriangle, a decision-state, and the confirmAdult is represented as a fancy rectangle, an action-state. The \nCancel and the Error states can be reached form any other state using global transitions, so they are not \nconnected to the schema because it would make it quite difficult to read.\nIn this example, some pieces of the flow definition are missing, but all the classes needed to wrap \nup the flow are fully developed and ready to use. The flow execution require three flow model objects: a \nPersonObjectModel instance, an IdentityCard, and an Account instance. The Account class was not used \nuntil now because every notion presented was covered without any complex logic being necessary. The \nAccount class contains four fields that are populated by the user.\n•\t The IBAN7 field is mandatory and is considered to be 10 to 30 characters long, all \ndigits. An exception is thrown if the data introduced by the user does not match this \nrestriction.\n•\t The bank field is mandatory and a string representing a bank name is required.\n•\t The status field represents the status of the account and is also mandatory.\n•\t The amount field is the amount of money being held by the banking account; this \nfield is not mandatory.\nIn the following list, they steps of the execution and resources are presented to you, in the order you \nhave to use them in the newPerson-flow.xml definition:\n•\t The enterPersonInfo view-state is the same as in the previous code sample; the \ninitial state of the flow where a form is displayed to the user for basic personal \ninformation to be provided. All fields but middleName are mandatory and must be \nvalidated; the hospital drop-down list must be populated when the view-state is \nrendered. The event name that causes the transition to the next step is called next \nand the next state is called isNewPerson.\n•\t The contents of the view-state definition are missing and must be implemented to \nbehave as described previously. (TODO 41) After the implementation is done you \nshould see the view as in Figure 7-19.\n7See https://en.wikipedia.org/wiki/International_Bank_Account_Number.\n315",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 328,
          "text": "Chapter 7 ■ Spring Web FloW\nFigure 7-19.  The enterPersonInfo view\n•\t The isNewPerson is a decision state using the result returned by calling the \npersonService.isNewPerson(person) method as a condition. The method is \ndefined in the com.pr.servicePersonService class, and a bean of this type named \npersonService is already defined. If the evaluation returns true, transitioning is \ndone to the enterIdentityCardInfo state, otherwise to the reviewExistingPerson \nstate. To test the transition to the reviewExistingPerson state, insert a person born \non October 1, 1935 at General Hospital.\nThe content of this decision-state definition is missing and must be implemented \nto behave as described earlier. (TODO 42)\n•\t The enterIdentityCardInfo is a view state that displays to the user a form \nrequesting identification information: values for the fields in the identityCard \nobject. All information is mandatory. The event to transition to the next state, \nconfirmAdult, is called save. The transition is done after evaluation of the \npersonBuilder.savePersonEntity(person, identityCard) method, and saving \nthe result in flowScope.existingPerson, because this flow variable is later used to \ncreate an account.\n316",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 329,
          "text": "Chapter 7 ■ Spring Web FloW\n•\t The content of this view-state definition is missing and must be implemented to \nbehave as described earlier. (TODO 43) After the implementation is done you should \nsee the view as in Figure 7-20.\nFigure 7-20.  The enterIdentityCardInfo view\n•\t The reviewExistingPerson is a view-state that displays the basic information of \nan existing person in the system, with the same personal numerical code as the \nPerson instance that the user is trying to create. The data to populate the view is \nextracted at rendering time by calling personManager.getByPnc(person.pnc). The \npersonManager id one of the data management beans presented in Chapter 2. It is \ndefined in the 01-pr-service module project. The result of calling this method is \nsaved in the flowScope.existingPerson, because this flow variable is later used to \ncreate an account. From this state, the user can transition to the confirmAdult state \nby using the event named continue.\n317",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 330,
          "text": "Chapter 7 ■ Spring Web FloW\n•\t The content of this view-state definition is missing and must be implemented to \nbehave as described earlier. (TODO 44) After the implementation is done you should \nsee the view as in Figure 7-21.\nFigure 7-21.  The reviewExistingPerson view\n•\t The confirmAdult state is an action-state that evaluates the personActions.\nisAdult expression. The class providing the implementation for this is com.\npr.PersonActions; it is a class extending the MultiAction class presented earlier. \nOn success, transition is done to the enterAccountInfo, and on error, transition is \ndone to end, because obviously the Person instance does not represent an adult so a \nbank account cannot be added for this instance, thus this is where the flow execution \nends. (TODO 45) The content of this action-state definition is missing and must be \nimplemented to behave as described earlier.\n•\t The enterAccountInfo is a view state that displays a form requesting minimum \ninformation for a bank account. The IBAN of the account must be unique in \nthe system. If you want to test the validation for this field, just insert the value \nUS1301101250000000012300695. Using the add event, if the information introduced \nis valid, a transition is done to the end state that displays the created person and \nbanking information existing for it in the system.\n318",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 331,
          "text": "Chapter 7 ■ Spring Web FloW\n•\t The content of this view-state definition is missing and must be implemented to \nbehave as described earlier. (TODO 46) After the implementation is done you should \nsee the view as in Figure 7-22.\nFigure 7-22.  The enterAccountInfo view\n•\t error is a view-state used to display explicit content of the exceptions thrown in the \napplication. It was implemented this way so that while resolving this exercise, you \nhave a practical way to debug your problems, if you have any. In a real production \napplication, the error view is simpler and more user-friendly.\n•\t cancel is an end-state that the flow transitions into any time the user presses the \nCancel button in any view.\n•\t end is an end-state that redirects the user to a view with all the existing data for that \nperson in the system.\n•\t The <global-transaction /> element has two transition elements: one for the \ncancel scenario, when any the flow transitions to cancel, and one for any exception \nthat is being thrown in the flow transition to the error state.\n•\t When your implementation is correct and the data you inserted is valid, a new \nperson should be created in the system and a new bank account should be added for \nit, and after the flow execution, you should be redirected to a view that displays the \ninformation, which looks similar to the one shown in Figure 7-23.\n319",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 332,
          "text": "Chapter 7 ■ Spring Web FloW\nFigure 7-23.  The view that the flow should redirect to after a successful execution\nIMpOrtaNt OBSerVatIONS\nthe bind=\"false\" attribute is needed, so the form is not validated before transitioning to the cancel \nstate, as validation errors will prevent the transition.\n<global-transitions>\n   <transition on=\"cancel\" to=\"cancel\" bind=\"false\" />\n   <transition on-exception=\"java.lang.Exception\" to=\"error\" />\n</global-transitions>\nWhen using web flows, the exception handling is the most undocumented part of Spring Web Flow. \nUnless a web flow exception handler is used, or action states that return error events and add the \nexception object to the flowScope, catching and treating exceptions is very tricky. Developers are \nbasically forced into writing the code. that’s why all web flow exceptions in this project cause a \ntransition to the error view that uses JSp scriptlets to display a very detailed stacktrace that help \ndevelopers reading this book to easily identify the mistakes in the code and configuration. the exception \ncan be retrieved using the request. as mentioned, this view is only to be used for development \npurposes; for production, a more user-friendly view implementation should be used.\n320",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 333,
          "text": "Chapter 7 ■ Spring Web FloW\n<!-- webapp/WEB-INF/error.jsp -->\n<div class=\"error\">\n <%\n  Exception exception =\n    (Exception) request.getAttribute(\"flowExecutionException\");\n  Exception cause =\n    (Exception) request.getAttribute(\"rootCauseException\");\n %>\n...\n <%\n   exception.printStackTrace(new java.io.PrintWriter(out));\n %>\n...\n <% if (cause != null) { %>\n  <h3>Cause: <%=cause.getMessage()%></h3>\n   <p>\n     <%\n        cause.printStackTrace(new java.io.PrintWriter(out));\n     %>\n   </p>\n   <%} %>\n</div>\nin case you insert data that is invalid, you can use the browser back button to go back to the previous \nstate and change the information. to prevent browsing back to a state previous to a transition with the \nback button, the history attribute of the transaction element can be used:\n<transition on=\"confirm\" to=\"end\" history=\"discard\">\n<!-- or invalidate all previous visited views in the browser history -->\n<transition on=\"confirm\" to=\"end\" history=\"invalidate\">\nthe default value for this attribute is preserve, which allows returning to a state before the execution of \nthe transition and the data for the state is still accessible.\ndiscard prevents backtracking to the state, meaning that all information related to the state is \ndiscarded and using the browser back button results in a 500 http internal server error.\ninvalidate prevents backtracking to the state, as well as any previously entered view-state, and \npressing the browser back button has the same effect as the previous case.\nthe proposed solution for this project can be found in the 12-pr-webflow-actions2-solution project.\n321",
          "tables": [],
          "code_blocks": [
            "(Exception) request.getAttribute(\"flowExecutionException\");\n  Exception cause =\n    (Exception) request.getAttribute(\"rootCauseException\");\n %>",
            "<%\n        cause.printStackTrace(new java.io.PrintWriter(out));\n     %>\n   </p>\n   <%} %>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 334,
          "text": "Chapter 7 ■ Spring Web FloW\nSubflows\nA subflow is a flow that is being invoked by another flow. It has its own scope and the parent flow execution is \nsuspended while the subflow is being executed. The conversation scope is the only scope that is shared between \nthe parent flow and the subflows, as depicted in Figure 7-7. The subflow must be defined in the application in \nthe same manner as any flow; it has its own views and language resources, because it is essentially a flow.\nA subflow is launched from a special state in a parent flow called subflow-state. In the following \nexample, the newPerson flow calls the newHospital subflow.\n<!-- newPerson-flow.xml-->\n<flow ...>\n <view-state id=\"enterPersonInfo\" model=\"person\">\n     <binder>...</binder>\n       <transition on=\"next\" to=\"isNewPerson\" />\n      <transition on=\"addHospital\" to=\"newHospital\"/>\n </view-state>\n \n <subflow-state id=\"newHospital\"\n              subflow=\"hospitals/newHospital\" >\n           <output name=\"hospital\"/>\n       <transition on=\"saveHospital\" to=\"enterPersonInfo\">\n           <evaluate expression=\"hospitalManager.save(hospital)\"\n                  result=\"flashScope.hospital\" />\n           <set name=\"flashScope.hospitalMessage\"\n                value=\"hospital.msg.success\" />\n       </transition>\n       <transition on=\"cancel\" to=\"enterPersonInfo\" />\n   </subflow-state>\n</flow>\nThe subflow in the previous example allows the user to insert a new Hospital instance in the system \nso that it can be used when the person is created, if the state transitioning into is saveHospital. The id of \nthe subflow-state is the id of this state inside the newPerson flow definition. The subflow attribute is used to \nlink this flow invocation with the flow definition, and contains the path inside the WEB-INF, where the flow \ndefinition and resources can be found. In the previous case, the flow definition file is located at /WEB-INF/\nhospitals/newHospital/newHospital-flow.xml. Once registered with the FlowDefinitionRegistry,  \nthe subflow can be referred from any flow using its logical name, which is composed of the location and the \nflow name as a value for the subflow attribute:\n \\\\WebFlowConfig.java\n @Configuration\npublic class WebFlowConfig extends AbstractFlowConfiguration {\n...\n \n@Bean\npublic FlowDefinitionRegistry flowRegistry() {\n  return getFlowDefinitionRegistryBuilder(flowBuilderServices())\n      .setBasePath(\"/WEB-INF\")\n      .addFlowLocation(\"/persons/newPerson/newPerson-flow.xml\")\n      .addFlowLocation(\"/hospitals/newHospital/newHospital-flow.xml\")\n      .build();\n      }\n}\n \n322",
          "tables": [],
          "code_blocks": [
            "<binder>...</binder>\n       <transition on=\"next\" to=\"isNewPerson\" />\n      <transition on=\"addHospital\" to=\"newHospital\"/>\n </view-state>\n \n <subflow-state id=\"newHospital\"\n              subflow=\"hospitals/newHospital\" >\n           <output name=\"hospital\"/>\n       <transition on=\"saveHospital\" to=\"enterPersonInfo\">\n           <evaluate expression=\"hospitalManager.save(hospital)\"\n                  result=\"flashScope.hospital\" />\n           <set name=\"flashScope.hospitalMessage\"\n                value=\"hospital.msg.success\" />\n       </transition>\n       <transition on=\"cancel\" to=\"enterPersonInfo\" />\n   </subflow-state>",
            ".setBasePath(\"/WEB-INF\")\n      .addFlowLocation(\"/persons/newPerson/newPerson-flow.xml\")\n      .addFlowLocation(\"/hospitals/newHospital/newHospital-flow.xml\")\n      .build();\n      }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 335,
          "text": "Chapter 7 ■ Spring Web FloW\n  <subflow-state id=\"newHospital\"\n               subflow=\"hospitals/newHospital\" >\n  <!-- hospitals = directory for Hospital specific resources -->\n  <!-- newHospital = flow name-->\nThe key values used for transitions inside the parent flow are the ids of end-states in the subflow: \n <!-- newHospital-flow.xml-->\n<flow ..>\n   <var name=\"hospital\" class=\"com.pr.ents.Hospital\"/>\n \n   <view-state id=\"enterHospitalInfo\" model=\"hospital\">\n       <binder>\n           <binding property=\"name\" required=\"true\"/>\n           <binding property=\"code\" required=\"true\"/>\n           <binding property=\"address\"/>\n           <binding property=\"location\" required=\"true\"/>\n       </binder>\n       <transition on=\"save\" to=\"saveHospital\"/>\n       <transition on=\"cancel\" to=\"cancel\" bind=\"false\" />\n   </view-state>\n \n   <end-state id=\"saveHospital\">\n       <output name=\"hospital\" value=\"hospital\"/>\n   </end-state>\n \n   <end-state id=\"cancel\"/>\n \n</flow>\nThe flashScope.hospitalMessage variable is used to display a message telling the user that the \nHospital instance was saved correctly and can be used.\nAlthough the conversation scope is accessible to the parent flow and subflows, global variables usage is \ndiscouraged, because it reduces the readability of the code, so that passing parameters between the parent \nflow and the subflow is more appropriate.\nThe <output name=\"hospital\"/> is an output parameter designed to return the Hospital instance \ncreated by the newHospital flow to the parent flow; it is assigned the flashScope (see the evaluate element \nmarked with (1) in the following code snippet).\nThere are also input parameters, required or not, to provide a parent flow variable value to the subflow. \nIn the previous case, there is nothing needed, but assuming that you would need to send a Person instance \nas a manager for the hospital we are trying to create, the preceding definitions will change a little. The \ninstance given as parameter has the flowScope in both of the flows because it is defined right under the \n<flow /> element.\n323",
          "tables": [],
          "code_blocks": [
            "subflow=\"hospitals/newHospital\" >\n  <!-- hospitals = directory for Hospital specific resources -->\n  <!-- newHospital = flow name-->",
            "<view-state id=\"enterHospitalInfo\" model=\"hospital\">\n       <binder>\n           <binding property=\"name\" required=\"true\"/>\n           <binding property=\"code\" required=\"true\"/>\n           <binding property=\"address\"/>\n           <binding property=\"location\" required=\"true\"/>\n       </binder>\n       <transition on=\"save\" to=\"saveHospital\"/>\n       <transition on=\"cancel\" to=\"cancel\" bind=\"false\" />\n   </view-state>\n \n   <end-state id=\"saveHospital\">\n       <output name=\"hospital\" value=\"hospital\"/>\n   </end-state>\n \n   <end-state id=\"cancel\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 336,
          "text": "Chapter 7 ■ Spring Web FloW\n<!-- newPerson-flow.xml-->\n <flow ...>\n <var name=\"person\" class=\"com.pr.ents.Person\"/>\n \n  <view-state id=\"enterPersonInfo\" model=\"person\">\n      <binder>...</binder>\n        <transition on=\"next\" to=\"isNewPerson\" />\n       <transition on=\"addHospital\" to=\"newHospital\"/>\n  </view-state>\n \n  <subflow-state id=\"newHospital\"\n               subflow=\"hospitals/newHospital\" >\n           <input name=\"manager\" value=\"person\"/>\n           <output name=\"hospital\"/>\n \n        <transition on=\"saveHospital\" to=\"enterPersonInfo\">\n          (1) <evaluate expression=\"hospitalManager.save(hospital)\"\n                  result=\"flashScope.hospital\" />\n           <set name=\"flashScope.hospitalMessage\"\n                value=\"hospital.msg.success\" />\n        </transition>\n        <transition on=\"cancel\" to=\"enterPersonInfo\" />\n    </subflow-state>\n </flow>\n \n<!-- newHospital-flow.xml-->\n <flow ...>\n \n   <input name=\"manager\" required=\"true\"/>\n   <var name=\"hospital\" class=\"com.pr.ents.Hospital\"/>\n \n    <view-state id=\"enterHospitalInfo\" model=\"hospital\">\n    ...\n    </view-state>\n \n </flow>\nWhen subflows are involved, unit testing is quite tricky; that’s why it is recommended to mock or stub \nthem when the focus of the testing is on the parent flow. By overriding the configureFlowBuilderContext \nmethod from AbstractXmlFlowExecutionTests, a mock definition for the subflow can be added to the \ncontext:\nimport org.springframework.webflow.test.execution.AbstractXmlFlowExecutionTests;\n \npublic class NewPersonFlowTest extends AbstractXmlFlowExecutionTests {\n...\n@Override\n    protected void configureFlowBuilderContext\n             (MockFlowBuilderContext builderContext) {\n \n324",
          "tables": [],
          "code_blocks": [
            "<view-state id=\"enterPersonInfo\" model=\"person\">\n      <binder>...</binder>\n        <transition on=\"next\" to=\"isNewPerson\" />\n       <transition on=\"addHospital\" to=\"newHospital\"/>\n  </view-state>\n \n  <subflow-state id=\"newHospital\"\n               subflow=\"hospitals/newHospital\" >\n           <input name=\"manager\" value=\"person\"/>\n           <output name=\"hospital\"/>\n \n        <transition on=\"saveHospital\" to=\"enterPersonInfo\">\n          (1) <evaluate expression=\"hospitalManager.save(hospital)\"\n                  result=\"flashScope.hospital\" />\n           <set name=\"flashScope.hospitalMessage\"\n                value=\"hospital.msg.success\" />\n        </transition>\n        <transition on=\"cancel\" to=\"enterPersonInfo\" />\n    </subflow-state>\n </flow>",
            "<input name=\"manager\" required=\"true\"/>\n   <var name=\"hospital\" class=\"com.pr.ents.Hospital\"/>\n \n    <view-state id=\"enterHospitalInfo\" model=\"hospital\">\n    ...\n    </view-state>\n \n </flow>",
            "protected void configureFlowBuilderContext\n             (MockFlowBuilderContext builderContext) {"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 337,
          "text": "Chapter 7 ■ Spring Web FloW\n        // setup newHospital subflow\n        Flow newHospital = new Flow(\"newHospital\");\n        State start = new State(newHospital, \"newHospital\") {\n             @Override\n             protected void doEnter(RequestControlContext context)\n                     throws FlowExecutionException {\n                 // empty\n             }\n        };\n        newHospital.setStartState(start);\n        builderContext.registerSubflow(newHospital);\n    }\n    ...\n}\nUnfortunately, even as this book is being written, testing subflows is still cumbersome and there are a \nlot of bugs opened and unresolved.8\nWhen the scope is to test the subflows too, the getModelResources method of \nAbstractXmlFlowExecutionTests must be overridden. Add the subflow definition to the flow resources \nbeing tested:\nimport org.springframework.webflow.engine.Flow;\nimport org.springframework.webflow.test.MockExternalContext;\nimport org.springframework.webflow.test.MockFlowBuilderContext;\nimport org.springframework.webflow.test.execution.AbstractXmlFlowExecutionTests;\n \n public class NewPersonFlowTest extends AbstractXmlFlowExecutionTests {\n...\n  @Override\n    protected FlowDefinitionResource\n    getModelResources(FlowDefinitionResourceFactory resourceFactory) {\n        FlowDefinitionResource flowDefinitionResources =\n                new FlowDefinitionResource2;\n        flowDefinitionResources0 = resourceFactory.createResource\n                (\"src/main/webapp/WEB-INF/persons/newPerson/newPerson-flow.xml\");\n        flowDefinitionResources1 = resourceFactory.createResource\n                (\"src/main/webapp/WEB-INF/hospitals/newHospital/newHospital-flow.xml\");\n        return flowDefinitionResources;\n    }\n    ...\n}\n8A bug related to mocking subflows; still open and unresolved since version 2.0.6. See  \nhttps://jira.spring.io/browse/SWF-1079.\n325",
          "tables": [],
          "code_blocks": [
            "// setup newHospital subflow\n        Flow newHospital = new Flow(\"newHospital\");\n        State start = new State(newHospital, \"newHospital\") {\n             @Override\n             protected void doEnter(RequestControlContext context)\n                     throws FlowExecutionException {\n                 // empty\n             }\n        };\n        newHospital.setStartState(start);\n        builderContext.registerSubflow(newHospital);\n    }\n    ...",
            "protected FlowDefinitionResource\n    getModelResources(FlowDefinitionResourceFactory resourceFactory) {\n        FlowDefinitionResource flowDefinitionResources =\n                new FlowDefinitionResource2;\n        flowDefinitionResources0 = resourceFactory.createResource\n                (\"src/main/webapp/WEB-INF/persons/newPerson/newPerson-flow.xml\");\n        flowDefinitionResources1 = resourceFactory.createResource\n                (\"src/main/webapp/WEB-INF/hospitals/newHospital/newHospital-flow.xml\");\n        return flowDefinitionResources;\n    }\n    ..."
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 338,
          "text": "Chapter 7 ■ Spring Web FloW\n■ !  Considering that the subflows are not a topic for the exam, there is no practice project with configurations \nmissing, but a project was created that you can run and inspect to see the subflow to add a Hospital instance \nrunning:\n 13-pr-webflow-subflow-solution.\n■ ?  as a proposed exercise, if you want to test your understanding of subflows, you can try to turn the \ncreating of an Account instance into a subflow.\nFlow Definition Inheritance\nFlow definitions can be organized in hierarchies in a way similar way to bean definitions. Organizing \nthem in hierarchies allows global transitions, common states, and actions to be shared among parent and \nchildren flows.\nThe child flow and the parent flow are both registered in the same flow registry.\nThere are a few things regarding flow definition inheritance that are interesting and worth covering. \nOne of them is that multiple inheritance is supported, because inheritance between web flow definitions \nis more like a composition; basically, a child flow definition inherits all configuration elements form its \nparents, and elements with the same id are merged. Multiple parents are specified using comma as a \nseparator:\n<flow ... parent=\"parentFlow1, parentFlow2\" />\n ...\n</flow>\nParent flow definitions can also be abstract. In this case, these flows cannot be instantiated and \nexecuted; their purpose in the code is to wrap up common definition elements for multiple child flow \ndefinitions, to respect the DRY principle.9\n<flow ... abstract=\"true\" />\n ...\n</flow>\nFlow inheritance is analogous to bean definition inheritance. It is more a composition than inheritance, \nas parent and child are merged together to create a new flow.\nAnother interesting thing is that flow definition inheritance can be selective, meaning there is a way that \nonly certain state definitions can be inherited, instead of the whole parent flow definition:\n<flow ... parent=\"parentFlowName\"/>\n        <view-state id=\"childState\" parent=\"parentFlowName#stateId\">\n</flow>\nThe restriction here is that the child flow can inherit only from one parent when restrictions are \ndefined at the state level. Also, the child state definition type must be one and the same with the parent state \ndefinition. In the preceding example, the state element with stateId must be of type view-state in the parent \ntoo; otherwise, the web flow configuration is invalid.\n9Don’t Repeat Yourself.\n326",
          "tables": [],
          "code_blocks": [
            "<view-state id=\"childState\" parent=\"parentFlowName#stateId\">"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 339,
          "text": "Chapter 7 ■ Spring Web FloW\nSecuring Web Flows\nBefore talking about how to secure web flows, a detailed introduction into Spring Security is necessary, \nbecause you need to understand core security concepts and how they can be configured with Spring \nSecurity.\nIntroduction to Spring Security\nSpring Security is a framework that can be used to secure web applications. It is very easy to use and \nhighly customizable, providing access control over units of an application. When writing secure Spring \nweb applications, this is the default tool that developers go to because configuration follows the same \nstandard with all the Spring projects. Infrastructure beans are provided out of the box for multiple types of \nauthentication and they are clearly compatible with other Spring projects. Spring Security provides a wide \nset of capabilities that can be grouped in four areas of interest: authentication, authorizing web requests, \nauthorizing methods calls, and authorizing access to individual domain objects.\nThe following are Spring Security’s core features:\n•\t Authentication (user identification) and authorization (managing access to \nresources); comprehensible and extensible support is provided.\n•\t It is easy to configure.\n•\t It is highly customizable.\n•\t Protection against session fixation, clickjacking, cross-site request forgery, and other \ntype of attacks is provided via simple and flexible configurations.\n•\t It can be integrated with the Servlet API.\nOf course, there are more. You can read more about them on the official page of this project.10\nThere are five security concepts that you have to familiarize yourself with and understand to use Spring \nSecurity:\n•\t Credentials are identification keys that an entity presents to the application to \nconfirm their identity( a password or a token).\n•\t Principal represents an authenticated entity that was recognized by the application \nbased on its credentials.\n•\t Authentication is the process that determines if the credentials of an entity are valid.\n•\t Authorization is the process that determines if a principal is allowed access to a \nresource or performs a certain action. The decision process is often based on roles. \nThe following are the most common roles:\n•\t GUEST, usually can just view data\n•\t MEMBER (or USER), can insert data\n•\t ADMIN, can insert and delete data\n•\t Secured item is a resource that is being secured.\n10Spring Security page at http://spring.io/spring-security.\n327",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 340,
          "text": "Chapter 7 ■ Spring Web FloW\nThe Spring Security version used in the book is 4.0.2.RELEASE and it is compatible with Spring 4. In \nthe Gradle configuration of the 14-pr-web-security-practice module project, notice that the following \nlibraries have been added:\nspringSecurityVersion = '4.0.2.RELEASE'\n...\nsecurityConfig : \"org.springframework.security:spring-security-config:\n                                   $springSecurityVersion\",\nsecurityWeb    : \"org.springframework.security:spring-security-web:\n                                  $springSecurityVersion\",\nsecurityTaglibs: \"org.springframework.security:spring-security-taglibs:\n                                 $springSecurityVersion\",\n...\n}\nWhy Spring Security Is Awesome\nThe spring-security-config module provides security namespace parsing code and is needed when using \nXML configuration. As some developers still prefer to use XML configuration, the minimum configuration \nneeded in XML is explained in the book alongside the Java Configuration. The spring-security-web \nprovides filters and related web-security infrastructure beans. This library is needed for web-based \nauthentication. The spring-security-taglibs provides security tags that can be used to secure elements in \nJSP pages.\nThe main reason why Spring Security is preferred when developing web applications is portability. \nSpring Security does not need a special container to run in; it can be deployed as a secured archive (WAR or \nEAR) and can run in stand-alone environments. For example, a secured web application archived as a WAR \ncan be deployed on a JBoss or an Apache Tomcat application server. And as long as the underlying method of \nstoring credentials is configured, the application will run exactly the same in any of these application servers.\nWhen it comes to authentication and credential storage, Spring Security is very flexible. All common \nauthentication mechanisms are supported (Basic, Form, OAuth, X.509, cookies, single sign-on). Regarding \nsupport storage for credentials databases, Spring Security supports anything—LDAP, properties file, custom \nDAOs, and even beans, among many others.11\nConfiguring Spring Security is easy. A common practice is to define a separate file when using XML and \na separate configuration class when using Java Configuration. Infrastructure beans can be used to customize \nthe following:\n•\t How a principal is defined\n•\t Where authentication information is stored\n•\t How authorization decisions are made\n•\t Where security constraints are stored\nAs we have seen so far when using Spring, anything can be done by keeping components as decoupled \nas possible. Spring Security respects the principle of separation of concerns (SoC). Restrictions are applied \nusing an interceptor-based approach. It was mentioned at the beginning of the book that AOP is used when \nsecuring resources. Also, authentication and authorization are decoupled; changing the authentication \nmethod and credentials support does not affect authorization.\n11A full list of authentication technologies that Spring Security integrates with; it can be found at http://docs. \nspring.io/spring-security/site/docs/current/reference/htmlsingle/#what-is-acegi-security.\n328",
          "tables": [],
          "code_blocks": [
            "$springSecurityVersion\",",
            "$springSecurityVersion\",",
            "$springSecurityVersion\","
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 341,
          "text": "Chapter 7 ■ Spring Web FloW\nSpring Security is consistent. The authentication purpose is to create a security context with the \nprincipal’s information; it does not depend on the mechanism used. The authorization process has the same \npurpose, regardless of the resource type: consult resource properties, consult the principal’s role, and decide \nto grant or deny access.\nThe way Spring Security works and the core components are depicted in Figure 7-24.\nFigure 7-24.  Spring Security anatomy\nThe following explains the flow described in Figure 7-24:\n  1.  The user makes a login request. (Introduces credentials in a login form and \nsubmits it.)\n  2.  The user logs into the application and the Authentication Manager populates \nthe security information of the user into the security context.\n  3.  When the user makes resource requests (requests to view a page, starts a flow, \nrequests a document) after logging in, the security interceptor intercepts them \nbefore they invoke a protected/secured resource.\n  4.  The Security Interceptor then retrieves the user information from the context.\n  5.  The Access Decision Manager polls a list of voters to return a decision regarding \nthe rights the authenticated user has on system resources\n  6.  The Spring Interceptor consults the resource attributes that are configured in the \napplication.\n  7.  Access is granted or denied to the resource based on the user rights (5) and the \nresource attributes (6).\n329",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 342,
          "text": "Chapter 7 ■ Spring Web FloW\nSpring Security XML Configuration\nWhen using XML to configure Spring Security, any tag can be used by adding the security namespace to the \nSpring configuration file at http://www.springframework.org/schema/\nsecurity/spring-security.xsd. The recommended practice is to have a separate configuration file \nthat contains only the security-related configurations.\nTo log in to the Personal Records Manager application, a separate file should be created, named \nsecurity-config.xml. This file should define the users and credentials needed to access the application \nand which resources these users can access:\n<!-- security-config.xml -->\n<beans xmlns:sec=\"http://www.springframework.org/schema/security\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns=\"http://www.springframework.org/schema/beans\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/security\n        http://www.springframework.org/schema/security/spring-security.xsd\">\n \n    <!-- styling&internationalization resources do not need to be secured -->\n    <sec:http pattern=\"/images/*\" security=\"none\"/>\n    <sec:http pattern=\"/styles/*\" security=\"none\"/>\n    <sec:http pattern=\"/resources/*\" security=\"none\"/>\n \n    <sec:http auto-config=\"true\">\n        <sec:intercept-url pattern=\"/auth*\" access=\"permitAll\"/>\n        <sec:intercept-url pattern=\"/persons/newPerson\"\n                           access=\"ROLE_ADMIN\"/>\n        <sec:intercept-url pattern=\"/**\"\n                           access=\"ROLE_USER, ROLE_ADMIN\"/>\n        <sec:form-login login-page=\"/auth\"\n                           authentication-failure-url=\"/auth?auth_error=1\"\n                           default-target-url=\"/\"/>\n        <sec:logout logout-url=\"/j_spring_security_logout\"\n           logout-success-url=\"/home />\n    </sec:http>\n \n    <sec:authentication-manager>\n        <sec:authentication-provider>\n            <sec:user-service>\n                <sec:user name=\"john\" password=\"doe\"\n                          authorities=\"ROLE_USER\"/>\n                <sec:user name=\"jane\" password=\"doe\"\n                          authorities=\"ROLE_USER,ROLE_ADMIN\"/>\n                <sec:user name=\"admin\" password=\"admin\"\n                          authorities=\"ROLE_ADMIN\"/>\n            </sec:user-service>\n        </sec:authentication-provider>\n    </sec:authentication-manager>\n</beans>\n330",
          "tables": [],
          "code_blocks": [
            "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns=\"http://www.springframework.org/schema/beans\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/security\n        http://www.springframework.org/schema/security/spring-security.xsd\">\n \n    <!-- styling&internationalization resources do not need to be secured -->\n    <sec:http pattern=\"/images/*\" security=\"none\"/>\n    <sec:http pattern=\"/styles/*\" security=\"none\"/>\n    <sec:http pattern=\"/resources/*\" security=\"none\"/>\n \n    <sec:http auto-config=\"true\">\n        <sec:intercept-url pattern=\"/auth*\" access=\"permitAll\"/>\n        <sec:intercept-url pattern=\"/persons/newPerson\"\n                           access=\"ROLE_ADMIN\"/>\n        <sec:intercept-url pattern=\"/**\"\n                           access=\"ROLE_USER, ROLE_ADMIN\"/>\n        <sec:form-login login-page=\"/auth\"\n                           authentication-failure-url=\"/auth?auth_error=1\"\n                           default-target-url=\"/\"/>\n        <sec:logout logout-url=\"/j_spring_security_logout\"\n           logout-success-url=\"/home />\n    </sec:http>\n \n    <sec:authentication-manager>\n        <sec:authentication-provider>\n            <sec:user-service>\n                <sec:user name=\"john\" password=\"doe\"\n                          authorities=\"ROLE_USER\"/>\n                <sec:user name=\"jane\" password=\"doe\"\n                          authorities=\"ROLE_USER,ROLE_ADMIN\"/>\n                <sec:user name=\"admin\" password=\"admin\"\n                          authorities=\"ROLE_ADMIN\"/>\n            </sec:user-service>\n        </sec:authentication-provider>\n    </sec:authentication-manager>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 343,
          "text": "Chapter 7 ■ Spring Web FloW\nThe configuration presented earlier uses basic authentication, without any password encryption. The \nauto-config=\"true\" is a legacy attribute that automatically registers a login form, BASIC authentication, \nand a logout URL and logout services. It is not meant to be used for production applications, as the level of \nsecurity required is higher than the default one provided by Spring Security out of the box for educational \npurposes.\nThe <intercept-url /> elements are evaluated in the order they are listed into the configuration, so \nthe most restrictive ones need to be at the top of the list; otherwise, the result might not be the expected one.\nThree users are defined with different roles. Access to the newPerson flow has been restricted to users \nhaving the ROLE_ADMIN role, to test the configuration. This file is Spring Security 3.0–specific and it won’t \nwork in a Spring Security 4 environment, because this version has introduced a lot of changes.\nThe <sec:logout /> logout element is used to customize logout details. The logout-url attribute \nspecifies the URL that will cause a logout. Spring Security initializes a filter that responds to this particular \nURL. The logout-success-url attribute is used to define where the user is redirected after logging out.\nIn the <sec:form-login /> the URL of the page used for authentication is set as a value for the login-\npage attribute. After successfully logging in, the user is redirected to the page set as a value for the default-\ntarget-url attribute. In case of failure, the user is redirected to the login view, and using the auth_error \nparameter, a proper value is displayed to the user. The auth.jsp template file presents to the user a login \nform looks like this for Spring Security 3:\n<!-- auth.jsp -->\n <form action=\"<c:url value='/j_spring_security_check'/>\" method=\"post\">\n       <table>\n           <tr>\n               <td>\n                  <label for=\"j_username\">\n                    <spring:message code=\"login.username\"/>\n                  </label>\n               </td>\n               <td>\n                  <input type='text' id='j_username' name='j_username'\n                      value='<c:out value=\"${user}\"/>'/>\n               </td>\n           </tr>\n           <tr>\n               <td>\n                  <label for=\"j_password\">\n                      <spring:message code=\"login.password\"/>\n                  </label>\n               </td>\n                <td><input type='j_password' id='password'\n                     name='j_password'/></td>\n           </tr>\n           <tr>\n               <td colspan=\"2\">\n                   <button type=\"submit\">\n                       <spring:message code=\"login.submit\"/>\n                   </button>\n               </td>\n           </tr>\n       </table>\n        <c:if test=\"${not empty param.auth_error}\">\n331",
          "tables": [],
          "code_blocks": [
            "<table>\n           <tr>\n               <td>\n                  <label for=\"j_username\">\n                    <spring:message code=\"login.username\"/>\n                  </label>\n               </td>\n               <td>\n                  <input type='text' id='j_username' name='j_username'\n                      value='<c:out value=\"${user}\"/>'/>\n               </td>\n           </tr>\n           <tr>\n               <td>\n                  <label for=\"j_password\">\n                      <spring:message code=\"login.password\"/>\n                  </label>\n               </td>\n                <td><input type='j_password' id='password'\n                     name='j_password'/></td>\n           </tr>\n           <tr>\n               <td colspan=\"2\">\n                   <button type=\"submit\">\n                       <spring:message code=\"login.submit\"/>\n                   </button>\n               </td>\n           </tr>\n       </table>\n        <c:if test=\"${not empty param.auth_error}\">"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 344,
          "text": "Chapter 7 ■ Spring Web FloW\n       <div id=\"errors\" class=\"error\">\n<!-- detailed security exception message is printed for development purposes -->\n<!-- obviously, not recommended to be used in a production application -->\n        <p><spring:message code=\"login.fail\"/>:\n           ${SPRING_SECURITY_LAST_EXCEPTION.message}\n       </p>\n      </div>\n    </c:if>\n</form>\nThere is another way to specify access by using Spring Security Expressions, but they must be enabled \nby declaring the use-expressions=\"true\" attribute on the <sec:http /> configuration element. So, the \naccess attributes under the <sec:http /> configuration element become this:\n<sec:http auto-config=\"true\" use-expressions=\"true\">\n    <sec:intercept-url pattern=\"/auth*\" access=\"permitAll\"/>\n     <sec:intercept-url pattern=\"/persons/newPerson\"\n           access=\"hasRole('ROLE_ADMIN')\"/>\n    <sec:intercept-url pattern=\"/**\"\n           access=\"hasAnyRole('ROLE_USER, ROLE_ADMIN')\"/>\n    <sec:form-login login-page=\"/auth\"\n          authentication-failure-url=\"/auth?auth_error=1\"\n          default-target-url=\"/\"/>\n    <sec:logout logout-url=\"/j_spring_security_logout\"/>\n</sec:http>\n■ !  Mixing expression style configuration with direct configuration is not permitted. You either use \nexpressions or you don’t. Mixing them will make your configuration file invalid.\nSpring Security Expressions are quite easy to use and understand:\n•\t hasRole('role') checks whether the principal has the given role.\n•\t hasAnyRole('role1', 'role2', ?) checks whether the principal has any of the \ngiven roles.\n•\t isAuthenticated() allows access for authenticated or remembered principals.\n•\t permitAll allows unauthenticated users access to a resource. In the previous \nexample, this is used to make sure that the login form is accessible so a user can \ninsert his credentials for authentication to take place.\n•\t Expressions can be aggregated hasRole('ROLE_ADMIN') and  \nhasRole('ROLE_MANAGER').\n332",
          "tables": [],
          "code_blocks": [
            "<div id=\"errors\" class=\"error\">",
            "<p><spring:message code=\"login.fail\"/>:\n           ${SPRING_SECURITY_LAST_EXCEPTION.message}\n       </p>\n      </div>\n    </c:if>",
            "<sec:intercept-url pattern=\"/auth*\" access=\"permitAll\"/>\n     <sec:intercept-url pattern=\"/persons/newPerson\"\n           access=\"hasRole('ROLE_ADMIN')\"/>\n    <sec:intercept-url pattern=\"/**\"\n           access=\"hasAnyRole('ROLE_USER, ROLE_ADMIN')\"/>\n    <sec:form-login login-page=\"/auth\"\n          authentication-failure-url=\"/auth?auth_error=1\"\n          default-target-url=\"/\"/>\n    <sec:logout logout-url=\"/j_spring_security_logout\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 345,
          "text": "Chapter 7 ■ Spring Web FloW\nThe preceding configuration is relative to the beans namespace. Considering that the configuration file \ncontains only security tags, the file could be created relative to the security namespace, and so the sec prefix \nwould not be necessary, which makes the file more readable:\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans:beans xmlns=\"http://www.springframework.org/schema/security\"\n             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xmlns:beans=\"http://www.springframework.org/schema/beans\"\n             xsi:schemaLocation=\"http://www.springframework.org/schema/security\n             http://www.springframework.org/schema/security/spring-security.xsd\n                http://www.springframework.org/schema/beans\n                http://www.springframework.org/schema/beans/spring-beans.xsd\">\n \n    <http pattern=\"/images/*\" security=\"none\"/>\n    <http pattern=\"/styles/*\" security=\"none\"/>\n    <http pattern=\"/resources/*\" security=\"none\"/>\n \n    <http auto-config=\"true\" use-expressions=\"true\">\n        <intercept-url pattern=\"/auth*\" access=\"permitAll\"/>\n        <intercept-url pattern=\"/persons/newPerson\"\n              access=\"hasRole('ROLE_ADMIN')\"/>\n        <intercept-url pattern=\"/**\"\n              access=\"hasAnyRole('ROLE_USER, ROLE_ADMIN')\"/>\n        <form-login login-page=\"/auth\"\n            authentication-failure-url=\"/auth?auth_error=1\"\n                        default-target-url=\"/\"/>\n        <logout logout-url=\"/j_spring_security_logout\"/>\n    </http>\n \n    <authentication-manager>\n        <authentication-provider>\n            <user-service>\n                <user name=\"john\" password=\"doe\" authorities=\"ROLE_USER\"/>\n                <user name=\"jane\" password=\"doe\"\n                       authorities=\"ROLE_USER,ROLE_ADMIN\"/>\n                <user name=\"admin\" password=\"admin\" authorities=\"ROLE_ADMIN\"/>\n            </user-service>\n        </authentication-provider>\n    </authentication-manager>\n</beans:beans>\nSpring Security 4 has introduced a few critical changes that need coverage in this book; because by the \ntime this book is published, Spring Security 4 might be a subject on the exam.\n333",
          "tables": [],
          "code_blocks": [
            "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xmlns:beans=\"http://www.springframework.org/schema/beans\"\n             xsi:schemaLocation=\"http://www.springframework.org/schema/security\n             http://www.springframework.org/schema/security/spring-security.xsd\n                http://www.springframework.org/schema/beans\n                http://www.springframework.org/schema/beans/spring-beans.xsd\">\n \n    <http pattern=\"/images/*\" security=\"none\"/>\n    <http pattern=\"/styles/*\" security=\"none\"/>\n    <http pattern=\"/resources/*\" security=\"none\"/>\n \n    <http auto-config=\"true\" use-expressions=\"true\">\n        <intercept-url pattern=\"/auth*\" access=\"permitAll\"/>\n        <intercept-url pattern=\"/persons/newPerson\"\n              access=\"hasRole('ROLE_ADMIN')\"/>\n        <intercept-url pattern=\"/**\"\n              access=\"hasAnyRole('ROLE_USER, ROLE_ADMIN')\"/>\n        <form-login login-page=\"/auth\"\n            authentication-failure-url=\"/auth?auth_error=1\"\n                        default-target-url=\"/\"/>\n        <logout logout-url=\"/j_spring_security_logout\"/>\n    </http>\n \n    <authentication-manager>\n        <authentication-provider>\n            <user-service>\n                <user name=\"john\" password=\"doe\" authorities=\"ROLE_USER\"/>\n                <user name=\"jane\" password=\"doe\"\n                       authorities=\"ROLE_USER,ROLE_ADMIN\"/>\n                <user name=\"admin\" password=\"admin\" authorities=\"ROLE_ADMIN\"/>\n            </user-service>\n        </authentication-provider>\n    </authentication-manager>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 346,
          "text": "Chapter 7 ■ Spring Web FloW\n■ !  Spring Security 4 has introduced the possibility of using CSFr tokens in Spring forms to prevent cross-\nsite request forgery.12 a configuration without a <csrf /> element configuration is invalid, and any login \nrequests direct you to a 403 error page stating:\n Invalid CSRF Token 'null' was found on the request parameter\n '_csrf' or header 'X-CSRF-TOKEN'.\nTo migrate from Spring Security 3 to version 4, you have to add a configuration for that element, even if \nall you do is disable using CSRF tokens.\n<http auto-config=\"true\" use-expressions=\"true\">\n      <csrf disabled=\"true\"/>\n      <intercept-url pattern=\"/auth*\" access=\"permitAll\"/>\n      <intercept-url pattern=\"/persons/newPerson\" access=\"hasRole('ADMIN')\"/>\n      <intercept-url pattern=\"/**\" access=\"hasAnyRole('USER, ADMIN')\"/>\n      <form-login login-page=\"/auth\"\n                  authentication-failure-url=\"/auth?auth_error=1\"\n                  default-target-url=\"/\"/>\n      <logout logout-url=\"/logout\"\n                  delete-cookies=\"JSESSIONID\"\n                  logout-success-url=\"/\"/>\n</http>\nThe delete-cookies attribute can be used to specify a list of cookies to delete at logout time. In the \nprevious configuration, only one is specified, named JSESSIONID; but if the application uses more cookies, \nthey can be specified as a value for this attribute using their names separated by commas.\n12This type of attack consists of hacking an existing session to execute unauthorized commands in a web application.  \nYou can read more about it at https://en.wikipedia.org/wiki/Cross-site_request_forgery.\n334",
          "tables": [],
          "code_blocks": [
            "<csrf disabled=\"true\"/>\n      <intercept-url pattern=\"/auth*\" access=\"permitAll\"/>\n      <intercept-url pattern=\"/persons/newPerson\" access=\"hasRole('ADMIN')\"/>\n      <intercept-url pattern=\"/**\" access=\"hasAnyRole('USER, ADMIN')\"/>\n      <form-login login-page=\"/auth\"\n                  authentication-failure-url=\"/auth?auth_error=1\"\n                  default-target-url=\"/\"/>\n      <logout logout-url=\"/logout\"\n                  delete-cookies=\"JSESSIONID\"\n                  logout-success-url=\"/\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 347,
          "text": "Chapter 7 ■ Spring Web FloW\n■ !  other critical changes are related to the login form default Spring resources, such as the login Url (that \nindicates an authentication request) and names of the request parameters (expected keys for generation of an \nauthentication token).13 these were changed to match JavaConfig. the login form in the auth.jsp view became \nthe following:\n<form action=\"<c:url value='/login'/>\" method=\"post\">\n     <table>\n         <tr>\n             <td>\n               <label for=\"username\">\n                 <spring:message code=\"login.username\"/>\n               </label>\n               </td>\n            <td>\n              <input type='text' id='username' name='username'\n                  value='<c:out value=\"${user}\"/>'/>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <label for=\"password\">\n                    <spring:message code=\"login.password\"/>\n                </label>\n           </td>\n            <td><input type='password' id='password' name='password'/></td>\n        </tr>\n        <tr>\n            <td colspan=\"2\">\n                <button type=\"submit\">\n                   <spring:message code=\"login.submit\"/>\n                </button>\n            </td>\n        </tr>\n    </table>\n</form>\n13The full list of configuration changes that were made to match Java Configuration is at https://jira.spring.io/\nbrowse/SEC-2783.\n335",
          "tables": [],
          "code_blocks": [
            "<table>\n         <tr>\n             <td>\n               <label for=\"username\">\n                 <spring:message code=\"login.username\"/>\n               </label>\n               </td>\n            <td>\n              <input type='text' id='username' name='username'\n                  value='<c:out value=\"${user}\"/>'/>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <label for=\"password\">\n                    <spring:message code=\"login.password\"/>\n                </label>\n           </td>\n            <td><input type='password' id='password' name='password'/></td>\n        </tr>\n        <tr>\n            <td colspan=\"2\">\n                <button type=\"submit\">\n                   <spring:message code=\"login.submit\"/>\n                </button>\n            </td>\n        </tr>\n    </table>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 348,
          "text": "Chapter 7 ■ Spring Web FloW\n■ !  all previous examples used default values for the login Url and the authentication key names j_spring_\nsecurity_check, j_username, j_password (in Spring Security 3), login, username, password (in Spring Security 4).  \nKeep in mind that all of them can be redefined using Spring configuration.\nIf you are interested in keeping your form as secure as possible, you can configure CSRF usage and add \nthe token generated by Spring to your form. The following are the required modifications:\n•\t First you must enable CSRF generation in your security-config.xml file by adding \na <csrf /> configuration element and a repository to generate the value for it. \nModify the logout element appropriately; the third bullet in this list tells you why.\n<beans:beans .../>\n   <beans:bean id=\"tokenRepo\"\nclass=\"org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository\">\n        <beans:property name=\"sessionAttributeName\" value=\"_csrf\"/>\n    </beans:bean>\n \n   <http auto-config=\"true\" use-expressions=\"true\">\n        <csrf token-repository-ref=\"tokenRepo\"/>\n        <intercept-url pattern=\"/auth*\" access=\"permitAll\"/>\n        <intercept-url pattern=\"/persons/newPerson\" access=\"hasRole('ADMIN')\"/>\n        <intercept-url pattern=\"/**\" access=\"hasAnyRole('USER, ADMIN')\"/>\n        <form-login login-page=\"/auth\"\n             authentication-failure-url=\"/auth?auth_error=1\"\n                        default-target-url=\"/\"/>\n       <logout logout-url=\"/logout\"\n       delete-cookies=\"JSESSIONID\"\n       invalidate-session=\"true\"\n        logout-success-url=\"/\"/>\n    </http>\n    ...\n</beans:beans>\n•\t Second, you must add a hidden parameter in every form that you are interested in \nprotecting form cross-site request forgery.\n<form action=\"<c:url value='/login'/>\" method=\"post\">\n <input type=\"hidden\"\n    name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\"/>\n <table>\n     <tr>\n         <td>\n           <label for=\"username\">\n             <spring:message code=\"login.username\"/>\n           </label>\n               </td>\n            <td>\n              <input type='text' id='username' name='username'\n                  value='<c:out value=\"${user}\"/>'/>\n            </td>\n336",
          "tables": [],
          "code_blocks": [
            "<beans:property name=\"sessionAttributeName\" value=\"_csrf\"/>\n    </beans:bean>\n \n   <http auto-config=\"true\" use-expressions=\"true\">\n        <csrf token-repository-ref=\"tokenRepo\"/>\n        <intercept-url pattern=\"/auth*\" access=\"permitAll\"/>\n        <intercept-url pattern=\"/persons/newPerson\" access=\"hasRole('ADMIN')\"/>\n        <intercept-url pattern=\"/**\" access=\"hasAnyRole('USER, ADMIN')\"/>\n        <form-login login-page=\"/auth\"\n             authentication-failure-url=\"/auth?auth_error=1\"\n                        default-target-url=\"/\"/>\n       <logout logout-url=\"/logout\"\n       delete-cookies=\"JSESSIONID\"\n       invalidate-session=\"true\"\n        logout-success-url=\"/\"/>\n    </http>\n    ...",
            "name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\"/>\n <table>\n     <tr>\n         <td>\n           <label for=\"username\">\n             <spring:message code=\"login.username\"/>\n           </label>\n               </td>\n            <td>\n              <input type='text' id='username' name='username'\n                  value='<c:out value=\"${user}\"/>'/>\n            </td>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 349,
          "text": "Chapter 7 ■ Spring Web FloW\n        </tr>\n        <tr>\n            <td>\n                <label for=\"password\">\n                   <spring:message code=\"login.password\"/>\n                </label>\n           </td>\n            <td><input type='password' id='password' name='password'/></td>\n        </tr>\n        <tr>\n            <td colspan=\"2\">\n                <button type=\"submit\">\n                   <spring:message code=\"login.submit\"/>\n                </button>\n            </td>\n        </tr>\n    </table>\n</form>\n•\t And last, logging out becomes a pain when CSRF is enabled, because you need to \nlog out using a POST request. Thus, you cannot just use a link build like this (like in \nSpring Security 3):\n<a href=\"<spring:url value=\"/j_spring_security_logout\"/>\">\n   <spring:message code=\"menu.logout\"/>\n</a>\nYou need to add a logout form to the page and submit it using JavaScript:\n<spring:url value=\"/logout\" var=\"logoutUrl\" />\n  <form action=\"${logoutUrl}\" id=\"logout\" method=\"post\">\n         <input type=\"hidden\" name=\"${_csrf.parameterName}\"\n              value=\"${_csrf.token}\"/>\n  </form>\n<a href=\"#\" onclick=\"document.getElementById('logout').submit();\">\n    <spring:message code=\"menu.logout\"/>\n</a>\nAlso, as we’ve been mentioning logout, you probably noticed the extra attributes of the <logout /> \nelement; their names are quite obvious, and if specified at logout, the specific resources are cleaned \naccordingly:\n<logout logout-url=\"/logout\"\n                delete-cookies=\"JSESSIONID\"\n                invalidate-session=\"true\"\n                logout-success-url=\"/\"/>\n337",
          "tables": [],
          "code_blocks": [
            "</tr>\n        <tr>\n            <td>\n                <label for=\"password\">\n                   <spring:message code=\"login.password\"/>\n                </label>\n           </td>\n            <td><input type='password' id='password' name='password'/></td>\n        </tr>\n        <tr>\n            <td colspan=\"2\">\n                <button type=\"submit\">\n                   <spring:message code=\"login.submit\"/>\n                </button>\n            </td>\n        </tr>\n    </table>",
            "<input type=\"hidden\" name=\"${_csrf.parameterName}\"\n              value=\"${_csrf.token}\"/>\n  </form>",
            "<spring:message code=\"menu.logout\"/>",
            "delete-cookies=\"JSESSIONID\"\n                invalidate-session=\"true\"\n                logout-success-url=\"/\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 350,
          "text": "Chapter 7 ■ Spring Web FloW\nAlso, a handler can be used instead of the logout-success-url that takes care of redirecting to the \nproper page and eventually cleaning up any resources:\n<logout logout-url=\"/logout\"\n               delete-cookies=\"JSESSIONID\"\n                success-handler-ref=\"logoutSuccessHandler\"/>\nTo view the token Spring Security has generated, you can use Firebug to view the contents of your login \nrequest. You should see something similar to what is depicted in Figure 7-25.\nFigure 7-25.  Spring Security CSRF token\n■ !  another simplification change that can be done to this file is provided by a new feature introduced in \nSpring Security 4 that allows access expressions to be specified without the ROLE_ prefix in front of them; thus, \nthe preceding configuration becomes this:\n<http auto-config=\"true\" use-expressions=\"true\">\n   <csrf disabled=\"true\"/>\n   <intercept-url pattern=\"/auth*\" access=\"permitAll\"/>\n   <intercept-url pattern=\"/persons/newPerson\" access=\"hasRole('ADMIN')\"/>\n   <intercept-url pattern=\"/**\" access=\"hasAnyRole('USER, ADMIN')\"/>\n     <form-login login-page=\"/auth\" authentication-failure-url=\"/auth?auth_error=1\"\n                     default-target-url=\"/\"/>\n    <logout logout-url=\"/j_spring_security_logout\"/>\n</http>\n \n338",
          "tables": [],
          "code_blocks": [
            "delete-cookies=\"JSESSIONID\"\n                success-handler-ref=\"logoutSuccessHandler\"/>",
            "<form-login login-page=\"/auth\" authentication-failure-url=\"/auth?auth_error=1\"\n                     default-target-url=\"/\"/>\n    <logout logout-url=\"/j_spring_security_logout\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 351,
          "text": "Chapter 7 ■ Spring Web FloW\n <authentication-manager>\n    <authentication-provider>\n        <user-service>\n            <user name=\"john\" password=\"doe\" authorities=\"ROLE_USER\"/>\n            <user name=\"jane\" password=\"doe\" authorities=\"ROLE_USER,ROLE_ADMIN\"/>\n            <user name=\"admin\" password=\"admin\" authorities=\"ROLE_ADMIN\"/>\n        </user-service>\n    </authentication-provider>\n </authentication-manager>\nAnother part of configuration needs to be added in the web.xml file, if used. A security filter needs to be \nadded to intercept all requests to the application. springSecurityFilterChain is a mandatory name and \nrefers to an infrastructure bean with the same name. This bean is responsible for all the security within the \napplication (protecting the application URLs, validating submitted usernames and passwords, redirecting to \nthe log in form, etc.).\n<filter>\n        <filter-name>springSecurityFilterChain</filter-name>\n        <filter-class>\n           org.springframework.web.filter.DelegatingFilterProxy\n        </filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>springSecurityFilterChain</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping> \nConfigure Authentication\nIt was mentioned that authentication can be configured to work with almost any credential support \ntechnology. In this subsection, a few of them are covered. By default, in Spring Security the DAO \nauthentication provider is used, as well as a specific UserDetailsService implementation to provide \ncredentials and authorities. In the examples so far, the credentials were basically read from the configuration \nfile and stored into memory. The credentials were not encrypted, so even if Spring Security is used, the \napplication is not that secure. To encrypt credentials, the configuration must be modified to specify the \nencryption type:\n <!-- spring-config.xml -->\n<authentication-manager>\n   <authentication-provider>\n         <password-encoder hash=\"md5\" >\n                 <salt-source system-wide=\"MySalt\"/>\n         </password-encoder>\n         <user-service properties=\"/WEB-INF/users.properties\" />\n   </authentication-provider>\n</authentication-manager>\n \n339",
          "tables": [],
          "code_blocks": [
            "<authentication-provider>\n        <user-service>\n            <user name=\"john\" password=\"doe\" authorities=\"ROLE_USER\"/>\n            <user name=\"jane\" password=\"doe\" authorities=\"ROLE_USER,ROLE_ADMIN\"/>\n            <user name=\"admin\" password=\"admin\" authorities=\"ROLE_ADMIN\"/>\n        </user-service>\n    </authentication-provider>\n </authentication-manager>",
            "<filter-name>springSecurityFilterChain</filter-name>\n        <filter-class>\n           org.springframework.web.filter.DelegatingFilterProxy\n        </filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>springSecurityFilterChain</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>",
            "<password-encoder hash=\"md5\" >\n                 <salt-source system-wide=\"MySalt\"/>\n         </password-encoder>\n         <user-service properties=\"/WEB-INF/users.properties\" />\n   </authentication-provider>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 352,
          "text": "Chapter 7 ■ Spring Web FloW\n#/WEB-INF/users.properties\njohn=a1c093d7a2742f0afef7720883a59016,ROLE_USER\n#password: john\n \njane=a1c093d7a2742f0afef7720883a59016,ROLE_USER,ROLE_ADMIN\n#password: jane\n \nadmin=5a693853b2958ecb256db46b808ac488,ROLE_ADMIN\n#password: admin\nIn the preceding configuration, the md514 algorithm is used to encrypt the passwords and a method \ncalled password-salting is used to increase the security passwords by adding a well-known string to \nthem. The string added to the password can be an application-wide string, like in the previous example \nwhere the String is \"MySalt\", or it can be a property of the entity—something that won’t change, like its \nunique identifier in the system, for example. A combination of properties can be used as salt too, but all the \nproperties must be constant for the duration of the entity; if any of the property values changes, the user \nwon’t be able to log in anymore because the authentication system won’t be able to create the correct hash.\nThe preceding encrypted strings were generated using an instance of org.springframework.security.\nauthentication.encoding.Md5PasswordEncoder:\nimport org.springframework.security.authentication.encoding.Md5PasswordEncoder;\npublic class PasswordGenerator {\n \n    public static void main(String args) {\n        Md5PasswordEncoder encoder = new Md5PasswordEncoder();\n        String encrypted = encoder.encodePassword(\"doe\", \"MySalt\");\n        System.out.println(encrypted);\n        encrypted = encoder.encodePassword(\"admin\", \"MySalt\");\n        System.out.println(encrypted);\n    }\n}\nTo use an entity property as salt, the previous configuration must be modified like this:\n<authentication-manager>\n    <authentication-provider>\n        <password-encoder hash=\"md5\">\n           <salt-source user-property=\"id\" />\n       </password-encoder>\n     </authentication-provider>\n</authentication-manager>\nThe credentials were decoupled from the configuration by isolating them in a property file, which can \nbe easily edited without needing to recompile the application. The credentials property file has a specific \nsyntax:\n[username] = [password(encrypted)],[role1,role2...]\n14Read more about MD5 at https://en.wikipedia.org/wiki/MD5.\n340",
          "tables": [],
          "code_blocks": [
            "public static void main(String args) {\n        Md5PasswordEncoder encoder = new Md5PasswordEncoder();\n        String encrypted = encoder.encodePassword(\"doe\", \"MySalt\");\n        System.out.println(encrypted);\n        encrypted = encoder.encodePassword(\"admin\", \"MySalt\");\n        System.out.println(encrypted);\n    }",
            "<authentication-provider>\n        <password-encoder hash=\"md5\">\n           <salt-source user-property=\"id\" />\n       </password-encoder>\n     </authentication-provider>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 353,
          "text": "Chapter 7 ■ Spring Web FloW\nBut credentials in memory storage is not a solution for production applications; this is only suitable \nfor very small and educational applications. For production application, the most common storage for \ncredentials is a database. To provide these credentials to the authentication manager, a data source is \nneeded:\n<authentication-manager>\n  <authentication-provider>\n          <jdbc-user-service data-source-ref=\"authDataSource\" />\n     </provider>\n</authentication-manager>\nTwo tables must be accessible using the authDataSource: one named users containing user credentials \nand one named authorities continuing user-role correspondences. The following queries are run by the \nauthentication provider and must execute successfully:\nSELECT username, password, enabled FROM users WHERE username = ?\nSELECT username, authority FROM authorities WHERE username = ?\nAnother way to provide credentials is to write a custom implementation for an authentication provider:\n  <authentication-manager>\n    <authentication-provider user-service-ref=\"customCredentialsProvider\" />\n</authentication-manager>\nThe provider class can delegate to a DAO implementation to retrieve principals from a database \nusing a data source and customized queries. The information is returned into a format recognized in the \napplication. In the following example, an instance of type UserInfo is used as a principal in the application:\n [commandchars=*\n@Repository\npublic class CustomCredentialsProvider {\n    private JdbcTemplate jdbcTemplate;\n    @Autowired\n    public void setDataSource(DataSource dataSource) {\n        this.jdbcTemplate = new JdbcTemplate(dataSource);\n    }\n \n    public UserInfo getUserInfo(String username){\n            String sql = \"SELECT u.username name, u.password pass,\"+\n                    a.authority role FROM \"+\n                     \"users u INNER JOIN authorities a\" +\n                    on u.username=a.username WHERE \"+\n                     \"u.enabled =1 and u.username = ?\";\n            UserInfo userInfo =\n           (UserInfo)jdbcTemplate.queryForObject(sql, new Object{username},\n                    new RowMapper<UserInfo>() {\n                    public UserInfo mapRow(ResultSet rs, int rowNum)\n                      throws SQLException {\n                        UserInfo user = new UserInfo();\n                        user.setUsername(rs.getString(\"name\"));\n                        user.setPassword(rs.getString(\"pass\"));\n341",
          "tables": [],
          "code_blocks": [
            "<jdbc-user-service data-source-ref=\"authDataSource\" />\n     </provider>",
            "<authentication-provider user-service-ref=\"customCredentialsProvider\" />",
            "private JdbcTemplate jdbcTemplate;\n    @Autowired\n    public void setDataSource(DataSource dataSource) {\n        this.jdbcTemplate = new JdbcTemplate(dataSource);\n    }\n \n    public UserInfo getUserInfo(String username){\n            String sql = \"SELECT u.username name, u.password pass,\"+\n                    a.authority role FROM \"+\n                     \"users u INNER JOIN authorities a\" +\n                    on u.username=a.username WHERE \"+\n                     \"u.enabled =1 and u.username = ?\";\n            UserInfo userInfo =\n           (UserInfo)jdbcTemplate.queryForObject(sql, new Object{username},\n                    new RowMapper<UserInfo>() {\n                    public UserInfo mapRow(ResultSet rs, int rowNum)\n                      throws SQLException {\n                        UserInfo user = new UserInfo();\n                        user.setUsername(rs.getString(\"name\"));\n                        user.setPassword(rs.getString(\"pass\"));"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 354,
          "text": "Chapter 7 ■ Spring Web FloW\n                        user.setRole(rs.getString(\"role\"));\n                        return user;\n                    }\n        });\n            return userInfo;\n    }\n}\n//UserInfo.java\npublic class UserInfo {\n        private String username;\n        private String password;\n        private String role;\n        //setter and getters for fields\n}\nNo web.xml Configuration\nAs the official documentation says, if Spring Security is used with Spring MVC, you \nneed an extra empty class that extends org.springframework.security.web.context.\nAbstractSecurityWebApplicationInitializer, a class provided by Spring Security that ensures that \nthe springSecurityFilterChain gets registered. Also, you need to include the Spring Security XML \nconfiguration file in the Java Configuration, as depicted in the following code sample:\nimport org.springframework.security.web.context.\n         AbstractSecurityWebApplicationInitializer;\n// Empty class needed to register the springSecurityFilterChain bean\npublic class SecurityInitializer extends AbstractSecurityWebApplicationInitializer {\n}\npublic class WebInitializer extends AbstractDispatcherServletInitializer {\n \n    @Override\n    protected WebApplicationContext createRootApplicationContext() {\n        XmlWebApplicationContext ctx = new XmlWebApplicationContext();\n        ctx.setConfigLocation(\"/WEB-INF/spring/security-config.xml\");\n        return ctx;\n    }\n \n    @Override\n    protected WebApplicationContext createServletApplicationContext() {\n        XmlWebApplicationContext ctx = new XmlWebApplicationContext();\n        ctx.setConfigLocations(\"/WEB-INF/spring/mvc-config.xml\",\n                \"/WEB-INF/spring/app-config.xml\",\n                \"/WEB-INF/spring/webflow-config.xml\");\n        return ctx;\n    }\n    ...\n}\nBut as Java Configuration and web initializer classes were introduced to simplify configuration and get \nrid of all XML, all the preceding configurations will soon be deprecated.\n342",
          "tables": [],
          "code_blocks": [
            "user.setRole(rs.getString(\"role\"));\n                        return user;\n                    }\n        });\n            return userInfo;\n    }",
            "private String username;\n        private String password;\n        private String role;\n        //setter and getters for fields",
            "AbstractSecurityWebApplicationInitializer;",
            "@Override\n    protected WebApplicationContext createRootApplicationContext() {\n        XmlWebApplicationContext ctx = new XmlWebApplicationContext();\n        ctx.setConfigLocation(\"/WEB-INF/spring/security-config.xml\");\n        return ctx;\n    }\n \n    @Override\n    protected WebApplicationContext createServletApplicationContext() {\n        XmlWebApplicationContext ctx = new XmlWebApplicationContext();\n        ctx.setConfigLocations(\"/WEB-INF/spring/mvc-config.xml\",\n                \"/WEB-INF/spring/app-config.xml\",\n                \"/WEB-INF/spring/webflow-config.xml\");\n        return ctx;\n    }\n    ..."
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 355,
          "text": "Chapter 7 ■ Spring Web FloW\nSpring Security Java Configuration\nThe XML configuration style is close to its death, as Java Configuration gains popularity. So it was expected \nthat Spring Security adapt, and they did. The Java Configuration is super-simple and intuitive. When working \nwith Spring MVC and Spring Security to develop a working security configuration, you need to do the \nfollowing:\n  1.  Create an empty class extending AbstractSecurityWebApplicationInitializer \nto get the springSecurityFilterChain registered (as mentioned at the end of \nthe previous section).\n  2.  Create a security configuration class that extends \nWebSecurityConfigurerAdapter so that the developer can write the minimum \namount of code for a valid security configuration. The security configuration \nclass equivalent to the XML configuration presented in the previous section is \ndepicted in following code snippet:\npackage com.pr.config;\n...\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation\n        .authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation\n        .web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation\n        .web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation\n        .web.configuration.WebSecurityConfigurerAdapter;\n \n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n \n        @Autowired\n        public void configureGlobal(AuthenticationManagerBuilder auth) {\n            try {\n                auth.inMemoryAuthentication()\n                        .withUser(\"john\").password(\"doe\").roles(\"USER\").and()\n                        .withUser(\"jane\").password(\"doe\").roles(\"USER,ADMIN\").and()\n                        .withUser(\"admin\").password(\"admin\").roles(\"ADMIN\");\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        @Override\n        protected void configure(HttpSecurity http) throws Exception {\n            http\n                    .authorizeRequests()\n                    .antMatchers(\"/resources/**\",\"/images/**\",\"/styles/**\")\n                         .permitAll()\n343",
          "tables": [],
          "code_blocks": [
            ".authentication.builders.AuthenticationManagerBuilder;",
            ".web.builders.HttpSecurity;",
            ".web.configuration.EnableWebSecurity;",
            ".web.configuration.WebSecurityConfigurerAdapter;",
            "@Autowired\n        public void configureGlobal(AuthenticationManagerBuilder auth) {\n            try {\n                auth.inMemoryAuthentication()\n                        .withUser(\"john\").password(\"doe\").roles(\"USER\").and()\n                        .withUser(\"jane\").password(\"doe\").roles(\"USER,ADMIN\").and()\n                        .withUser(\"admin\").password(\"admin\").roles(\"ADMIN\");\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        @Override\n        protected void configure(HttpSecurity http) throws Exception {\n            http\n                    .authorizeRequests()\n                    .antMatchers(\"/resources/**\",\"/images/**\",\"/styles/**\")\n                         .permitAll()"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 356,
          "text": "Chapter 7 ■ Spring Web FloW\n                    .antMatchers(\"/persons/newPerson\").hasRole(\"ADMIN\")\n                    .antMatchers(\"/**\").hasAnyRole(\"ADMIN\",\"USER\")\n                    .anyRequest()\n                    .authenticated()\n                    .and()\n                 .formLogin()\n                    .usernameParameter(\"username\") // customizable\n                    .passwordParameter(\"password\") // customizable\n                    .loginProcessingUrl(\"/login\")  // customizable\n                    .loginPage(\"/auth\")\n                    .failureUrl(\"/auth?auth_error=1\")\n                    .defaultSuccessUrl(\"/home\")\n                    .permitAll()\n                    .and()\n                .logout()\n                    .logoutUrl(\"/logout\")\n                    .logoutSuccessUrl(\"/\")\n                .and()\n                .csrf().disable();\n    }\n}\nTo enable CSRF usage, the preceding configuration must also define a CSRF \nprovider bean and use it in the configuration:\n...\nimport org.springframework.security.web.csrf.CsrfTokenRepository;\nimport org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository;\n \n @Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n \n@Bean\n    public CsrfTokenRepository repo() {\n        HttpSessionCsrfTokenRepository repo = new \nHttpSessionCsrfTokenRepository();\n        repo.setParameterName(\"_csrf\");\n        repo.setHeaderName(\"X-CSRF-TOKEN\");\n        return repo;\n    }\n \n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.\n       ...\n        .and()\n        .csrf().csrfTokenRepository(repo());\n    }\n} \n344",
          "tables": [],
          "code_blocks": [
            ".antMatchers(\"/persons/newPerson\").hasRole(\"ADMIN\")\n                    .antMatchers(\"/**\").hasAnyRole(\"ADMIN\",\"USER\")\n                    .anyRequest()\n                    .authenticated()\n                    .and()\n                 .formLogin()\n                    .usernameParameter(\"username\") // customizable\n                    .passwordParameter(\"password\") // customizable\n                    .loginProcessingUrl(\"/login\")  // customizable\n                    .loginPage(\"/auth\")\n                    .failureUrl(\"/auth?auth_error=1\")\n                    .defaultSuccessUrl(\"/home\")\n                    .permitAll()\n                    .and()\n                .logout()\n                    .logoutUrl(\"/logout\")\n                    .logoutSuccessUrl(\"/\")\n                .and()\n                .csrf().disable();\n    }",
            "public CsrfTokenRepository repo() {\n        HttpSessionCsrfTokenRepository repo = new",
            "repo.setParameterName(\"_csrf\");\n        repo.setHeaderName(\"X-CSRF-TOKEN\");\n        return repo;\n    }\n \n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http.\n       ...\n        .and()\n        .csrf().csrfTokenRepository(repo());\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 357,
          "text": "Chapter 7 ■ Spring Web FloW\nNo web.xml Configuration\nAdd the Security configuration class to the root context in the class taking care of loading all the MVC \nenvironment components:\n package com.pr.config;\n ...\n import com.pr.config.MvcConfig;\nimport com.pr.config.SecurityConfig;\nimport com.pr.config.WebFlowConfig;\nimport org.springframework.web.filter.CharacterEncodingFilter;\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\nimport org.springframework.web.servlet\n      .support.AbstractAnnotationConfigDispatcherServletInitializer;\nimport javax.servlet.Filter;\n \npublic class WebInitializer\n         extends AbstractAnnotationConfigDispatcherServletInitializer {\n    @Override\n    protected Class<?> getRootConfigClasses() {\n        return new Class<?>{\n                SecurityConfig.class\n        };\n    }\n \n    @Override\n    protected Class<?> getServletConfigClasses() {\n        return new Class<?>{\n                MvcConfig.class,\n                WebFlowConfig.class\n        };\n    }\n...\n}\n■ !  the SecurityConfig.class (and the Spring Security XMl config file) were added to the root context \nbecause they define beans that can be used by other servlets and services in the same application. the \ngetServletConfigClasses() is used only to instantiate the servlet-related beans.\n345",
          "tables": [],
          "code_blocks": [
            ".support.AbstractAnnotationConfigDispatcherServletInitializer;",
            "extends AbstractAnnotationConfigDispatcherServletInitializer {\n    @Override\n    protected Class<?> getRootConfigClasses() {\n        return new Class<?>{\n                SecurityConfig.class\n        };\n    }\n \n    @Override\n    protected Class<?> getServletConfigClasses() {\n        return new Class<?>{\n                MvcConfig.class,\n                WebFlowConfig.class\n        };\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 358,
          "text": "Chapter 7 ■ Spring Web FloW\nSpring Security Tag Library\nSecurity tags can be used in JSP directly to secure elements in the page and prevent their rendering if the \nauthenticated user is not allowed to see them. To use them, the Spring Security Tag library must be declared \nin the JSP page:\n<%@ taglib prefix=\"sec\" uri=\"http://www.springframework.org/security/tags\" %>\nIn the examples attached to this chapter, two elements were secured in JSP:\n•\t The logout link must be visible only when a user is authenticated; the following is \nthe syntax to do this:\n<!-- layout.jsp, tiles main template file -->\n <sec:authorize access=\"isAuthenticated()\">\n   <li>\n   <!-- we are using Security for with CSRF enabled -->\n          <spring:url value=\"/logout\" var=\"logoutUrl\" />\n             <form action=\"${logoutUrl}\" id=\"logout\" method=\"post\">\n                 <input type=\"hidden\" name=\"${_csrf.parameterName}\"\n                     value=\"${_csrf.token}\"/>\n             </form>\n          <a href=\"#\" onclick=\"document.getElementById('logout').submit();\">\n              <spring:message code=\"menu.logout\"/>\n          </a>\n   </li>\n</sec:authorize>\nSo basically, the same expressions used when configuring Spring Security are \nused for the access attribute.\n•\t The NewPerson link must be visible only to users with the ADMIN role:\n<!-- templates/layout.jsp -->\n<sec:authorize access=\"hasRole('ADMIN')\">\n      <li>\n      <!--menuTab is a tiles attribute -->\n            <c:if test=\"${menuTab eq 'newPerson'}\">\n                  <strong>\n                      <a href=\"<c:url value=\"/persons/newPerson\"/>\">\n                           <spring:message code=\"menu.new.person\"/>\n                      </a>\n                   </strong>\n                </c:if>\n                    <c:if test=\"${menuTab != 'newPersons'}\">\n                      <a href=\"<c:url value=\"/persons/newPerson\"/>\">\n                          <spring:message code=\"menu.new.person\"/>\n                       </a>\n                </c:if>\n      </li>\n</sec:authorize>\n346",
          "tables": [],
          "code_blocks": [
            "<spring:url value=\"/logout\" var=\"logoutUrl\" />\n             <form action=\"${logoutUrl}\" id=\"logout\" method=\"post\">\n                 <input type=\"hidden\" name=\"${_csrf.parameterName}\"\n                     value=\"${_csrf.token}\"/>\n             </form>\n          <a href=\"#\" onclick=\"document.getElementById('logout').submit();\">\n              <spring:message code=\"menu.logout\"/>\n          </a>\n   </li>",
            "<li>\n      <!--menuTab is a tiles attribute -->\n            <c:if test=\"${menuTab eq 'newPerson'}\">\n                  <strong>\n                      <a href=\"<c:url value=\"/persons/newPerson\"/>\">\n                           <spring:message code=\"menu.new.person\"/>\n                      </a>\n                   </strong>\n                </c:if>\n                    <c:if test=\"${menuTab != 'newPersons'}\">\n                      <a href=\"<c:url value=\"/persons/newPerson\"/>\">\n                          <spring:message code=\"menu.new.person\"/>\n                       </a>\n                </c:if>\n      </li>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 359,
          "text": "Chapter 7 ■ Spring Web FloW\nAnd another tag was used to display information about the user being logged in:\n<!-- layout.jsp, tiles main template file -->\n <div class=\"footer\">\n        <sec:authorize access=\"isAuthenticated()\">\n            <p><spring:message code=\"user.loggedin\"/>:\n                <sec:authentication property=\"principal.username\"/>\n            </p>\n        </sec:authorize>\n            <p><spring:message code=\"footer.text\"/></p>\n    </div>\nUsing the Spring Tag library and intercept-url definitions, access to resources can be centralized in \nthe Spring Security configuration file or class, because the access attribute can be replaced with the url \nattribute that is set with URLs that are intercepted by Spring Security.\n<!-- layout.jsp, tiles main template file -->\n<sec:authorize access=\"hasRole('ADMIN')\">\n                //New Person link\n</sec:authorize>\n// can be written as\n<sec:authorize url=\"/persons/newPerson\">\n              //New Person link\n</sec:authorize>\nSecuring Methods\nSpring Security uses AOP to secure method calls. The Spring Security namespace can be used to configure \nmethod security using XML. But the most commonly used and easy-to-understand way to secure methods \nis through annotations. Spring Security provides its own annotations, but JSR-250 annotations are supported \ntoo. Samples for all ways of securing methods are covered.\nAssuming you want to secure all action methods involved in the newPerson flow, this is how it is done \nusing XML:\n<!-- security-config.xml -->\n<security:global-method-security>\n  <security:protect-pointcut\n    expression=\"execution(* com.pr..*Actions.*(..))?\n         access=\"hasRole('ROLE_ADMIN')\" />\n</security:global-method-security>\nOf course, method security must be enabled, which can be done by adding the following element in the \nsecurity configuration file:\n<!-- security-config.xml -->\n<beans:beans xmlns=\"http://www.springframework.org/schema/security\"\n             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xmlns:beans=\"http://www.springframework.org/schema/beans\"\n347",
          "tables": [],
          "code_blocks": [
            "<sec:authorize access=\"isAuthenticated()\">\n            <p><spring:message code=\"user.loggedin\"/>:\n                <sec:authentication property=\"principal.username\"/>\n            </p>\n        </sec:authorize>\n            <p><spring:message code=\"footer.text\"/></p>\n    </div>",
            "//New Person link",
            "//New Person link",
            "expression=\"execution(* com.pr..*Actions.*(..))?\n         access=\"hasRole('ROLE_ADMIN')\" />",
            "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xmlns:beans=\"http://www.springframework.org/schema/beans\""
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 360,
          "text": "Chapter 7 ■ Spring Web FloW\n             xsi:schemaLocation=\"http://www.springframework.org/schema/security\n             http://www.springframework.org/schema/security/spring-security.xsd\n                http://www.springframework.org/schema/beans\n                http://www.springframework.org/schema/beans/spring-beans.xsd\">\n \n<global-method-security\n               secured-annotations=\"enabled\" />\n                ..\n</beans:beans>\nSecuring an action method using annotations can be done using the @Secured Spring annotation, \nwhich is activated when the global-method-security element is present in the configuration.\n//AccountActions.java\n...\nimport org.springframework.security.access.annotation.Secured;\n \n@WebFlowAction\npublic class AccountActions extends MultiAction {\n \n    @Secured(\"ROLE_ADMIN\")\n    public Event saveAccount(RequestContext context) {\n       ...\n    }\n}\nThe equivalent of the global-method-security XML configuration is @EnableGlobalMethodSecurity(\nsecuredEnabled = true) , which can be placed on any configuration class annotated with @Configuration:\n//SpringConfig.java\n...\nimport org.springframework.security.config.annotation.\n      method.configuration.EnableGlobalMethodSecurity;\n \n@Configuration\n@EnableWebSecurity\n@EnableGlobalMethodSecurity(securedEnabled = true)\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n...\n}\nTo enable JSR-250 annotations, and especially the @RolesAllowed annotation (that is an equivalent for \nSpring @Secured), the following configurations must be made:\n<!-- security-config.xml -->\n<beans:beans xmlns=\"http://www.springframework.org/schema/security\"\n             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xmlns:beans=\"http://www.springframework.org/schema/beans\"\n             xsi:schemaLocation=\"http://www.springframework.org/schema/security\n348",
          "tables": [],
          "code_blocks": [
            "xsi:schemaLocation=\"http://www.springframework.org/schema/security\n             http://www.springframework.org/schema/security/spring-security.xsd\n                http://www.springframework.org/schema/beans\n                http://www.springframework.org/schema/beans/spring-beans.xsd\">",
            "secured-annotations=\"enabled\" />\n                ..",
            "@Secured(\"ROLE_ADMIN\")\n    public Event saveAccount(RequestContext context) {\n       ...\n    }",
            "method.configuration.EnableGlobalMethodSecurity;",
            "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xmlns:beans=\"http://www.springframework.org/schema/beans\"\n             xsi:schemaLocation=\"http://www.springframework.org/schema/security"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 361,
          "text": "Chapter 7 ■ Spring Web FloW\n             http://www.springframework.org/schema/security/spring-security.xsd\n                http://www.springframework.org/schema/beans\n                http://www.springframework.org/schema/beans/spring-beans.xsd\">\n \n<global-method-security\n                 jsr250-annotations=\"enabled\" />\n \n                  ..\n </beans:beans>\n//SpringConfig.java\n...\nimport org.springframework.security.config.annotation.\n      method.configuration.EnableGlobalMethodSecurity;\n@Configuration\n@EnableGlobalMethodSecurity(jsr250Enabled = true)\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n...\n}\nUsage of @RolesAllowed is the same as @Secure, so the preceding code would become this:\n//AccountActions.java\n...\nimport javax.annotation.security.RolesAllowed;\n \n@WebFlowAction\npublic class AccountActions extends MultiAction {\n \n    @RolesAllowed(\"ROLE_ADMIN\")\n    public Event saveAccount(RequestContext context) {\n       ...\n    }\n}\nSpring Security also provides the @PreAuthorize annotation, which is used to set an expression that is \nevaluated to decide if the method is invoked or not. (Basically, the equivalent of the <intercept /> XML \nconfiguration element.) Being a Spring Security annotation, it supports SpEL. This annotation can be used \nif it has been enabled using the @EnableGlobalMethodSecurity annotation. The code snippet depicts the \nconfiguration and usage for this specific case:\n//SpringConfig.java\n...\nimport org.springframework.security.config.annotation.\n      method.configuration.EnableGlobalMethodSecurity;\n@Configuration\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n...\n \n349",
          "tables": [],
          "code_blocks": [
            "http://www.springframework.org/schema/security/spring-security.xsd\n                http://www.springframework.org/schema/beans\n                http://www.springframework.org/schema/beans/spring-beans.xsd\">",
            "jsr250-annotations=\"enabled\" />\n \n                  ..\n </beans:beans>",
            "method.configuration.EnableGlobalMethodSecurity;",
            "@RolesAllowed(\"ROLE_ADMIN\")\n    public Event saveAccount(RequestContext context) {\n       ...\n    }",
            "method.configuration.EnableGlobalMethodSecurity;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 362,
          "text": "Chapter 7 ■ Spring Web FloW\n//AccountActions.java\n...\nimport org.springframework.security.access.prepost.PreAuthorize;\n \n@WebFlowAction\npublic class AccountActions extends MultiAction {\n  @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\n  public Event saveAccount(RequestContext context) {\n     ...\n  }\n}\nSecuring Flow Definitions\nAny component of a flow definition—states, subflows, transitions—can be considered resources and thus \nsecured. So far, we have secured the web-flow link by using a <sec:authorize /> element in the templates/\nlayout.jsp tiles template and setting up authentication and authorization. But flow components can be \nsecured using a org.springframework.webflow.security.SecurityFlowExecutionListener and by \nadding <secured> elements in the flow definition. Considering that authentication and authorization rules \nhave been set up as described earlier, the next step is to configure a SecurityFlowExecutionListener. This \ncan be done using XML configuration by adding the bean definition in the configuration file setting up the \nweb flow environment, webflow-config.xml.\n<!--webflow-config.xml-->\n <flow ...>\n     <!-- Executes web flows -->\n    <webflow:flow-executor id=\"flowExecutor\" >\n        <webflow:flow-execution-listeners>\n            <webflow:listener ref=\"auditExecutionListener\"/>\n            <webflow:listener ref=\"securityFlowExecutionListener\"/>\n        </webflow:flow-execution-listeners>\n    </webflow:flow-executor>\n \n    <bean id=\"auditExecutionListener\"\n      class=\"com.pr.audit.AuditFlowExecutorListener\"/>\n \n<bean id=\"securityFlowExecutionListener\"\n   class=\"org.springframework.webflow.security.SecurityFlowExecutionListener\"/>\n   ... // other flow infrastrucure beans\n</flow>\n■ !  the AuditFlowExecutorListener bean is a developer helper bean: that is it prints information when a \nweb flow event is triggered, when states are entered, and when exceptions are thrown. the class is present in \nthe sample project for this chapter, but its code is not relevant for this topic.\n350",
          "tables": [],
          "code_blocks": [
            "...\n  }",
            "<!-- Executes web flows -->\n    <webflow:flow-executor id=\"flowExecutor\" >\n        <webflow:flow-execution-listeners>\n            <webflow:listener ref=\"auditExecutionListener\"/>\n            <webflow:listener ref=\"securityFlowExecutionListener\"/>\n        </webflow:flow-execution-listeners>\n    </webflow:flow-executor>\n \n    <bean id=\"auditExecutionListener\"\n      class=\"com.pr.audit.AuditFlowExecutorListener\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 363,
          "text": "Chapter 7 ■ Spring Web FloW\nThis bean can be configured using Java Configuration by declaring it in the web flows configuration class:\n//WebFlowConfig.java\n...\nimport org.springframework.webflow.security.SecurityFlowExecutionListener;\n \n@Configuration\npublic class WebFlowConfig extends AbstractFlowConfiguration {\n \n    @Bean\n    public SecurityFlowExecutionListener securityFlowExecutionListener(){\n        return new SecurityFlowExecutionListener();\n  }\n    @Bean\n    public FlowExecutor flowExecutor() {\n        return getFlowExecutorBuilder(flowRegistry())\n                .addFlowExecutionListener(new AuditFlowExecutorListener(), \"*\")\n                .addFlowExecutionListener(securityFlowExecutionListener())\n                .setMaxFlowExecutions(5)\n                .setMaxFlowExecutionSnapshots(30)\n                .build();\n    }\n    ...\n}\nDeclaring this bean and setting it up as a flow execution listener ensures that any <secured /> elements \nin the flow definition are picked up and interpreted accordingly at flow execution time. This bean can define \nits own decision manager, which overrides the default AccessDecisionManager in the system, by setting up \nthe desired bean reference to the accessDecisionManager property.\n<!--webflow-config.xml-->\n<bean id=\"securityFlowExecutionListener\" class=\n  \"org.springframework.webflow.security.SecurityFlowExecutionListener\">\n    <property name=\"accessDecisionManager\"\n                  ref=\"customDecisionManager\" />\n</bean>\n \n//WebFlowConfig.java\norg.springframework.security.access.vote.UnanimousBased;\n...\n@Bean\n    public SecurityFlowExecutionListener securityFlowExecutionListener(){\n        SecurityFlowExecutionListener sfel = new SecurityFlowExecutionListener();\n        sfel.setAccessDecisionManager(customDecisionManager());\n        return sfel;\n    }\n \n    @Bean\n    AccessDecisionManager customDecisionManager(){\n    //assume List<AccessDecisionVoter<? extends Object>> voterList is initialized\n            return new UnanimousBased(voterList);\n    }\n351",
          "tables": [],
          "code_blocks": [
            "@Bean\n    public SecurityFlowExecutionListener securityFlowExecutionListener(){\n        return new SecurityFlowExecutionListener();\n  }\n    @Bean\n    public FlowExecutor flowExecutor() {\n        return getFlowExecutorBuilder(flowRegistry())\n                .addFlowExecutionListener(new AuditFlowExecutorListener(), \"*\")\n                .addFlowExecutionListener(securityFlowExecutionListener())\n                .setMaxFlowExecutions(5)\n                .setMaxFlowExecutionSnapshots(30)\n                .build();\n    }\n    ...",
            "<property name=\"accessDecisionManager\"\n                  ref=\"customDecisionManager\" />",
            "public SecurityFlowExecutionListener securityFlowExecutionListener(){\n        SecurityFlowExecutionListener sfel = new SecurityFlowExecutionListener();\n        sfel.setAccessDecisionManager(customDecisionManager());\n        return sfel;\n    }\n \n    @Bean\n    AccessDecisionManager customDecisionManager(){\n    //assume List<AccessDecisionVoter<? extends Object>> voterList is initialized\n            return new UnanimousBased(voterList);\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 364,
          "text": "Chapter 7 ■ Spring Web FloW\nThe UnanimousBased is a simple concrete implementation of the AccessDecisionManager provided by \nSpring Security; it requires all voters to abstain or grant access.\nThe SecurityFlowExecutionListener bean throws AccessDeniedException when the user is not \nauthorized to access a flow resource. The exception is caught by Spring Security servlet filter. Catching or \nsuppressing this exception is not recommended. When extending SimpleMappingExceptionResolver, \ndoResolveException should be implemented so that this exception is rethrown.\nimport\n org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;\n \npublic class CustomExceptionResolver\n              extends SimpleMappingExceptionResolver {\n \n   @Override\n  protected ModelAndView doResolveException\n       (HttpServletRequest req, HttpServletResponse res,\n        Object handler, Exception ex) {\n \n      return super.doResolveException(req, res, handler, ex);\n    }\n}\nThe following example depicts the specific points where the secured element can appear in a flow \ndefinition:\n<!--webflow-config.xml-->\n \n<!-- 1. Under the flow element, securing the whole flow definition -->\n<flow ...>\n        <secured attributes=\"ROLE_ADMIN\" />\n</flow>\n \n<!-- 2. Securing a view-state -->\n<flow ...>\n        <view-state id=\"enterPersonInfo\" model=\"person\">\n                <secured attributes=\"ROLE_ADMIN\" />\n        </view-state>\n</flow>\n \n<!-- or a decision state -->\n <decision-state id=\"isNewPerson\">\n    <secured attributes=\"IS_AUTHENTICATED_FULLY\"/>\n        <if test=\"personService.isNewPerson(person)\"\n            then=\"enterIdentityCardInfo\" else=\"reviewExistingPerson\"/>\n</decision-state>\n \n352",
          "tables": [],
          "code_blocks": [
            "extends SimpleMappingExceptionResolver {\n \n   @Override\n  protected ModelAndView doResolveException\n       (HttpServletRequest req, HttpServletResponse res,\n        Object handler, Exception ex) {\n \n      return super.doResolveException(req, res, handler, ex);\n    }",
            "<secured attributes=\"ROLE_ADMIN\" />",
            "<view-state id=\"enterPersonInfo\" model=\"person\">\n                <secured attributes=\"ROLE_ADMIN\" />\n        </view-state>",
            "<secured attributes=\"IS_AUTHENTICATED_FULLY\"/>\n        <if test=\"personService.isNewPerson(person)\"\n            then=\"enterIdentityCardInfo\" else=\"reviewExistingPerson\"/>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 365,
          "text": "Chapter 7 ■ Spring Web FloW\n<!-- 3. Securing a transition -->\n<flow ...>\n        <view-state id=\"enterPersonInfo\" model=\"person\">\n                ...\n                 <transition on=\"next\" to=\"isNewPerson\" >\n                 <secured attributes=\"ROLE_ADMIN\" />\n                 </transition>\n        </view-state>\n</flow>\nThe attributes attribute is a comma-separated list of Spring Security authorization attributes. Often, \nthese are specific security roles. But, when using a custom access decision manager, the syntax can vary; for \nexample, SpEL can be used when the custom access manager is a Spring bean that supports them.\nSpring Security is a wide subject; if you intend to use it in your projects, there is a lot of good \ndocumentation available online. Often, complete code samples are provided to help the curious developer \nunderstand how it works and how to use it. And, of course, the starting point is the Spring Security Reference \nat http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/. All that is \ncovered in this book should suffice in helping a developer understand the basic concepts that might be in \nthe certification exam. \nSpring Security with OAuth\nOAuth15 is an open standard for authorization. It is an open protocol to allow secure authorization in a \nsimple and standard method for web, mobile, and desktop applications. It is designed to work with HTTP \nand basically allows access tokens to be generated by a server, which can then be used by the client to access \nresources on another server. It’s like there is an authentication provider that guarantees that you are who you \nsay you are (it vouches for you) to a different service provider.\nWhen talking about OAuth2 (because it is the most commonly used at the moment), the following \ncomponents need to be mentioned:\n•\t Resource owner: An entity that grants or denies access to a protected resource.\n•\t Resource server: The server that hosts protected resources; it is capable of accepting \nand responding to requests done with an access token.\n•\t Client: The entity that requests protected resources on behalf of the owner. It can be \na web application, a mobile application, or a client-side application (JavaScript).\n•\t AuthorizationServer: A server that provides access tokens to the client after a \nsuccessful authentication.\n15The project’s official page is at http://projects.spring.io/spring-security-oauth/.\n353",
          "tables": [],
          "code_blocks": [
            "<view-state id=\"enterPersonInfo\" model=\"person\">\n                ...\n                 <transition on=\"next\" to=\"isNewPerson\" >\n                 <secured attributes=\"ROLE_ADMIN\" />\n                 </transition>\n        </view-state>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 366,
          "text": "Chapter 7 ■ Spring Web FloW\nFor example, if you have a Google account, you can install Runtastic (a sport tracker application) on \nyour phone and access that application using your Google account without exposing the Google password \nprocess, as shown in Figure 7-26.\nFigure 7-26.  Google as authentication provider for Runtastic\nIn the previous example, Google is the authorization server, the user is the client, the Runtastic \napplication is the resource owner/resource server. But most applications—like Facebook, Twitter, LinkedIn, \nand GitHub—implement the authorization and resource server role.\nCurrently, Spring Security can be integrated with OAuth (1a) and OAuth2. A library is provided for each \nversion; it needs to be included in the classpath of the application: spring-security-oauth for OAuth(1a) \nand spring-security-oauth2 for OAuth2. OAuth is a simple way to publish and interact with protected \ndata. A lot of information about OAuth and what it can be used for can be found by searching the Internet. \nThe main idea is that using OAuth can give certain resources access without providing a username and \npassword to the server.\nTo configure a Spring application as an authorization server, in a @Configuration class \nextending org.springframework.security.oauth2.config.annotation.web.configuration.\nAuthorizationServerConfigurerAdapter, the configure method must be overridden with \nan implementation that sets up the clients that can access the server. Extending the previously \nmentioned class provides empty method implementations for definitions inherited from the \nAuthorizationServerConfigurer interface (same package as the implementing class), making the job \neasier for the developer. The class must be annotated with @EnableAuthorizationServer, which is a \nconvenient annotation provided by Spring to enable an authorization server.\nAlso, the Spring Security authentication manager (configured in the Spring Security configuration class \nannotated with @EnableWebSecurity) is injected here to secure the authorization end point.\nimport o.s.security.oauth2.config.annotation.web.configuration.*;\nimport o.s.security.oauth2.config.annotation.web.configurers.*;\n \n @Configuration\n @EnableAuthorizationServer\n protected static class OAuth2Config extends AuthorizationServerConfigurerAdapter {\n        @Autowired\n        private AuthenticationManager authenticationManager;\n \n354",
          "tables": [],
          "code_blocks": [
            "@Autowired\n        private AuthenticationManager authenticationManager;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 367,
          "text": "Chapter 7 ■ Spring Web FloW\n        @Override (1)\n        public void configure(AuthorizationServerEndpointsConfigurer endpoints)\n             throws Exception {\n             endpoints.authenticationManager(authenticationManager);\n       }\n \n       @Override (2)\n       public void configure(ClientDetailsServiceConfigurer clients)\n            throws Exception {\n         clients.inMemory()\n             // client Id is used by OAuth to identify the client\n             .withClient(\"client-with-secret\")\n             // grant types that are authorized for the client to use,\n             //by default value is empty.\n            .authorizedGrantTypes(\"password\", \"client_credentials\")\n            // roles that client must have in order to access the resource\n            .authorities(\"ROLE_USER\")\n            //comma separated rights to the resource, by default none is specified\n            .scopes(\"read\", \"trust\")\n            //The secret associated with the resource, by default, no secret is empty\n            .secret(\"12#23$\");\n        }\n}\nThe first configure method (1) injects the Spring Security authentication manager (set up in  \n@EnableWebSecurity as in normal Spring Security), which is needed for the password grant defined tin the \nsecond method.\nThe second configure method (2) sets up the clients that can access the server, and their properties.\nTo implement the resource server, another configuration class is needed; this one must be annotated \nwith @EnableResourceServer, which is a convenient annotation for OAuth2 resource servers, enabling a \nSpring Security filter that authenticates requests via an incoming OAuth2 token. The class is recommended \nto extend the org.springframework.security.oauth2.config.annotation.web.configuration.\nResourceServerConfigurerAdapter, which provides empty implementation for methods inherited from the \nResourceServerConfigurer interface (same package), making a developer’s job easier.\nimport o.s.security.oauth2.config.annotation.web.configuration.*;\nimport o.s.security.oauth2.config.annotation.web.configurers.*;\n \n@Configuration\n@EnableResourceServer\nprotected static class ResourceServer extends ResourceServerConfigurerAdapter {\n \n        @Override\n        public void configure(HttpSecurity http) throws Exception {\n             http\n                .requestMatchers().antMatchers(\"/\",\"/admin/beans\").and()\n                .authorizeRequests()\n                .anyRequest().access(\"#oauth2.hasScope('read')\");\n        }\n}\n355",
          "tables": [],
          "code_blocks": [
            "@Override (1)\n        public void configure(AuthorizationServerEndpointsConfigurer endpoints)\n             throws Exception {\n             endpoints.authenticationManager(authenticationManager);\n       }\n \n       @Override (2)\n       public void configure(ClientDetailsServiceConfigurer clients)\n            throws Exception {\n         clients.inMemory()\n             // client Id is used by OAuth to identify the client\n             .withClient(\"client-with-secret\")\n             // grant types that are authorized for the client to use,\n             //by default value is empty.\n            .authorizedGrantTypes(\"password\", \"client_credentials\")\n            // roles that client must have in order to access the resource\n            .authorities(\"ROLE_USER\")\n            //comma separated rights to the resource, by default none is specified\n            .scopes(\"read\", \"trust\")\n            //The secret associated with the resource, by default, no secret is empty\n            .secret(\"12#23$\");\n        }",
            "@Override\n        public void configure(HttpSecurity http) throws Exception {\n             http\n                .requestMatchers().antMatchers(\"/\",\"/admin/beans\").and()\n                .authorizeRequests()\n                .anyRequest().access(\"#oauth2.hasScope('read')\");\n        }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 368,
          "text": "Chapter 7 ■ Spring Web FloW\nThe configure method is used to set up resources for OAuth2 protection. Access to the resources is \nset up using the HttpSecurity bean, which is not something new, as it was used in previous examples to \nsecure resources. But what is new here is the fact that access to resources can be configured using Spring \nSecurity Expressions that are applied on the oauth2 security object. For example, the expression #oauth2.\nhasScope('read') tests the resource reading rights for the client the oauth2 object is associated with. The \nexpression handler is enabled by the @EnableResourceServer annotation.\nThe authorization and resource server application is usually an application that receives REST requests; \nthere is really no need for an interface of any kind. The client application can be any type of application, but \nmost of the time it is a web or mobile application.\nWhen opening the Runtastic site or mobile application, a method of authentication can be selected. If \nauthentication using a Google account is selected, the user must provide its Google credentials, which are \nsent to the Google authentication server to confirm their validity and send the confirmation to Runtastic. \nBut Runtastic needs to access the user account information and use it to customize its interface to the user’s \npreferences on the Google account. The confirmation received earlier is actually an access code that can be \nused to exchange for an access token that defines what information Google is willing to share about the user.\nTechnically speaking, the OAuth2 interaction between a web application and an authorization server \nimplies the following steps:\n  1.  User accesses the web client application. The web client application redirects \nthe user to the authorization server. The user logs in and the authorization server \napproves client access to the resource.\n  2.  Authorization redirects back to the web client with the access code\n  3.  The web client application exchanges the access code for the access token from \nthe authorization server.\n  4.  The web client application uses the access token to get resources from the \nresource server.\nSpring Security OAuth is not part of the certification exam as this book is being written, but most web \nand mobile applications require integration with popular social network applications and OAuth is the \ncommunication protocol that makes this interaction quite practical and easier for the end user. So it is best \nto have a basic idea on how this can be done. If you are interested in expanding your knowledge about it, \nthere are some very good resources available at projects.spring.io/spring-security-oauth/docs/\noauth2.html.\nSpring Social Projects\nThe beginning of this book presented a list of the Spring projects currently in development. By the time \nthis book is published, that list will likely be deprecated: some of the projects were dropped, some were \nsplit into smaller projects, and some matured into solid frameworks. One the projects that matured into a \nsolid framework is Spring Social, which provides an API to connect Spring applications to third-party APIs \nfor social networks like Facebook, Twitter, and others. In the century of Web 2.0 and Big Data, connecting \napplications and sharing information in a practical way is a necessity. So Spring decided to start this project \nto help web applications developed in Spring integrate with SaaS (Software as a Service) API providers \nsuch as Facebook, Twitter, and LinkedIn. Currently under work, there are also integration modules for \nGitHub and Tripit. The communication is done using the service type provided by any of the mentioned \napplications. Most of them use REST. Facebook uses its own type of communication called the Facebook \nGraph. Figure 7-27 depicts all Spring Social projects, the application they communicate with, and with which \nprotocol.\n356",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 369,
          "text": "Chapter 7 ■ Spring Web FloW\nFigure 7-27.  The Spring Social projects\nSpring Social provides a lot of features designed to make the process of connecting local user accounts \nto hosted provider accounts easy to implement: a controller that handles authorization between the Java/\nSpring application and the service provider, a controller that enables user authentication by signing into a \nservice provider, connection factory classes, real-time callback handlers, and much more.\nMore information on how Spring Social can be used is on the official page of this project at http://\nprojects.spring.io/spring-social/.\nSummary\nAfter completing this chapter, you should be able to\n•\t Describe what Web Flow is and what problems it solves.\n•\t Describe the Web Flow architecture.\n•\t Understand how Web Flow processes a request.\n•\t Configure Web Flow with Spring MVC.\n•\t Describe the typical flow implementation guidelines.\n•\t List the elements of a flow definition.\n•\t Define flows using the XML language.\n•\t Test flow execution outside the container.\n•\t Flow definition best practices.\n•\t Describe branching.\n•\t Describe an action-state and how it should be used.\n357",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 370,
          "text": "Chapter 7 ■ Spring Web FloW\n•\t Describe a decision state.\n•\t Describe how exceptions are handled in Spring Web Flow.\n•\t Describe and use subflows.\n•\t Describe and use flow inheritance.\n•\t Configure Spring Security using XML and Java Config.\n•\t Use Spring Security to secure parts of JSP pages and methods.\n•\t Use Spring Security to secure your flows.\nQuick Quiz\nQuestion 1: What problems can be avoided using flows for web navigation?\n•\t duplicate submissions\n•\t state collisions between browser windows\n•\t stale session state\n•\t none of the above\nQuestion 2: How do the DispatcherServlet and Spring MVC Flow Controller work together?\n•\t Spring MVC Flow Controller intercepts and resolves all requests\n•\t DispatcherServlet intercepts all requests and forwards the flow requests to the Flow \nController\nQuestion 3: What are the main components that need to be configured to have a working Web Flow \nenvironment?\n•\t a flow executor\n•\t a flow registry\n•\t a SecurityFlowExecutionListener bean\n•\t a flow adapter\n•\t a flow mapping\n•\t an MvcViewFactoryCreator creator\nQuestion 4: Which of the following affirmations is true about FlowExecutor?\n•\t It is the central facade and entry-point service interface into the Spring Web Flow \nsystem.\n•\t It does not need a FlowRegistry to function properly.\n•\t It handles managing flow executions.\n358",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 371,
          "text": "Chapter 7 ■ Spring Web FloW\nQuestion 5: Which of the following affirmations is true about FlowDefinitionRegistry?\n•\t To configure a Spring Web Flow environment, a bean of this type is not mandatory.\n•\t It requires a mandatory FlowBuilderServices bean as an argument so it can be \ninstantiated.\n•\t It is a container of flow definitions.\nQuestion 6: What can you say about the following code snippet?\n<button id=\"newPersonButton\" name=\"_eventId_proceed\" type=\"submit\">\n             <spring:message code=\"command.proceed\" />\n</button>\n•\t It is the JSP definition of a button used to resume a flow that has an event named \nproceed associated with it.\n•\t It is a simple JSP definition of a button that is named _eventId_proceed.\n•\t It is a simple JSP definitiod of a button used to submit a form.\nQuestion 7: How many requests does a flow interaction imply?\n•\t one\n•\t two\n•\t three\n•\t none, because it uses session\nQuestion 8: What can be said about the following web flow configuration class?\n @Configuration\n  public class WebFlowConfig {\n   ...\n}\n•\t To be valid, the @EnableWebFlows is necessary.\n•\t The class could extend the AbstractFlowConfiguration class that is provided by \nSpring Web Flow  to provide access to builders for the Web Flow environment.\nQuestion 9: What can be said about the FlowController?\n•\t It is the controller that intercepts and resolves flow requests.\n•\t It is the adapter between the Spring MVC Controller layer and the Spring Web Flow \nengine\n•\t It should be configured by the developer to define how flow requests are handled.\n359",
          "tables": [],
          "code_blocks": [
            "<spring:message code=\"command.proceed\" />"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 372,
          "text": "Chapter 7 ■ Spring Web FloW\nQuestion 10: Which of the following are elements of a flow definition?\n•\t beans\n•\t states\n•\t transitions\n•\t converters\n•\t data\nQuestion 11: Which of the following are valid states types in a flow definition?\n•\t start state\n•\t action state\n•\t decision state\n•\t view state\n•\t persistence state\n•\t end state\n•\t conversion state\nQuestion 12: Which of the following affirmations is true about a flow definition?\n•\t It must have exactly one end state.\n•\t It must have at least one decision state.\n•\t It can have as many end states as the logic requires.\n•\t It is a flow defined in a single XML file.\nQuestion 13: What triggers a transition?\n•\t user events in view states\n•\t user events in any kind of state\n•\t the result of evaluation an expression in an action and decision state\nQuestion 14: Which of the following is true?\n•\t A flow definition has its own internationalization resources.\n•\t Each view state has a corresponding view.\n•\t Decisions states are more complex view states.\n360",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 373,
          "text": "Chapter 7 ■ Spring Web FloW\nQuestion 15: Consider the following flow definition:\n<view-state id=\"enterIdentityCardInfo\" model=\"identityCard\">\n     <binder>\n         ...\n   </binder>\n   <transition on=\"save\" to=\"confirmAdult\">\n      <evaluate expression=\"personBuilder.savePersonEntity(person, identityCard)\"\n          result=\"flowScope.existingPerson\" />\n   </transition>\n</view-state>\nWhich of the following is true?\n•\t The view template logical name is the same with the view state id, \nenterIdentityCardInfo in this case.\n•\t The view template logical name can be anything as long as it is linked in the web flow \nconfiguration file or class to the state id.\n•\t Transitioning to the confirmAdult can be prevented by an exception being thrown \nwhen executing the personBuilder.savePersonEntity expression.\nQuestion 16: What can you say about global transitions?\n•\t Only one can be declared in a web flow definition\n•\t One or more can be declared in a web flow definition\n•\t It is a transition type that can be used to cancel the flow execution at any point in the \nexecution\nQuestion 17: Choose the proper order of the following steps in creating a flow:\n  1.  Add the actions and states behavior.\n  2.  Create mock views to test the connection of the states.\n  3.  Define view states and end states.\n  4.  Define transition between states.\n•\t 4, 1, 3, 2\n•\t 3, 4, 2, 1\n•\t 3, 4, 1, 2\n•\t 1, 3, 4, 2\nQuestion 18: Which of the following affirmations are true about testing web flows?\n•\t The test class must be annotated with @RunWith(SpringJUnit4ClassRunner.class).\n•\t The test class must extend the AbstractXmlFlowExecutionTests.\n•\t Mock views can be used to test the flow navigation during development.\n361",
          "tables": [],
          "code_blocks": [
            "<binder>\n         ...\n   </binder>\n   <transition on=\"save\" to=\"confirmAdult\">\n      <evaluate expression=\"personBuilder.savePersonEntity(person, identityCard)\"\n          result=\"flowScope.existingPerson\" />\n   </transition>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 374,
          "text": "Chapter 7 ■ Spring Web FloW\nQuestion 19: Which of the following is true about flow scope?\n•\t This scope is shared between parent flows and subflows.\n•\t This scope lasts until the flow ends.\n•\t Flow scoped variables can be declared by evaluate elements in the following \nmanner:\n<evaluate expression=\"service.computeResult()\"\n     result=\"flowScope.result\" />\nQuestion 20: Which of the following is true about view scope?\n•\t View scoped variables are available to all view states.\n•\t View scoped variables can only be defined inside a view-state element.\n•\t View scoped variables are created when entering the view state and destroyed when \ntransition to the next flow occurs.\nQuestion 21: Which of the following is true about request scope?\n•\t Request scope lasts for only one request.\n•\t This scope is useless; it exists just for compatibility with request-response \nmechanisms on the Web.\n•\t Variables in this scope can be used for view initialization.\n•\t Variables in this scope are fetched only once, and subsequent browser refresh \nbutton-pressing won’t affect the initial fetched value.\nQuestion 22: Which of the following is true about flash scope?\n•\t This scope lasts for the entire flow.\n•\t This scope lasts for the entire flow, but is cleared every time a view is rendered, \nmaking it perfect for exchanging data between flow execution steps.\n•\t This scope involves two requests.\nQuestion 23: Which of the following is true about conversation scope?\n•\t This scope is the widest web flow scope.\n•\t Variables defined in this scope are available to subflows too.\n•\t Variables defined in this scope introduce a dependency between subflows and \nparent flows.\nQuestion 24: Considering the following two code snippets:\n1. <flow ...>\n          <on-start>\n              <evaluate expression=\"hospitalManager.findAll()\"\n                  result=\"flowScope.hospitalList\" />\n           </on-start>\n      <view-state id=\"enterPersonInfo\" model=\"person\">\n           ...\n     </view-state>\n   </flow>\n \n362",
          "tables": [],
          "code_blocks": [
            "result=\"flowScope.result\" />",
            "<on-start>\n              <evaluate expression=\"hospitalManager.findAll()\"\n                  result=\"flowScope.hospitalList\" />\n           </on-start>\n      <view-state id=\"enterPersonInfo\" model=\"person\">\n           ...\n     </view-state>\n   </flow>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 375,
          "text": "Chapter 7 ■ Spring Web FloW\n2. <flow ...>\n      <view-state id=\"enterPersonInfo\" model=\"person\">\n           <on-render>\n              <evaluate expression=\"hospitalManager.findAll()\"\n                  result=\"requestScope.hospitalList\" />\n           </on-start>\n     </view-render>\n   </flow>\nWhich of the code snippets is recommended to initialize a hospital list when the enterPersonInfo view \nis rendered?\n•\t 1, because the hospitalList should be initialized only once\n•\t 2, because the hospitalList should be refetched every time the enterPersonInfo \nview is rendered, so the most recent information is available in the flow execution\n•\t either of them\nQuestion 25: At which points in the flow can actions be executed?\n•\t on flow start\n•\t on state entry\n•\t on view render\n•\t on transition execution\n•\t during transition execution\n•\t on state exit\n•\t on flow end\n•\t after flow end\nQuestion 26: Which of the following Spring expressions are valid?\n•\t <evaluate expression=\"searchService.suggestHospital(externalContext.\nsessionMap.mostUsed)\"result=\"viewScope.hospitals\" />\n•\t <set name=\"flowScope.personName\" value=\"sessionScope.name\" />\n•\t <set name=\"flashScope.successMessage\" value=\"resourceBundle.\nsuccessMessage\" />\nQuestion 27: Which of the following are valid types for an action state?\n•\t Boolean, true or false\n•\t Boolean, always just “yes” or “no”\n•\t Any value that evaluates to “success”\n•\t Any String that can be matched to a trigger event name\n363",
          "tables": [],
          "code_blocks": [
            "<view-state id=\"enterPersonInfo\" model=\"person\">\n           <on-render>\n              <evaluate expression=\"hospitalManager.findAll()\"\n                  result=\"requestScope.hospitalList\" />\n           </on-start>\n     </view-render>\n   </flow>"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 376,
          "text": "Chapter 7 ■ Spring Web FloW\nQuestion 28: Select the way in which a developer can define an action.\n•\t Extend the Action class\n•\t Extend the MultiAction class\n•\t Add call business methods directly in the web flow definition\nQuestion 29: What can be said about authentication and authorization?\n•\t They are tightly coupled, changing configuration for authentication will require \nchanges in the authorization configuration as well.\n•\t They are fully decoupled; changing configuration for authentication will not affect \nauthorization.\n•\t They are both synonyms for application security.\nQuestion 30: What is needed to configure Spring Security with Spring MVC using Java Configuration?\n•\t The security beans AuthenticationManager and HttpSecurity have to be defined in \na class annotated with @Configuration.\n•\t Create a class that extends AbstractSecurityWebApplicationInitializer to \nregister the springSecurityFilterChain.\n•\t Create a configuration class that extends WebSecurityConfigurerAdapter that is \nannotated with EnableWebSecurity.\n•\t Add the Security configuration class to the root context.\nPractical Exercise\nThe practical exercise for this chapter involves configuring Spring Security. The project you have to complete \nis named 14-pr-web-security-practice. The project contains a view named login.jsp, which is a custom \nlogin form designed to work with Spring Security 4. There are a few TODO tasks that you must be able to \ncomplete if you have been paying enough attention when reading the Security section.\nThe first one, (TODO 47) requests you to add a new filter of type org.springframework.web.filter.\nDelegatingFilterProxy with the filter name springSecurityFilterChain. The class that will do this is \nalready in place and is called com.pr.init.SecurityWebApplicationInitializer; you just have to modify \nit to register the filter. Afterward, you can start the application using the appStart Gradle task for this \nsubmodule project; for reference, see Figure 7-28.\n364",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 377,
          "text": "Chapter 7 ■ Spring Web FloW\nFigure 7-28.  Reference for subproject\nYou are not done yet, though. When starting the application, you see in the console that there was some \ntrouble creating your security context and your login page is not visible. This is what you should see in the \nconsole:\n00:35:40 WARN Failed startup of context o.a.g.JettyWebAppContext@2da59753\n{/security,file:\n/.../personal-records/14-pr-web-security-practice/build/inplaceWebapp/,STARTING}\n...\nCaused by: java.lang.IllegalArgumentException: An AuthenticationManager is required\n        at org.springframework.util.Assert.notNull(Assert.java:115) ~na:na\n...\nIf you remember, the security section well, you already suspect what is missing. The previous task just \ndefines the filter. Now you need to create a Spring Security configuration class to provide your users their \nroles and overall details such as the location of the login form, if a CSRF token is used. All this is marked \nas TODO 48. A part of the class is already set up for you, providing the bean that generates a CSRF token. \nYou can find the partial implementation in com.pr.config.SecurityConfig. The comments in the TODO \ntask instruct you on what is further needed. After all the configuration is in place, you can try to start the \napplication again. And unfortunately, it won’t start. This is what you see if you try to open  \nhttp://localhost:8080/security/.\nHTTP ERROR 500\nProblem accessing /security/auth. Reason:\n    Server Error\nCaused by:\norg.springframework.web.util.NestedServletException:\nRequest processing failed; nested exception is java.lang.IllegalStateException:\nNo WebApplicationContext found: no ContextLoaderListener registered?\n365",
          "tables": [],
          "code_blocks": [
            "at org.springframework.util.Assert.notNull(Assert.java:115) ~na:na",
            "Server Error"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 378,
          "text": "Chapter 7 ■ Spring Web FloW\nThis is because there is still one little detail to take care of: adding the SecurityConfig class to \nthe root context of the application. To do this, go to com.pr.init.WebInitializer and complete the \ngetRootConfigClasses method body (TODO 49). After restarting the application, you should see something \nreally similar to Figure 7-29.\nFigure 7-29.  The login form displayed when Spring Security is properly configured\nIf the previous task is resolved correctly, the login form should be visible. But wait, the New Person \nmenu option is visible. You want only users with the ADMIN role to see that menu item. Something is clearly \nmissing. So go to 14-pr-web-security-practice/src/main/webapp/WEB-INF/templates/layout.jsp and \nsecure that menu item. Do not forget to reference the proper taglib!\nAfter solving the last TODO item, the New Person menu item should not be visible on the main page \nwhen a user is not logged in. Log in using john. If you see the New Person link, something is wrong in the \nconfiguration of the HttpSecurity, because john has a USER role, and only users with an ADMIN role can \nview and access that menu item. Log in with jane or admin. If you see that option, then your configuration is \ncorrect and you have completed this lab.\nAs a bonus exercise, try playing with the security tag library and use the URL to configure access. Or \nremove the tag altogether and secure the flow.\nThe proposed solution can be found in subproject 14-pr-web-security-solution. Try not to look \nbefore developing your own solution, and use it only for comparison.\n366",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 379,
          "text": "Chapter 8\nSpring Boot and WebSocket\nAlthough they are not yet part of the certification exam, Spring Boot and Spring WebSocket are included \nin this book because of the potential that these two projects have in the future development of Spring Web \napplications.\nWhat Is Spring Boot?\nSpring Boot is a promising Spring project that makes it really easy for developers to create Spring-powered, \nproduction-grade applications and services. It makes configuration less of a hassle, offering complete, but \neasy-to-use defaults bits and pieces that you can stack up together like LEGO bricks. (Yes, the LEGO analogy \nagain.) Spring Boot can be used to create stand-alone Java applications or web applications and its primary \ngoals are to do the following:\n•\t Provide a faster, practical, and more accessible way to start development with Spring\n•\t Provide a default set of customized infrastructure beans, which can be easily \noverridden if a specific configuration is required\n•\t Provide a large set of features common to large classes of projects (embedded \nservers, security, metrics, etc.)\n•\t Offer the option of dropping any XML configuration or the necessity of generating code\nWhen developing web applications, a container is necessary. Usually, an application server or a web \nserver is necessary to run a web application.\nA web server like Apache HTTP, for example, is dedicated to sending HTML to the client and forwarding \nrequests to application servers. It handles only static resources.\nAn application server, like Apache Tomcat is built around a web server and is dedicated to the efficient \nexecution of program and routines; it supports different types of applications, load balancing, transaction \ndemarcation, and so forth; and it is specifically designed to handle dynamic resources.\nApache TomEE is a full-blown Java EE container and an application server based on Apache Tomcat. \nThis type of application server is also called an enterprise server because it is designed to support complex \napplications like ERPs.1\n1Enterprise resource planning (ERP) is business-management software. It is typically a suite of integrated applications \n(see https://en.wikipedia.org/wiki/Enterprise_resource_planning).\n367",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 380,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nThe Jetty server was used in the examples in this book. Jetty is an embedded server. Application/web \nservers are separate applications that you install, start up, maybe customize the configuration, and deploy \nyour artifact on. An embedded server does not need all that. An embedded HTTP server is software that \nimplements the HTTP protocol; it can be embedded into the application that you are developing. It is limited \nto handling HTTP requests and can be plugged in with the default configuration, or it can be customized. \nUp until now, the Jetty embedded server was plugged in at runtime by using the Gradle Gretty plugin. Using \nSpring Boot, this is no longer needed. All that is needed is to configure the spring-boot-starter-jetty as a \ncompile-time dependency for the application.\nUsage and Configuration\nA simple sample for this case is the 08-chapter-01-solution project, a module of book-code. If you open \nthe project, you will notice the following: \n•\t A new version element was added in the ext element of the Gradle configuration of \nthe build.gradle file (the book-code parent project):\nspringBootVersion = '1.2.7.RELEASE'\n•\t In the same file, a new dependencies array named boot was added:\nboot = [\n   springBootPlugin: \"org.springframework.boot:spring-boot-gradle-plugin:\n                                                  $springBootVersion\",\n   starterWeb      : \"org.springframework.boot:spring-boot-starter-web:\n                                                  $springBootVersion\",\n   starterJetty    : \"org.springframework.boot:spring-boot-starter-jetty:\n                                                  $springBootVersion\",\n   actuator         : \"org.springframework.boot:spring-boot-starter-actuator:\n                                                  $springBootVersion\",\n   yaml             : \"org.yaml:snakeyaml:1.16\"\n]\n•\t The Gradle configuration file for 08-chapter-01-solution has the following contents:\napply plugin: 'spring-boot'\n \nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath boot.springBootPlugin\n    }\n}\n \ndependencies {\n    compile (boot.starterWeb){\n        (*)exclude module : \"spring-boot-starter-tomcat\"\n    }\n    compile boot.starterJetty, boot.actuator, boot.yaml\n \n    testCompile misc.junit\n}\n368",
          "tables": [],
          "code_blocks": [
            "$springBootVersion\",\n   starterWeb      : \"org.springframework.boot:spring-boot-starter-web:\n                                                  $springBootVersion\",\n   starterJetty    : \"org.springframework.boot:spring-boot-starter-jetty:\n                                                  $springBootVersion\",\n   actuator         : \"org.springframework.boot:spring-boot-starter-actuator:\n                                                  $springBootVersion\",\n   yaml             : \"org.yaml:snakeyaml:1.16\"",
            "repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath boot.springBootPlugin\n    }",
            "compile (boot.starterWeb){\n        (*)exclude module : \"spring-boot-starter-tomcat\"\n    }\n    compile boot.starterJetty, boot.actuator, boot.yaml\n \n    testCompile misc.junit"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 381,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nAnd this is all. The Gradle Gretty plugin, was replaced by the Spring-Boot plugin that is needed for \nrunning Spring Boot applications. The default web runtime that Spring Boot uses (Tomcat) was excluded, \nand spring-boot-starter-jetty was added as a dependency using the variable assigned to the  \nboot.starterJetty library. This is enough to develop and run a simple web application.\n■ !  the spring-boot-starter-actuator added using the boot.actuator variable is not really necessary in the \nexamples for the book, but you need to know that this library exists. it should be used when you want to add \nproduction-ready features like metrics and monitoring to your application. also, if you look in the log after the \napplication starts, you will see a few lines that look like this:\nMapped \"{[/]}\" onto public java.lang.String com.book.web.\n       HelloWorldController.index()\nMapped \"{[/error],produces=[text/html]}\" onto public o.s.web.servlet.\n       ModelAndView\nMapped \"{[/beans],methods=[GET]}\" onto public java.lang.Object\nMapped \"{[/trace],methods=[GET]}\" onto public java.lang.Object\nMapped \"{[/metrics/{name:.*}],methods=[GET]}\" onto public java.lang.Object\no.s.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String)\napped \"{[/health]}\" onto public java.lang.Object\no.s.boot.actuate.endpoint.mvc.HealthMvcEndpoin\n     t.invoke(java.security.Principal)\nthese are a set of reStful endpoints added to the application to provide access to management services \nprovided by Spring Boot. try accessing http://localhost:8080/metrics or http://localhost:8080/health \nafter the application starts with the default configuration (otherwise, the port and the contextPath might be \ndifferent) and check out the data returned to you by Spring Boot.\nthe YaML dependency is covered later.\nThe core class of this application is the com.book.Application class:\n[commandchars=+\npackage com.book;\n \nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.ApplicationContext;\n \n@SpringBootApplication\npublic class Application {\n \n    public static void main(String args) {\n        ApplicationContext ctx = SpringApplication.run(Application.class, args);\n        assert(ctx!=null);\n    }\n \n}\n369",
          "tables": [],
          "code_blocks": [
            "HelloWorldController.index()",
            "ModelAndView",
            "t.invoke(java.security.Principal)",
            "public static void main(String args) {\n        ApplicationContext ctx = SpringApplication.run(Application.class, args);\n        assert(ctx!=null);\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 382,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nIf you run this class, you get a web application run on Jetty that is available at http://localhost:8080/. \nThe most important element in this class is the @SpringBootApplication annotation. Spring Boot code is \navailable to the public, and if you look for the annotation code on GitHub, this is what you will find: \npackage org.springframework.boot.autoconfigure;\n \n...// import statements\n \n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@Configuration\n@EnableAutoConfiguration\n@ComponentScan\npublic @interface SpringBootApplication {\n        /**\n         * Exclude specific auto-configuration classes\n           such that they will never be applied.\n         * @return the classes to exclude\n         */\n         Class<?> exclude() default {};\n \n}\nWhen placed on a class, this annotation has the following effect: \n•\t It indicates that this a configuration class that can be used to instantiate beans via  \n@Bean annotated methods (because this annotation is itself annotated with  \n@Configuration).\n•\t It triggers component scanning on the package in which the class is defined \n(because of the @ComponentScan annotation).\n•\t It automatically adds @EnableWebMvc when spring-webmvc is in the classpath. This \nis ensured by the spring-boot-starter-web being a dependency of this project. \nThis marks the application as a web application, so Spring Boot knows to set up a \nDispatcherServlet.\n•\t The @EnableAutoConfiguration annotation does exactly what the name of the \nannotation says: it enables the autoconfiguration of a Spring context. So Spring Boot \nwraps up a configuration by basically guessing which beans are necessary, given the \nlittle configuration there is. Autoconfiguration is quite intelligent and if some custom \nconfiguration is provided, the provided beans override the default ones that Spring \nBoot comes with.\nThe scope of this annotation is enriched, starting with Spring Boot 1.3.0, which wasn’t yet released \nwhen this book was written, but the code is available on GitHub.2\nThe preceding main method uses the SpringApplication.run convenient method to launch an \napplication. Thus, no XML was needed anywhere to create this web application. This method returns the \ncreated ApplicationContext instance. The created context is autowired into the HelloWorldController, \n2View the code at https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/\nsrc/main/java/org/springframework/boot/autoconfigure/SpringBootApplication.java\n370",
          "tables": [],
          "code_blocks": [
            "/**\n         * Exclude specific auto-configuration classes\n           such that they will never be applied.\n         * @return the classes to exclude\n         */\n         Class<?> exclude() default {};"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 383,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nwhich is a simple REST controller used to display all the beans in the context. In the spirit of keeping things \nsimple, a complex configuration involving a view resolver was avoided, because the scope of this module is \nto show the power of Spring Boot and what exactly it does in the background. The autowired context is used \nto create an HTML string that is rendered when accessing http://localhost:8080/ and shows the name of \nall the beans created by Spring Boot or defined in the application; thus, you can analyze what Spring Boot is \ndoing in the background. The simple controller looks like this:\n@RestController\npublic class HelloWorldController {\n    @Autowired\n    ApplicationContext ctx;\n \n    @RequestMapping(\"/\")\n    public String index() {\n        StringBuilder sb = new StringBuilder(\"<html><body>\");\n \n        sb.append(\"Hello there dear developer,\n           here are the beans you were looking for: </br>\");\n \n        String beanNames = ctx.getBeanDefinitionNames();\n        Arrays.sort(beanNames);\n        for (String beanName : beanNames) {\n            sb.append(\"</br>\").append(beanName);\n        }\n        sb.append(\"</body></htm>\");\n        return sb.toString();\n    }\n}\nThis is roughly what you see in the browser:\nHello there dear developer, here are the beans you were looking for:\n \nactuatorMetricRepository\napplication\napplicationContextIdFilter\nauditEventRepository\nauditListener\nautoConfigurationAuditEndpoint\nbasicErrorController\nbeanNameHandlerMapping\nbeanNameViewResolver\nbeansEndpoint\ncharacterEncodingFilter\nconfigurationPropertiesReportEndpoint\ncounterService\n...\nhealthEndpoint\nhealthMvcEndpoint\nhelloWorldController\n...\n371",
          "tables": [],
          "code_blocks": [
            "@Autowired\n    ApplicationContext ctx;\n \n    @RequestMapping(\"/\")\n    public String index() {\n        StringBuilder sb = new StringBuilder(\"<html><body>\");\n \n        sb.append(\"Hello there dear developer,\n           here are the beans you were looking for: </br>\");\n \n        String beanNames = ctx.getBeanDefinitionNames();\n        Arrays.sort(beanNames);\n        for (String beanName : beanNames) {\n            sb.append(\"</br>\").append(beanName);\n        }\n        sb.append(\"</body></htm>\");\n        return sb.toString();\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 384,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nOf course, the list is incomplete here—just a small snippet is depicted. You have to run the application \nyourself to see the complete list.\n■ !  and you can view the same list of beans in JSon format if you access the actuator service available at \nhttp://localhost:8080/beans.\nAlso, if you want to know where the implementation for these beans comes from, just look at the \ndependencies for your project in Gradle view in Intellij IDEA. You should see something similar to what is \ndepicted in Figure 8-1, but the list will be way bigger. \nFigure 8-1.  Transitive dependencies added by Spring Boot to a web application project\nSo far, only the default configuration inferred by Spring Boot has been presented. This application is \nroughly similar to the one in the official tutorial at https://spring.io/guides/gs/spring-boot/; but in this \nbook, things are spiced up a little.\n372",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 385,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nCustomizing Spring Boot\nThere are a few ways that Spring Boot configuration can be externalized”\n•\t use properties files\n•\t use YAML files\n•\t use environment variables\n•\t use command-line variables (when a Spring Boot command-line interface is \ninstalled)\nIn the previous example, the controller and the configuration class were in the same package, and by \ndefault, the configuration class annotated with SpringBootApplication scans only the current package and \nits subpackages. This can be changed by annotating the same class with @ComponentScan and specifying \ndifferent package groups.\nIn the 08-chapter-02-solution module, the Application was moved to the com.book.init package, \nand HelloWorldController was moved to com.book.web, as depicted in Figure 8-2.\nFigure 8-2.  Spring Boot with beans and configuration in different packages\nThe new configuration class code looks like this:\npackage com.book.init;\n \nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Import;\n \n373",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 386,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\n@SpringBootApplication\n@ComponentScan(basePackages = {\"com.book.*\"})\n//or @ComponentScan(basePackages = {\"com.book.init\", \"com.book.web\"})\npublic class Application {\n \n    public static void main(String args) {\n       SpringApplication.run(Application.class, args);\n    }\n}\nBut what if you want the application to be available on a different port and in a different context path? \nThere are a few ways to do this.\nThe simplest way is to create a customized bean class that implements the org.springframework.\nboot.context.embedded.EmbeddedServletContainerCustomizer interface and provides a concrete \nimplementation for the customize method:\npackage com.book.init;\n \nimport org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.stereotype.Component;\n \n/**\n * Created by iuliana.cosmina on 9/23/15.\n */\n@Component\npublic class CustomizationBean implements EmbeddedServletContainerCustomizer {\n    @Override\n    public void customize(ConfigurableEmbeddedServletContainer container) {\n        container.setPort(8083);\n        container.setContextPath(\"/boot\");\n    }\n}\nBy adding this bean to the configuration, the application can now be accessed at  \nhttp://localhost:8083/boot.\nAnother way to do this is by using a customized factory bean for \nJettyEmbeddedServletContainerFactory. Aside from port and contextPath, some settings for the \noptimization of the embedded Jetty server used to run the application can be provided. The @Bean annotated \nmethod that declares this bean can be added to any configuration class that is taken into consideration by \nSpring Boot.\npackage com.book.init;\n \nimport org.eclipse.jetty.server.Server;\nimport org.eclipse.jetty.util.thread.QueuedThreadPool;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.context.embedded.jetty.\n         JettyEmbeddedServletContainerFactory;\nimport org.springframework.boot.context.embedded.jetty.\n        JettyServerCustomizer;\n374",
          "tables": [],
          "code_blocks": [
            "public static void main(String args) {\n       SpringApplication.run(Application.class, args);\n    }",
            "@Override\n    public void customize(ConfigurableEmbeddedServletContainer container) {\n        container.setPort(8083);\n        container.setContextPath(\"/boot\");\n    }",
            "JettyEmbeddedServletContainerFactory;",
            "JettyServerCustomizer;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 387,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n \n/**\n * Created by iuliana.cosmina on 9/27/15.\n */\n@Configuration\npublic class JettyFactoryConfig {\n \n@Bean\n public JettyEmbeddedServletContainerFactory\n    jettyServletContainerFactory(@Value(\"${server.port:8085}\") final String port,\n        @Value(\"${jetty.threadPool.maxThreads:200}\") final String maxThreads,\n        @Value(\"${jetty.threadPool.minThreads:8}\") final String minThreads,\n        @Value(\"${jetty.threadPool.idleTimeout:60000}\") final String idleTimeout) {\n        final JettyEmbeddedServletContainerFactory factory =\n           new JettyEmbeddedServletContainerFactory(Integer.valueOf(port));\n        factory.setContextPath(\"/boot\");\n        factory.addServerCustomizers(new JettyServerCustomizer() {\n            @Override\n            public void customize(final Server server) {\n                // Customize the connection pool used by Jetty to handle\n                //incoming HTTP connections\n                final QueuedThreadPool threadPool =\n                     server.getBean(QueuedThreadPool.class);\n                threadPool.setMaxThreads(Integer.valueOf(maxThreads));\n                threadPool.setMinThreads(Integer.valueOf(minThreads));\n                threadPool.setIdleTimeout(Integer.valueOf(idleTimeout));\n            }\n        });\n        return factory;\n    }\n}\nBy adding this bean to the configuration, the application can now be accessed at  \nhttp://localhost:8085/boot.\nValues for the customizations can be provided, directly as done before, but they also can be provided \nusing properties files or YAML files. In order to provide the configuration via a properties file, a file named \napplication.properties has to be created and applied to the application from the outside, or it can be \npackaged in the jar. If multiple profiles are used, multiple files can be added. Their naming matches the \napplication-{profile}.properties template.\nSpringApplication looks for an application.properties file in the following locations, and adds them \nto the Spring environment:\n•\t a /config directory under the current directory\n•\t the current directory\n•\t a classpath /config package\n•\t the classpath root\n375",
          "tables": [],
          "code_blocks": [
            "jettyServletContainerFactory(@Value(\"${server.port:8085}\") final String port,\n        @Value(\"${jetty.threadPool.maxThreads:200}\") final String maxThreads,\n        @Value(\"${jetty.threadPool.minThreads:8}\") final String minThreads,\n        @Value(\"${jetty.threadPool.idleTimeout:60000}\") final String idleTimeout) {\n        final JettyEmbeddedServletContainerFactory factory =\n           new JettyEmbeddedServletContainerFactory(Integer.valueOf(port));\n        factory.setContextPath(\"/boot\");\n        factory.addServerCustomizers(new JettyServerCustomizer() {\n            @Override\n            public void customize(final Server server) {\n                // Customize the connection pool used by Jetty to handle\n                //incoming HTTP connections\n                final QueuedThreadPool threadPool =\n                     server.getBean(QueuedThreadPool.class);\n                threadPool.setMaxThreads(Integer.valueOf(maxThreads));\n                threadPool.setMinThreads(Integer.valueOf(minThreads));\n                threadPool.setIdleTimeout(Integer.valueOf(idleTimeout));\n            }\n        });\n        return factory;\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 388,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nBeing a resource file, application.properties must be located during development under  \nsrc/main/resources.\nThe preceding list is ordered by precedence, so Spring Boot looks for property files by traversing the list \nfrom top to bottom. The first properties file found is taken into consideration, and it does not matter if the \nsubsequent locations have a properties file defined.\nThe default name of the properties file is application.properties. Spring Boot looks for it, unless it \nwas changed by setting the environment variable named spring.config.name. \nThe location of the file can also be provided as the value for the environment variable named  \nspring.config.location.\nSo if the 08-chapter-02-solution application is packaged into a runnable jar called boot.jar, the \napplication could be run from the command line with the following arguments: \n#Spring Boot will search in the classpath for a file named boot.properties\n$ java -jar boot.jar --spring.config.name=boot\n \n#Spring Boot will read the properties the specified file\n$ java -jar boot.jar --spring.config.location=/Users/myuser/config/default.properties\nIn the preceding example, the file is saved under book-code/08-chapter-02-solution/src/main/\nresources and has the following contents:\n#application.properties\napp.port=8084\napp.context=/boot\nThese property values are injected using the @Value annotation into a customization bean that is picked \nup and used by Spring Boot. The application is then accessed at http://localhost:8084/boot.\npackage com.book.init;\n \nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.stereotype.Component;\n \n@Component\npublic class PropertiesConfBean implements EmbeddedServletContainerCustomizer {\n \n    @Value(\"${app.port}\")\n    private Integer value;\n \n    @Value(\"${app.context}\")\n    private String contextPath;\n \n    @Override\n    public void customize(ConfigurableEmbeddedServletContainer container) {\n        container.setPort(value);\n        container.setContextPath(contextPath);\n    }\n}\n376",
          "tables": [],
          "code_blocks": [
            "@Value(\"${app.port}\")\n    private Integer value;\n \n    @Value(\"${app.context}\")\n    private String contextPath;\n \n    @Override\n    public void customize(ConfigurableEmbeddedServletContainer container) {\n        container.setPort(value);\n        container.setContextPath(contextPath);\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 389,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nThe EmbeddedServletContainerCustomizer interface is used for customizing autoconfigured \nembedded servlet containers. Any beans of this type are instantiated and used to initialize the configuration \nof the embedded server before the container itself is started.\nWithout an EmbeddedServletContainerCustomizer bean, the contents of application.properties \nlook different, because they must match the standard property names3 that Spring Boot looks for, as follows:\n#application.properties\nserver.port=8084\nserver.context-path=/boot\nWhen the snakeyaml library is in the classpath, YAML files can be used instead of properties files. \nYAML is a well-known format within the Ruby community. It is a superset of JSON, and as such, it is \na very convenient format for specifying hierarchical configuration data. In the previous example, if \nthe application.properties file is replaced by application.yml, with the following contents, the \nbehavior will be exactly the same, because the internal org.springframework.beans.factory.config.\nYamlPropertiesFactoryBean converts the contents of the YAML file into the properties in the initial \napplication.properties file.\n#application.yml\napp:\n  port:8082\n  context:/boot\n■ !  Both application.properties and application.yml can be used in the same project, because for \nbigger projects, the configuration list could be quite large and migration could be a long duration process; it is \nconvenient to be able to do the migration gradually. Be careful not to have the same properties defined in both \nfiles, because if this happens, properties defined in application.properties take precedence.\nYAML properties can be used in a different way. A class can be designed to have its fields initialized \nfrom a YAML file. The following AppSettings class is such a class. \npackage com.book.init;\n \nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport javax.annotation.PostConstruct;\nimport javax.validation.constraints.NotNull;\n@ConfigurationProperties(prefix=\"app\")\npublic class AppSettings {\n \n    private static Logger logger = LoggerFactory.getLogger(AppSettings.class);\n \n    @NotNull\n    private Integer port;\n \n3The property names standard list for application.properties or application.yml is at http://docs.spring.io/\nspring-boot/docs/current/reference/htmlsingle/#common-application-properties.\n377",
          "tables": [],
          "code_blocks": [
            "private static Logger logger = LoggerFactory.getLogger(AppSettings.class);\n \n    @NotNull\n    private Integer port;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 390,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\n    @NotNull\n    private String context;\n \n    public Integer getPort() {\n        return port;\n    }\n \n    public void setPort(Integer port) {\n        this.port = port;\n    }\n \n    public String getContext() {\n        return context;\n    }\n \n    public void setContext(String context) {\n        this.context = context;\n    }\n \n    public AppSettings() {\n    }\n \n    @PostConstruct\n    public void check() {\n        logger.info(\"Initialized {} {}\", port, context);\n    }\n}\nThe annotation that allows this is @ConfigurationProperties, which marks a class to be used for \ninitialization with property values by the Spring DataBinder utilities. The advantage here is that usage of  \nthe @Value annotation and hard-coding the property names is avoided. Validators can also be added on  \nthe fields (notice the @NotNull annotations).\nThe prefix attribute is used to refer to the parent element in the YAML file. This bean is then autowired \ninto the YamlConfBean, which uses its properties as needed. \npackage com.book.init;\n \nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;\nimport org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\nimport org.springframework.stereotype.Component;\n \n@Component\npublic class YamlConfBean implements EmbeddedServletContainerCustomizer {\n \n    @Autowired\n    private AppSettings appSettings;\n \n378",
          "tables": [],
          "code_blocks": [
            "@NotNull\n    private String context;\n \n    public Integer getPort() {\n        return port;\n    }\n \n    public void setPort(Integer port) {\n        this.port = port;\n    }\n \n    public String getContext() {\n        return context;\n    }\n \n    public void setContext(String context) {\n        this.context = context;\n    }\n \n    public AppSettings() {\n    }\n \n    @PostConstruct\n    public void check() {\n        logger.info(\"Initialized {} {}\", port, context);\n    }",
            "@Autowired\n    private AppSettings appSettings;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 391,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\n    @Override\n    public void customize(ConfigurableEmbeddedServletContainer container) {\n        container.setPort(appSettings.getPort());\n        container.setContextPath(appSettings.getContext());\n    }\n}\nFor Spring Boot to know to create and initialize a bean of type AppSettings, a modification must be \nmade to the Application class. The @EnableConfigurationProperties (AppSettings.class) annotation \nmust be added to the class definition at the same level as @SpringBootApplication. If the class name \n(AppSettings in this case) is not specified in the annotation, Spring Boot will scan, create, and initialize \nbeans of all classes annotated with ConfigurationProperties. \npackage com.book.init;\n \nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.ComponentScan;\n \n@SpringBootApplication\n@ComponentScan(basePackages = {\"com.book.init\", \"com.book.web\"})\n@EnableConfigurationProperties(AppSettings.class)\npublic class Application {\n \n    public static void main(String args) {\n        SpringApplication.run(Application.class, args);\n    }\n \n}\nWhen using Spring Boot, a Spring ASCII banner is printed in the console at application startup, like the \none shown in Figure 8-3.\nFigure 8-3.  Spring Boot console banner\n379",
          "tables": [],
          "code_blocks": [
            "@Override\n    public void customize(ConfigurableEmbeddedServletContainer container) {\n        container.setPort(appSettings.getPort());\n        container.setContextPath(appSettings.getContext());\n    }",
            "public static void main(String args) {\n        SpringApplication.run(Application.class, args);\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 392,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nThis too can be customized. The instructions can be found in the official documentation at  \nhttp://docs.spring.io/spring-boot/docs/1.2.6.RELEASE/reference/htmlsingle/#boot-features-banner. \nA banner.txt file needs to be created under the resources directory; a text-to-ASCII generator should be \nused to create the desired banner. The one presented in module 08-chapter-03-solution is shown  \nin Figure 8-4.\nFigure 8-4.  Apress Spring Boot console banner\nImporting Additional Configuration Elements\nIf an application is migrated to Spring Boot, a lot of the configuration classes and even XML configuration \nelements can be imported into the Spring Boot configuration class. Additional configuration classes \ncan be imported using the @Import annotation or by adding a @ComponentScan to the Spring Boot core \ninitialization class (the one with the main method in it) and setting the basePackages attribute value with \nthe package name where the class can be found, which ensures that Spring automatically picks up all Spring \ncomponents, including @Configuration classes.\nXML configuration can be imported using the @ImportResource annotation, as the Spring Boot \ninitialization class is nothing more than a more complex @Configuration class.\nif you are using a Unix system, you can also test the examples attached to the chapter using the curl \ncommand. Just open a console and execute:\ncurl localhost:8080/boot\n#modify port or contextPath accordingly\nin the console, you should see an output similar to what you see in the browser.\n380",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 393,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nRunning Spring Boot Applications\nThe main difference between using Spring Boot and developing web applications in the typical way is that \nwhen the Gradle spring-boot plugin is used, a web archive (*.war) is no longer created, because there is no \nneed for it. The war file is strictly a deployable file that needs to be run using a web server or an application \nserver. Spring Boot can be used to have an embedded server in the application. So when the Gradle \nspring-boot plugin is used instead of a war, an executable Java archive (*.jar) is created.\nThe created archive can be found under the [project_root]/build/libs and can be executed just \nlike any jar. In the 08-chapter-03-solution.gradle configuration file, there is the line jar.archiveName = \n\"boot.jar\", which is used to specify the name of the final archive. Without it, the name of the resulting jar \nwould be 08-chapter-03-solution.jar, which is long and unpractical.\nTo build the project, create the jar and then execute the application. The following lines can be executed \nin the console (shell or command prompt):\n#this will work only if you have Gradle installed on the system\n$ gradle clean build\n$ java -jar build/libs/boot.jar\nBut what if we want the result to be a web archive that should be deployed on an application server or a \nweb server? That can be done too, in three simple steps:\n  1.  Modify the application to provide a Servlet initializer for the servlet environment. \nThis is done by making the class annotated with @SpringBootApplication to \nextend the Spring Boot convenient class org.springframework.boot.context.\nweb.SpringBootServletInitializer and overriding its configure method:\n@SpringBootApplication\n@ComponentScan(basePackages = {\"com.book.init\", \"com.book.web\"})\n@EnableConfigurationProperties(AppSettings.class)\npublic class Application extends SpringBootServletInitializer {\n \n    @Override\n    protected SpringApplicationBuilder\n          configure(SpringApplicationBuilder application) {\n        return application.sources(Application.class);\n    }\n \n    public static void main(String args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n  2.  Leave all the Spring Boot components as dependencies, but use the Gradle  \nwar plugin. (Basically, replace apply plugin: 'spring-boot' with apply \nplugin: 'war'.)\n381",
          "tables": [],
          "code_blocks": [
            "@Override\n    protected SpringApplicationBuilder\n          configure(SpringApplicationBuilder application) {\n        return application.sources(Application.class);\n    }\n \n    public static void main(String args) {\n        SpringApplication.run(Application.class, args);\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 394,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\n  3.  Set the embedded server dependency as provided:\napply plugin: 'war'\nwar.archiveName = \"boot.war\"\n \nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n \n    dependencies {\n        classpath boot.springBootPlugin\n    }\n}\n \ndependencies {\n \n    compile (boot.starterWeb){\n        exclude module : \"spring-boot-starter-tomcat\"\n    }\n    compile boot.actuator, boot.yaml\n    providedCompile boot.starterJetty\n    //previous 2 lines replaced:\n    //compile boot.starterJetty, boot.actuator, boot.yaml\n \n    testCompile misc.junit, misc.hamcrestCore,\n        misc.hamcrestLib, boot.starterTest\n}\nAfter these changes, if the project is built under the build/libs directory, a boot.war should be created \nthat can be deployed on any web or application server.\n■ !  try to modify the configurations for the 08-chapter-03-solution to create a deployable war, as \ndescribed before. You can use Jetty to run the war on by adding the gretty plugin that was used in the examples \nfor this book until Spring Boot was introduced, by adding\napply from:\n  'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'\nin the 08-chapter-03-solution.gradle file, and then running the appStart gradle task.\nWhen deploying the war to an application server or a web server, keep in mind that the relevant embedded \nserver settings read from the application.yml file are ignored (because they are relevant only to Spring \nBoot) when a class annotated with @SpringBootApplication is used to run the application; so the application \nis available on the port and location that you set for that server. When using gretty, the location that your \napplication can be accessed is printed in the console log.\n...\nINFO Jetty 9.2.10.v20150310 started and listening on port 8080\nINFO 08-chapter-03-solution runs at:\nINFO   http://localhost:8080/08-chapter-03-solution\n...\n382",
          "tables": [],
          "code_blocks": [
            "repositories {\n        mavenCentral()\n    }\n \n    dependencies {\n        classpath boot.springBootPlugin\n    }",
            "compile (boot.starterWeb){\n        exclude module : \"spring-boot-starter-tomcat\"\n    }\n    compile boot.actuator, boot.yaml\n    providedCompile boot.starterJetty\n    //previous 2 lines replaced:\n    //compile boot.starterJetty, boot.actuator, boot.yaml\n \n    testCompile misc.junit, misc.hamcrestCore,\n        misc.hamcrestLib, boot.starterTest"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 395,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nTesting Spring Boot Applications\nApplications built with Spring Boot can be tested using unit tests. Spring Boot provides a library to do just \nthat in the most practical manner possible. It is called spring-boot-starter-test. It must be added as a \ndependency of the project to use it.\nAs for common Spring Web applications, the servlet context must be mocked, and only the controller \nbehavior is tested. The HelloWorldController is too simple to test, so a proper one is needed.\n@RestController\npublic class MessageController {\n \n    @Value(\"${app.message:Hello World}\")\n    private String message = \"Hello World\";\n \n    @RequestMapping(\"/message\")\n    public String message(){\n        return message;\n    }\n}\nThe default value for the message property is set to Hello World, if it is not present in the application.yml file:\napp:\n  port: 8084\n  context: /boot\n  message: Testing, is this thing on?\nThe class to instantiate and test this controller in a mock environment looks like this:\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.springframework.test.web.servlet.result.\n    MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.\n      MockMvcResultMatchers.status;\n \nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.http.MediaType;\nimport org.springframework.mock.web.MockServletContext;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n \n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = MockServletContext.class)\n@WebAppConfiguration\npublic class MessageControllerTest {\n \n383",
          "tables": [],
          "code_blocks": [
            "@Value(\"${app.message:Hello World}\")\n    private String message = \"Hello World\";\n \n    @RequestMapping(\"/message\")\n    public String message(){\n        return message;\n    }",
            "MockMvcResultMatchers.content;",
            "MockMvcResultMatchers.status;"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 396,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\n    private MockMvc mvc;\n \n    @Before\n    public void setUp() throws Exception {\n        mvc = MockMvcBuilders.standaloneSetup(new MessageController()).build();\n    }\n    @Test\n    public void getMessage() throws Exception {\n        mvc.perform(MockMvcRequestBuilders.get(\"/message\")\n          .accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(content().string(equalTo(\"Hello World\")));\n        // testing the default value for this field\n    }\n}\nThe MockServletContext is used as argument for the @SpringApplicationConfiguration annotation, \nwhich provides a mock context where the MessageController can be instantiated. The MockMvcBuilders \nutility class is used to instantiate the controller instance that is to be tested.\nIn Chapter 3, MockitoJUnitRunner.class was used to test a controller, but the Spring Test library offers \nmore appropriate and intuitive methods, especially for REST controllers.\nThe MockMvc should be familiar from Chapter 3. It is used here for the same purpose: to send HTTP \nrequest to the DispatcherServlet, and the status and content methods come into place to help test the \nresults.\n■ !  notice that the value returned by the content method is expected to be HelloWorld, and this is because \nthe mock context does not include the application.yml. to include the YaML file in the context and test the \nvalue configured there, integration testing is needed.\nApplications built with Spring Boot can be tested using integration tests. These can be written easily \nfor REST controllers because of a class provided by Spring Boot named org.springframework.boot.test.\nTestRestTemplate that extends the classical RestTemplate. The extra feature of this class is that secured \nresources can be tested too.\nimport com.book.init.AppSettings;\nimport com.book.init.Application;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.IntegrationTest;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.boot.test.TestRestTemplate;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.web.client.RestTemplate;\n \n384",
          "tables": [],
          "code_blocks": [
            "private MockMvc mvc;\n \n    @Before\n    public void setUp() throws Exception {\n        mvc = MockMvcBuilders.standaloneSetup(new MessageController()).build();\n    }\n    @Test\n    public void getMessage() throws Exception {\n        mvc.perform(MockMvcRequestBuilders.get(\"/message\")\n          .accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(content().string(equalTo(\"Hello World\")));\n        // testing the default value for this field\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 397,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nimport java.net.URL;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.junit.Assert.assertThat;\n \n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = Application.class)\n@WebAppConfiguration\n@IntegrationTest\npublic class MessageControllerIT {\n \n    @Autowired\n    AppSettings appSettings;\n \n    private URL base;\n    private RestTemplate template;\n \n    @Before\n    public void setUp() throws Exception {\n        this.base = new URL(\"http://localhost:\" + appSettings.getPort() +\"/\" +\n              appSettings.getContext() + \"/message\");\n        template = new TestRestTemplate();\n    }\n    @Test\n    public void getMessage() throws Exception {\n        ResponseEntity<String> response =\n             template.getForEntity(base.toString(), String.class);\n        assertThat(response.getBody(),\n             equalTo(\"Testing, is this thing on?\"));\n    }\n}\nBecause real configuration classes are used to create the context in integration tests, beans can be \ninjected and used inside the test class. In the previous example, the AppSettings bean is used to load the \nconfiguration details from the application.yml file, so the resulting endpoint for the MessageController \nis exactly the same as when the application is run with Spring Boot, and so is the content returned by the \nmessage method.\nThe @IntegrationTest annotation is another convenient feature provided by Spring Boot to  \nstart the embedded server on which the test will be run. It is designed to be used in conjunction with  \n@SpringApplicationConfiguration. The server is started on the port value and it is injected using the \nAppSetting.port property value.\nWebSocket Introduction\nInteraction between a user and a software service implies some type of communication. In the Web 2.0 era, \nsoftware services are provided via web or mobile application, and communication is done over different \nprotocols, the most common being HTTP. HTTP is a request-response model, with the client making the \nrequest (initiating a transaction) and the application providing the request service sending a response.\nBut more and more is needed from web applications, and the HTTP request-response model is \nbecoming insufficient because information can be transmitted from the server to the client only after a \nrequest is received; the server cannot send data in between requests or without being asked for it by the \nclient first.\n385",
          "tables": [],
          "code_blocks": [
            "@Autowired\n    AppSettings appSettings;\n \n    private URL base;\n    private RestTemplate template;\n \n    @Before\n    public void setUp() throws Exception {\n        this.base = new URL(\"http://localhost:\" + appSettings.getPort() +\"/\" +\n              appSettings.getContext() + \"/message\");\n        template = new TestRestTemplate();\n    }\n    @Test\n    public void getMessage() throws Exception {\n        ResponseEntity<String> response =\n             template.getForEntity(base.toString(), String.class);\n        assertThat(response.getBody(),\n             equalTo(\"Testing, is this thing on?\"));\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 398,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nThink about a shopping application. Users need to insert personal data into a form to place an order. \nBut while a user fills the form, the service that receives and processes orders might become inaccessible \nbecause of an internal issue. Wouldn’t it be nice if the server could send a message to the browser to inform \nthe user that his order cannot be processed, saving him from wasting time inserting data into the form?\nThere are workarounds that can be implemented to implement this type of behavior, such as HTTP \nlong polling, which is a technique involving the client to poll the server for new information and the server \nto keep that request open until new data is available. But this technique might cause trouble when the \nconnection between the client and the server gets interrupted frequently (like when switching between  \nWi-Fi and cellular networks); messages get lost and the server might keep requests open that no longer \nneed to be. To overcome these situations, a communication management system must be implemented—so \nthings get even more complicated.\nTo provide a proper and practical solution, the WebSocket protocol was standardized in 2011 as RFC \n6455.4 Most web browsers now implement a client API that supports it. As the official documentation says: \n“The goal of this technology is to provide a mechanism for browser-based applications that need two-way \ncommunication with servers that does not rely on opening multiple HTTP connections.”\nSpring WebSocket Implementation\nOracle has released JSR 356 as part of the JEE7 standard. It is the Java API for WebSocket that should be \nimplemented to integrate WebSocket into web applications on the Java client and server sides. Client \napplications can be developed in any technology, and as long as they are compliant with the RFC 6455, they \nwill be able to communicate with the server. The situation and the possibilities are depicted in Figure 8-5.\nFigure 8-5.  A client-server application leveraging WebSocket schema\nIn Spring 4.1, a module named spring-websocket was introduced to provide support for WebSocket-\nbased, two-way communication between the client and the server in web applications. The implementation is \na JSR-356-compatible Java WebSocket API and it also includes SockJS-based fallback options. The SockJS is a \nJavaScript library that provides a WebSocket-like object (WebSocket behavior is emulated). It is most suitable \nwhen the application needs to be supported in older browsers that do not support the WebSocket protocol.\nThe Spring Framework WebSocket infrastructure is based on the Spring Messaging Foundation. \nInfrastructure beans like MessageChannel and MessageHandler are used as building blocks for the \nWebSocket environment.\n4https://tools.ietf.org/html/rfc6455\n386",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 399,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nIn the spring-messaging module, support for STOMP5 was added, providing an annotation \nprogramming model for routing and processing messages from WebSocket clients. This means that controller \nmethods can be used to process HTTP requests (when methods are annotated with @RequestMapping) and \ncan also be used to process WebSocket messages when methods are annotated with @MessageMapping, an \nannotation that was introduced in Spring 4.0.\nThe complementary operation, sending the result of the method back to the client, is implemented \nusing the @SendTo annotation, which is used to mark a subscription endpoint to which all the potential \nclients are registered; this way, they are identified as receivers of messages from the server. The \ncommunication between clients and the server application using the WebSocket protocol is asynchronous, \nand when the server is overloaded, it can have delays in sending the messages.\nThe WebSocket protocol is streaming, and messages can be sent to/received from a WebSocket at the \nsame time, so a connection and a WebSocketSession implementation is needed to provide the infrastructure \nthrough which the messages will be exchanged.\nThe following are the steps to create a WebSocket-compliant application using Spring WebSocket: \n  1.  Define the format for the STOMP message and the POJO to model it.\n  2.  Define the format for the server reply message and the POJO to model it.\n  3.  Create a message-handling controller.\n  4.  Configure Spring for WebSocket communication handling.\n  5.  Create a client application.\n  6.  Create an executable server application.\nTo get familiarized with WebSocket Spring components, you’ll follow steps to create a mIRC6-like \napplication that uses the WebSocket protocol. The application will be quite simple: it will require a \nusername to allow connection to the server, but no authentication will be implemented. The server will \nreceive messages from users and redistribute them to all connected clients. The server will communicate \nthe time every 60 seconds and it will censor bad words, like bomb and murder. The source code to do this is \nexplained later in the section.\n[STEP 1] The STOMP message is a JSON representation containing the username and a message that \nthe sends to the server:\n{\n    'name' : 'jules',\n    'content' : 'Hello World!'\n}\nThe POJO is quite simple and contains two properties (the JSON key names from the previous snippet) \nand getters.\npackage com.book.ws;\n \nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder;\n \n@JsonPropertyOrder({ \"name\", \"content\"})\npublic class ChatMessage {\n \n5STOMP is an acronym for Simple Text-Orientated Messaging Protocol. It defines a message format that any available \nSTOMP clients can use to communicate with any STOMP server application. Basically, it represents a standard \ncommunication unit independent of languages and platforms.\n6A popular Internet Relay Chat (IRC) used extensively in the 1990s (see http://www.mirc.com).\n387",
          "tables": [],
          "code_blocks": [
            "'name' : 'jules',\n    'content' : 'Hello World!'"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 400,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\n    @JsonProperty(\"content\")\n    private String content;\n \n    @JsonProperty(\"name\")\n    private String name;\n \n    public String getName() {\n        return name;\n    }\n \n    public String getContent() {\n        return content;\n    }\n}\nJSON-specific annotations can be used, so POJO fields can be named differently than the key names in \nthe JSON message and can also be used to customize the serialization. For example, the @JsonPropertyOrder \nis used here to define ordering of properties at serialization time. In the previous code, the annotation ensures \nthat the resulting JSON object will always have “name” as the first property and “content” as the second.\n■ !  the JSon annotations are used abusively in the previous example, simply for demonstration purposes. as \nthe field names of the class are one and the same with the JSon property names, the @JsonProperty can be \nremoved because it doesn’t have any effect on the code. the same goes for the @JsonPropertyOrder, which can \nbe removed because the order of the properties in the resulting JSon object is not really important in this case.\n[STEP 2] Upon receiving a ChatMessage and extracting the information, the server application \nprocesses it and responds with a ServerMessage instance that is sent to a separate queue that the client is \nsubscribed to. The response is serialized to a JSON representation. Defining a format for the server is easy in \na mIRC application; all that is needed is a JSON representation with one property: \n{\n        'content' : 'It is 18:13'\n}\nThe POJO class that will be serialized could look like this:\npackage com.book.ws;\n \npublic class ServerMessage {\n    private String content;\n \n    public ServerMessage(String content) {\n        this.content = content;\n    }\n \n    public String getContent() {\n        return content;\n    }\n}\n388",
          "tables": [],
          "code_blocks": [
            "@JsonProperty(\"content\")\n    private String content;\n \n    @JsonProperty(\"name\")\n    private String name;\n \n    public String getName() {\n        return name;\n    }\n \n    public String getContent() {\n        return content;\n    }",
            "'content' : 'It is 18:13'",
            "private String content;\n \n    public ServerMessage(String content) {\n        this.content = content;\n    }\n \n    public String getContent() {\n        return content;\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 401,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nSpring uses the Jackson JSON library to serialize and deserialize instances used for WebSocket \ncommunication.\n[STEP 3] Creating a message-handling controller is also quite easy when using the @MessageMapping \n@SendTo annotations.\npackage com.book.ws;\n \nimport org.springframework.stereotype.Controller;\nimport org.springframework.messaging.handler.annotation.MessageMapping;\nimport org.springframework.messaging.handler.annotation.SendTo;\nimport java.util.Random;\n \n@Controller\npublic class ChatController {\n \n    @MessageMapping(\"/mirc\")\n    @SendTo(\"/topic/chat\")\n    public ServerMessage process(ChatMessage message) throws Exception {\n        //generate random lag\n        Random rn = new Random();\n        Thread.sleep((rn.nextInt(5) + 1) * 1000);\n        return MessageProcessor.build(message);\n    }\n}\nThe MessageProcessor is a utility class used to build the ServerMessage instances, which is serialized \nand sent to the client. The implementation is not really relevant for this section, as it only contains a static \nmethod used to build a ServerMessage instance based on a ChatMessage instance. \npackage com.book.ws;\npublic class MessageProcessor {\n    public static ServerMessage build(ChatMessage message) {\n        if (message.getContent() != null && !message.getContent().isEmpty()) {\n            if (message.getContent().contains(\"bomb\")) {\n               //censoring using string.replace(...)\n                return new ServerMessage\n                (\"[\" + message.getName() + \"]: \"\n                  + message.getContent().replace(\"bomb\", \"****\"));\n            } else if (message.getContent().contains(\"murder\")) {\n              //censoring using string.replace(...)\n                return new ServerMessage\n                (\"[\" + message.getName() + \"]: \"\n                  + message.getContent().replace(\"murder\", \"****\"));\n            }\n            return new ServerMessage\n              (\"[\" + message.getName() + \"]: \" + message.getContent());\n        }\n \n        return new ServerMessage(\"[server]: Welcome \" +message.getName());\n    }\n}\n389",
          "tables": [],
          "code_blocks": [
            "@MessageMapping(\"/mirc\")\n    @SendTo(\"/topic/chat\")\n    public ServerMessage process(ChatMessage message) throws Exception {\n        //generate random lag\n        Random rn = new Random();\n        Thread.sleep((rn.nextInt(5) + 1) * 1000);\n        return MessageProcessor.build(message);\n    }",
            "public static ServerMessage build(ChatMessage message) {\n        if (message.getContent() != null && !message.getContent().isEmpty()) {\n            if (message.getContent().contains(\"bomb\")) {\n               //censoring using string.replace(...)\n                return new ServerMessage\n                (\"[\" + message.getName() + \"]: \"\n                  + message.getContent().replace(\"bomb\", \"****\"));\n            } else if (message.getContent().contains(\"murder\")) {\n              //censoring using string.replace(...)\n                return new ServerMessage\n                (\"[\" + message.getName() + \"]: \"\n                  + message.getContent().replace(\"murder\", \"****\"));\n            }\n            return new ServerMessage\n              (\"[\" + message.getName() + \"]: \" + message.getContent());\n        }\n \n        return new ServerMessage(\"[server]: Welcome \" +message.getName());\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 402,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nIn the preceding code snippet, the process method is mapped to the destination \"mirc\", so if a \nmessage is sent to this destination, the method is called. This behavior is provided by annotating the method \nwith @MessageMapping(\"/mirc\") . Any message received from the client application(s) is deserialized, \nresulting in a ChatMessage instance that is used as an argument for the process method call.\nThe Thread.sleep call is used to simulate a delay. The Random instance is used to generate a \nrandom duration for the delay with a maximum of 5 seconds. This artifice was added to demonstrate that \ncommunication between the client application and the server is indeed asynchronous.\nSpring WebSocket Configuration\n[STEP 4] To configure Spring for WebSocket communication handling with STOMP messages, a \nconfiguration class needs to be created. \npackage com.book.init;\n \nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.messaging.simp.config.MessageBrokerRegistry;\nimport org.springframework.web.socket.config.annotation.\n    AbstractWebSocketMessageBrokerConfigurer;\nimport org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;\nimport org.springframework.web.socket.config.annotation.StompEndpointRegistry;\n \n@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig extends AbstractWebSocketMessageBrokerConfigurer {\n \n    @Override\n    public void configureMessageBroker(MessageBrokerRegistry config) {\n        config.enableSimpleBroker(\"/topic\");\n        config.setApplicationDestinationPrefixes(\"/app\");\n    }\n \n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry registry) {\n       registry.addEndpoint(\"/mirc\").withSockJS()\n            .setStreamBytesLimit(512 * 1024)\n            .setHttpMessageCacheSize(1000)\n            .setDisconnectDelay(30 * 1000);\n    }\n}\nEach of the elements in the previous class declaration has a specific responsibility. The following \ndescribes each of them.\n•\t @EnableWebSocketMessageBroker enables WebSocket message handling using a \nmessage broker.\nAbstractWebSocketMessageBrokerConfigurer is a Spring convenient class \nimplementing the WebSocketMessageBrokerConfigurer interface to provide \nempty method bodies for optional methods that are now needed for a minimal \nconfiguration of a WebSocket application.\n390",
          "tables": [],
          "code_blocks": [
            "AbstractWebSocketMessageBrokerConfigurer;",
            "@Override\n    public void configureMessageBroker(MessageBrokerRegistry config) {\n        config.enableSimpleBroker(\"/topic\");\n        config.setApplicationDestinationPrefixes(\"/app\");\n    }\n \n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry registry) {\n       registry.addEndpoint(\"/mirc\").withSockJS()\n            .setStreamBytesLimit(512 * 1024)\n            .setHttpMessageCacheSize(1000)\n            .setDisconnectDelay(30 * 1000);\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 403,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\n•\t The configureMessageBroker() method implementation is used to configure a \nmessage broker. The config.enableSimpleBroker(\"/topic\") enables a simple \nmemory-based message broker used to filter destinations prefixed with \"/topic\" \ntargeting the broker. The config.setApplicationDestinationPrefixes(\"/app\") \nmethod designates the prefix for messages that need to be handled by methods \nannotated with @MessageMapping.\n•\t The registerStompEndpoints() registers the \"/mirc\" STOMP endpoint, and \nenables and configures the SockJS fallback options. The subsequent chained method \ncalls are used to configure streaming details.\nStreaming transports save responses on the client side and do not free the \nmemory occupied by delivered messages, so the connection needs to be recycled \nfrom time to time. WebSocket communication is based on HTTP Streaming, \nwhich works by pushing content continuously to browser. The memory usage \nis kept accumulated in browser. Basically, the browser needs to close and \nreconnect the streaming channel to release memory. So there are a limited \nnumber of bytes that can be sent before the HTTP streaming connection is closed. \nThe default value set by SockJS is 128K; the .setStreamBytesLimit(512 * 1024) \ncall sets it to 512K.\nThe number of server-to-client messages that can be cached in a session waiting \nfor the next HTTP request polling is also limited. The default is 100 and it is set by \nthe web server; the .setHttpMessageCacheSize(1000) call sets it to 1000.\nThe number of milliseconds after an inactive client is disconnected is 5 seconds \nand it is set by the web server, but the .setDisconnectDelay(30 * 1000) call \nsets it to 30.\nTo use all of these elements, the spring-websocket and spring-messaging libraries must be added \nas dependencies. When using Spring Boot, only the spring-boot-starter-websocket dependency is \nnecessary. Spring Boot adds all the necessary dependencies.\nAside from this, the entry point of the application is the com.init.Application class, which is a typical \nboot-up Spring Boot class.\npackage com.book.init;\n \nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.ComponentScan;\n \n@SpringBootApplication\n@ComponentScan(basePackages = {\"com.book.init, com.book.ws\"})\npublic class Application {\n \n    public static void main(String args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n391",
          "tables": [],
          "code_blocks": [
            "public static void main(String args) {\n        SpringApplication.run(Application.class, args);\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 404,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nWebSocket Client Application\nAs depicted in Figure 8-5, client applications for a Spring WebSocket server application can be written in \nany programming language for which a WebSocket implementation or Socket-compatible implementation \nexists. For the example in this section, the simplest way to create a client application is the plain old HTML \nand JavaScript pair.\n[STEP 5] Creating a browser client application is easy, and for the scope of this book, it is part of the \nsame application and deployed on the same embedded container. The application is a JavaScript client that \nsends and receives messages from the server.\nThe module project for this section can be found under the book-code project and it is called \n08-chapter-04-solution. The module is a Spring Boot WebSocket project organized as follows: \n•\t The sources for the WebSocket server-application can be found under src/main/java. \nThe configuration classes are placed in the com.book.init package. All classes \ninvolved in WebSocket communication are placed under the com.book.ws package.\n•\t The sources for the JavaScript client application can be found under src/main/\nresources/static. The client application can be accessed at index.html. The \nfunctions that get called on specific HTML events are all gathered in the index.js \nfile. The JavaScript external libraries used in the project are under the static/ext \ndirectory.\n•\t jQuery is used to simplify the development of the JavaScript code used to handle \nHTML user events.\n•\t SockJS is used to emulate WebSocket and provides a WebSocket-like API.\n•\t The STOMP library is used to help create STOMP messages.\nThe structure of the full Spring Boot WebSocket project is depicted in Figure 8-6.\n392",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 405,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nFigure 8-6.  The 08-chapter-04-solution project structure\nThe client application when no client is connected is depicted in Figure 8-7.\nFigure 8-7.  The client application before connection\n393",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 406,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nHere is the static front-end that is written in HTML and represented by the index.html file:\n<!DOCTYPE html>\n<html>\n<head>\n    <title>WebSocket mIRC-like sample application</title>\n    <script src=\"ext/sockjs-0.3.4.js\"></script>\n    <script src=\"ext/stomp.js\"></script>\n    <script src=\"ext/jquery-2.1.4.js\"></script>\n    <script src=\"index.js\"></script>\n    <link rel=\"stylesheet\" href=\"css/general.css\">\n</head>\n<body>\n<noscript><h2 style=\"color: #ff0000\">Seems your browser doesn’t support\n   JavaScript! Websocket relies on Javascript being enabled.\n    Please enableJavascript and reload this page!</h2></noscript>\nThis is a simple mirc-like web chat application,\n   no authentication is necessary, just provide a name and start chatting!</h4>\n \n<div class=\"header\">\n    Name : <input id=\"name\" type=\"text\"/>\n    <input id=\"connection\" type=\"button\"/>\n</div>\n<div class=\"chatDiv\">\n    <textarea class=\"chat\"></textarea>\n</div>\n<div class=\"footer\">\n    <input id=\"content\" type=\"text\"/>\n    <input id=\"send\" type=\"button\" value=\"Send\"/>\n</div>\n \n</body>\n</html>\nThe following describes the four JavaScript functions in index.js: \n•\t setConnected(boolVal): The argument is a boolean value. The method is called \nwith true when connecting to the server application and with false when \ndisconnecting. The same button is used for connecting and disconnecting. The label \non the button changes depending on the current state of the application. When \nthe application is accessed for the first time, a name is required to connect to the \napplication.\nfunction setConnected(connected) {\n    \\\\ set label for the connect/disconnect button\n    connected ? $(\"#connection\").attr(\"value\", \"Disconnect\") :\n           $(\"#connection\").attr(\"value\", \"Connect\");\n \n     \\\\ disable name textfield so the name cannot be modified\n     \\\\ after connecting\n    $(\"#name\").prop(\"disabled\", connected);\n \n394",
          "tables": [],
          "code_blocks": [
            "<title>WebSocket mIRC-like sample application</title>\n    <script src=\"ext/sockjs-0.3.4.js\"></script>\n    <script src=\"ext/stomp.js\"></script>\n    <script src=\"ext/jquery-2.1.4.js\"></script>\n    <script src=\"index.js\"></script>\n    <link rel=\"stylesheet\" href=\"css/general.css\">",
            "Please enableJavascript and reload this page!</h2></noscript>",
            "Name : <input id=\"name\" type=\"text\"/>\n    <input id=\"connection\" type=\"button\"/>",
            "<textarea class=\"chat\"></textarea>",
            "<input id=\"content\" type=\"text\"/>\n    <input id=\"send\" type=\"button\" value=\"Send\"/>",
            "\\\\ set label for the connect/disconnect button\n    connected ? $(\"#connection\").attr(\"value\", \"Disconnect\") :\n           $(\"#connection\").attr(\"value\", \"Connect\");\n \n     \\\\ disable name textfield so the name cannot be modified\n     \\\\ after connecting\n    $(\"#name\").prop(\"disabled\", connected);"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 407,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\n    \\\\hide the chat window\n    connected ? $(\".chatDiv\").show() : $(\".chatDiv\").hide();\n \n    \\\\hide the insert message textfield\n    connected ? $(\".footer\").show() : $(\".footer\").hide();\n \n    \\\\empty the chat window\n    $(\".chat\").html(\"\");\n}\n•\t The function attached to the Connect/Disconnect button. When the application is \naccessed for the first time, a name is required to connect to the application.\n$(\"#connection\").click(function () {\n        name = $(\"#name\").val();\n        if (name != \"\") {\n            if ($(\"#connection\").val() == \"Connect\") {\n                //connecting\n                var socket = new SockJS(\"/mirc\");\n                stompClient = Stomp.over(socket);\n                stompClient.connect({}, function (frame) {\n                    setConnected(true);\n                    stompClient.subscribe(\"/topic/chat\", function (message) {\n                        showMessage(JSON.parse(message.body).content);\n                    });\n                    stompClient.send(\"/app/mirc\", {},\n                        JSON.stringify({\"name\": name, \"content\": \"\"}));\n                });\n            } else {\n                //disconnecting\n                stompClient.disconnect();\n                setConnected(false);\n            }\n        }\n    });\nIf a name is provided, SockJS and STOMP are used to open a connection to  \n/mirc, that has the ChatController waiting for messages. After the connection \nhas succeeded, the client subscribes to the \"/topic/chat\" destination where \nmessages from the server application are published. When a server message is \npublished to that destination, it is added to the chat text area.\n•\t The showMessage(message) function appends the message received from the server \napplication to the chat text area. The \"&#xA;\" character set represents a new line in \nHTML.\nfunction showMessage(message) {\n    $(\".chat\").append(message + \"&#xA;’);\n}\n395",
          "tables": [],
          "code_blocks": [
            "\\\\hide the chat window\n    connected ? $(\".chatDiv\").show() : $(\".chatDiv\").hide();\n \n    \\\\hide the insert message textfield\n    connected ? $(\".footer\").show() : $(\".footer\").hide();\n \n    \\\\empty the chat window\n    $(\".chat\").html(\"\");",
            "name = $(\"#name\").val();\n        if (name != \"\") {\n            if ($(\"#connection\").val() == \"Connect\") {\n                //connecting\n                var socket = new SockJS(\"/mirc\");\n                stompClient = Stomp.over(socket);\n                stompClient.connect({}, function (frame) {\n                    setConnected(true);\n                    stompClient.subscribe(\"/topic/chat\", function (message) {\n                        showMessage(JSON.parse(message.body).content);\n                    });\n                    stompClient.send(\"/app/mirc\", {},\n                        JSON.stringify({\"name\": name, \"content\": \"\"}));\n                });\n            } else {\n                //disconnecting\n                stompClient.disconnect();\n                setConnected(false);\n            }\n        }\n    });",
            "$(\".chat\").append(message + \"&#xA;’);"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 408,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\n•\t The function attached to the Send button is used to read the name and the message \ninserted by the user. The STOMP client is used to send the data to the \"/app/mirc\" \ndestination (where the ChatController is waiting for messages).\n$(\"#send\").click(function () {\n        var name = $(\"#name\").val();\n        var content = $(\"#content\").val();\n        stompClient.send(\"/app/mirc\", {},\n              JSON.stringify({\"name\": name, \"content\": content}));\n        $(\"#content\").val(\"\");\n    });\nTo test the application, it first has to be built with Gradle by running the build task in the command  \nline or in Intellij IDEA. This results in the creation of a jar archive under build/libs named ws-mirc.jar. \nThe application can be run from a terminal by executing\njava -jar ws-mirc.jar.\nOr the com.book.init.Application class can be executed with an Intellij IDEA launcher, as depicted  \nin Figure 8-8.\nFigure 8-8.  Intellij IDEA launcher can be used to run a Spring WebSocket application\nThe application can support multiple clients. In Figure 8-9, the application is accessed from a Firefox \nbrowser by a user named Jules and it is accessed from a Safari browser by a user named John.\n396",
          "tables": [],
          "code_blocks": [
            "var name = $(\"#name\").val();\n        var content = $(\"#content\").val();\n        stompClient.send(\"/app/mirc\", {},\n              JSON.stringify({\"name\": name, \"content\": content}));\n        $(\"#content\").val(\"\");\n    });"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 409,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nFigure 8-9.  Two clients accessing the same server\nConfigure the Server Application to Send Scheduled Messages\nThe server application should be able to send messages that tell the time to clients every 60 seconds. This \ncan be done using a @Scheduled annotated method that publishes messages to the destination where clients \nexpect messages from the server to be published. This method can be added in any class annotated with a \nstereotype annotation on it (@Component, @Controller, @Service, etc.), but in the book samples, it is added \nin the ChatController to keep related components together. \n//ChatController.java\n   @Autowired\n    SimpMessagingTemplate template;\n \n    @Scheduled(fixedDelay = 60000)\n    public void setNotification() throws Exception {\n        LocalTime now = LocalTime.now();\n        this.template.convertAndSend(\"/topic/chat\", new ServerMessage\n         (\"server: It is \" now.getHour() \":\" now.getMinute()));\n    }\nThe SimpMessagingTemplate bean is initialized by Spring Boot when the WebSocket support is enabled \nby having a configuration class annotated with @EnableWebSocketMessageBroker. But there is another thing \nto do—declaring a scheduled method is not enough. Scheduling must be enabled for the method to be picked \nup. As expected, there’s an annotation for that: @EnableScheduling, which can be used on any @Configuration \nclass in the application. When using Spring Boot, the most obvious way is to place it on the Application class.\n397",
          "tables": [],
          "code_blocks": [
            "SimpMessagingTemplate template;\n \n    @Scheduled(fixedDelay = 60000)\n    public void setNotification() throws Exception {\n        LocalTime now = LocalTime.now();\n        this.template.convertAndSend(\"/topic/chat\", new ServerMessage\n         (\"server: It is \" now.getHour() \":\" now.getMinute()));\n    }"
          ],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 410,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nMonitoring and Debugging\nWhen using the WebSocket protocol for communication between a client and a server application, a connection \nmust exist and be opened between the two. The first contact between the client and the server is often called a \nhandshake, which involves the client sending a connection request to the server and a reply being sent from the \nserver, confirming the connection. When using stomp.js, information regarding the internals of communication \nbetween the client and the server can be tracked into the Firebug console. Every time a message is sent from the \nclient and one is received from the server, you can see it in the console, as depicted in Figure 8-10. Notice that \nthe handshake between the client and the server are the first two messages in the list. \nFigure 8-10.  stomp.js monitoring\n398",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 411,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nDebugging a JavaScript client application can be done by using console.log() messages in the \nJavaScript code and/or by using the debugger; statement to set the breakpoint in the JavaScript code and \ncontrol execution from there.\nDebugging a server-side Java application can be done easily during development, especially with a smart \ndevelopment tool like Intellij IDEA. All that you have to do is start the application as usual, but instead of a \nnormal launcher, choose the debugging launcher. Figure 8-11 shows the debugging launcher on the menu.\nFigure 8-11.  Intellij IDEA debugging launcher\n399",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 412,
          "text": "Chapter 8 ■ Spring Boot and WeBSoCket\nThen place a breakpoint in the ChatController.process() message and send a message from the client \nto test it. Execution is paused, so you can inspect Spring beans and objects involved in the communication. \nA debug snippet using Intellij IDEA is shown in Figure 8-12.\nFigure 8-12.  Server application paused in a breakpoint in Intellij IDEA\nIn Figure 8-12, the breakpoint is placed in line 23 of class ChatController. On the bottom left of the \nfigure, you can see the name of the method currently being executed, process(), and on the right, you see \nthe contents of a ChatMessage instance.\n■ !  Since the topics in this chapter are not covered in the certification exam, there is neither a quiz \nsection nor a practice section. But if you want to test your knowledge and understanding of Spring Boot, a \nrecommended exercise is to try switching the personal records manager project to Spring Boot.\n400",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 413,
          "text": "Appendix\nResources and Quiz Answers\nThe purpose of this appendix is to help you set up the development environment that you will use to write, \ncompile, and execute the Spring applications specific to this book and to provide detailed responses for the \nquestions in the quiz attached to each chapter.\nStudy Guide Projects\nThe appendix for this book is quite small because it was written in such a way that you are guided through \nthe normal succession of steps that you would have to through every time you start development of an \napplication.\n  1.  Choose your tools\n  2.  Install your tools\n  3.  Verify installation\n  4.  Design the application\n  5.  Develop and test\nAt the end of Chapter 1, I presented the tools and instructed you how to install them and how to verify the \ncorrect installation. The code samples for the book were written on an Apple Mac computer. One of the strong \npoints of Java is that it is multi-platform, so the code can be run on any operating system. The tools recommended \n(Gradle, Intellij IDEA, Liferay, and Tomcat) are Java based, and are available at their official sites. The installation \ninstructions are almost identical for any operating system, the only difference is in how an environment variable \nis set. Information about doing this on different operating systems is widely available on the internet and \nconsidering this book is for developers with a little experience, this should not be a problem for you.\nThe code for this book is split in two projects: personal-records and book-code. The personal-\nrecords project follows the evolution of a Spring web application. It was built incrementally and module \nnames were prefixed with a number; if traversed in the ascending order of their prefixes, you will notice that \nevery module contains the code of the previous one and something extra. It simulates the evolution of the \nconfiguration, exchanging and adding libraries until the final form of a complete web application is reached, \nwhen security and evolved components such as web flows are in place.\nUsing this study guide you will learn not only how to build Spring web applications, but also how to \ndesign a workflow for you and your team and how to design a multi-layered application from scratch.\nThe code was split in two because some topics such as alternative configurations and alternative view \ntechnologies needed to be presented separately without overcrowding the personal-records project. So \nreally small modules covering these were created and wrapped up in a different project called book-code.\nFor book-code, the name of each module is constructed using the chapter number in which the module \nis covered and an index number. The modules are referenced in a chapter in ascending order of their indexes.\n401",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 414,
          "text": "Appendix ■ ResouRces And Quiz AnsweRs\nBoth projects are Gradle multi-module projects and are configured in a similar manner. The project \nstructures can be seen side by side in Figure A-1. \nFigure A-1.  personal-records and book-code project structures in IntelliJ IDEA side by side\n402",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 415,
          "text": "Appendix ■ ResouRces And Quiz AnsweRs\nGradle Configuration Explained\nproject-records and book-code are parent projects that define a set of libraries available for the child \nmodules to use. As the configurations are very similar, from this point on only the configuration of the \nperson-records project will be covered. person-records has the Gradle configuration in a file named \nbuild.gradle.\nAll the modules have the Gradle configuration file named after the module: [module_name].gradle. \nAlso, there’s a closure element in personal-records/settings.gradle that verifies at build time if all \nmodules have their configuration file present.\nrootProject.children.each {\n  project -> project.buildFileName = \"${project.name}.gradle\"\n  assert project.projectDir.isDirectory()\n  assert project.buildFile.exists()\n  assert project.buildFile.isFile()\n}\nThis was a development choice; the components of a module are also more visible in an editor this way. \nPlus, if you want to modify the configuration file for a module you can easily find the file in IDEA using a \nunique name. Imagine the pain if you use the Command+Shift+N to search for a specific build.gradle file \nand you have 20+ matches.\nAnother approach for a multi-modular project would have been to have only one build.gradle file \nfor the whole project and use Gradle-specific closures to customize configuration for each module. But in \nthe spirit of good development practices, I decided to keep configurations for the modules as decoupled as \npossible and in the same location as the module contents.\nBuilding and Troubleshooting\nAfter you download the source code you need to import the project in the IntelliJ IDEA editor:\n  1.  Select from the IntelliJ IDEA menu File ➤ New ➤ Project From Existing Sources \n(the menu options are depicted in Figure A-2).\nFigure A-2.  Project import menu options in IntelliJ IDEA\n403",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 416,
          "text": "Appendix ■ ResouRces And Quiz AnsweRs\n  2.  A popup window will appear requesting the location of the project (Figure A-3). \nSelect the personal-records directory.\nFigure A-3.  Project import popup in IntelliJ IDEA\n  3.  IntelliJ IDEA can create its own type of project from the selected sources \nand build it with its internal Java builder, but this option is not useful here as \npersonal-records is a Gradle project. Check the “Import project from external \nmodel” radio button and select Gradle from the menu as depicted in Figure A-4.\n404",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 417,
          "text": "Appendix ■ ResouRces And Quiz AnsweRs\nFigure A-4.  Selecting the project type in IntelliJ IDEA\n  4.  The last popup will appear and ask for the location of the build.gradle file and \nthe Gradle executable. The options will be already populated for you. If you have \nGradle installed you might want to use it (Figure A-5).\nFigure A-5.  Last popup for project import in IntelliJ IDEA\n405",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 418,
          "text": "Appendix ■ ResouRces And Quiz AnsweRs\nBefore getting to work you should build the project. This can be done from IntelliJ IDEA by clicking \nthe Refresh button, marked with (1) in in Figure A-6. Clicking this button will cause IntelliJ IDEA to do the \nfollowing: scan the configuration of the project, resolve any dependencies (this includes downloading \nmissing libraries), and do an internal light build of the project, just enough to remove compile-time errors \ncaused by missing dependencies.\nThe Gradle build task executes a full build of the project. It can be used in the command line:\n.../workspace/personal-records $ gradle build\nAlternatively, you can use it in IntelliJ IDEA as depicted in Figure A-6, where the task is marked with (2).\nFigure A-6.  Gradle tasks in IntelliJ IDEA\n406",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 419,
          "text": "Appendix ■ ResouRces And Quiz AnsweRs\nIt will execute the following set of tasks on every module:\n:00-pr-dao:compileJava UP-TO-DATE\n:00-pr-dao:processResources UP-TO-DATE\n:00-pr-dao:classes UP-TO-DATE\n:00-pr-dao:jar UP-TO-DATE\n:00-pr-dao:assemble  UP-TO-DATE\n:00-pr-dao:compileTestJava  UP-TO-DATE\n:00-pr-dao:processTestResources UP-TO-DATE\n:00-pr-dao:testClasses  UP-TO-DATE\n:00-pr-dao:test  UP-TO-DATE\n:00-pr-dao:check UP-TO-DATE\n:00-pr-dao:build  UP-TO-DATE\nThe tasks depicted here are only for the 00-pr-dao module. The Gradle build task will execute all the \ntasks it depends on. As you can see, it does not run the clean task, so you need to make sure to run this \ntask manually when building a project multiple times, to make sure the most recent versions of the classes \nare used.\nAs the project contains incomplete sources that you will have to complete (in modules post fixed with \n-practice), executing this task will fail. You could just execute tasks clean and compile Java, but there’s a \nbetter way. I have created a custom task in the project called allCompile. This task executes the clean and \ncompileJava tasks for all modules. It is marked with (3) in Figure A-6. It is defined in build.gradle and \ninherited by the child modules, so it can be executed for a module separately.\nDeploy on Apache Tomcat\nEvery web application in this project is run with the Jetty embedded web server to keep things simple. But \nthere are certain advantages in using an external container such as Apache Tomcat server. Starting the \nserver in debug mode and using breakpoints to debug an application is much easier to do is one advantage. \nAn external container can run multiple applications at a time without the need to stop the server. Plus \nembedded servers should be used only for testing and educational purposes; in practice application servers \nare preferred, because of reasons explained in Chapter 8.\n407",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 420,
          "text": "Appendix ■ ResouRces And Quiz AnsweRs\nHere is what you have to do if you are interested in doing this. First download the latest version of \nApache Tomcat 8.x from the official site1 and unpack it somewhere on your system. Then configure an \nIntelliJ IDEA launcher to start the server and deploy the chosen application. This is quite easy to do, but \nthere are a number of steps to be executed and they are listed below:\n  1.  From the runnable configuration menu choose Edit Configurations (1). A popup \nwindow will appear listing a set of launchers. Click on the + and select the Tomcat \nServer option. The menu will expand: select Local (2) because you are using a \nserver installed on your computer. Figure A-7 depicts these menu options.\nFigure A-7.  Menu options to create a Tomcat launcher in IntelliJ IDEA\n1http://tomcat.apache.org/\n408",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 421,
          "text": "Appendix ■ ResouRces And Quiz AnsweRs\n  2.  A popup window like the one in Figure A-8 will appear and will request some \ninformation. \nFigure A-8.  Popup to create a Tomcat launcher in IntelliJ IDEA\n409",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 422,
          "text": "Appendix ■ ResouRces And Quiz AnsweRs\nIn the previous figure, some items are numbered and their meaning is explained in following list:\n(1)   The launcher name; you can insert a more obvious name in there.\n(2)   The Tomcat instance name.\n(3)    The button that will open the popup window to insert the Tomcat instance \nlocation (Figure A-9).\nFigure A-9.  Configure Tomcat instance in IntelliJ IDEA\n(4)   The URL where the Tomcat server can be accessed.\n(5)    The choose artifact button. Unless there is no war set to be deployed to \nTomcat, this button will be displayed with the red light bulb icon on it.\n  3.  Click the Fix button and select an artifact. IntelliJ IDEA will detect all artifacts \navailable (Figure A-10) and present them to you in a list you can choose from. If \nyou intend to open the server in debug mode and use breakpoints in the code, \nselect an artifact with the name post-fixed with (exploded); this way IntelliJ \nIDEA manages the contents of the exploded war and can link the actions in the \nbrowser with the breakpoints in the code.\n410",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 423,
          "text": "Appendix ■ ResouRces And Quiz AnsweRs\nFigure A-10.  Deployable artifact list in IntelliJ IDEA\n  4.  Complete the configuration by clicking the OK button. You can specify a different \napplication context by inserting a new value in the Application Context text \nfield. Choosing a different application context will tell Tomcat to deploy the \napplication under the given name and the application will be accessible via the \nfollowing URL: http://localhost:8080/[app_context_name]/. In Figure A-11, \nthe application will be accessible via http://localhost:8080/mvc-basic/.\nFigure A-11.  Inset a new application context in IntelliJ IDEA\n411",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 424,
          "text": "Appendix ■ ResouRces And Quiz AnsweRs\nOther application servers can be used in a similar way as long as IntelliJ IDEA provides support for them.\nIntelliJ IDEA is really flexible and practical and that’s why it was recommended for practicing the \nexercises in this study guide: launcher configurations can be duplicated, multiple Tomcat instances can be \nstarted at the same time as long as they function on different ports, and so on. The Gradle projects can also \nbe imported in Eclipse and other Java editors that support Gradle.\nQuiz Answers\nThe following sections contain answers to the quiz questions for every chapter. Answers to questions that are \nsimple enough to remember after reading the chapter will not be detailed. Extra details will be provided only \nfor questions that could be considered tricky.\nQuiz Solution for Chapter 2\n  1.  Answer: A, B, C\n  2.  Answer: B\n  3.  Answer: A, B, D (C, interface-based injection, is not supported in Spring. D, field- \nbased injection, is supported by annotating fields with @Autowired, @Value, or \nrelated annotations; JSR-250 @Resource, JSR-330 @Inject.2)\n  4.  Answer: A, B, C (as stated in Chapter 2.) \nQuiz Solution for Chapter 3\n  1.  Answer: C\n  2.  Answer: A\n  3.  Answer: C\n  4.  Answer: A, B, C (D is incorrect because classes implementing \nWebApplicationInitializer or extending its subclasses do not require any \nannotations, as stated in Chapter 3.)\n  5.  Answer: B, C\n  6.  Answer: A.3\n  7.  Answer: A, B\n  8.  Answer: A, B (Interface ViewConfigurer is not part of any Spring Web library.)\n  9.  Answer: A, B, C, D, E\n  10.  Answer: A\n  11.  Answer: C (B is not correct because multiple view types can be supported using \nViewResolver chaining too.)\n2http://docs.spring.io/spring/docs/4.2.3.RELEASE/spring-framework-reference/\nhtmlsingle/#beans- annotation-config\n3http://docs.spring.io/spring/docs/4.2.3.RELEASE/spring-framework-reference/\nhtmlsingle/#mvc- servlet-special-bean-types\n412",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 425,
          "text": "Appendix ■ ResouRces And Quiz AnsweRs\n  12.  Answer: B, C (D is not true, because it is an incomplete answer. Indeed it can be \ntaken into consideration by setting a value for the ignoreAcceptHeader property, \nbut that must be true, which is not mentioned here.)\n  13.  Answer: A, B, C, D\n  14.  Answer: A, B, C\n  15.  Answer: B\n  16.  Answer: B (The path variable name (id) is different than the method argument \nname (number) and in this case the annotation @PathVariable should define in \nwhich argument the path variable value should be injected by using the path \nvariable name as an argument: @PathVariable(\"id\").)\n  17.  Answer: E (All others are valid return types that can be matched to a view \nrepresentation. A null value will crash the application.4) \n  18.  Answer: B, C (D is incorrect because @ModelAttribute can also be used on \nmethods. Look at the next question option A to see what for.)\n  19.  Answer: A, B (C is not true because the statement is ambiguous.)\n  20.  Answer: B\n  21.  Answer: A, B (C is not true because the two implementations covered by A and \nB could suffice. If the word \"must\" is replaced with \"might\" then this statement \nwould be true too.)\n  22.  Answer: A\n  23.  Answer: B\n  24.  Answer: A, B, D, G (C is used on handler arguments, E is used on validation \nannotations, and F is used on setter methods to enforce that a dependency is \nmandatory.)\nQuiz Solution for Chapter 5\n  1.  Answer: C\n  2.  Answer: A, B, D\n  3.  Answer: C\n  4.  Answer: A\n  5.  Answer: A, B, C\n  6.  Answer: B\n  7.  Answer: A, B(C does not exist)\n  8.  Answer: A, C, D\n  9.  Answer: D\n4http://docs.spring.io/spring/docs/4.2.3.RELEASE/spring-framework-reference/\nhtmlsingle/#mvc- ann-return-types\n413",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 426,
          "text": "Appendix ■ ResouRces And Quiz AnsweRs\nQuiz Solution for Chapter 6\n  1.  Answer: B, C (Ajax is a technique for building interactive applications for the \nWeb and an acronym. It is not a set of standards or technologies and that is why B \nand D are not valid options.)\n  2.  Answer: C\n  3.  Answer: A, B, C\n  4.  Answer: A\nQuiz Solution for Chapter 7\n  1.  Answer: A, B, C\n  2.  Answer: B\n  3.  Answer: A, B, D, E, F\n  4.  Answer: A, C\n  5.  Answer: B, C\n  6.  Answer: A\n  7.  Answer: B\n  8.  Answer: B\n  9.  Answer: A, B\n  10.  Answer: A, B, C (Converters are present in the Spring WebFlow environment, but \nthey are not defined explicitly in a flow definition, which is why answer D is not \nvalid. Data is only handled when a flow is executed, which dismisses answer E.)\n  11.  Answer: B, C, D, F (A start state is a concept and is the first state that is entered \nwhen the flow starts its execution and is always a view state, so answer A is \ndismissed. There is no such thing as a persistence state type, so answer E can \nbe dismissed. But as an observation, there is a special attribute in the end-state \nset to persist data in the flow before completion of the flow process. G can be \ndismissed, too; there is no conversion state type.)\n  12.  Answer: C, D\n  13.  Answer: A, C\n  14.  Answer: A,B (C is false because a decision state does not have a view associated \nwith it.)\n  15.  Answer: A, C\n  16.  Answer: B, C\n  17.  Answer: B\n  18.  Answer: B, C\n  19.  Answer: B, C\n  20.  Answer: B, C\n414",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 427,
          "text": "Appendix ■ ResouRces And Quiz AnsweRs\n  21.  Answer: A, C\n  22.  Answer: B, C\n  23.  Answer: A, B, C\n  24.  Answer: B\n  25.  Answer: A, B, C, D, F, G (E makes no sense: during transition execution, no action \ncan be executed because any result of the action would be lost. F is also invalid \nbecause an action can be executed only in the context of a flow execution.)\n  26.  Answer: A, C\n  27.  Answer: B, C, D\n  28.  Answer: A, B, C\n  29.  Answer: B\n  30.  Answer: A, B, C, D\n415",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 428,
          "text": "Index\nA C\nAction phase, 154 Combined lifecycle strategy, 31\nAJAX (asynchronous JavaScript and XML), 229 @ComponentScan annotation, 63\ncommunication flow, 230 @ControllerAdvice, 93\ncomponents, 156 ContentNegotiatingViewResolver, 78\ncustom tags, 250\nfunctions, 229\nD\nGET and POST requests, 233\njQuery, 233, 236 Data binding process, 129\nAJAX calls, 243 Data transfer object (DTO), 122\nfeatures, 239 Data validation\nHTML DOM manipulation, 240 annotations, 133\nSpring MVC, 245 JEE @Constraint annotation, 135\nJSON format Hibernate Validator, 132, 134\ndone and fail callback methods, 250 hibernate-validator.jar contents, 134\n@RestController, 246 message keys, 134–135\nquiz solution, 414 Domain objects, 122\nrequests\nXMLHttpRequest methods, 233\nE\n@Valid annotation, 230\nAll-in-one configuration, Spring Web MVC, 56 @ExceptionHandler, 92\nAOP (aspect-oriented programming) External Libraries, 251\nadvices, 41\naspects, 41\nF\n@TransactionConfiguration, 43\ntransaction-manager attribute, 44 Flash attributes, 102\nUML diagram, 41 Flow. See Web flow\nApache Tiles, 111\nApache TomEE, 367\nG\nAutodiscovery, 26\nAutowiring, 26 Guide projects\nApache Tomcat server\nB application context inset, 411\nartifact list, 411\nBase tile, 112–113 configuration, 410\nBean factory post processors, 30 deployment, 407\n417",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 429,
          "text": "■ index\nGuide projects (cont.) M, N, O\nlists, 410\nMessageSource interface, 85\nmenu options, 408\n@Mock annotation, 104\npopup menu, 409\nMockito, 103\nsteps, 408\n@ModelAttribute annotated method, 137\nbuild.gradle file, 403\nGradle configuration, 403\ninstallation, 401 P, Q\npersonal-records and book-code, 401\nproject structures, 402 Plain old Java objects (POJOs), 17\nspring web applications, 401 Pivotal, 2\nsteps, 401\ntroubleshooting\nR\ngradle tasks, 406\nimport popup, 404 ReloadableResourceBundleMessageSource, 86\nIntelliJ IDEA editor, 403 Render phase, 154\nmenu options, 403 Repositories, 13\nmodule execution, 407 ResourceBundleMessageSource, 85\npopup menu, 405 REST (REpresentational State Transfer), 189\nproject type, 404 Accept HTTP header, 194\ntask executes, 407 advantages, 197\nbasic authentication, 198\nH cache, 190\nclient-server architecture, 190\nHAL, 196 code on demand, 190\nHamcrest, 105 compliance levels, 195\nHandlerAdapter interface, 71 Content-Type HTTP header, 194\nHandlerExceptionResolver, 90 DELETE request and response, 194\nHandler interceptors, 106 GET request and response, 192\nHandlerMapping, 68 HATEOAS, 195\nHandshake, 398 layered system, 190\nHATEOAS, 195–196 message converters, 190\nHibernate Validator, 132, 134 OAuth 1.0a and OAuth 2.0, 198\nhibernate-validator.jar contents, 134 POST request and response, 192\nHospitalFormatter, 128 PUT request and response, 193\nHTTP request-response model, 385 quiz solution, 413\nHypermedia driven REST web service, 216, 219 Spring MVC, 199\n@Async annotated methods, 213\nAsyncRestTemplate methods, 203\nI\nconsumes and produces  \nInfrastructure beans, 1 properties, 210\nInternalResourceViewResolver, 75 exception handling, 208\nInternationalization process, 85 execute and exchange methods, 200\nInversion of control (IoC), 18 filter interceptor, 203\nhandler methods, 205\nHATEOAS, 216\nJ, K\nhidden methods, 203\nJetty server, 368 HttpServletRequest/ \nJSON View Resolver, 84 HttpServletResponse, 211\nJSP tags, 251 HTTP status codes, 207\nJSTL (JSP Standard Tag Library), 251 interceptor, 214\nmessage converters, 201\nresources, 204\nL\n@RestController, 206\nLocaleResolver interface, 87 RestTemplate methods, 199\n418",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 430,
          "text": "■ Index\nstates, 190 unit testing, 44\ntransport layer, 190 XML configuration, 21\ntransport protocols, 190 Spring Boot\nuniform interface, 189 application server, 367\nRichardson Maturity Model, 195 execution, 381\ngoals, 367\ntesting\nS\n@IntegrationTest annotation, 385\nSeparate configuration, Spring Web MVC, 57 integration tests, 384\nSeparation of concerns (SoC), 328 spring-boot-starter-test, 383\nSimpleMappingExceptionResolver, 91 usage and configuration\nSpring, 27 ApplicationContext instance, 371\naccessing beans AppSettings class, 377\nannotated beans, 40 @Bean annotated methods, 370\nbean identification by id, 40 command-line variables, 376\nbean identification by name, 39 @ComponentScan annotation, 370\nbean identification by type, 38 @ConfigurationProperties, 378\nAOP (see AOP (aspect-oriented programming)) EmbeddedServletContainer \nbean scopes, 35 Customizer, 377\nclasses, 17 @EnableAutoConfiguration  \nconfiguration, 21 annotation, 370\nannotations, 25 @EnableConfigurationProperties, 379\nmixed approach, 26 environment variables, 376\nprefixes and corresponding paths, 24 Gradle configuration, 368\nconvention over configuration paradigm, 1 @Import annotation, 380\ncore container, 19 prefix attribute, 378\ndependency injection, 1 properties files, 373\ndevelopment environment, 8 @SpringBootApplication  \nbuild tools, 9 annotation, 370\nIDE, 10 Spring Boot console banner, 380\nPersonal Records Manager application, 11 transitive dependencies, 372\nframeworks, 1 YAML files, 375\ninfrastructure beans, 1 web server, 367\nintegration testing, 45 Spring Framework Reference, 5\nlibrary, 1 Spring portlets\nlifecycle and instantiation, 27 configuration, 156\nadvantages, 29 definition, 151\nbean factory post processors, 30 MVC framework, 153\nbean initialization and destruction, 30 portlet application\nBeanPostProcessors, 34 admin menu, 173–174\nPivotal, 2 App Manager installation, 182\nPlainPersonRepository class, 20 Command Prompt, 170\nquiz answers, 412 download process, 170\nSpring Certification section, 5 Finish Configuration, 171\nspring-context modules, 19 Hello World Portlet, 179\nspring-core and spring-beans modules, 19 Liferay installation, 170\nspring-expression modules, 19 Liferay Password, 172\nSpring-released projects, 2 Person database, 187–188\nstudy guide, 7 Site configuration page, 185\napplication developer, 5 site templates, 173–175\ncode downloads, 8 Site URL, 186\nconventions, 8 start Liferay, 170\nobjectives of, 4 uninstall option, 184\nSpring Framework’s support, 4 recommendations, 168\nstructure, 7 web application, 152\n419",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 431,
          "text": "■ index\nSpring portlets (cont.) selecting a view, 101\nworkflow, 154 testing controllers, 103\nXML user-provided web components, 54\nand annotations, 164 view technologies\napp-config.xml, 158 data-delivery views, 109\nApp Manager, 159 display views, 109\nconfiguration, 158 file-generating views, 109\ndefinition, 157 Thymeleaf, 115\nliferay-display.xml, 159 Tiles Layouts, 110\nliferay-portlet.xml, 161 XML configuration, 56\nmessage converter, 158 all-in-one configuration, 55–56\nmvc-config.xml, 158 <mvc\\:annotation-driven/> element, 60\nportlet controller bean, 161 <mvc\\:default-servlet-handler/>, 60\nsite template, 160 mixed configurations, 63\nsyntax, 160 separate configuration, 55, 57\nViewRendererServlet, 163 using annotations, 61\nweb.xml, 163 without using web.xml file, 64\nSpringServletContainerInitializer, 64 Spring WebSocket\nSpring Web Certification Exam, 5 ChatMessage, 388\nSpring Web MVC client application\nbehavior, 53 JavaScript functions, 394\ndescription, 53 module project, 392\nDispatcherServlet, 54 client-server application, 386\nform object management, 137 HTTP request-response model, 385\nforms JSON-specific annotations, 388\ndata binding, 129 MessageProcessor, 389\ndata formatting, 125 mIRC, 387\ndata transfer object, 122 monitoring and debugging, 398\ndata validation, 132 process method, 390\ndomain object, 122 Random instance, 390\nediting a person, 119–120, 122 @SendTo annotation, 387\nJSP c taglib, 124 server application, 397\nto search a person, 123 SockJS-based fallback, 386\nfunctional flow, 54–55 STOMP messages, 390\ninfrastructure beans, 67–68 WebSocket-compliant application, 387\nContentNegotiatingViewResolver, 78 StaticMessageSource, 85\nHandlerAdapter interface, 71 Stubs, 103\nHandlerExceptionResolver, 90\nHandlerMapping, 68\nT, U, V\nJSON View Resolver, 84\nlocaleResolver, 87 ThemeResolver, 88\nMessageSource, 85 Thymeleaf\npersonalization beans, 85 selection/asterisk expressions, 116\nThemeResolver, 88 Spring integrations, 118\nViewResolver, 73 standard dialects, 116\nViewResolver chaining, 74 template page, 117–118\ninfrastructure components, 54 text externalized expressions, 116\nlibraries, 54 URL expressions, 116\npractice application welcome page, 61 variable expressions, 116\nquiz solution, 412–413 Tiles Layout\nuser-provided components Apache Tiles, 111\nAccessing Model data, 100 configuration files, 111\ncontrollers, 94 defining page templete, 111\nhandler interceptors, 106 reusable page template, 110\nredirect requests, 101 TilesViewResolver bean, 114\n420",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 432,
          "text": "■ Index\nW, X, Y, Z enterAccountInfo, 318\nenterIdentityCardInfo, 316\nWebAppConfiguration annotation, 105\nenterPersonInfo, 315\nWeb flow\nerror, 319\nactions, 282\nflow execution, 312\nEL expressions, 288\nIBAN field, 315\nenvironment-specific variables, 289\nJSP scriptlets, 320\nfindAll method, 288\nreviewExistingPerson, 317\non flow end, 288\nstatus field, 315\non flow start, 286\nflow definition\nHTTP session cotents, 289\ncomponents, 273\nRequestContext, 289\ncontextRelative prefix, 276\nrequestParameters, 290\ndecision state, 272\nscope-specific variables, 289\nend states, 272, 277\non state entry, 287\ninheritance, 326\non state exit, 287\nMock views, 278\non transition execution, 287\nredirect prefixes, 277\non view render, 287\nschema, 273\naction state, 272\nscope, 272\nboolean, 305\nsubflow state, 272\ndefinition, 304\ntesting, 279\nenumerated types, 305\ntransitions, 272, 277\ngetActiveFlow(), 311\nuser event, 275\ngetCurrentState() method, 311\nview-state id, 274\ngetExternalContext() method, 311\nview states, 272, 277\ngetFlowExecutionURL() method, 311\ninfrastructure beans, 262\ngetFlowScope() method, 311\ninternal logic, 261\ngetMessageContext() method, 311\nmodel object, 291\ngetRequestScope() method, 311\nconversion, 293\nMultiActions, 310–311\ndata binding., 292\nNo action, 307, 310\nenterIdentityCardInfo  \nplain actions, 309, 311\nview-state, 303\nPOJO actions, 307, 310\nenterPersonInfo  \nstring, 305\nview-state, 301\nannotations, 267\nformatting, 294\nMvcConfig class, 268\nIdentityCardValidator  \nNew Person link, 272\nclass, 304\nWebFlowConfig class, 268\nJSR 349 bean validation, 294\nWebInitializer class, 270\npartial validation, 298\narchitecture\nprogrammatic  \nbacking class, 259\nvalidation, 296\nconfiguration file, 261\nreviewPerson view-state, 302\nDispatcherServlet, 260\nproblems, 259\nFlowController class, 260\nquiz solution, 414\nFlowDefinitionRegistry, 260\nscope\nFlowHandlerMapping maps, 260\nconversation scope, 282, 284\ndecision state, 311\nexplicit variables, 284\nexception handling\nflash scope, 282, 285\naccount flow, 315\nflow scope, 282–283\namount field, 315\nrequest scope, 282, 285\nbacktracking, 321\nstandard EL expression, 284\nbank field, 315\ntemplate EL expression, 284\ncancel, 319\nview scope, 282–283\nconfirmAdult state, 318\nscopes, 282\nend state, 319\nSpring Security\n421",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        },
        {
          "page_number": 433,
          "text": "■ index\nWeb flow (cont.) states, 258\naccess decision manager, 329 subflow\nadvantages, 328 conversation scope, 323\nauthentication, 327 definition, 322\nauthorization, 327 flashScope.hospitalMessage  \nconfigure authentication, 339 variable, 323\ncredentials, 327 getModelResources method, 325\nfeatures, 327 input parameters, 323\nflow definition, 350 key values, 323\nJava configuration, 343 output parameter, 323\nlogout link, 346 unit testing, 324\nNewPerson link, 346 XML configuration, 263\nOAuth, 353 conversionService, 267\nportability, 328 flowBuilderServices, 266\nprincipal, 327 flowExecutor, 265\nsecured item, 327 FlowHandlerMapping, 264\nsecure methods, 347 flowRegistry, 266\nSocial projects, 356 max-executions property, 266\nXML configuration, 330 mvcViewFactoryCreator, 267\n422",
          "tables": [],
          "code_blocks": [],
          "dimensions": {
            "width": 504,
            "height": 720
          }
        }
      ],
      "qa_pairs": [],
      "qa_count": 0,
      "code_blocks_total": 568,
      "tables_total": 3
    }
  ]
}